initSidebarItems({"constant":[["CAIRO_TAG_DEST",""],["CAIRO_TAG_LINK",""],["MIME_TYPE_CCITT_FAX",""],["MIME_TYPE_CCITT_FAX_PARAMS",""],["MIME_TYPE_EPS",""],["MIME_TYPE_EPS_PARAMS",""],["MIME_TYPE_JBIG2",""],["MIME_TYPE_JBIG2_GLOBAL",""],["MIME_TYPE_JBIG2_GLOBAL_ID",""],["MIME_TYPE_JP2",""],["MIME_TYPE_JPEG",""],["MIME_TYPE_PNG",""],["MIME_TYPE_UNIQUE_ID",""],["MIME_TYPE_URI",""],["PDF_OUTLINE_ROOT",""]],"enum":[["Antialias","Specifies the type of antialiasing to do when rendering text or shapes."],["BorrowError",""],["Content","`Content` is used to describe the content that a surface will contain, whether color information, alpha information (translucence vs. opacity), or both."],["DeviceType",""],["Extend","`Extend` is used to describe how pattern color/alpha will be determined for areas \"outside\" the pattern's natural area, (for example, outside the surface bounds or outside the gradient geometry)."],["FillRule","`FillRule` is used to select how paths are filled. For both fill rules, whether or not a point is included in the fill is determined by taking a ray from that point to infinity and looking at intersections with the path. The ray can be in any direction, as long as it doesn't pass through the end point of a segment or have a tricky intersection such as intersecting tangent to the path. (Note that filling is not actually implemented in this way. This is just a description of the rule that is applied.)"],["Filter","`Filter` is used to indicate what filtering should be applied when reading pixel values from patterns. See `Pattern::set_filter()` for indicating the desired filter to be used with a particular pattern."],["FontSlant","Specifies variants of a font face based on their slant."],["FontSlant","Specifies variants of a font face based on their slant."],["FontType","`FontType` is used to describe the type of a given font face or scaled font. The font types are also known as \"font backends\" within cairo."],["FontType","`FontType` is used to describe the type of a given font face or scaled font. The font types are also known as \"font backends\" within cairo."],["FontWeight","Specifies variants of a font face based on their weight."],["FontWeight","Specifies variants of a font face based on their weight."],["Format",""],["FtSynthesize",""],["HintMetrics","Specifies whether to hint font metrics; hinting font metrics means quantizing them so that they are integer values in device space. Doing this improves the consistency of letter and line spacing, however it also means that text will be laid out differently at different zoom factors"],["HintStyle","Specifies the type of hinting to do on font outlines. Hinting is the process of fitting outlines to the pixel grid in order to improve the appearance of the result. Since hinting outlines involves distorting them, it also reduces the faithfulness to the original outline shapes. Not all of the outline hinting styles are supported by all font backends."],["IoError",""],["LineCap","Specifies how to render the endpoints of the path when stroking."],["LineJoin","Specifies how to render the junction of two lines when stroking."],["MeshCorner",""],["Operator","`Operator` is used to set the compositing operator for all cairo drawing operations."],["PathDataType","`PathData` is used to describe the type of one portion of a path when represented as a `Path`. See `PathData` for details."],["PathSegment",""],["Pattern",""],["PatternType","`PatternType` is used to describe the type of a given pattern."],["PdfMetadata",""],["PdfVersion",""],["PsLevel",""],["RegionOverlap",""],["ScriptMode",""],["Status","Status is used to indicate errors that can occur when using Cairo. In some cases it is returned directly by functions, but when using `Context`, the last error, if any, is stored in the context and can be retrieved with `Context::status()`."],["SubpixelOrder","The subpixel order specifies the order of color elements within each pixel on the display device when rendering with an antialiasing mode of `Antialias::Subpixel`."],["SurfaceType",""],["SvgUnit",""],["SvgVersion",""],["TextClusterFlags","Specifies properties of a text cluster mapping."]],"fn":[["debug_reset_static_data",""],["get_version_string",""]],"mod":[["pdf",""],["prelude",""],["ps",""],["svg",""]],"struct":[["Context",""],["Device",""],["FontExtents",""],["FontFace",""],["FontOptions",""],["Glyph",""],["ImageSurface",""],["ImageSurfaceData",""],["LinearGradient",""],["MappedImageSurface",""],["Matrix",""],["Mesh",""],["Path","Paths are the most basic drawing tools and are primarily used to implicitly generate simple masks."],["PathSegments",""],["PdfOutline",""],["QuartzSurface",""],["RadialGradient",""],["RecordingSurface",""],["Rectangle",""],["RectangleInt",""],["RectangleList",""],["Region",""],["ScaledFont",""],["SolidPattern",""],["Surface",""],["SurfacePattern",""],["TextCluster",""],["TextExtents",""],["Version",""],["Win32Surface",""],["XCBConnection",""],["XCBDrawable",""],["XCBPixmap",""],["XCBRenderPictFormInfo",""],["XCBScreen",""],["XCBVisualType",""]],"trait":[["Gradient",""],["MatrixTrait",""],["PatternTrait",""],["XCBSurface",""]]});