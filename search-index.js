var searchIndex = {};
searchIndex["cairo"] = {"doc":"","items":[[0,"enums","cairo","",null,null],[4,"Status","cairo::enums","",null,null],[13,"Success","","",0,null],[13,"NoMemory","","",0,null],[13,"InvalidRestore","","",0,null],[13,"InvalidPopGroup","","",0,null],[13,"NoCurrentPoint","","",0,null],[13,"InvalidMatrix","","",0,null],[13,"InvalidStatus","","",0,null],[13,"NullPointer","","",0,null],[13,"InvalidString","","",0,null],[13,"InvalidPathData","","",0,null],[13,"ReadError","","",0,null],[13,"WriteError","","",0,null],[13,"SurfaceFinished","","",0,null],[13,"SurfaceTypeMismatch","","",0,null],[13,"PatternTypeMismatch","","",0,null],[13,"InvalidContent","","",0,null],[13,"InvalidFormat","","",0,null],[13,"InvalidVisual","","",0,null],[13,"FileNotFound","","",0,null],[13,"InvalidDash","","",0,null],[13,"InvalidDscComment","","",0,null],[13,"InvalidIndex","","",0,null],[13,"ClipNotRepresentable","","",0,null],[13,"TempFileError","","",0,null],[13,"InvalidStride","","",0,null],[13,"FontTypeMismatch","","",0,null],[13,"UserFontImmutable","","",0,null],[13,"UserFontError","","",0,null],[13,"NegativeCount","","",0,null],[13,"InvalidClusters","","",0,null],[13,"InvalidSlant","","",0,null],[13,"InvalidWeight","","",0,null],[13,"InvalidSize","","",0,null],[13,"UserFontNotImplemented","","",0,null],[13,"DeviceTypeMismatch","","",0,null],[13,"DeviceError","","",0,null],[13,"InvalidMeshConstruction","","",0,null],[13,"DeviceFinished","","",0,null],[13,"JBig2GlobalMissing","","",0,null],[13,"PngError","","",0,null],[13,"FreetypeError","","",0,null],[13,"Win32GdiError","","",0,null],[13,"LastStatus","","",0,null],[4,"Antialias","","",null,null],[13,"Default","","",1,null],[13,"None","","",1,null],[13,"Gray","","",1,null],[13,"Subpixel","","",1,null],[13,"Fast","","",1,null],[13,"Good","","",1,null],[13,"Best","","",1,null],[4,"FillRule","","",null,null],[13,"Winding","","",2,null],[13,"EvenOdd","","",2,null],[4,"LineCap","","",null,null],[13,"Butt","","",3,null],[13,"Round","","",3,null],[13,"Square","","",3,null],[4,"LineJoin","","",null,null],[13,"Miter","","",4,null],[13,"Round","","",4,null],[13,"Bevel","","",4,null],[4,"Operator","","",null,null],[13,"Clear","","",5,null],[13,"Source","","",5,null],[13,"Over","","",5,null],[13,"In","","",5,null],[13,"Out","","",5,null],[13,"Atop","","",5,null],[13,"Dest","","",5,null],[13,"DestOver","","",5,null],[13,"DestIn","","",5,null],[13,"DestOut","","",5,null],[13,"DestAtop","","",5,null],[13,"Xor","","",5,null],[13,"Add","","",5,null],[13,"Saturate","","",5,null],[13,"Multiply","","",5,null],[13,"Screen","","",5,null],[13,"Overlay","","",5,null],[13,"Darken","","",5,null],[13,"Lighten","","",5,null],[13,"ColorDodge","","",5,null],[13,"ColorBurn","","",5,null],[13,"HardLight","","",5,null],[13,"SoftLight","","",5,null],[13,"Difference","","",5,null],[13,"Exclusion","","",5,null],[13,"HslHue","","",5,null],[13,"HslSaturation","","",5,null],[13,"HslColor","","",5,null],[13,"HslLuminosity","","",5,null],[4,"PathDataType","","",null,null],[13,"MoveTo","","",6,null],[13,"LineTo","","",6,null],[13,"CurveTo","","",6,null],[13,"ClosePath","","",6,null],[4,"Content","","",null,null],[13,"Color","","",7,null],[13,"Alpha","","",7,null],[13,"ColorAlpha","","",7,null],[4,"Extend","","",null,null],[13,"None","","",8,null],[13,"Repeat","","",8,null],[13,"Reflect","","",8,null],[13,"Pad","","",8,null],[4,"Filter","","",null,null],[13,"Fast","","",9,null],[13,"Good","","",9,null],[13,"Best","","",9,null],[13,"Nearest","","",9,null],[13,"Bilinear","","",9,null],[13,"Gaussian","","",9,null],[4,"PatternType","","",null,null],[13,"Solid","","",10,null],[13,"Surface","","",10,null],[13,"LinearGradient","","",10,null],[13,"RadialGradient","","",10,null],[13,"Mesh","","",10,null],[13,"RasterSource","","",10,null],[4,"FontSlant","","",null,null],[13,"Normal","","",11,null],[13,"Italic","","",11,null],[13,"Oblique","","",11,null],[4,"FontWeight","","",null,null],[13,"Normal","","",12,null],[13,"Bold","","",12,null],[4,"TextClusterFlags","","",null,null],[13,"None","","",13,null],[13,"Backward","","",13,null],[4,"FontType","","",null,null],[13,"FontTypeToy","","",14,null],[13,"FontTypeFt","","",14,null],[13,"FontTypeWin32","","",14,null],[13,"FontTypeQuartz","","",14,null],[13,"FontTypeUser","","",14,null],[4,"SubpixelOrder","","",null,null],[13,"Default","","",15,null],[13,"Rgb","","",15,null],[13,"Bgr","","",15,null],[13,"Vrgb","","",15,null],[13,"Vbgr","","",15,null],[4,"HintStyle","","",null,null],[13,"Default","","",16,null],[13,"None","","",16,null],[13,"Slight","","",16,null],[13,"Medium","","",16,null],[13,"Full","","",16,null],[4,"HintMetrics","","",null,null],[13,"Default","","",17,null],[13,"Off","","",17,null],[13,"On","","",17,null],[4,"SurfaceType","","",null,null],[13,"Image","","",18,null],[13,"Pdf","","",18,null],[13,"Ps","","",18,null],[13,"Xlib","","",18,null],[13,"Xcb","","",18,null],[13,"Glitz","","",18,null],[13,"Quartz","","",18,null],[13,"Win32","","",18,null],[13,"BeOs","","",18,null],[13,"DirectFb","","",18,null],[13,"Svg","","",18,null],[13,"Os2","","",18,null],[13,"Win32Printing","","",18,null],[13,"QuartzImage","","",18,null],[13,"Script","","",18,null],[13,"Qt","","",18,null],[13,"Recording","","",18,null],[13,"Vg","","",18,null],[13,"Gl","","",18,null],[13,"Drm","","",18,null],[13,"Tee","","",18,null],[13,"Xml","","",18,null],[13,"Skia","","",18,null],[13,"Subsurface","","",18,null],[13,"Cogl","","",18,null],[4,"Format","","",null,null],[13,"Invalid","","",19,null],[13,"ARgb32","","",19,null],[13,"Rgb24","","",19,null],[13,"A8","","",19,null],[13,"A1","","",19,null],[13,"Rgb16_565","","",19,null],[13,"Rgb30","","",19,null],[4,"RegionOverlap","","",null,null],[13,"In","","",20,null],[13,"Out","","",20,null],[13,"Part","","",20,null],[3,"Rectangle","cairo","",null,null],[12,"x","","",21,null],[12,"y","","",21,null],[12,"width","","",21,null],[12,"height","","",21,null],[4,"Status","","",null,null],[13,"Success","","",0,null],[13,"NoMemory","","",0,null],[13,"InvalidRestore","","",0,null],[13,"InvalidPopGroup","","",0,null],[13,"NoCurrentPoint","","",0,null],[13,"InvalidMatrix","","",0,null],[13,"InvalidStatus","","",0,null],[13,"NullPointer","","",0,null],[13,"InvalidString","","",0,null],[13,"InvalidPathData","","",0,null],[13,"ReadError","","",0,null],[13,"WriteError","","",0,null],[13,"SurfaceFinished","","",0,null],[13,"SurfaceTypeMismatch","","",0,null],[13,"PatternTypeMismatch","","",0,null],[13,"InvalidContent","","",0,null],[13,"InvalidFormat","","",0,null],[13,"InvalidVisual","","",0,null],[13,"FileNotFound","","",0,null],[13,"InvalidDash","","",0,null],[13,"InvalidDscComment","","",0,null],[13,"InvalidIndex","","",0,null],[13,"ClipNotRepresentable","","",0,null],[13,"TempFileError","","",0,null],[13,"InvalidStride","","",0,null],[13,"FontTypeMismatch","","",0,null],[13,"UserFontImmutable","","",0,null],[13,"UserFontError","","",0,null],[13,"NegativeCount","","",0,null],[13,"InvalidClusters","","",0,null],[13,"InvalidSlant","","",0,null],[13,"InvalidWeight","","",0,null],[13,"InvalidSize","","",0,null],[13,"UserFontNotImplemented","","",0,null],[13,"DeviceTypeMismatch","","",0,null],[13,"DeviceError","","",0,null],[13,"InvalidMeshConstruction","","",0,null],[13,"DeviceFinished","","",0,null],[13,"JBig2GlobalMissing","","",0,null],[13,"PngError","","",0,null],[13,"FreetypeError","","",0,null],[13,"Win32GdiError","","",0,null],[13,"LastStatus","","",0,null],[4,"Antialias","","",null,null],[13,"Default","","",1,null],[13,"None","","",1,null],[13,"Gray","","",1,null],[13,"Subpixel","","",1,null],[13,"Fast","","",1,null],[13,"Good","","",1,null],[13,"Best","","",1,null],[4,"Content","","",null,null],[13,"Color","","",7,null],[13,"Alpha","","",7,null],[13,"ColorAlpha","","",7,null],[4,"Extend","","",null,null],[13,"None","","",8,null],[13,"Repeat","","",8,null],[13,"Reflect","","",8,null],[13,"Pad","","",8,null],[4,"FillRule","","",null,null],[13,"Winding","","",2,null],[13,"EvenOdd","","",2,null],[4,"Filter","","",null,null],[13,"Fast","","",9,null],[13,"Good","","",9,null],[13,"Best","","",9,null],[13,"Nearest","","",9,null],[13,"Bilinear","","",9,null],[13,"Gaussian","","",9,null],[4,"LineCap","","",null,null],[13,"Butt","","",3,null],[13,"Round","","",3,null],[13,"Square","","",3,null],[4,"LineJoin","","",null,null],[13,"Miter","","",4,null],[13,"Round","","",4,null],[13,"Bevel","","",4,null],[4,"Operator","","",null,null],[13,"Clear","","",5,null],[13,"Source","","",5,null],[13,"Over","","",5,null],[13,"In","","",5,null],[13,"Out","","",5,null],[13,"Atop","","",5,null],[13,"Dest","","",5,null],[13,"DestOver","","",5,null],[13,"DestIn","","",5,null],[13,"DestOut","","",5,null],[13,"DestAtop","","",5,null],[13,"Xor","","",5,null],[13,"Add","","",5,null],[13,"Saturate","","",5,null],[13,"Multiply","","",5,null],[13,"Screen","","",5,null],[13,"Overlay","","",5,null],[13,"Darken","","",5,null],[13,"Lighten","","",5,null],[13,"ColorDodge","","",5,null],[13,"ColorBurn","","",5,null],[13,"HardLight","","",5,null],[13,"SoftLight","","",5,null],[13,"Difference","","",5,null],[13,"Exclusion","","",5,null],[13,"HslHue","","",5,null],[13,"HslSaturation","","",5,null],[13,"HslColor","","",5,null],[13,"HslLuminosity","","",5,null],[4,"PathDataType","","",null,null],[13,"MoveTo","","",6,null],[13,"LineTo","","",6,null],[13,"CurveTo","","",6,null],[13,"ClosePath","","",6,null],[4,"Format","","",null,null],[13,"Invalid","","",19,null],[13,"ARgb32","","",19,null],[13,"Rgb24","","",19,null],[13,"A8","","",19,null],[13,"A1","","",19,null],[13,"Rgb16_565","","",19,null],[13,"Rgb30","","",19,null],[4,"RegionOverlap","","",null,null],[13,"In","","",20,null],[13,"Out","","",20,null],[13,"Part","","",20,null],[4,"SurfaceType","","",null,null],[13,"Image","","",18,null],[13,"Pdf","","",18,null],[13,"Ps","","",18,null],[13,"Xlib","","",18,null],[13,"Xcb","","",18,null],[13,"Glitz","","",18,null],[13,"Quartz","","",18,null],[13,"Win32","","",18,null],[13,"BeOs","","",18,null],[13,"DirectFb","","",18,null],[13,"Svg","","",18,null],[13,"Os2","","",18,null],[13,"Win32Printing","","",18,null],[13,"QuartzImage","","",18,null],[13,"Script","","",18,null],[13,"Qt","","",18,null],[13,"Recording","","",18,null],[13,"Vg","","",18,null],[13,"Gl","","",18,null],[13,"Drm","","",18,null],[13,"Tee","","",18,null],[13,"Xml","","",18,null],[13,"Skia","","",18,null],[13,"Subsurface","","",18,null],[13,"Cogl","","",18,null],[4,"FontType","","",null,null],[13,"FontTypeToy","","",14,null],[13,"FontTypeFt","","",14,null],[13,"FontTypeWin32","","",14,null],[13,"FontTypeQuartz","","",14,null],[13,"FontTypeUser","","",14,null],[4,"FontSlant","","",null,null],[13,"Normal","","",11,null],[13,"Italic","","",11,null],[13,"Oblique","","",11,null],[4,"FontWeight","","",null,null],[13,"Normal","","",12,null],[13,"Bold","","",12,null],[3,"Glyph","","",null,null],[12,"index","","",22,null],[12,"x","","",22,null],[12,"y","","",22,null],[3,"FontExtents","","",null,null],[12,"ascent","","",23,null],[12,"descent","","",23,null],[12,"height","","",23,null],[12,"max_x_advance","","",23,null],[12,"max_y_advance","","",23,null],[3,"TextExtents","","",null,null],[12,"x_bearing","","",24,null],[12,"y_bearing","","",24,null],[12,"width","","",24,null],[12,"height","","",24,null],[12,"x_advance","","",24,null],[12,"y_advance","","",24,null],[3,"TextCluster","","",null,null],[12,"num_bytes","","",25,null],[12,"num_glyphs","","",25,null],[3,"Matrix","","",null,null],[12,"xx","","",26,null],[12,"yx","","",26,null],[12,"xy","","",26,null],[12,"yy","","",26,null],[12,"x0","","",26,null],[12,"y0","","",26,null],[3,"Context","","",null,null],[3,"RectangleVec","","",null,null],[12,"rectangles","","",27,null],[3,"Path","","Paths are the most basic drawing tools and are primarily used to implicitly generate simple masks.",null,null],[3,"PathSegments","","",null,null],[3,"LinearGradient","","",null,null],[3,"RadialGradient","","",null,null],[3,"SolidPattern","","",null,null],[3,"SurfacePattern","","",null,null],[3,"Mesh","","",null,null],[3,"FontFace","","",null,null],[3,"ScaledFont","","",null,null],[3,"FontOptions","","",null,null],[3,"RectangleInt","","",null,null],[12,"x","","",28,null],[12,"y","","",28,null],[12,"width","","",28,null],[12,"height","","",28,null],[3,"Region","","",null,null],[3,"Surface","","",null,null],[3,"ImageSurface","","",null,null],[3,"ImageSurfaceData","","",null,null],[3,"PDFSurface","","",null,null],[3,"XCBConnection","","",null,null],[12,"0","","",29,null],[3,"Device","","",null,null],[12,"0","","",30,null],[3,"XCBDrawable","","",null,null],[12,"0","","",31,null],[3,"XCBPixmap","","",null,null],[12,"0","","",32,null],[3,"XCBRenderPictFormInfo","","",null,null],[12,"0","","",33,null],[3,"XCBScreen","","",null,null],[12,"0","","",34,null],[3,"XCBVisualType","","",null,null],[12,"0","","",35,null],[3,"Win32Surface","","",null,null],[4,"PathSegment","","",null,null],[13,"MoveTo","","",36,null],[13,"LineTo","","",36,null],[13,"CurveTo","","",36,null],[13,"ClosePath","","",36,null],[4,"BorrowError","","",null,null],[13,"Cairo","","",37,null],[13,"NonExclusive","","",37,null],[4,"IoError","","",null,null],[13,"Cairo","","",38,null],[13,"Io","","",38,null],[4,"MeshCorner","","",null,null],[13,"MeshCorner0","","",39,null],[13,"MeshCorner1","","",39,null],[13,"MeshCorner2","","",39,null],[13,"MeshCorner3","","",39,null],[0,"prelude","","",null,null],[8,"MatrixTrait","cairo::prelude","",null,null],[10,"null","","Creates a new Matrix filled with zeroes",40,{"inputs":[],"output":{"name":"matrix"}}],[10,"new","","Creates a new matrix and fills it with given values",40,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"matrix"}}],[10,"multiply","","Multiplies the affine transformations in a and b together and stores the result in the returned Matrix. The effect of the resulting transformation is to first apply the transformation in left to the coordinates and then apply the transformation in right to the coordinates.",40,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[10,"identity","","Returns a new matrix after modifying it to be an identity transformation.",40,{"inputs":[],"output":{"name":"matrix"}}],[10,"init","","Sets self to be the affine transformation given by xx , yx , xy , yy , x0 , y0. The transformation is given by:",40,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"translate","","Applies a translation by tx, ty to the transformation in self. The effect of the new transformation is to first translate the coordinates by tx and ty, then apply the original transformation to the coordinates.",40,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"scale","","Applies scaling by sx, sy to the transformation in self. The effect of the new transformation is to first scale the coordinates by sx and sy, then apply the original transformation to the coordinates.",40,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"rotate","","Applies rotation by radians to the transformation in self. The effect of the new transformation is to first rotate the coordinates by radians , then apply the original transformation to the coordinates.",40,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"invert","","Inverts a matrix in-place.",40,{"inputs":[{"name":"self"}],"output":null}],[10,"try_invert","","Tries to invert a matrix, and returns the inverted result or an error if the matrix is not invertible.",40,{"inputs":[{"name":"self"}],"output":{"generics":["matrix","status"],"name":"result"}}],[10,"transform_distance","","Transforms the distance vector (dx, dy) by self. This is similar to Matrix::transform_point() except that the translation components of the transformation are ignored. The calculation of the returned vector is as follows:",40,null],[10,"transform_point","","Transforms the point (x , y) by self.",40,null],[8,"Gradient","","",null,null],[11,"add_color_stop_rgb","","Adds an opaque color stop to a gradient pattern. The offset specifies the location along the gradient's control vector. For example, a linear gradient's control vector is from (x0,y0) to (x1,y1) while a radial gradient's control vector is from any point on the start circle to the corresponding point on the end circle.",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"add_color_stop_rgba","","Adds a translucent color stop to a gradient pattern. The offset specifies the location along the gradient's control vector. For example, a linear gradient's control vector is from (x0,y0) to (x1,y1) while a radial gradient's control vector is from any point on the start circle to the corresponding point on the end circle.",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_color_stop_count","","Gets the number of color stops specified in the given gradient pattern.",41,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"get_color_stop_rgba","","Gets the color and offset information at the given index for a gradient pattern. Values of index range from 0 to n-1 where n is the number returned by Pattern::get_color_stop_count().",41,null],[8,"Pattern","","",null,null],[11,"ensure_status","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"status","","Checks whether an error has previously occurred for this pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"get_reference_count","","Returns the current reference count of self.",42,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"set_extend","","Sets the mode to be used for drawing outside the area of a pattern. See cairo_extend_t for details on the semantics of each extend strategy.",42,{"inputs":[{"name":"self"},{"name":"extend"}],"output":null}],[11,"get_extend","","Gets the current extend mode for a pattern. See Extend enum for details on the semantics of each extend strategy.",42,{"inputs":[{"name":"self"}],"output":{"name":"extend"}}],[11,"set_filter","","Sets the filter to be used for resizing when using this pattern. See Filter enum for details on each filter.",42,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"get_filter","","Gets the current filter for a pattern. See Filter enum for details on each filter.",42,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"set_matrix","","Sets the pattern's transformation matrix, which is a transformation from user space to pattern space.",42,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"get_matrix","","Gets the current transformation matrix for a pattern.  See the documentation for [`set_matrix()`] for the details on this matrix.",42,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[8,"SurfaceExt","","",null,null],[10,"flush","","",43,{"inputs":[{"name":"self"}],"output":null}],[10,"finish","","",43,{"inputs":[{"name":"self"}],"output":null}],[10,"get_type","","",43,{"inputs":[{"name":"self"}],"output":{"name":"surfacetype"}}],[11,"clone","cairo","",44,{"inputs":[{"name":"self"}],"output":{"name":"fontoptions"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",44,{"inputs":[],"output":{"name":"fontoptions"}}],[11,"ensure_status","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"merge","","",44,{"inputs":[{"name":"self"},{"name":"fontoptions"}],"output":null}],[11,"hash","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_antialias","","",44,{"inputs":[{"name":"self"},{"name":"antialias"}],"output":null}],[11,"get_antialias","","",44,{"inputs":[{"name":"self"}],"output":{"name":"antialias"}}],[11,"set_subpixel_order","","",44,{"inputs":[{"name":"self"},{"name":"subpixelorder"}],"output":null}],[11,"get_subpixel_order","","",44,{"inputs":[{"name":"self"}],"output":{"name":"subpixelorder"}}],[11,"set_hint_style","","",44,{"inputs":[{"name":"self"},{"name":"hintstyle"}],"output":null}],[11,"get_hint_style","","",44,{"inputs":[{"name":"self"}],"output":{"name":"hintstyle"}}],[11,"set_hint_metrics","","",44,{"inputs":[{"name":"self"},{"name":"hintmetrics"}],"output":null}],[11,"get_hint_metrics","","",44,{"inputs":[{"name":"self"}],"output":{"name":"hintmetrics"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"fontoptions"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"fontface"}}],[11,"toy_create","","",45,{"inputs":[{"name":"str"},{"name":"fontslant"},{"name":"fontweight"}],"output":{"name":"fontface"}}],[11,"toy_get_family","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"toy_get_slant","","",45,{"inputs":[{"name":"self"}],"output":{"name":"fontslant"}}],[11,"toy_get_weight","","",45,{"inputs":[{"name":"self"}],"output":{"name":"fontweight"}}],[11,"ensure_status","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"get_type","","",45,{"inputs":[{"name":"self"}],"output":{"name":"fonttype"}}],[11,"get_reference_count","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"scaledfont"}}],[11,"new","","",46,{"inputs":[{"name":"fontface"},{"name":"matrix"},{"name":"matrix"},{"name":"fontoptions"}],"output":{"name":"scaledfont"}}],[11,"ensure_status","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"get_type","","",46,{"inputs":[{"name":"self"}],"output":{"name":"fonttype"}}],[11,"get_reference_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"extents","","",46,{"inputs":[{"name":"self"}],"output":{"name":"fontextents"}}],[11,"text_extents","","",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"textextents"}}],[11,"glyph_extents","","",46,null],[11,"text_to_glyphs","","",46,null],[11,"get_font_face","","",46,{"inputs":[{"name":"self"}],"output":{"name":"fontface"}}],[11,"get_font_options","","",46,{"inputs":[{"name":"self"}],"output":{"name":"fontoptions"}}],[11,"get_font_matrix","","",46,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"get_ctm","","",46,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"get_scale_matrix","","",46,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"from_glib_none","","",47,null],[11,"from_glib_borrow","","",47,null],[11,"from_glib_full","","",47,null],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"drop","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"ensure_status","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new Context with all graphics state parameters set to default values and with target as a target surface. The target surface should be constructed with a backend-specific function such as cairo_image_surface_create() (or any other Context::backend_surface_create() variant).",47,{"inputs":[{"name":"t"}],"output":{"name":"context"}}],[11,"status","","Checks whether an error has previously occurred for this context.",47,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"save","","Makes a copy of the current state of self and saves it on an internal stack of saved states for self. When Context::restore() is called, self will be restored to the saved state. Multiple calls to Context::save() and Context::restore() can be nested; each call to Context::restore() restores the state from the matching paired Context::save().",47,{"inputs":[{"name":"self"}],"output":null}],[11,"restore","","Restores self to the state saved by a preceding call to Context::save() and removes that state from the stack of saved states.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"get_target","","",47,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"push_group","","Temporarily redirects drawing to an intermediate surface known as a group. The redirection lasts until the group is completed by a call to Context::pop_group() or Context::pop_group_to_source(). These calls provide the result of any drawing to the group as a pattern, (either as an explicit object, or set as the source pattern).",47,{"inputs":[{"name":"self"}],"output":null}],[11,"pop_group","","Terminates the redirection begun by a call to Context::push_group() or Context::push_group_with_content() and returns a new pattern containing the results of all drawing operations performed to the group.",47,{"inputs":[{"name":"self"}],"output":{"generics":["pattern"],"name":"box"}}],[11,"pop_group_to_source","","Terminates the redirection begun by a call to Context::push_group() or Context::push_group_with_content() and installs the resulting pattern as the source pattern in the given cairo context.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"get_group_target","","",47,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"set_source_rgb","","Sets the source pattern within self to an opaque color. This opaque color will then be used for any subsequent drawing operation until a new source pattern is set.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"set_source_rgba","","Sets the source pattern within self to a translucent color. This color will then be used for any subsequent drawing operation until a new source pattern is set.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"set_source","","Sets the source pattern within self to source. This pattern will then be used for any subsequent drawing operation until a new source pattern is set.",47,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":null}],[11,"get_source","","Gets the current source pattern for self.",47,{"inputs":[{"name":"self"}],"output":{"generics":["pattern"],"name":"box"}}],[11,"set_source_surface","","",47,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"set_antialias","","Set the antialiasing mode of the rasterizer used for drawing shapes. This value is a hint, and a particular backend may or may not support a particular value. At the current time, no backend supports CAIRO_ANTIALIAS_SUBPIXEL when drawing shapes.",47,{"inputs":[{"name":"self"},{"name":"antialias"}],"output":null}],[11,"get_antialias","","Gets the current shape antialiasing mode, as set by Context::set_antialias().",47,{"inputs":[{"name":"self"}],"output":{"name":"antialias"}}],[11,"set_dash","","Sets the dash pattern to be used by cairo_stroke(). A dash pattern is specified by dashes, an array of positive values. Each value provides the length of alternate \"on\" and \"off\" portions of the stroke. The offset specifies an offset into the pattern at which the stroke begins.",47,null],[11,"get_dash_count","","This function returns the length of the dash array in self (0 if dashing is not currently in effect).",47,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_dash","","Gets the current dash array. If not NULL, dashes should be big enough to hold at least the number of values returned by Context::get_dash_count().",47,null],[11,"get_dash_dashes","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"vec"}}],[11,"get_dash_offset","","",47,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_fill_rule","","Set the current fill rule within the cairo context. The fill rule is used to determine which regions are inside or outside a complex (potentially self-intersecting) path. The current fill rule affects both Context::fill() and Context::clip(). See FillRule enum for details on the semantics of each available fill rule.",47,{"inputs":[{"name":"self"},{"name":"fillrule"}],"output":null}],[11,"get_fill_rule","","Gets the current fill rule, as set by Context::set_fill_rule().",47,{"inputs":[{"name":"self"}],"output":{"name":"fillrule"}}],[11,"set_line_cap","","Sets the current line cap style within the cairo context. See LineCap enum for details about how the available line cap styles are drawn.",47,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":null}],[11,"get_line_cap","","Gets the current line cap style, as set by Context::set_line_cap().",47,{"inputs":[{"name":"self"}],"output":{"name":"linecap"}}],[11,"set_line_join","","Sets the current line join style within the cairo context. See LineJoin enum for details about how the available line join styles are drawn.",47,{"inputs":[{"name":"self"},{"name":"linejoin"}],"output":null}],[11,"get_line_join","","Gets the current line join style, as set by Context::set_line_join().",47,{"inputs":[{"name":"self"}],"output":{"name":"linejoin"}}],[11,"set_line_width","","Sets the current line width within the cairo context. The line width value specifies the diameter of a pen that is circular in user space, (though device-space pen may be an ellipse in general due to scaling/shear/rotation of the CTM).",47,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_line_width","","This function returns the current line width value exactly as set by Context::set_line_width(). Note that the value is unchanged even if the CTM has changed between the calls to Context::set_line_width() and Context::get_line_width().",47,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_miter_limit","","Sets the current miter limit within the cairo context.",47,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_miter_limit","","Gets the current miter limit, as set by Contextset_miter_limit().",47,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_operator","","",47,{"inputs":[{"name":"self"},{"name":"operator"}],"output":null}],[11,"get_operator","","",47,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"set_tolerance","","Sets the tolerance used when converting paths into trapezoids. Curved segments of the path will be subdivided until the maximum deviation between the original path and the polygonal approximation is less than tolerance . The default value is 0.1. A larger value will give better performance, a smaller value, better appearance. (Reducing the value from the default value of 0.1 is unlikely to improve appearance significantly.) The accuracy of paths within Cairo is limited by the precision of its internal arithmetic, and the prescribed tolerance is restricted to the smallest representable internal value.",47,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_tolerance","","Gets the current tolerance value, as set by Context::set_tolerance().",47,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clip","","Establishes a new clip region by intersecting the current clip region with the current path as it would be filled by Context::fill() and according to the current fill rule (see Context::set_fill_rule()).",47,{"inputs":[{"name":"self"}],"output":null}],[11,"clip_preserve","","Establishes a new clip region by intersecting the current clip region with the current path as it would be filled by Context::fill() and according to the current fill rule (see Context::set_fill_rule()).",47,{"inputs":[{"name":"self"}],"output":null}],[11,"clip_extents","","Computes a bounding box in user coordinates covering the area inside the current clip.",47,null],[11,"in_clip","","Tests whether the given point is inside the area that would be visible through the current clip, i.e. the area that would be filled by a Context::paint() operation.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"reset_clip","","Reset the current clip region to its original, unrestricted state. That is, set the clip region to an infinitely large shape containing the target surface. Equivalently, if infinity is too hard to grasp, one can imagine the clip region being reset to the exact bounds of the target surface.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"copy_clip_rectangle_list","","Gets the current clip region as a list of rectangles in user coordinates.",47,{"inputs":[{"name":"self"}],"output":{"name":"rectanglevec"}}],[11,"fill","","A drawing operator that fills the current path according to the current fill rule, (each sub-path is implicitly closed before being filled). After Context::fill(), the current path will be cleared from the cairo context. See Context::set_fill_rule() and Context::fill_preserve().",47,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_preserve","","A drawing operator that fills the current path according to the current fill rule, (each sub-path is implicitly closed before being filled). Unlike Context::fill(), Context::fill_preserve() preserves the path within the cairo context.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_extents","","Computes a bounding box in user coordinates covering the area that would be affected, (the \"inked\" area), by a Context::fill() operation given the current path and fill parameters. If the current path is empty, returns an empty rectangle ((0,0), (0,0)). Surface dimensions and clipping are not taken into account.",47,null],[11,"in_fill","","Tests whether the given point is inside the area that would be affected by a Context::fill() operation given the current path and filling parameters. Surface dimensions and clipping are not taken into account.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"mask","","A drawing operator that paints the current source using the alpha channel of pattern as a mask. (Opaque areas of pattern are painted with the source, transparent areas are not painted.)",47,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":null}],[11,"paint","","A drawing operator that paints the current source everywhere within the current clip region.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"paint_with_alpha","","A drawing operator that paints the current source everywhere within the current clip region using a mask of constant alpha value alpha . The effect is similar to Context::paint(), but the drawing is faded out using the alpha value.",47,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"stroke","","A drawing operator that strokes the current path according to the current line width, line join, line cap, and dash settings. After Context::stroke(), the current path will be cleared from the cairo context. See Context::set_line_width(), Context::set_line_join(), Context::set_line_cap(), Context::set_dash(), and Context::stroke_preserve().",47,{"inputs":[{"name":"self"}],"output":null}],[11,"stroke_preserve","","A drawing operator that strokes the current path according to the current line width, line join, line cap, and dash settings. Unlike Context::stroke(), Context::stroke_preserve() preserves the path within the cairo context.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"stroke_extents","","Computes a bounding box in user coordinates covering the area that would be affected, (the \"inked\" area), by a Context::stroke() operation given the current path and stroke parameters. If the current path is empty, returns an empty rectangle ((0,0), (0,0)). Surface dimensions and clipping are not taken into account.",47,null],[11,"in_stroke","","Tests whether the given point is inside the area that would be affected by a  Context::stroke() operation given the current path and stroking parameters. Surface dimensions and clipping are not taken into account.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"copy_page","","Emits the current page for backends that support multiple pages, but doesn't clear it, so, the contents of the current page will be retained for the next page too. Use Context::show_page() if you want to get an empty page after the emission.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"show_page","","Emits and clears the current page for backends that support multiple pages. Use Context::copy_page() if you don't want to clear the page.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"get_reference_count","","Returns the current reference count of self.",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"translate","","Modifies the current transformation matrix (CTM) by translating the user-space origin by (tx , ty ). This offset is interpreted as a user-space coordinate according to the CTM in place before the new call to cairo_translate(). In other words, the translation of the user-space origin takes place after any existing transformation.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"scale","","Modifies the current transformation matrix (CTM) by scaling the X and Y user-space axes by sx and sy respectively. The scaling of the axes takes place after any existing transformation of user space.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"rotate","","Modifies the current transformation matrix (CTM) by rotating the user-space axes by angle radians. The rotation of the axes takes places after any existing transformation of user space. The rotation direction for positive angles is from the positive X axis toward the positive Y axis.",47,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"transform","","",47,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"set_matrix","","",47,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"get_matrix","","",47,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"identity_matrix","","Resets the current transformation matrix (CTM) by setting it equal to the identity matrix. That is, the user-space and device-space axes will be aligned and one user-space unit will transform to one device-space unit.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"user_to_device","","Transform a coordinate from user space to device space by multiplying the given point by the current transformation matrix (CTM).",47,null],[11,"user_to_device_distance","","Transform a distance vector from user space to device space. This function is similar to Context::user_to_device() except that the translation components of the CTM will be ignored when transforming (dx ,dy ).",47,null],[11,"device_to_user","","Transform a coordinate from device space to user space by multiplying the given point by the inverse of the current transformation matrix (CTM).",47,null],[11,"device_to_user_distance","","Transform a distance vector from device space to user space. This function is similar to Context::device_to_user() except that the translation components of the inverse CTM will be ignored when transforming (dx ,dy ).",47,null],[11,"select_font_face","","Note: The Context::select_font_face() function call is part of what the cairo designers call the \"toy\" text API. It is convenient for short demos and simple programs, but it is not expected to be adequate for serious text-using applications.",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"fontslant"},{"name":"fontweight"}],"output":null}],[11,"set_font_size","","Sets the current font matrix to a scale by a factor of size , replacing any font matrix previously set with Context::set_font_size() or Context::set_font_matrix(). This results in a font size of size user space units. (More precisely, this matrix will result in the font's em-square being a size by size square in user space.)",47,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"set_font_matrix","","",47,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"get_font_matrix","","Stores the current font matrix into matrix . See Context::set_font_matrix().",47,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"set_font_options","","Sets a set of custom font rendering options for the Context. Rendering options are derived by merging these options with the options derived from underlying surface; if the value in options has a default value (like Antialias::Default), then the value from the surface is used.",47,{"inputs":[{"name":"self"},{"name":"fontoptions"}],"output":null}],[11,"get_font_options","","Retrieves font rendering options set via Context::set_font_options. Note that the returned options do not include any options derived from the underlying surface; they are literally the options passed to Context::set_font_options().",47,{"inputs":[{"name":"self"}],"output":{"name":"fontoptions"}}],[11,"set_font_face","","Replaces the current FontFace object in the Context with font_face. The replaced font face in the cairo_t will be destroyed if there are no other references to it.",47,{"inputs":[{"name":"self"},{"name":"fontface"}],"output":null}],[11,"get_font_face","","Gets the current font face for a Context object.",47,{"inputs":[{"name":"self"}],"output":{"name":"fontface"}}],[11,"set_scaled_font","","Replaces the current font face, font matrix, and font options in the Context with those of the ScaledFont object. Except for some translation, the current CTM of the Context should be the same as that of the ScaledFont object, which can be accessed using Context::scaled_font_get_ctm().",47,{"inputs":[{"name":"self"},{"name":"scaledfont"}],"output":null}],[11,"get_scaled_font","","Gets the current scaled font for a Context.",47,{"inputs":[{"name":"self"}],"output":{"name":"scaledfont"}}],[11,"show_text","","A drawing operator that generates the shape from a string of UTF-8 characters, rendered according to the current FontFace, FontSize (FontMatrix), and font_options.",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"show_glyphs","","",47,null],[11,"show_text_glyphs","","A drawing operator that generates the shape from an array of glyphs, rendered according to the current font face, font size (font matrix), and font options.",47,null],[11,"font_extents","","Gets the font extents for the currently selected font.",47,{"inputs":[{"name":"self"}],"output":{"name":"fontextents"}}],[11,"text_extents","","Gets the extents for a string of text. The extents describe a user-space rectangle that encloses the \"inked\" portion of the text, (as it would be drawn by Context::show_text()). Additionally, the x_advance and y_advance values indicate the amount by which the current point would be advanced by Context::show_text().",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"textextents"}}],[11,"glyph_extents","","Gets the extents for an array of glyphs. The extents describe a user-space rectangle that encloses the \"inked\" portion of the glyphs, (as they would be drawn by Context::show_glyphs()). Additionally, the x_advance and y_advance values indicate the amount by which the current point would be advanced by Context::show_glyphs().",47,null],[11,"copy_path","","Creates a copy of the current path and returns it to the user as a Path. See PathData for hints on how to iterate over the returned data structure.",47,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"copy_path_flat","","Gets a flattened copy of the current path and returns it to the user as a Path. See PathData for hints on how to iterate over the returned data structure.",47,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"append_path","","Append the path onto the current path. The path may be either the return value from one of Context::copy_path() or Context::copy_path_flat() or it may be constructed manually. See Path for details on how the path data structure should be initialized, and note that path.status must be initialized to Status::Success.",47,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"has_current_point","","Returns whether a current point is defined on the current path. See Context::get_current_point() for details on the current point.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_current_point","","Gets the current point of the current path, which is conceptually the final point reached by the path so far.",47,null],[11,"new_path","","Clears the current path. After this call there will be no path and no current point.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"new_sub_path","","Begin a new sub-path. Note that the existing path is not affected. After this call there will be no current point.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"close_path","","Adds a line segment to the path from the current point to the beginning of the current sub-path, (the most recent point passed to cairo_move_to()), and closes this sub-path. After this call the current point will be at the joined endpoint of the sub-path.",47,{"inputs":[{"name":"self"}],"output":null}],[11,"arc","","Adds a circular arc of the given radius to the current path. The arc is centered at (xc , yc ), begins at angle1 and proceeds in the direction of increasing angles to end at angle2 . If angle2 is less than angle1 it will be progressively increased by 2*M_PI until it is greater than angle1 .",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"arc_negative","","Adds a circular arc of the given radius to the current path. The arc is centered at (xc , yc ), begins at angle1 and proceeds in the direction of decreasing angles to end at angle2 . If angle2 is greater than angle1 it will be progressively decreased by 2*M_PI until it is less than angle1.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"curve_to","","Adds a cubic Bézier spline to the path from the current point to position (x3 , y3 ) in user-space coordinates, using (x1 , y1 ) and (x2 , y2 ) as the control points. After this call the current point will be (x3 , y3 ).",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"line_to","","Adds a line to the path from the current point to position (x , y ) in user-space coordinates. After this call the current point will be (x , y ).",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"move_to","","Begin a new sub-path. After this call the current point will be (x , y ).",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"rectangle","","Adds a closed sub-path rectangle of the given size to the current path at position (x , y ) in user-space coordinates.",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"text_path","","Adds closed paths for the glyphs to the current path. The generated path if  filled, achieves an effect similar to that of Context::show_glyphs().",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"glyph_path","","",47,null],[11,"rel_curve_to","","Relative-coordinate version of Context::curve_to(). All offsets are relative to the current point. Adds a cubic Bézier spline to the path from the current point to a point offset from the current point by (dx3 , dy3 ), using points offset by (dx1 , dy1 ) and (dx2 , dy2 ) as the control points. After this call the current point will be offset by (dx3 , dy3 ).",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"rel_line_to","","Relative-coordinate version of Context::line_to(). Adds a line to the path from the current point to a point that is offset from the current point by (dx , dy ) in user space. After this call the current point will be offset by (dx , dy ).",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"rel_move_to","","Begin a new sub-path. After this call the current point will offset by (x , y ).",47,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",37,{"inputs":[{"name":"status"}],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",38,{"inputs":[{"name":"status"}],"output":{"name":"self"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",48,{"inputs":[{"name":"surface"}],"output":{"generics":["pdfsurface","surface"],"name":"result"}}],[11,"create","","",48,{"inputs":[{"name":"t"},{"name":"f64"},{"name":"f64"}],"output":{"name":"pdfsurface"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"pdfsurface"}}],[11,"to_glib_none","","",48,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"from_glib_none","","",48,null],[11,"from_glib_borrow","","",48,null],[11,"from_glib_full","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",49,{"inputs":[{"name":"surface"}],"output":{"generics":["imagesurface","surface"],"name":"result"}}],[11,"from_raw_full","","",49,null],[11,"create","","",49,{"inputs":[{"name":"format"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["imagesurface","status"],"name":"result"}}],[11,"create_for_data","","",49,{"inputs":[{"name":"box"},{"name":"f"},{"name":"format"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["imagesurface","status"],"name":"result"}}],[11,"get_data","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["imagesurfacedata","borrowerror"],"name":"result"}}],[11,"get_format","","",49,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"get_height","","",49,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_stride","","",49,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_width","","",49,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_glib_none","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"from_glib_none","","",49,null],[11,"from_glib_borrow","","",49,null],[11,"from_glib_full","","",49,null],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"imagesurface"}}],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",50,null],[11,"deref_mut","","",50,null],[11,"create_from_png","","",49,{"inputs":[{"name":"r"}],"output":{"generics":["imagesurface","ioerror"],"name":"result"}}],[11,"write_to_png","","",49,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"ensure_status","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathsegments"}}],[11,"drop","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegment"],"name":"option"}}],[11,"ensure_status","cairo::prelude","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"status","","Checks whether an error has previously occurred for this pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"get_reference_count","","Returns the current reference count of self.",42,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"set_extend","","Sets the mode to be used for drawing outside the area of a pattern. See cairo_extend_t for details on the semantics of each extend strategy.",42,{"inputs":[{"name":"self"},{"name":"extend"}],"output":null}],[11,"get_extend","","Gets the current extend mode for a pattern. See Extend enum for details on the semantics of each extend strategy.",42,{"inputs":[{"name":"self"}],"output":{"name":"extend"}}],[11,"set_filter","","Sets the filter to be used for resizing when using this pattern. See Filter enum for details on each filter.",42,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"get_filter","","Gets the current filter for a pattern. See Filter enum for details on each filter.",42,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"set_matrix","","Sets the pattern's transformation matrix, which is a transformation from user space to pattern space.",42,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"get_matrix","","Gets the current transformation matrix for a pattern.  See the documentation for [`set_matrix()`] for the details on this matrix.",42,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"add_color_stop_rgb","","Adds an opaque color stop to a gradient pattern. The offset specifies the location along the gradient's control vector. For example, a linear gradient's control vector is from (x0,y0) to (x1,y1) while a radial gradient's control vector is from any point on the start circle to the corresponding point on the end circle.",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"add_color_stop_rgba","","Adds a translucent color stop to a gradient pattern. The offset specifies the location along the gradient's control vector. For example, a linear gradient's control vector is from (x0,y0) to (x1,y1) while a radial gradient's control vector is from any point on the start circle to the corresponding point on the end circle.",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_color_stop_count","","Gets the number of color stops specified in the given gradient pattern.",41,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"get_color_stop_rgba","","Gets the color and offset information at the given index for a gradient pattern. Values of index range from 0 to n-1 where n is the number returned by Pattern::get_color_stop_count().",41,null],[11,"wrap","cairo","",53,null],[11,"reference","","",53,{"inputs":[{"name":"self"}],"output":{"name":"solidpattern"}}],[11,"get_ptr","","",53,null],[11,"drop","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"from_rgb","","Creates a new SolidPattern corresponding to an opaque color. The color components are floating point numbers in the range 0 to 1.",53,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"solidpattern"}}],[11,"from_rgba","","Creates a new SolidPattern corresponding to a translucent color. The color components are floating point numbers in the range 0 to",53,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"solidpattern"}}],[11,"get_rgba","","Gets the solid color for a solid color pattern.",53,null],[11,"wrap","","",54,null],[11,"reference","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lineargradient"}}],[11,"get_ptr","","",54,null],[11,"drop","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new linear gradient Pattern object along the line defined by (x0, y0) and (x1, y1). Before using the gradient pattern, a number of color stops should be defined using Pattern::add_color_stop_rgb() or Pattern::add_color_stop_rgba().",54,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lineargradient"}}],[11,"get_linear_points","","Gets the gradient endpoints for a linear gradient.",54,null],[11,"wrap","","",55,null],[11,"reference","","",55,{"inputs":[{"name":"self"}],"output":{"name":"radialgradient"}}],[11,"get_ptr","","",55,null],[11,"drop","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new radial gradient Pattern between the two circles defined by (cx0, cy0, radius0) and (cx1, cy1, radius1). Before using the gradient pattern, a number of color stops should be defined using Pattern::add_color_stop_rgb() or Pattern::add_color_stop_rgba().",55,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"radialgradient"}}],[11,"get_radial_circles","","Gets the gradient endpoint circles for a radial gradient, each specified as a center coordinate and a radius.",55,null],[11,"wrap","","",56,null],[11,"reference","","",56,{"inputs":[{"name":"self"}],"output":{"name":"surfacepattern"}}],[11,"get_ptr","","",56,null],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"create","","",56,{"inputs":[{"name":"t"}],"output":{"name":"surfacepattern"}}],[11,"get_surface","","",56,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"meshcorner"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"meshcorner"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"meshcorner"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"wrap","","",57,null],[11,"reference","","",57,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"get_ptr","","",57,null],[11,"drop","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new mesh pattern.",57,{"inputs":[],"output":{"name":"mesh"}}],[11,"begin_patch","","Begin a patch in a mesh pattern.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"end_patch","","Indicates the end of the current patch in a mesh pattern.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"move_to","","Define the first point of the current patch in a mesh pattern.",57,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"line_to","","Adds a line to the current patch from the current point to position (x , y ) in pattern-space coordinates.",57,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"curve_to","","Adds a cubic Bézier spline to the current patch from the current point to position (x3 , y3 ) in pattern-space coordinates, using (x1 , y1 ) and (x2 , y2 ) as the control points.",57,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"set_control_point","","Set an internal control point of the current patch.",57,{"inputs":[{"name":"self"},{"name":"meshcorner"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_control_point","","Gets the control point point_num of patch patch_num for a mesh pattern.",57,null],[11,"set_corner_color_rgb","","Sets the color of a corner of the current patch in a mesh pattern.",57,{"inputs":[{"name":"self"},{"name":"meshcorner"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"set_corner_color_rgba","","Sets the color of a corner of the current patch in a mesh pattern.",57,{"inputs":[{"name":"self"},{"name":"meshcorner"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_corner_color_rgba","","Gets the color information in corner corner_num of patch patch_num for a mesh pattern.",57,null],[11,"get_patch_count","","Gets the number of patches specified in the given mesh pattern.",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_path","","Gets path defining the patch patch_num for a mesh pattern.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"path"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"rectangleint"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"as_ref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"drop","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"create","","",58,{"inputs":[],"output":{"name":"region"}}],[11,"create_rectangle","","",58,{"inputs":[{"name":"rectangleint"}],"output":{"name":"region"}}],[11,"copy","","",58,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"status","","",58,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"get_extents","","",58,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":null}],[11,"num_rectangles","","",58,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_rectangle","","",58,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangleint"}}],[11,"is_empty","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_point","","",58,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"contains_rectangle","","",58,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"regionoverlap"}}],[11,"translate","","",58,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"intersect","","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"status"}}],[11,"intersect_rectangle","","",58,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"status"}}],[11,"subtract","","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"status"}}],[11,"subtract_rectangle","","",58,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"status"}}],[11,"union","","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"status"}}],[11,"union_rectangle","","",58,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"status"}}],[11,"xor","","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"status"}}],[11,"xor_rectangle","","",58,{"inputs":[{"name":"self"},{"name":"rectangleint"}],"output":{"name":"status"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","",59,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"create_similar","","",59,{"inputs":[{"name":"self"},{"name":"content"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[11,"quartz_create","","",59,{"inputs":[{"name":"format"},{"name":"u32"},{"name":"u32"}],"output":{"name":"surface"}}],[11,"quartz_create_for_cg_context","","",59,{"inputs":[{"name":"cgcontextref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"surface"}}],[11,"quartz_get_cg_context","","",59,{"inputs":[{"name":"self"}],"output":{"name":"cgcontextref"}}],[11,"to_glib_none","","",59,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"from_glib_none","","",59,null],[11,"from_glib_borrow","","",59,null],[11,"from_glib_full","","",59,null],[11,"as_ref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"drop","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"null","","",26,{"inputs":[],"output":{"name":"matrix"}}],[11,"new","","",26,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"matrix"}}],[11,"multiply","","",26,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"identity","","",26,{"inputs":[],"output":{"name":"matrix"}}],[11,"init","","",26,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"translate","","",26,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"scale","","",26,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"rotate","","",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"invert","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"try_invert","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["matrix","status"],"name":"result"}}],[11,"transform_distance","","",26,null],[11,"transform_point","","",26,null],[11,"to_raw_none","","",29,null],[11,"from_raw_none","","",29,null],[11,"from_raw_borrow","","",29,null],[11,"from_raw_full","","",29,null],[11,"from_glib_none","","",29,null],[11,"from_glib_borrow","","",29,null],[11,"from_glib_full","","",29,null],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"xcbconnection"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"xcbconnection"}}],[11,"to_raw_none","","",33,null],[11,"from_raw_none","","",33,null],[11,"from_raw_borrow","","",33,null],[11,"from_raw_full","","",33,null],[11,"from_glib_none","","",33,null],[11,"from_glib_borrow","","",33,null],[11,"from_glib_full","","",33,null],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"xcbrenderpictforminfo"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"xcbrenderpictforminfo"}}],[11,"to_raw_none","","",34,null],[11,"from_raw_none","","",34,null],[11,"from_raw_borrow","","",34,null],[11,"from_raw_full","","",34,null],[11,"from_glib_none","","",34,null],[11,"from_glib_borrow","","",34,null],[11,"from_glib_full","","",34,null],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"xcbscreen"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"xcbscreen"}}],[11,"create","","",59,{"inputs":[{"name":"xcbconnection"},{"name":"xcbdrawable"},{"name":"xcbvisualtype"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[11,"create_for_bitmap","","",59,{"inputs":[{"name":"xcbconnection"},{"name":"xcbscreen"},{"name":"xcbpixmap"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[11,"create_with_xrender_format","","",59,{"inputs":[{"name":"xcbconnection"},{"name":"xcbscreen"},{"name":"xcbpixmap"},{"name":"xcbrenderpictforminfo"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[11,"set_size","","",59,{"inputs":[{"name":"surface"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"set_drawable","","",59,{"inputs":[{"name":"surface"},{"name":"xcbdrawable"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"to_raw_none","","",35,null],[11,"from_raw_none","","",35,null],[11,"from_raw_borrow","","",35,null],[11,"from_raw_full","","",35,null],[11,"from_glib_none","","",35,null],[11,"from_glib_borrow","","",35,null],[11,"from_glib_full","","",35,null],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"xcbvisualtype"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"xcbvisualtype"}}],[11,"to_raw_none","","",30,null],[11,"from_raw_none","","",30,null],[11,"from_raw_borrow","","",30,null],[11,"from_raw_full","","",30,null],[11,"from_glib_none","","",30,null],[11,"from_glib_borrow","","",30,null],[11,"from_glib_full","","",30,null],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"get_connection","","",30,{"inputs":[{"name":"self"}],"output":{"name":"xcbconnection"}}],[11,"debug_cap_xrender_version","","",30,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"debug_cap_xshm_version","","",30,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"debug_get_precision","","",30,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"debug_set_precision","","",30,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",60,{"inputs":[{"name":"surface"}],"output":{"generics":["win32surface","surface"],"name":"result"}}],[11,"create","","",60,{"inputs":[{"name":"hdc"}],"output":{"generics":["win32surface","status"],"name":"result"}}],[11,"create_with_dib","","",60,{"inputs":[{"name":"format"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["win32surface","status"],"name":"result"}}],[11,"create_with_ddb","","",60,{"inputs":[{"name":"hdc"},{"name":"format"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["win32surface","status"],"name":"result"}}],[11,"printing_surface_create","","",60,{"inputs":[{"name":"hdc"}],"output":{"generics":["win32surface","status"],"name":"result"}}],[11,"to_glib_none","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"from_glib_none","","",60,null],[11,"from_glib_borrow","","",60,null],[11,"from_glib_full","","",60,null],[11,"as_ref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"win32surface"}}],[8,"Pattern","","",null,null],[11,"ensure_status","cairo::prelude","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"status","","Checks whether an error has previously occurred for this pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"get_reference_count","","Returns the current reference count of self.",42,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"set_extend","","Sets the mode to be used for drawing outside the area of a pattern. See cairo_extend_t for details on the semantics of each extend strategy.",42,{"inputs":[{"name":"self"},{"name":"extend"}],"output":null}],[11,"get_extend","","Gets the current extend mode for a pattern. See Extend enum for details on the semantics of each extend strategy.",42,{"inputs":[{"name":"self"}],"output":{"name":"extend"}}],[11,"set_filter","","Sets the filter to be used for resizing when using this pattern. See Filter enum for details on each filter.",42,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"get_filter","","Gets the current filter for a pattern. See Filter enum for details on each filter.",42,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"set_matrix","","Sets the pattern's transformation matrix, which is a transformation from user space to pattern space.",42,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"get_matrix","","Gets the current transformation matrix for a pattern.  See the documentation for [`set_matrix()`] for the details on this matrix.",42,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[8,"Gradient","cairo","",null,null],[11,"add_color_stop_rgb","cairo::prelude","Adds an opaque color stop to a gradient pattern. The offset specifies the location along the gradient's control vector. For example, a linear gradient's control vector is from (x0,y0) to (x1,y1) while a radial gradient's control vector is from any point on the start circle to the corresponding point on the end circle.",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"add_color_stop_rgba","","Adds a translucent color stop to a gradient pattern. The offset specifies the location along the gradient's control vector. For example, a linear gradient's control vector is from (x0,y0) to (x1,y1) while a radial gradient's control vector is from any point on the start circle to the corresponding point on the end circle.",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_color_stop_count","","Gets the number of color stops specified in the given gradient pattern.",41,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"get_color_stop_rgba","","Gets the color and offset information at the given index for a gradient pattern. Values of index range from 0 to n-1 where n is the number returned by Pattern::get_color_stop_count().",41,null],[8,"MatrixTrait","cairo","",null,null],[10,"null","","Creates a new Matrix filled with zeroes",40,{"inputs":[],"output":{"name":"matrix"}}],[10,"new","","Creates a new matrix and fills it with given values",40,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"matrix"}}],[10,"multiply","","Multiplies the affine transformations in a and b together and stores the result in the returned Matrix. The effect of the resulting transformation is to first apply the transformation in left to the coordinates and then apply the transformation in right to the coordinates.",40,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[10,"identity","","Returns a new matrix after modifying it to be an identity transformation.",40,{"inputs":[],"output":{"name":"matrix"}}],[10,"init","","Sets self to be the affine transformation given by xx , yx , xy , yy , x0 , y0. The transformation is given by:",40,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"translate","","Applies a translation by tx, ty to the transformation in self. The effect of the new transformation is to first translate the coordinates by tx and ty, then apply the original transformation to the coordinates.",40,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"scale","","Applies scaling by sx, sy to the transformation in self. The effect of the new transformation is to first scale the coordinates by sx and sy, then apply the original transformation to the coordinates.",40,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"rotate","","Applies rotation by radians to the transformation in self. The effect of the new transformation is to first rotate the coordinates by radians , then apply the original transformation to the coordinates.",40,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"invert","","Inverts a matrix in-place.",40,{"inputs":[{"name":"self"}],"output":null}],[10,"try_invert","","Tries to invert a matrix, and returns the inverted result or an error if the matrix is not invertible.",40,{"inputs":[{"name":"self"}],"output":{"generics":["matrix","status"],"name":"result"}}],[10,"transform_distance","","Transforms the distance vector (dx, dy) by self. This is similar to Matrix::transform_point() except that the translation components of the transformation are ignored. The calculation of the returned vector is as follows:",40,null],[10,"transform_point","","Transforms the point (x , y) by self.",40,null],[8,"XCBSurface","","",null,null],[10,"create","","",61,{"inputs":[{"name":"xcbconnection"},{"name":"xcbdrawable"},{"name":"xcbvisualtype"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[10,"create_for_bitmap","","",61,{"inputs":[{"name":"xcbconnection"},{"name":"xcbscreen"},{"name":"xcbpixmap"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[10,"create_with_xrender_format","","",61,{"inputs":[{"name":"xcbconnection"},{"name":"xcbscreen"},{"name":"xcbpixmap"},{"name":"xcbrenderpictforminfo"},{"name":"i32"},{"name":"i32"}],"output":{"name":"surface"}}],[10,"set_size","","",61,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_drawable","","",61,{"inputs":[{"name":"self"},{"name":"xcbdrawable"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"ensure_valid","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"antialias"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"cairo_rectangle_t"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"surfacetype"}}],[11,"clone","cairo::enums","",10,{"inputs":[{"name":"self"}],"output":{"name":"patterntype"}}],[11,"clone","cairo","",5,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"linejoin"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"clone","cairo::enums","",17,{"inputs":[{"name":"self"}],"output":{"name":"hintmetrics"}}],[11,"clone","cairo","",14,{"inputs":[{"name":"self"}],"output":{"name":"fonttype"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"content"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linecap"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"extend"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"textextents"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"textcluster"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"fontslant"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pathdatatype"}}],[11,"clone","cairo::enums","",16,{"inputs":[{"name":"self"}],"output":{"name":"hintstyle"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"subpixelorder"}}],[11,"clone","cairo","",23,{"inputs":[{"name":"self"}],"output":{"name":"fontextents"}}],[11,"clone","cairo::enums","",13,{"inputs":[{"name":"self"}],"output":{"name":"textclusterflags"}}],[11,"clone","cairo","",12,{"inputs":[{"name":"self"}],"output":{"name":"fontweight"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"regionoverlap"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fillrule"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"pathdatatype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"fontslant"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"extend"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo::enums","",17,{"inputs":[{"name":"self"},{"name":"hintmetrics"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo","",5,{"inputs":[{"name":"self"},{"name":"operator"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo::enums","",16,{"inputs":[{"name":"self"},{"name":"hintstyle"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo","",4,{"inputs":[{"name":"self"},{"name":"linejoin"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"fonttype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"fillrule"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo::enums","",10,{"inputs":[{"name":"self"},{"name":"patterntype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo","",7,{"inputs":[{"name":"self"},{"name":"content"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"fontweight"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"antialias"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","cairo::enums","",15,{"inputs":[{"name":"self"},{"name":"subpixelorder"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"textclusterflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","cairo","",20,{"inputs":[{"name":"self"},{"name":"regionoverlap"}],"output":{"name":"bool"}}],[11,"eq","cairo::enums","",16,{"inputs":[{"name":"self"},{"name":"hintstyle"}],"output":{"name":"bool"}}],[11,"eq","cairo","",14,{"inputs":[{"name":"self"},{"name":"fonttype"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"fontslant"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"eq","cairo::enums","",10,{"inputs":[{"name":"self"},{"name":"patterntype"}],"output":{"name":"bool"}}],[11,"eq","cairo","",1,{"inputs":[{"name":"self"},{"name":"antialias"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"pathdatatype"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"operator"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":{"name":"bool"}}],[11,"eq","cairo::enums","",15,{"inputs":[{"name":"self"},{"name":"subpixelorder"}],"output":{"name":"bool"}}],[11,"eq","cairo","",8,{"inputs":[{"name":"self"},{"name":"extend"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"linejoin"}],"output":{"name":"bool"}}],[11,"eq","cairo::enums","",13,{"inputs":[{"name":"self"},{"name":"textclusterflags"}],"output":{"name":"bool"}}],[11,"eq","cairo","",2,{"inputs":[{"name":"self"},{"name":"fillrule"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"content"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"eq","cairo::enums","",17,{"inputs":[{"name":"self"},{"name":"hintmetrics"}],"output":{"name":"bool"}}],[11,"eq","cairo","",12,{"inputs":[{"name":"self"},{"name":"fontweight"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"cairo_rectangle_t"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"cairo_rectangle_t"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo::enums","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo::enums","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo::enums","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo::enums","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo::enums","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","cairo","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"stride_for_width","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i32"],"name":"result"}}]],"paths":[[4,"Status"],[4,"Antialias"],[4,"FillRule"],[4,"LineCap"],[4,"LineJoin"],[4,"Operator"],[4,"PathDataType"],[4,"Content"],[4,"Extend"],[4,"Filter"],[4,"PatternType"],[4,"FontSlant"],[4,"FontWeight"],[4,"TextClusterFlags"],[4,"FontType"],[4,"SubpixelOrder"],[4,"HintStyle"],[4,"HintMetrics"],[4,"SurfaceType"],[4,"Format"],[4,"RegionOverlap"],[3,"Rectangle"],[3,"Glyph"],[3,"FontExtents"],[3,"TextExtents"],[3,"TextCluster"],[3,"Matrix"],[3,"RectangleVec"],[3,"RectangleInt"],[3,"XCBConnection"],[3,"Device"],[3,"XCBDrawable"],[3,"XCBPixmap"],[3,"XCBRenderPictFormInfo"],[3,"XCBScreen"],[3,"XCBVisualType"],[4,"PathSegment"],[4,"BorrowError"],[4,"IoError"],[4,"MeshCorner"],[8,"MatrixTrait"],[8,"Gradient"],[8,"Pattern"],[8,"SurfaceExt"],[3,"FontOptions"],[3,"FontFace"],[3,"ScaledFont"],[3,"Context"],[3,"PDFSurface"],[3,"ImageSurface"],[3,"ImageSurfaceData"],[3,"Path"],[3,"PathSegments"],[3,"SolidPattern"],[3,"LinearGradient"],[3,"RadialGradient"],[3,"SurfacePattern"],[3,"Mesh"],[3,"Region"],[3,"Surface"],[3,"Win32Surface"],[8,"XCBSurface"]]};
searchIndex["sourceview"] = {"doc":"","items":[[3,"Error","sourceview","A generic error capable of representing various error domains (types).",null,null],[3,"Object","","The base class in the object hierarchy.",null,null],[3,"Buffer","","Implements",null,null],[3,"Completion","","Implements",null,null],[3,"CompletionContext","","Implements",null,null],[3,"CompletionInfo","","Implements",null,null],[3,"CompletionItem","","Implements",null,null],[3,"CompletionProposal","","Implements",null,null],[3,"CompletionProvider","","Implements",null,null],[3,"CompletionWords","","Implements",null,null],[3,"File","","Feature: `v3_14`",null,null],[3,"FileLoader","","Feature: `v3_14`",null,null],[3,"FileSaver","","Feature: `v3_14`",null,null],[3,"Gutter","","Implements",null,null],[3,"GutterRenderer","","Implements",null,null],[3,"GutterRendererPixbuf","","Implements",null,null],[3,"GutterRendererText","","Implements",null,null],[3,"Language","","Implements",null,null],[3,"LanguageManager","","Implements",null,null],[3,"Map","","Feature: `v3_18`",null,null],[3,"Mark","","Implements",null,null],[3,"MarkAttributes","","Implements",null,null],[3,"PrintCompositor","","Implements",null,null],[3,"Region","","",null,null],[3,"SearchContext","","Feature: `v3_10`",null,null],[3,"SearchSettings","","Feature: `v3_10`",null,null],[3,"SpaceDrawer","","Feature: `v3_24`",null,null],[3,"Style","","Implements",null,null],[3,"StyleScheme","","Implements",null,null],[3,"StyleSchemeChooser","","Feature: `v3_16`",null,null],[3,"StyleSchemeChooserButton","","Feature: `v3_16`",null,null],[3,"StyleSchemeChooserWidget","","Feature: `v3_16`",null,null],[3,"StyleSchemeManager","","Implements",null,null],[3,"Tag","","Feature: `v3_20`",null,null],[3,"UndoManager","","Implements",null,null],[3,"View","","Implements",null,null],[3,"Encoding","","Feature: `v3_14`",null,null],[3,"CompletionActivation","","",null,null],[3,"DrawSpacesFlags","","",null,null],[3,"FileSaverFlags","","",null,null],[3,"GutterRendererState","","",null,null],[3,"SortFlags","","",null,null],[3,"SpaceLocationFlags","","",null,null],[3,"SpaceTypeFlags","","",null,null],[4,"BackgroundPatternType","","",null,null],[13,"None","","",0,null],[13,"Grid","","",0,null],[4,"ChangeCaseType","","",null,null],[13,"Lower","","",1,null],[13,"Upper","","",1,null],[13,"Toggle","","",1,null],[13,"Title","","",1,null],[4,"CompressionType","","",null,null],[13,"None","","",2,null],[13,"Gzip","","",2,null],[4,"GutterRendererAlignmentMode","","The alignment mode of the renderer, when a cell spans multiple lines (due to text wrapping).",null,null],[13,"Cell","","",3,null],[13,"First","","",3,null],[13,"Last","","",3,null],[4,"NewlineType","","",null,null],[13,"Lf","","",4,null],[13,"Cr","","",4,null],[13,"CrLf","","",4,null],[4,"SmartHomeEndType","","",null,null],[13,"Disabled","","",5,null],[13,"Before","","",5,null],[13,"After","","",5,null],[13,"Always","","",5,null],[0,"signal","","",null,null],[3,"Inhibit","sourceview::signal","Whether to propagate the signal to the default handler.",null,null],[12,"0","","",6,null],[0,"prelude","sourceview","",null,null],[8,"BufferExt","sourceview::prelude","Trait containing all `Buffer` methods.",null,null],[10,"backward_iter_to_source_mark","","Moves `iter` to the position of the previous `Mark` of the given category. Returns `true` if `iter` was moved. If `category` is NULL, the previous source mark can be of any category. ## `iter` an iterator. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"}],"output":{"name":"bool"}}],[10,"begin_not_undoable_action","","Marks the beginning of a not undoable action on the buffer, disabling the undo manager. Typically you would call this function before initially setting the contents of the buffer (e.g. when loading a file in a text editor).",7,{"inputs":[{"name":"self"}],"output":null}],[10,"can_redo","","Determines whether a source buffer can redo the last action (i.e. if the last operation was an undo).",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_undo","","Determines whether a source buffer can undo the last action.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"change_case","","Changes the case of the text between the specified iterators.",7,{"inputs":[{"name":"self"},{"name":"changecasetype"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"create_source_mark","","Creates a source mark in the `self` of category `category`. A source mark is a `gtk::TextMark` but organised into categories. Depending on the category a pixbuf can be specified that will be displayed along the line of the mark.",7,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"textiter"}],"output":{"generics":["mark"],"name":"option"}}],[10,"end_not_undoable_action","","Marks the end of a not undoable action on the buffer. When the last not undoable block is closed through the call to this function, the list of undo actions is cleared and the undo manager is re-enabled.",7,{"inputs":[{"name":"self"}],"output":null}],[10,"ensure_highlight","","Forces buffer to analyze and highlight the given area synchronously.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"forward_iter_to_source_mark","","Moves `iter` to the position of the next `Mark` of the given `category`. Returns `true` if `iter` was moved. If `category` is NULL, the next source mark can be of any category. ## `iter` an iterator. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_context_classes_at_iter","","Get all defined context classes at `iter`.",7,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_highlight_matching_brackets","","Determines whether bracket match highlighting is activated for the source buffer.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_highlight_syntax","","Determines whether syntax highlighting is activated in the source buffer.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_implicit_trailing_newline","","Feature: `v3_14`",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_language","","Returns the `Language` associated with the buffer, see `BufferExt::set_language`. The returned object should not be unreferenced by the user.",7,{"inputs":[{"name":"self"}],"output":{"generics":["language"],"name":"option"}}],[10,"get_max_undo_levels","","Determines the number of undo levels the buffer will track for buffer edits.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_source_marks_at_iter","","Returns the list of marks of the given category at `iter`. If `category` is `None` it returns all marks at `iter`. ## `iter` an iterator. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"}],"output":{"generics":["mark"],"name":"vec"}}],[10,"get_source_marks_at_line","","Returns the list of marks of the given category at `line`. If `category` is `None`, all marks at `line` are returned. ## `line` a line number. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":{"generics":["mark"],"name":"vec"}}],[10,"get_style_scheme","","Returns the `StyleScheme` associated with the buffer, see `BufferExt::set_style_scheme`. The returned object should not be unreferenced by the user.",7,{"inputs":[{"name":"self"}],"output":{"generics":["stylescheme"],"name":"option"}}],[10,"get_undo_manager","","Returns the `UndoManager` associated with the buffer, see `BufferExt::set_undo_manager`. The returned object should not be unreferenced by the user.",7,{"inputs":[{"name":"self"}],"output":{"generics":["undomanager"],"name":"option"}}],[10,"iter_backward_to_context_class_toggle","","Moves backward to the next toggle (on or off) of the context class. If no matching context class toggles are found, returns `false`, otherwise `true`. Does not return toggles located at `iter`, only toggles after `iter`. Sets `iter` to the location of the toggle, or to the end of the buffer if no toggle is found.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":{"name":"bool"}}],[10,"iter_forward_to_context_class_toggle","","Moves forward to the next toggle (on or off) of the context class. If no matching context class toggles are found, returns `false`, otherwise `true`. Does not return toggles located at `iter`, only toggles after `iter`. Sets `iter` to the location of the toggle, or to the end of the buffer if no toggle is found.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":{"name":"bool"}}],[10,"iter_has_context_class","","Check if the class `context_class` is set on `iter`.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":{"name":"bool"}}],[10,"join_lines","","Joins the lines of text between the specified iterators.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"redo","","Redoes the last undo operation. Use `BufferExt::can_redo` to check whether a call to this function will have any effect.",7,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_source_marks","","Remove all marks of `category` between `start` and `end` from the buffer. If `category` is NULL, all marks in the range will be removed. ## `start` a `gtk::TextIter`. ## `end` a `gtk::TextIter`. ## `category` category to search for, or `None`.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"p"}],"output":null}],[10,"set_highlight_matching_brackets","","Controls the bracket match highlighting function in the buffer. If activated, when you position your cursor over a bracket character (a parenthesis, a square bracket, etc.) the matching opening or closing bracket character will be highlighted. ## `highlight` `true` if you want matching brackets highlighted.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_highlight_syntax","","Controls whether syntax is highlighted in the buffer.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_implicit_trailing_newline","","Sets whether the `self` has an implicit trailing newline.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_language","","Associates a `Language` with the buffer.",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_max_undo_levels","","Sets the number of undo levels for user actions the buffer will track. If the number of user actions exceeds the limit set by this function, older actions will be discarded.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_style_scheme","","Sets a `StyleScheme` to be used by the buffer and the view.",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_undo_manager","","Set the buffer undo manager. If `manager` is `None` the default undo manager will be set. ## `manager` A `UndoManager` or `None`.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"sort_lines","","Sort the lines of text between the specified iterators.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"sortflags"},{"name":"i32"}],"output":null}],[10,"undo","","Undoes the last user action which modified the buffer. Use `BufferExt::can_undo` to check whether a call to this function will have any effect.",7,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_can_redo","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_can_undo","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_highlight_updated","","The ::highlight-updated signal is emitted when the syntax highlighting and [context classes][context-classes] are updated in a certain region of the `buffer`. ## `start` the start of the updated region ## `end` the end of the updated region",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_redo","","The ::redo signal is emitted to redo the last undo operation.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_source_mark_updated","","The ::source-mark-updated signal is emitted each time a mark is added to, moved or removed from the `buffer`. ## `mark` the `Mark`",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_undo","","The ::undo signal is emitted to undo the last user action which modified the buffer.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_redo_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_undo_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_matching_brackets_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_syntax_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_implicit_trailing_newline_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_undo_levels_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_scheme_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_undo_manager_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionExt","","Trait containing all `Completion` methods.",null,null],[10,"add_provider","","Add a new `CompletionProvider` to the completion object. This will add a reference `provider`, so make sure to unref your own copy when you no longer need it. ## `provider` a `CompletionProvider`.",8,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"block_interactive","","Block interactive completion. This can be used to disable interactive completion when inserting or deleting text from the buffer associated with the completion. Use `CompletionExt::unblock_interactive` to enable interactive completion again.",8,{"inputs":[{"name":"self"}],"output":null}],[10,"get_info_window","","The info widget is the window where the completion displays optional extra information of the proposal.",8,{"inputs":[{"name":"self"}],"output":{"generics":["completioninfo"],"name":"option"}}],[10,"get_providers","","Get list of providers registered on `self`. The returned list is owned by the completion and should not be freed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["completionprovider"],"name":"vec"}}],[10,"get_view","","The `View` associated with `self`, or `None` if the view has been destroyed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"hide","","Hides the completion if it is active (visible).",8,{"inputs":[{"name":"self"}],"output":null}],[10,"move_window","","Move the completion window to a specific iter.",8,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":null}],[10,"remove_provider","","Remove `provider` from the completion. ## `provider` a `CompletionProvider`.",8,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"show","","Starts a new completion with the specified `CompletionContext` and a list of potential candidate providers for completion.",8,null],[10,"unblock_interactive","","Unblock interactive completion. This can be used after using `CompletionExt::block_interactive` to enable interactive completion again.",8,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_accelerators","","Number of keyboard accelerators to show for the first proposals. For example, to activate the first proposal, the user can press `<keycombo>``<keycap>`Alt`</keycap>``<keycap>`1`</keycap>``</keycombo>`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_accelerators","","Number of keyboard accelerators to show for the first proposals. For example, to activate the first proposal, the user can press `<keycombo>``<keycap>`Alt`</keycap>``<keycap>`1`</keycap>``</keycombo>`.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_auto_complete_delay","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_auto_complete_delay","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_proposal_page_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_proposal_page_size","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_provider_page_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_provider_page_size","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_remember_info_visibility","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_remember_info_visibility","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_select_on_show","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_select_on_show","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_headers","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_headers","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_icons","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_icons","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_proposal","","The `Completion::activate-proposal` signal is a keybinding signal which gets emitted when the user initiates a proposal activation.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_proposal","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_hide","","Emitted when the completion window is hidden. The default handler will actually hide the window.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_hide","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","The `Completion::move-cursor` signal is a keybinding signal which gets emitted when the user initiates a cursor movement.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",8,{"inputs":[{"name":"self"},{"name":"scrollstep"},{"name":"i32"}],"output":null}],[10,"connect_move_page","","The `Completion::move-page` signal is a keybinding signal which gets emitted when the user initiates a page movement (i.e. switches between provider pages).",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_page","","",8,{"inputs":[{"name":"self"},{"name":"scrollstep"},{"name":"i32"}],"output":null}],[10,"connect_populate_context","","Emitted just before starting to populate the completion with providers. You can use this signal to add additional attributes in the context. ## `context` The `CompletionContext` for the current completion",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_populate_context","","",8,{"inputs":[{"name":"self"},{"name":"completioncontext"}],"output":null}],[10,"connect_show","","Emitted when the completion window is shown. The default handler will actually show the window.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_accelerators_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_auto_complete_delay_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_proposal_page_size_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_provider_page_size_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_remember_info_visibility_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_select_on_show_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_headers_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_icons_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_view_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionContextExt","","Trait containing all `CompletionContext` methods.",null,null],[10,"add_proposals","","Providers can use this function to add proposals to the completion. They can do so asynchronously by means of the `finished` argument. Providers must ensure that they always call this function with `finished` set to `true` once each population (even if no proposals need to be added). Population occurs when the `CompletionProvider::populate` function is called. ## `provider` a `CompletionProvider`. ## `proposals` The list of proposals to add. ## `finished` Whether the provider is finished adding proposals.",9,null],[10,"get_activation","","Get the context activation.",9,{"inputs":[{"name":"self"}],"output":{"name":"completionactivation"}}],[10,"get_iter","","Get the iter at which the completion was invoked. Providers can use this to determine how and if to match proposals. ## `iter` a `gtk::TextIter`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["textiter"],"name":"option"}}],[10,"set_property_activation","","The completion activation",9,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[10,"get_property_completion","","The `Completion` associated with the context.",9,{"inputs":[{"name":"self"}],"output":{"generics":["completion"],"name":"option"}}],[10,"connect_cancelled","","Emitted when the current population of proposals has been cancelled. Providers adding proposals asynchronously should connect to this signal to know when to cancel running proposal queries.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cancelled","","",9,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activation_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_completion_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionInfoExt","","Trait containing all `CompletionInfo` methods.",null,null],[10,"get_widget","","Get the current content widget.",10,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_widget","","Sets the content widget of the info window. See that the previous widget will lose a reference and it can be destroyed, so if you do not want this to happen you must use `gobject::Object::ref` before calling this method.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"connect_before_show","","This signal is emitted before any \"show\" management. You can connect to this signal if you want to change some properties or position before the real \"show\".",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_before_show","","",10,{"inputs":[{"name":"self"}],"output":null}],[8,"CompletionItemExt","","Trait containing all `CompletionItem` methods.",null,null],[10,"set_gicon","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_name","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_info","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_markup","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_text","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_property_gicon","","The `gio::Icon` for the icon to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"set_property_icon","","The `gdk_pixbuf::Pixbuf` for the icon to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"set_property_icon_name","","",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_info","","Optional extra information to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_label","","Label to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_markup","","Label with markup to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_text","","Proposal text.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_gicon_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_info_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_markup_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionProposalExt","","Trait containing all `CompletionProposal` methods.",null,null],[10,"changed","","Emits the \"changed\" signal on `self`. This should be called by implementations whenever the name, icon or info of the proposal has changed.",12,{"inputs":[{"name":"self"}],"output":null}],[10,"equal","","Get whether two proposal objects are the same. This is used to (together with `CompletionProposal::hash`) to match proposals in the completion model. By default, it uses direct equality (`g_direct_equal`). ## `other` a `CompletionProposal`.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_gicon","","Gets the `gio::Icon` for the icon of `self`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon","","Gets the `gdk_pixbuf::Pixbuf` for the icon of `self`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_name","","Gets the icon name of `self`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_info","","Gets extra information associated to the proposal. This information will be used to present the user with extra, detailed information about the selected proposal. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label","","Gets the label of `self`. The label is shown in the list of proposals as plain text. If you need any markup (such as bold or italic text), you have to implement `CompletionProposal::get_markup`. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_markup","","Gets the label of `self` with markup. The label is shown in the list of proposals and may contain markup. This will be used instead of `CompletionProposal::get_label` if implemented. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_text","","Gets the text of `self`. The text that is inserted into the text buffer when the proposal is activated by the default activation. You are free to implement a custom activation handler in the provider and not implement this function. For more information, see `CompletionProvider::activate_proposal`. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"hash","","Get the hash value of `self`. This is used to (together with `CompletionProposal::equal`) to match proposals in the completion model. By default, it uses a direct hash (`g_direct_hash`).",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_changed","","Emitted when the proposal has changed. The completion popup will react to this by updating the shown information.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_changed","","",12,{"inputs":[{"name":"self"}],"output":null}],[8,"CompletionProviderExt","","Trait containing all `CompletionProvider` methods.",null,null],[10,"activate_proposal","","Activate `proposal` at `iter`. When this functions returns `false`, the default activation of `proposal` will take place which replaces the word at `iter` with the text of `proposal` (see `CompletionProposal::get_text`).",13,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"get_activation","","Get with what kind of activation the provider should be activated.",13,{"inputs":[{"name":"self"}],"output":{"name":"completionactivation"}}],[10,"get_gicon","","Gets the `gio::Icon` for the icon of `self`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon","","Get the `gdk_pixbuf::Pixbuf` for the icon of the `self`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_name","","Gets the icon name of `self`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_info_widget","","Get a customized info widget to show extra information of a proposal. This allows for customized widgets on a proposal basis, although in general providers will have the same custom widget for all their proposals and `proposal` can be ignored. The implementation of this function is optional.",13,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_interactive_delay","","Get the delay in milliseconds before starting interactive completion for this provider. A value of -1 indicates to use the default value as set by the `Completion:auto-complete-delay` property.",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_name","","Get the name of the provider. This should be a translatable name for display to the user. For example: _(\"Document word completion provider\"). The returned string must be freed with `g_free`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_priority","","Get the provider priority. The priority determines the order in which proposals appear in the completion popup. Higher priorities are sorted before lower priorities. The default priority is 0.",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_start_iter","","Get the `gtk::TextIter` at which the completion for `proposal` starts. When implemented, this information is used to position the completion window accordingly when a proposal is selected in the completion window. The `proposal` text inside the completion window is aligned on `iter`.",13,{"inputs":[{"name":"self"},{"name":"completioncontext"},{"name":"p"}],"output":{"generics":["textiter"],"name":"option"}}],[10,"match_","","",13,{"inputs":[{"name":"self"},{"name":"completioncontext"}],"output":{"name":"bool"}}],[10,"populate","","Populate `context` with proposals from `self` added with the `CompletionContextExt::add_proposals` function. ## `context` a `CompletionContext`.",13,{"inputs":[{"name":"self"},{"name":"completioncontext"}],"output":null}],[10,"update_info","","Update extra information shown in `info` for `proposal`.",13,{"inputs":[{"name":"self"},{"name":"p"},{"name":"completioninfo"}],"output":null}],[8,"CompletionWordsExt","","Trait containing all `CompletionWords` methods.",null,null],[10,"register","","Registers `buffer` in the `self` provider. ## `buffer` a `gtk::TextBuffer`",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unregister","","Unregisters `buffer` from the `self` provider. ## `buffer` a `gtk::TextBuffer`",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_property_activation","","The type of activation.",14,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[10,"set_property_icon","","",14,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"set_property_interactive_delay","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_minimum_word_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_minimum_word_size","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_property_name","","",14,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_priority","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_proposals_batch_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_proposals_batch_size","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_scan_batch_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_scan_batch_size","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_property_activation_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_interactive_delay_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_word_size_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_priority_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_proposals_batch_size_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scan_batch_size_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileExt","","Trait containing all `File` methods.",null,null],[10,"check_file_on_disk","","Checks synchronously the file on disk, to know whether the file is externally modified, or has been deleted, and whether the file is read-only.",15,{"inputs":[{"name":"self"}],"output":null}],[10,"get_compression_type","","Feature: `v3_14`",15,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[10,"get_encoding","","The encoding is initially `None`. After a successful file loading or saving operation, the encoding is non-`None`.",15,{"inputs":[{"name":"self"}],"output":{"generics":["encoding"],"name":"option"}}],[10,"get_location","","Feature: `v3_14`",15,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_newline_type","","Feature: `v3_14`",15,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[10,"is_deleted","","Returns whether the file has been deleted. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_externally_modified","","Returns whether the file is externally modified. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_local","","Returns whether the file is local. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_readonly","","Returns whether the file is read-only. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_location","","Sets the location.",15,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_property_read_only","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_compression_type_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_encoding_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_newline_type_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_read_only_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileLoaderExt","","Trait containing all `FileLoader` methods.",null,null],[10,"get_buffer","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_compression_type","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[10,"get_encoding","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["encoding"],"name":"option"}}],[10,"get_file","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_location","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_newline_type","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[10,"set_candidate_encodings","","Sets the candidate encodings for the file loading. The encodings are tried in the same order as the list.",16,null],[10,"connect_property_buffer_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_file_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_stream_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileSaverExt","","Trait containing all `FileSaver` methods.",null,null],[10,"get_buffer","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_compression_type","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[10,"get_encoding","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["encoding"],"name":"option"}}],[10,"get_file","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_flags","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"name":"filesaverflags"}}],[10,"get_location","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_newline_type","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[10,"set_compression_type","","Sets the compression type. By default the compression type is taken from the `File`.",17,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":null}],[10,"set_encoding","","Sets the encoding. If `encoding` is `None`, the UTF-8 encoding will be set. By default the encoding is taken from the `File`.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_flags","","Feature: `v3_14`",17,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[10,"set_newline_type","","Sets the newline type. By default the newline type is taken from the `File`.",17,{"inputs":[{"name":"self"},{"name":"newlinetype"}],"output":null}],[10,"connect_property_buffer_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_compression_type_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_encoding_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_file_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flags_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_newline_type_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterExt","","Trait containing all `Gutter` methods.",null,null],[10,"get_renderer_at_pos","","Finds the `GutterRenderer` at (x, y). ## `x` The x position to get identified. ## `y` The y position to get identified.",18,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["gutterrenderer"],"name":"option"}}],[10,"get_view","","Feature: `v3_24`",18,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"get_window","","Get the `gdk::Window` of the gutter. The window will only be available when the gutter has at least one, non-zero width, cell renderer packed.",18,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_window_type","","Feature: `v3_24`",18,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[10,"insert","","Insert `renderer` into the gutter. If `renderer` is yet unowned then gutter claims its ownership. Otherwise just increases renderer's reference count. `renderer` cannot be already inserted to another gutter. ## `renderer` a gutter renderer (must inherit from `GutterRenderer`). ## `position` the renderer position.",18,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"queue_draw","","Invalidates the drawable area of the gutter. You can use this to force a redraw of the gutter if something has changed and needs to be redrawn.",18,{"inputs":[{"name":"self"}],"output":null}],[10,"remove","","Removes `renderer` from `self`. ## `renderer` a `GutterRenderer`.",18,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"reorder","","Reorders `renderer` in `self` to new `position`. ## `renderer` a `gtk::CellRenderer`. ## `position` the new renderer position.",18,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_padding","","Deprecated since 3.12",18,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_property_view","","The `View` of the gutter.",18,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"get_property_window_type","","",18,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[10,"get_property_xpad","","The x-padding.",18,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_xpad","","The x-padding.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_ypad","","The y-padding.",18,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_ypad","","The y-padding.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_view_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_type_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterRendererExt","","Trait containing all `GutterRenderer` methods.",null,null],[10,"activate","","Emits the `GutterRenderer::activate` signal of the renderer. This is called from `Gutter` and should never have to be called manually. ## `iter` a `gtk::TextIter` at the start of the line where the renderer is activated ## `area` a `gdk::Rectangle` of the cell area where the renderer is activated ## `event` the event that triggered the activation",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"rectangle"},{"name":"event"}],"output":null}],[10,"begin","","Called when drawing a region begins. The region to be drawn is indicated by `start` and `end`. The purpose is to allow the implementation to precompute some state before the draw method is called for each cell. ## `cr` a `cairo::Context` ## `background_area` a `gdk::Rectangle` ## `cell_area` a `gdk::Rectangle` ## `start` a `gtk::TextIter` ## `end` a `gtk::TextIter`",19,{"inputs":[{"name":"self"},{"name":"context"},{"name":"rectangle"},{"name":"rectangle"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"draw","","Main renderering method. Implementations should implement this method to draw onto the cairo context. The `background_area` indicates the total area of the cell to be drawn. The `cell_area` indicates the area where content can be drawn (text, images, etc).",19,{"inputs":[{"name":"self"},{"name":"context"},{"name":"rectangle"},{"name":"rectangle"},{"name":"textiter"},{"name":"textiter"},{"name":"gutterrendererstate"}],"output":null}],[10,"end","","Called when drawing a region of lines has ended.",19,{"inputs":[{"name":"self"}],"output":null}],[10,"get_alignment","","Get the x-alignment and y-alignment of the gutter renderer. ## `xalign` return location for the x-alignment,  or `None` to ignore. ## `yalign` return location for the y-alignment,  or `None` to ignore.",19,null],[10,"get_alignment_mode","","Get the alignment mode. The alignment mode describes the manner in which the renderer is aligned (see :xalign and :yalign).",19,{"inputs":[{"name":"self"}],"output":{"name":"gutterrendereralignmentmode"}}],[10,"get_background","","Get the background color of the renderer. ## `color` return value for a `gdk::RGBA`",19,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"get_padding","","Get the x-padding and y-padding of the gutter renderer. ## `xpad` return location for the x-padding,  or `None` to ignore. ## `ypad` return location for the y-padding,  or `None` to ignore.",19,null],[10,"get_size","","Get the size of the renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_view","","Get the view associated to the gutter renderer",19,{"inputs":[{"name":"self"}],"output":{"generics":["textview"],"name":"option"}}],[10,"get_visible","","Get whether the gutter renderer is visible.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_window_type","","Get the `gtk::TextWindowType` associated with the gutter renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[10,"query_activatable","","Get whether the renderer is activatable at the location in `event`. This is called from `Gutter` to determine whether a renderer is activatable using the mouse pointer. ## `iter` a `gtk::TextIter` at the start of the line to be activated ## `area` a `gdk::Rectangle` of the cell area to be activated ## `event` the event that triggered the query",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"rectangle"},{"name":"event"}],"output":{"name":"bool"}}],[10,"query_data","","Emit the `GutterRenderer::query-data` signal. This function is called to query for data just before rendering a cell. This is called from the `Gutter`. Implementations can override the default signal handler or can connect a signal handler externally to the `GutterRenderer::query-data` signal. ## `start` a `gtk::TextIter`. ## `end` a `gtk::TextIter`. ## `state` a `GutterRendererState`.",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"gutterrendererstate"}],"output":null}],[10,"query_tooltip","","Emits the `GutterRenderer::query-tooltip` signal. This function is called from `Gutter`. Implementations can override the default signal handler or can connect to the signal externally. ## `iter` a `gtk::TextIter`. ## `area` a `gdk::Rectangle`. ## `x` The x position of the tooltip. ## `y` The y position of the tooltip. ## `tooltip` a `gtk::Tooltip`.",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"rectangle"},{"name":"i32"},{"name":"i32"},{"name":"tooltip"}],"output":{"name":"bool"}}],[10,"queue_draw","","Emits the `GutterRenderer::queue-draw` signal of the renderer. Call this from an implementation to inform that the renderer has changed such that it needs to redraw.",19,{"inputs":[{"name":"self"}],"output":null}],[10,"set_alignment","","Set the alignment of the gutter renderer. Both `xalign` and `yalign` can be -1, which means the values will not be changed (this allows changing only one of the values).",19,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_alignment_mode","","Set the alignment mode. The alignment mode describes the manner in which the renderer is aligned (see :xalign and :yalign). ## `mode` a `GutterRendererAlignmentMode`",19,{"inputs":[{"name":"self"},{"name":"gutterrendereralignmentmode"}],"output":null}],[10,"set_background","","Set the background color of the renderer. If `color` is set to `None`, the renderer will not have a background color. ## `color` a `gdk::RGBA` or `None`",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_padding","","Set the padding of the gutter renderer. Both `xpad` and `ypad` can be -1, which means the values will not be changed (this allows changing only one of the values).",19,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_size","","Sets the size of the renderer. A value of -1 specifies that the size is to be determined dynamically. ## `size` the size",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_visible","","Set whether the gutter renderer is visible. ## `visible` the visibility",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_background_rgba","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_background_rgba","","",19,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_background_set","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_xalign","","The horizontal alignment of the renderer. Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","The horizontal alignment of the renderer. Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xpad","","The left and right padding of the renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_xpad","","The left and right padding of the renderer.",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_yalign","","The vertical alignment of the renderer. Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","The vertical alignment of the renderer. Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_ypad","","The top and bottom padding of the renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_ypad","","The top and bottom padding of the renderer.",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_activate","","The ::activate signal is emitted when the renderer is activated. ## `iter` a `gtk::TextIter` ## `area` a `gdk::Rectangle` ## `event` the event that caused the activation",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_activatable","","The ::query-activatable signal is emitted when the renderer can possibly be activated. ## `iter` a `gtk::TextIter` ## `area` a `gdk::Rectangle` ## `event` the `GdkEvent` that is causing the activatable query",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_data","","The ::query-data signal is emitted when the renderer needs to be filled with data just before a cell is drawn. This can be used by general renderer implementations to allow render data to be filled in externally. ## `start` a `gtk::TextIter` ## `end` a `gtk::TextIter` ## `state` the renderer state",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_tooltip","","The ::query-tooltip signal is emitted when the renderer can show a tooltip. ## `iter` a `gtk::TextIter` ## `area` a `gdk::Rectangle` ## `x` the x position (in window coordinates) ## `y` the y position (in window coordinates) ## `tooltip` a `gtk::Tooltip`",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_queue_draw","","The ::queue-draw signal is emitted when the renderer needs to be redrawn. Use `GutterRendererExt::queue_draw` to emit this signal from an implementation of the `GutterRenderer` interface.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alignment_mode_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_view_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_type_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterRendererPixbufExt","","Trait containing all `GutterRendererPixbuf` methods.",null,null],[10,"get_gicon","","Get the gicon of the renderer",20,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon_name","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_pixbuf","","Get the pixbuf of the renderer.",20,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_stock_id","","Deprecated since 3.10",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_gicon","","`icon` the icon, or `None`.",20,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon_name","","`icon_name` the icon name, or `None`.",20,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_pixbuf","","`pixbuf` the pixbuf, or `None`.",20,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_stock_id","","Deprecated since 3.10",20,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_property_gicon_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterRendererTextExt","","Trait containing all `GutterRendererText` methods.",null,null],[10,"measure","","Measures the text provided using the pango layout used by the `GutterRendererText`. ## `text` the text to measure. ## `width` location to store the width of the text in pixels,  or `None`. ## `height` location to store the height of the text in  pixels, or `None`.",21,null],[10,"measure_markup","","Measures the pango markup provided using the pango layout used by the `GutterRendererText`. ## `markup` the pango markup to measure. ## `width` location to store the width of the text in pixels,  or `None`. ## `height` location to store the height of the text in  pixels, or `None`.",21,null],[10,"set_markup","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_text","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_markup","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_text","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_markup_notify","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LanguageExt","","Trait containing all `Language` methods.",null,null],[10,"get_globs","","Returns the globs associated to this language. This is just an utility wrapper around `LanguageExt::get_metadata` to retrieve the \"globs\" metadata property and split it into an array.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_hidden","","Returns whether the language should be hidden from the user.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_id","","Returns the ID of the language. The ID is not locale-dependent. The returned string is owned by `self` and should not be freed or modified.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_metadata","","`name` metadata property name.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mime_types","","Returns the mime types associated to this language. This is just an utility wrapper around `LanguageExt::get_metadata` to retrieve the \"mimetypes\" metadata property and split it into an array.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_name","","Returns the localized name of the language. The returned string is owned by `self` and should not be freed or modified.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_section","","Returns the localized section of the language. Each language belong to a section (ex. HTML belogs to the Markup section). The returned string is owned by `self` and should not be freed or modified.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_style_fallback","","Returns the ID of the style to use if the specified `style_id` is not present in the current style scheme.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_style_ids","","Returns the ids of the styles defined by this `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_style_name","","Returns the name of the style with ID `style_id` defined by this `self`. ## `style_id` a style ID.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_hidden_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_id_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_section_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LanguageManagerExt","","Trait containing all `LanguageManager` methods.",null,null],[10,"get_language","","Gets the `Language` identified by the given `id` in the language manager. ## `id` a language id.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["language"],"name":"option"}}],[10,"get_language_ids","","Returns the ids of the available languages.",23,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_search_path","","Gets the list directories where `self` looks for language files.",23,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"guess_language","","Picks a `Language` for given file name and content type, according to the information in lang files. Either `filename` or `content_type` may be `None`. This function can be used as follows:",23,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["language"],"name":"option"}}],[10,"set_search_path","","Sets the list of directories where the `self` looks for language files. If `dirs` is `None`, the search path is reset to default.",23,null],[10,"connect_property_language_ids_notify","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_path_notify","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MapExt","","Trait containing all `Map` methods.",null,null],[10,"get_view","","Gets the `Map:view` property, which is the view this widget is mapping.",24,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"set_view","","Sets the view that `self` will be doing the mapping to.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_view","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"set_property_view","","",24,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"connect_property_view_notify","","",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MarkExt","","Trait containing all `Mark` methods.",null,null],[10,"get_category","","Returns the mark category.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"next","","Returns the next `Mark` in the buffer or `None` if the mark was not added to a buffer. If there is no next mark, `None` will be returned.",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["mark"],"name":"option"}}],[10,"prev","","Returns the previous `Mark` in the buffer or `None` if the mark was not added to a buffer. If there is no previous mark, `None` is returned.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["mark"],"name":"option"}}],[10,"connect_property_category_notify","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MarkAttributesExt","","Trait containing all `MarkAttributes` methods.",null,null],[10,"get_background","","Stores background color in `background`. ## `background` a `gdk::RGBA`.",26,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"get_gicon","","Gets a `gio::Icon` to be used as a base for rendered icon. Note that the icon can be `None` if it wasn't set earlier.",26,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon_name","","Gets a name of an icon to be used as a base for rendered icon. Note that the icon name can be `None` if it wasn't set earlier.",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_stock_id","","Gets a stock id of an icon used by this attributes. Note that the stock id can be `None` if it wasn't set earlier.",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_markup","","Queries for a tooltip by emitting a `MarkAttributes::query-tooltip-markup` signal. The tooltip may contain a markup. ## `mark` a `Mark`.",26,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_text","","Queries for a tooltip by emitting a `MarkAttributes::query-tooltip-text` signal. The tooltip is a plain text. ## `mark` a `Mark`.",26,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_background","","Sets background color to the one given in `background`. ## `background` a `gdk::RGBA`.",26,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_gicon","","Sets an icon to be used as a base for rendered icon. ## `gicon` a `gio::Icon` to be used.",26,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_name","","Sets a name of an icon to be used as a base for rendered icon. ## `icon_name` name of an icon to be used.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_pixbuf","","Sets a pixbuf to be used as a base for rendered icon. ## `pixbuf` a `gdk_pixbuf::Pixbuf` to be used.",26,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"set_stock_id","","Sets stock id to be used as a base for rendered icon.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_pixbuf","","A `gdk_pixbuf::Pixbuf` that may be a base of a rendered icon.",26,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"connect_query_tooltip_markup","","The code should connect to this signal to provide a tooltip for given `mark`. The tooltip can contain a markup. ## `mark` The `Mark`.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_tooltip_text","","The code should connect to this signal to provide a tooltip for given `mark`. The tooltip should be just a plain text. ## `mark` The `Mark`.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintCompositorExt","","Trait containing all `PrintCompositor` methods.",null,null],[10,"get_body_font_name","","Returns the name of the font used to print the text body. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_bottom_margin","","Gets the bottom margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_buffer","","Gets the `Buffer` associated with the compositor. The returned object reference is owned by the compositor object and should not be unreferenced.",27,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_footer_font_name","","Returns the name of the font used to print the page footer. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_header_font_name","","Returns the name of the font used to print the page header. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_highlight_syntax","","Determines whether the printed text will be highlighted according to the buffer rules. Note that highlighting will happen only if the buffer to print has highlighting activated.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_left_margin","","Gets the left margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_line_numbers_font_name","","Returns the name of the font used to print line numbers on the left margin. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_n_pages","","Returns the number of pages in the document or `<code>`-1`</code>` if the document has not been completely paginated.",27,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_pagination_progress","","Returns the current fraction of the document pagination that has been completed.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_print_footer","","Determines if a footer is set to be printed for each page. A footer will be printed if this function returns `true` `<emphasis>`and`</emphasis>` some format strings have been specified with `PrintCompositorExt::set_footer_format`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_print_header","","Determines if a header is set to be printed for each page. A header will be printed if this function returns `true` `<emphasis>`and`</emphasis>` some format strings have been specified with `PrintCompositorExt::set_header_format`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_print_line_numbers","","Returns the interval used for line number printing. If the value is 0, no line numbers will be printed. The default value is 1 (i.e. numbers printed in all lines).",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_right_margin","","Gets the right margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_tab_width","","Returns the width of tabulation in characters for printed text.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_top_margin","","Gets the top margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_wrap_mode","","Gets the line wrapping mode for the printed text.",27,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_body_font_name","","Sets the default font for the printed text.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_bottom_margin","","Sets the bottom margin used by `self`. ## `margin` the new bottom margin in units of `unit`. ## `unit` the units for `margin`.",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_footer_font_name","","Sets the font for printing the page footer. If `None` is supplied, the default font (i.e. the one being used for the text) will be used instead.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_footer_format","","See `PrintCompositorExt::set_header_format` for more information about the parameters. ## `separator` `true` if you want a separator line to be printed. ## `left` a format string to print on the left of the footer. ## `center` a format string to print on the center of the footer. ## `right` a format string to print on the right of the footer.",27,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"set_header_font_name","","Sets the font for printing the page header. If `None` is supplied, the default font (i.e. the one being used for the text) will be used instead.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_header_format","","Sets strftime like header format strings, to be printed on the left, center and right of the top of each page. The strings may include strftime(3) codes which will be expanded at print time. A subset of `strftime` codes are accepted, see `glib::DateTime::format` for more details on the accepted format specifiers. Additionally the following format specifiers are accepted: - `N`: the page number - `Q`: the page count.",27,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"set_highlight_syntax","","Sets whether the printed text will be highlighted according to the buffer rules. Both color and font style are applied.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_left_margin","","Sets the left margin used by `self`. ## `margin` the new left margin in units of `unit`. ## `unit` the units for `margin`.",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_line_numbers_font_name","","Sets the font for printing line numbers on the left margin. If `None` is supplied, the default font (i.e. the one being used for the text) will be used instead.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_print_footer","","Sets whether you want to print a footer in each page. The footer consists of three pieces of text and an optional line separator, configurable with `PrintCompositorExt::set_footer_format`.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_print_header","","Sets whether you want to print a header in each page. The header consists of three pieces of text and an optional line separator, configurable with `PrintCompositorExt::set_header_format`.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_print_line_numbers","","Sets the interval for printed line numbers. If `interval` is 0 no numbers will be printed. If greater than 0, a number will be printed every `interval` lines (i.e. 1 will print all line numbers).",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_right_margin","","Sets the right margin used by `self`. ## `margin` the new right margin in units of `unit`. ## `unit` the units for `margin`.",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_tab_width","","Sets the width of tabulation in characters for printed text.",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_top_margin","","Sets the top margin used by `self`. ## `margin` the new top margin in units of `unit` ## `unit` the units for `margin`",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_wrap_mode","","Sets the line wrapping mode for the printed text.",27,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"connect_property_body_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_footer_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_header_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_syntax_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_line_numbers_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_pages_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_footer_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_header_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_line_numbers_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tab_width_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RegionExt","","",null,null],[10,"add_region","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add_subregion","","",28,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"get_bounds","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_buffer","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[10,"intersect_region","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["region"],"name":"option"}}],[10,"intersect_subregion","","",28,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":{"generics":["region"],"name":"option"}}],[10,"is_empty","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"subtract_region","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"subtract_subregion","","",28,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"to_string","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"connect_property_buffer_notify","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchContextExt","","Trait containing all `SearchContext` methods.",null,null],[10,"backward","","Synchronous backward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"backward2","","Synchronous backward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"backward_async","","The asynchronous version of `SearchContextExt::backward2`.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"},{"name":"q"}],"output":null}],[10,"forward","","Synchronous forward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"forward2","","Synchronous forward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"forward_async","","The asynchronous version of `SearchContextExt::forward2`.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_buffer","","Feature: `v3_10`",29,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_highlight","","Feature: `v3_10`",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_match_style","","Feature: `v3_16`",29,{"inputs":[{"name":"self"}],"output":{"generics":["style"],"name":"option"}}],[10,"get_occurrence_position","","Gets the position of a search occurrence. If the buffer is not already fully scanned, the position may be unknown, and -1 is returned. If 0 is returned, it means that this part of the buffer has already been scanned, and that `match_start` and `match_end` don't delimit an occurrence.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":{"name":"i32"}}],[10,"get_occurrences_count","","Gets the total number of search occurrences. If the buffer is not already fully scanned, the total number of occurrences is unknown, and -1 is returned.",29,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_regex_error","","Regular expression patterns must follow certain rules. If `SearchSettings:search-text` breaks a rule, the error can be retrieved with this function. The error domain is `G_REGEX_ERROR`.",29,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[10,"get_settings","","Feature: `v3_10`",29,{"inputs":[{"name":"self"}],"output":{"generics":["searchsettings"],"name":"option"}}],[10,"replace","","Replaces a search match by another text. If `match_start` and `match_end` doesn't correspond to a search match, `false` is returned.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"replace2","","Replaces a search match by another text. If `match_start` and `match_end` doesn't correspond to a search match, `false` is returned.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"replace_all","","Replaces all search matches by another text. It is a synchronous function, so it can block the user interface.",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_highlight","","Enables or disables the search occurrences highlighting.",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_match_style","","Set the style to apply on search matches. If `match_style` is `None`, default theme's scheme 'match-style' will be used. To enable or disable the search highlighting, use `SearchContextExt::set_highlight`.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_settings","","Associate a `SearchSettings` with the search context. If `settings` is `None`, a new one will be created.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_property_buffer_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_match_style_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_occurrences_count_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_regex_error_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_settings_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchSettingsExt","","Trait containing all `SearchSettings` methods.",null,null],[10,"get_at_word_boundaries","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_case_sensitive","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_regex_enabled","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_search_text","","Gets the text to search. The return value must not be freed.",30,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_wrap_around","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_at_word_boundaries","","Change whether the search is done at word boundaries. If `at_word_boundaries` is `true`, a search match must start and end a word. The match can span multiple words. See also `gtk::TextIter::starts_word` and `gtk::TextIter::ends_word`.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_case_sensitive","","Enables or disables the case sensitivity for the search.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_regex_enabled","","Enables or disables whether to search by regular expressions. If enabled, the `SearchSettings:search-text` property contains the pattern of the regular expression.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_search_text","","Sets the text to search. If `text` is `None` or is empty, the search will be disabled. A copy of `text` will be made, so you can safely free `text` after a call to this function.",30,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_wrap_around","","Enables or disables the wrap around search. If `wrap_around` is `true`, the forward search continues at the beginning of the buffer if no search occurrences are found. Similarly, the backward search continues to search at the end of the buffer.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_at_word_boundaries_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_case_sensitive_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_regex_enabled_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_text_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_around_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpaceDrawerExt","","Trait containing all `SpaceDrawer` methods.",null,null],[10,"bind_matrix_setting","","Binds the `SpaceDrawer:matrix` property to a `gio::Settings` key.",31,{"inputs":[{"name":"self"},{"name":"settings"},{"name":"str"},{"name":"settingsbindflags"}],"output":null}],[10,"get_enable_matrix","","Feature: `v3_24`",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_matrix","","Gets the value of the `SpaceDrawer:matrix` property, as a `glib::Variant`. An empty array can be returned in case the matrix is a zero matrix.",31,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_types_for_locations","","If only one location is specified, this function returns what kind of white spaces are drawn at that location. The value is retrieved from the `SpaceDrawer:matrix` property.",31,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"spacetypeflags"}}],[10,"set_enable_matrix","","Sets whether the `SpaceDrawer:matrix` property is enabled.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_matrix","","Sets a new value to the `SpaceDrawer:matrix` property, as a `glib::Variant`. If `matrix` is `None`, then an empty array is set.",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_types_for_locations","","Modifies the `SpaceDrawer:matrix` property at the specified `locations`.",31,{"inputs":[{"name":"self"},{"name":"spacelocationflags"},{"name":"spacetypeflags"}],"output":null}],[10,"connect_property_enable_matrix_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_matrix_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleExt","","Trait containing all `Style` methods.",null,null],[10,"get_property_background","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_background_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_bold","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_bold_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_foreground","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_foreground_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_italic","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_italic_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_line_background","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_line_background_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_pango_underline","","",32,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[10,"get_property_scale","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_scale_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_strikethrough","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_strikethrough_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_underline","","Deprecated since 3.18",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_underline_color","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_underline_color_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_underline_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_background_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_bold_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_bold_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_italic_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_italic_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_line_background_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_line_background_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pango_underline_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_color_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_color_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleSchemeExt","","Trait containing all `StyleScheme` methods.",null,null],[10,"get_authors","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_description","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_filename","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_id","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_style","","`style_id` id of the style to retrieve.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["style"],"name":"option"}}],[10,"connect_property_description_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filename_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_id_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleSchemeChooserExt","","Trait containing all `StyleSchemeChooser` methods.",null,null],[10,"get_style_scheme","","Gets the currently-selected scheme.",34,{"inputs":[{"name":"self"}],"output":{"generics":["stylescheme"],"name":"option"}}],[10,"set_style_scheme","","Sets the scheme.",34,{"inputs":[{"name":"self"},{"name":"stylescheme"}],"output":null}],[10,"connect_property_style_scheme_notify","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleSchemeManagerExt","","Trait containing all `StyleSchemeManager` methods.",null,null],[10,"append_search_path","","Appends `path` to the list of directories where the `self` looks for style scheme files. See `StyleSchemeManagerExt::set_search_path` for details. ## `path` a directory or a filename.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"force_rescan","","Mark any currently cached information about the available style scehems as invalid. All the available style schemes will be reloaded next time the `self` is accessed.",35,{"inputs":[{"name":"self"}],"output":null}],[10,"get_scheme","","Looks up style scheme by id. ## `scheme_id` style scheme id to find.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["stylescheme"],"name":"option"}}],[10,"get_scheme_ids","","Returns the ids of the available style schemes.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_search_path","","Returns the current search path for the `self`. See `StyleSchemeManagerExt::set_search_path` for details.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"prepend_search_path","","Prepends `path` to the list of directories where the `self` looks for style scheme files. See `StyleSchemeManagerExt::set_search_path` for details. ## `path` a directory or a filename.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_search_path","","Sets the list of directories where the `self` looks for style scheme files. If `path` is `None`, the search path is reset to default. ## `path`",35,null],[10,"connect_property_scheme_ids_notify","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_path_notify","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TagExt","","Trait containing all `Tag` methods.",null,null],[10,"get_property_draw_spaces","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_draw_spaces","","",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_draw_spaces_set","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_draw_spaces_set","","",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_draw_spaces_notify","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_spaces_set_notify","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"UndoManagerExt","","Trait containing all `UndoManager` methods.",null,null],[10,"begin_not_undoable_action","","Begin a not undoable action on the buffer. All changes between this call and the call to `UndoManager::end_not_undoable_action` cannot be undone. This function should be re-entrant.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"can_redo","","Get whether there are redo operations available.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_redo_changed","","Emits the `UndoManager::can-redo-changed` signal.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"can_undo","","Get whether there are undo operations available.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_undo_changed","","Emits the `UndoManager::can-undo-changed` signal.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"end_not_undoable_action","","Ends a not undoable action on the buffer.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"redo","","Perform a single redo. Calling this function when there are no redo operations available is an error. Use `UndoManager::can_redo` to find out if there are redo operations available.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"undo","","Perform a single undo. Calling this function when there are no undo operations available is an error. Use `UndoManager::can_undo` to find out if there are undo operations available.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_can_redo_changed","","Emitted when the ability to redo has changed.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_can_redo_changed","","",37,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_can_undo_changed","","Emitted when the ability to undo has changed.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_can_undo_changed","","",37,{"inputs":[{"name":"self"}],"output":null}],[8,"ViewExt","","Trait containing all `View` methods.",null,null],[10,"get_auto_indent","","Returns whether auto-indentation of text is enabled.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_background_pattern","","Returns the `BackgroundPatternType` specifying if and how the background pattern should be displayed for this `self`.",38,{"inputs":[{"name":"self"}],"output":{"name":"backgroundpatterntype"}}],[10,"get_completion","","Gets the `Completion` associated with `self`. The returned object is guaranteed to be the same for the lifetime of `self`. Each `View` object has a different `Completion`.",38,{"inputs":[{"name":"self"}],"output":{"generics":["completion"],"name":"option"}}],[10,"get_draw_spaces","","Returns the `DrawSpacesFlags` specifying if and how spaces should be displayed for this `self`.",38,{"inputs":[{"name":"self"}],"output":{"name":"drawspacesflags"}}],[10,"get_gutter","","Returns the `Gutter` object associated with `window_type` for `self`. Only GTK_TEXT_WINDOW_LEFT and GTK_TEXT_WINDOW_RIGHT are supported, respectively corresponding to the left and right gutter. The line numbers and mark category icons are rendered in the left gutter. ## `window_type` the gutter window type.",38,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"generics":["gutter"],"name":"option"}}],[10,"get_highlight_current_line","","Returns whether the current line is highlighted.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_indent_on_tab","","Returns whether when the tab key is pressed the current selection should get indented instead of replaced with the \\t character.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_indent_width","","Returns the number of spaces to use for each step of indent. See `ViewExt::set_indent_width` for details.",38,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_insert_spaces_instead_of_tabs","","Returns whether when inserting a tabulator character it should be replaced by a group of space characters.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_right_margin_position","","Gets the position of the right margin in the given `self`.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_show_line_marks","","Returns whether line marks are displayed beside the text.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_line_numbers","","Returns whether line numbers are displayed beside the text.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_right_margin","","Returns whether a right margin is displayed.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_smart_backspace","","Returns `true` if pressing the Backspace key will try to delete spaces up to the previous tab stop.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_smart_home_end","","Returns a `SmartHomeEndType` end value specifying how the cursor will move when HOME and END keys are pressed.",38,{"inputs":[{"name":"self"}],"output":{"name":"smarthomeendtype"}}],[10,"get_space_drawer","","Gets the `SpaceDrawer` associated with `self`. The returned object is guaranteed to be the same for the lifetime of `self`. Each `View` object has a different `SpaceDrawer`.",38,{"inputs":[{"name":"self"}],"output":{"generics":["spacedrawer"],"name":"option"}}],[10,"get_tab_width","","Returns the width of tabulation in characters.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_visual_column","","Determines the visual column at `iter` taking into consideration the `View:tab-width` of `self`. ## `iter` a position in `self`.",38,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"u32"}}],[10,"indent_lines","","Insert one indentation level at the beginning of the specified lines.",38,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"set_auto_indent","","If `true` auto-indentation of text is enabled.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_background_pattern","","Set if and how the background pattern should be displayed.",38,{"inputs":[{"name":"self"},{"name":"backgroundpatterntype"}],"output":null}],[10,"set_draw_spaces","","Set if and how the spaces should be visualized. Specifying `flags` as 0 will disable display of spaces.",38,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[10,"set_highlight_current_line","","If `highlight` is `true` the current line will be highlighted. ## `highlight` whether to highlight the current line.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_indent_on_tab","","If `true`, when the tab key is pressed when several lines are selected, the selected lines are indented of one level instead of being replaced with a \\t character. Shift+Tab unindents the selection.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_indent_width","","Sets the number of spaces to use for each step of indent when the tab key is pressed. If `width` is -1, the value of the `View:tab-width` property will be used.",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_insert_spaces_instead_of_tabs","","If `true` a tab key pressed is replaced by a group of space characters. Of course it is still possible to insert a real \\t programmatically with the `gtk::TextBuffer` API. ## `enable` whether to insert spaces instead of tabs.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mark_attributes","","Sets attributes and priority for the `category`. ## `category` the category. ## `attributes` mark attributes. ## `priority` priority of the category.",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"markattributes"},{"name":"i32"}],"output":null}],[10,"set_right_margin_position","","Sets the position of the right margin in the given `self`. ## `pos` the width in characters where to position the right margin.",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_show_line_marks","","If `true` line marks will be displayed beside the text. ## `show` whether line marks should be displayed.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_line_numbers","","If `true` line numbers will be displayed beside the text. ## `show` whether line numbers should be displayed.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_right_margin","","If `true` a right margin is displayed. ## `show` whether to show a right margin.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_smart_backspace","","When set to `true`, pressing the Backspace key will try to delete spaces up to the previous tab stop.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_smart_home_end","","Set the desired movement of the cursor when HOME and END keys are pressed. ## `smart_home_end` the desired behavior among `SmartHomeEndType`.",38,{"inputs":[{"name":"self"},{"name":"smarthomeendtype"}],"output":null}],[10,"set_tab_width","","Sets the width of tabulation in characters. The `gtk::TextBuffer` still contains \\t characters, but they can take a different visual width in a `View` widget. ## `width` width of tab in characters.",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"unindent_lines","","Removes one indentation level at the beginning of the specified lines.",38,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"connect_change_case","","Keybinding signal to change case of the text at the current cursor position.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_change_case","","",38,{"inputs":[{"name":"self"},{"name":"changecasetype"}],"output":null}],[10,"connect_change_number","","Keybinding signal to edit a number at the current cursor position.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_change_number","","",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_join_lines","","Keybinding signal to join the lines currently selected.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_join_lines","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_line_mark_activated","","Emitted when a line mark has been activated (for instance when there was a button press in the line marks gutter). You can use `iter` to determine on which line the activation took place. ## `iter` a `gtk::TextIter` ## `event` the `GdkEvent` that activated the event",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_lines","","The ::move-lines signal is a keybinding which gets emitted when the user initiates moving a line. The default binding key is Alt+Up/Down arrow. And moves the currently selected lines, or the current line by `count`. For the moment, only `count` of -1 or 1 is valid.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_lines","","",38,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"i32"}],"output":null}],[10,"connect_move_to_matching_bracket","","Keybinding signal to move the cursor to the matching bracket.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_to_matching_bracket","","",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_move_words","","The ::move-words signal is a keybinding which gets emitted when the user initiates moving a word. The default binding key is Alt+Left/Right Arrow and moves the current selection, or the current word by one word. ## `count` the number of words to move over",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_words","","",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_redo","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_redo","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_show_completion","","The ::show-completion signal is a key binding signal which gets emitted when the user requests a completion, by pressing `<keycombo>``<keycap>`Control`</keycap>``<keycap>`space`</keycap>``</keycombo>`.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show_completion","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_smart_home_end","","Emitted when a the cursor was moved according to the smart home end setting. The signal is emitted after the cursor is moved, but during the `gtk::TextView`::move-cursor action. This can be used to find out whether the cursor was moved by a normal home/end or by a smart home/end. ## `iter` a `gtk::TextIter` ## `count` the count",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_undo","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_undo","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_auto_indent_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_pattern_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_completion_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_spaces_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_current_line_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_on_tab_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_width_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_insert_spaces_instead_of_tabs_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_position_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_line_marks_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_line_numbers_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_right_margin_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_smart_backspace_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_smart_home_end_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_space_drawer_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tab_width_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","sourceview","",39,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"static_type","","",39,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new source buffer. ## `table` a `gtk::TextTagTable`, or `None` to create a new one.",39,{"inputs":[{"name":"p"}],"output":{"name":"buffer"}}],[11,"new_with_language","","Creates a new source buffer using the highlighting patterns in `language`. This is equivalent to creating a new source buffer with a new tag table and then calling `BufferExt::set_language`. ## `language` a `Language`.",39,{"inputs":[{"name":"language"}],"output":{"name":"buffer"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"completion"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"static_type","","",40,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"completioncontext"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"static_type","","",41,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"completioninfo"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"static_type","","",42,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns",42,{"inputs":[],"output":{"name":"completioninfo"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"completionitem"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"static_type","","",43,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CompletionItem` with label `label`, icon `icon` and extra information `info`. Both `icon` and `info` can be `None` in which case there will be no icon shown and no extra information available.",43,{"inputs":[{"name":"str"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":{"name":"completionitem"}}],[11,"new_from_stock","","Creates a new `CompletionItem` from a stock item. If `label` is `None`, the stock label will be used.",43,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"q"}],"output":{"name":"completionitem"}}],[11,"new_with_markup","","Create a new `CompletionItem` with markup label `markup`, icon `icon` and extra information `info`. Both `icon` and `info` can be `None` in which case there will be no icon shown and no extra information available.",43,{"inputs":[{"name":"str"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":{"name":"completionitem"}}],[11,"new2","","Creates a new `CompletionItem`. The desired properties need to be set afterwards.",43,{"inputs":[],"output":{"generics":["completionitem"],"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"completionproposal"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"static_type","","",44,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"completionprovider"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"static_type","","",45,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"completionwords"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"static_type","","",46,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","`name` The name for the provider, or `None`. ## `icon` A specific icon for the provider, or `None`.",46,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"completionwords"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"static_type","","",47,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Feature: `v3_14`",47,{"inputs":[],"output":{"name":"file"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"fileloader"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"static_type","","",48,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FileLoader` object. The contents is read from the `File`'s location. If not already done, call `FileExt::set_location` before calling this constructor. The previous location is anyway not needed, because as soon as the file loading begins, the `buffer` is emptied.",48,{"inputs":[{"name":"buffer"},{"name":"file"}],"output":{"name":"fileloader"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"filesaver"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"static_type","","",49,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FileSaver` object. The `buffer` will be saved to the `File`'s location.",49,{"inputs":[{"name":"buffer"},{"name":"file"}],"output":{"name":"filesaver"}}],[11,"new_with_target","","Creates a new `FileSaver` object with a target location. When the file saving is finished successfully, `target_location` is set to the `file`'s `File:location` property. If an error occurs, the previous valid location is still available in `File`.",49,{"inputs":[{"name":"buffer"},{"name":"file"},{"name":"p"}],"output":{"name":"filesaver"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"gutter"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"static_type","","",50,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"gutterrenderer"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"static_type","","",51,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"gutterrendererpixbuf"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"static_type","","",52,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `GutterRendererPixbuf`.",52,{"inputs":[],"output":{"name":"gutterrendererpixbuf"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"gutterrenderertext"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"static_type","","",53,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `GutterRendererText`.",53,{"inputs":[],"output":{"name":"gutterrenderertext"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"language"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"static_type","","",54,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"languagemanager"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"static_type","","",55,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new language manager. If you do not need more than one language manager or a private language manager instance then use `LanguageManager::get_default` instead.",55,{"inputs":[],"output":{"name":"languagemanager"}}],[11,"get_default","","Returns the default `LanguageManager` instance.",55,{"inputs":[],"output":{"generics":["languagemanager"],"name":"option"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"static_type","","",56,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Map`.",56,{"inputs":[],"output":{"name":"map"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"static_type","","",57,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a text mark. Add it to a buffer using `gtk::TextBufferExt::add_mark`. If name is NULL, the mark is anonymous; otherwise, the mark can be retrieved by name using `gtk::TextBufferExt::get_mark`. Normally marks are created using the utility function `BufferExt::create_source_mark`. ## `name` Name of the `Mark`, can be NULL when not using a name ## `category` is used to classify marks according to common characteristics (e.g. all the marks representing a bookmark could belong to the \"bookmark\" category, or all the marks representing a compilation error could belong to \"error\" category).",57,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"mark"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"markattributes"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"static_type","","",58,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new source mark attributes.",58,{"inputs":[],"output":{"name":"markattributes"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"printcompositor"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"static_type","","",59,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new print compositor that can be used to print `buffer`. ## `buffer` the `Buffer` to print.",59,{"inputs":[{"name":"buffer"}],"output":{"name":"printcompositor"}}],[11,"new_from_view","","Creates a new print compositor that can be used to print the buffer associated with `view`. This constructor sets some configuration properties to make the printed output match `view` as much as possible. The properties set are `PrintCompositor:tab-width`, `PrintCompositor:highlight-syntax`, `PrintCompositor:wrap-mode`, `PrintCompositor:body-font-name` and `PrintCompositor:print-line-numbers`. ## `view` a `View` to get configuration from.",59,{"inputs":[{"name":"p"}],"output":{"name":"printcompositor"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"static_type","","",60,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",60,{"inputs":[{"name":"p"}],"output":{"name":"region"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"searchcontext"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"static_type","","",61,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new search context, associated with `buffer`, and customized with `settings`. If `settings` is `None`, a new `SearchSettings` object will be created, that you can retrieve with `SearchContextExt::get_settings`.",61,{"inputs":[{"name":"buffer"},{"name":"p"}],"output":{"name":"searchcontext"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"searchsettings"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"static_type","","",62,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new search settings object.",62,{"inputs":[],"output":{"name":"searchsettings"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"spacedrawer"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"static_type","","",63,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `SpaceDrawer` object. Useful for storing space drawing settings independently of a `View`.",63,{"inputs":[],"output":{"name":"spacedrawer"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"static_type","","",64,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"stylescheme"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"static_type","","",65,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"styleschemechooser"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"static_type","","",66,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"styleschemechooserbutton"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"static_type","","",67,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StyleSchemeChooserButton`.",67,{"inputs":[],"output":{"name":"styleschemechooserbutton"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"styleschemechooserwidget"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"static_type","","",68,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StyleSchemeChooserWidget`.",68,{"inputs":[],"output":{"name":"styleschemechooserwidget"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"styleschememanager"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"static_type","","",69,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new style manager. If you do not need more than one style manager then use `StyleSchemeManager::get_default` instead.",69,{"inputs":[],"output":{"name":"styleschememanager"}}],[11,"get_default","","Returns the default `StyleSchemeManager` instance.",69,{"inputs":[],"output":{"generics":["styleschememanager"],"name":"option"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"tag"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"static_type","","",70,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `Tag`. Configure the tag using object arguments, i.e. using `gobject::Object::set`.",70,{"inputs":[{"name":"p"}],"output":{"name":"tag"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"undomanager"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"static_type","","",71,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"view"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"static_type","","",72,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `View`.",72,{"inputs":[],"output":{"name":"view"}}],[11,"new_with_buffer","","Creates a new `View` widget displaying the buffer `buffer`. One buffer can be shared among many widgets. ## `buffer` a `Buffer`.",72,{"inputs":[{"name":"buffer"}],"output":{"name":"view"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",73,{"inputs":[],"output":{"name":"type"}}],[11,"get_charset","","Gets the character set of the `Encoding`, such as \"UTF-8\" or \"ISO-8859-1\".",73,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_name","","Gets the name of the `Encoding` such as \"Unicode\" or \"Western\".",73,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_all","","Gets all encodings.",73,{"inputs":[],"output":{"generics":["encoding"],"name":"vec"}}],[11,"get_current","","Gets the `Encoding` for the current locale. See also `g_get_charset`.",73,{"inputs":[],"output":{"generics":["encoding"],"name":"option"}}],[11,"get_default_candidates","","Gets the list of default candidate encodings to try when loading a file. See `FileLoaderExt::set_candidate_encodings`.",73,{"inputs":[],"output":{"generics":["encoding"],"name":"vec"}}],[11,"get_from_charset","","Gets a `Encoding` from a character set such as \"UTF-8\" or \"ISO-8859-1\".",73,{"inputs":[{"name":"str"}],"output":{"generics":["encoding"],"name":"option"}}],[11,"get_utf8","","Feature: `v3_14`",73,{"inputs":[],"output":{"generics":["encoding"],"name":"option"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"backgroundpatterntype"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"backgroundpatterntype"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"backgroundpatterntype"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"static_type","","",0,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",0,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",0,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",0,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"changecasetype"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"changecasetype"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"changecasetype"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"static_type","","",1,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",1,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",1,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",1,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"static_type","","",2,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",2,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",2,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",2,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"gutterrendereralignmentmode"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"gutterrendereralignmentmode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"gutterrendereralignmentmode"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"static_type","","",3,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",3,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",3,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",3,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"newlinetype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"newlinetype"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"static_type","","",4,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",4,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",4,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"smarthomeendtype"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"smarthomeendtype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"smarthomeendtype"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"completionactivation"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"ordering"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",74,null],[18,"INTERACTIVE","","",74,null],[18,"USER_REQUESTED","","",74,null],[11,"empty","","Returns an empty set of flags.",74,{"inputs":[],"output":{"name":"completionactivation"}}],[11,"all","","Returns the set containing all flags.",74,{"inputs":[],"output":{"name":"completionactivation"}}],[11,"bits","","Returns the raw value of the flags currently stored.",74,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",74,{"inputs":[{"name":"u32"}],"output":{"generics":["completionactivation"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",74,{"inputs":[{"name":"u32"}],"output":{"name":"completionactivation"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"completionactivation"}}],[11,"bitor_assign","","Adds the set of flags.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"completionactivation"}}],[11,"bitxor_assign","","Toggles the set of flags.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"completionactivation"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":{"name":"completionactivation"}}],[11,"sub_assign","","Disables all flags enabled in the set.",74,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",74,{"inputs":[{"name":"self"}],"output":{"name":"completionactivation"}}],[11,"extend","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",74,{"inputs":[{"name":"t"}],"output":{"name":"completionactivation"}}],[11,"static_type","","",74,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",74,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",74,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",74,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"drawspacesflags"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"ordering"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SPACE","","",75,null],[18,"TAB","","",75,null],[18,"NEWLINE","","",75,null],[18,"NBSP","","",75,null],[18,"LEADING","","",75,null],[18,"TEXT","","",75,null],[18,"TRAILING","","",75,null],[18,"ALL","","",75,null],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[],"output":{"name":"drawspacesflags"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[],"output":{"name":"drawspacesflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"u32"}],"output":{"generics":["drawspacesflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",75,{"inputs":[{"name":"u32"}],"output":{"name":"drawspacesflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"drawspacesflags"}}],[11,"bitor_assign","","Adds the set of flags.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"drawspacesflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"drawspacesflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":{"name":"drawspacesflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",75,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",75,{"inputs":[{"name":"self"}],"output":{"name":"drawspacesflags"}}],[11,"extend","","",75,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",75,{"inputs":[{"name":"t"}],"output":{"name":"drawspacesflags"}}],[11,"static_type","","",75,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",75,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",75,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",75,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"filesaverflags"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",76,null],[18,"IGNORE_INVALID_CHARS","","",76,null],[18,"IGNORE_MODIFICATION_TIME","","",76,null],[18,"CREATE_BACKUP","","",76,null],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"filesaverflags"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"filesaverflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"u32"}],"output":{"generics":["filesaverflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",76,{"inputs":[{"name":"u32"}],"output":{"name":"filesaverflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"filesaverflags"}}],[11,"bitor_assign","","Adds the set of flags.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"filesaverflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"filesaverflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":{"name":"filesaverflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",76,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",76,{"inputs":[{"name":"self"}],"output":{"name":"filesaverflags"}}],[11,"extend","","",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"filesaverflags"}}],[11,"static_type","","",76,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",76,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",76,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",76,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"gutterrendererstate"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"ordering"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NORMAL","","",77,null],[18,"CURSOR","","",77,null],[18,"PRELIT","","",77,null],[18,"SELECTED","","",77,null],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[],"output":{"name":"gutterrendererstate"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[],"output":{"name":"gutterrendererstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"u32"}],"output":{"generics":["gutterrendererstate"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",77,{"inputs":[{"name":"u32"}],"output":{"name":"gutterrendererstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"gutterrendererstate"}}],[11,"bitor_assign","","Adds the set of flags.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"gutterrendererstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"gutterrendererstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":{"name":"gutterrendererstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",77,{"inputs":[{"name":"self"},{"name":"gutterrendererstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",77,{"inputs":[{"name":"self"}],"output":{"name":"gutterrendererstate"}}],[11,"extend","","",77,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",77,{"inputs":[{"name":"t"}],"output":{"name":"gutterrendererstate"}}],[11,"static_type","","",77,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",77,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",77,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",77,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sortflags"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"ordering"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",78,null],[18,"CASE_SENSITIVE","","",78,null],[18,"REVERSE_ORDER","","",78,null],[18,"REMOVE_DUPLICATES","","",78,null],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"sortflags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"sortflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"u32"}],"output":{"generics":["sortflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",78,{"inputs":[{"name":"u32"}],"output":{"name":"sortflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",78,{"inputs":[{"name":"self"},{"name":"sortflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"sortflags"}}],[11,"bitor_assign","","Adds the set of flags.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"sortflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"sortflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":{"name":"sortflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",78,{"inputs":[{"name":"self"},{"name":"sortflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",78,{"inputs":[{"name":"self"}],"output":{"name":"sortflags"}}],[11,"extend","","",78,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"sortflags"}}],[11,"static_type","","",78,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",78,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",78,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",78,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"spacelocationflags"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"ordering"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",79,null],[18,"LEADING","","",79,null],[18,"INSIDE_TEXT","","",79,null],[18,"TRAILING","","",79,null],[18,"ALL","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"spacelocationflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"spacelocationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"u32"}],"output":{"generics":["spacelocationflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",79,{"inputs":[{"name":"u32"}],"output":{"name":"spacelocationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"spacelocationflags"}}],[11,"bitor_assign","","Adds the set of flags.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"spacelocationflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"spacelocationflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"spacelocationflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",79,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",79,{"inputs":[{"name":"self"}],"output":{"name":"spacelocationflags"}}],[11,"extend","","",79,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"spacelocationflags"}}],[11,"static_type","","",79,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",79,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",79,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",79,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"spacetypeflags"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",80,null],[18,"SPACE","","",80,null],[18,"TAB","","",80,null],[18,"NEWLINE","","",80,null],[18,"NBSP","","",80,null],[18,"ALL","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"spacetypeflags"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"spacetypeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"u32"}],"output":{"generics":["spacetypeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",80,{"inputs":[{"name":"u32"}],"output":{"name":"spacetypeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"spacetypeflags"}}],[11,"bitor_assign","","Adds the set of flags.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"spacetypeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"spacetypeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":{"name":"spacetypeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",80,{"inputs":[{"name":"self"},{"name":"spacetypeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",80,{"inputs":[{"name":"self"}],"output":{"name":"spacetypeflags"}}],[11,"extend","","",80,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"spacetypeflags"}}],[11,"static_type","","",80,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",80,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",80,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",80,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"create_context","","",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["completioncontext"],"name":"option"}}],[11,"move_to_iter","","",42,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[11,"get_padding","","",50,null],[11,"get_pixbuf","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"render_icon","","",58,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"apply","","",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"get_mark_attributes","","",72,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["markattributes"],"name":"option"}}],[8,"BufferExt","","Trait containing all `Buffer` methods.",null,null],[10,"backward_iter_to_source_mark","","Moves `iter` to the position of the previous `Mark` of the given category. Returns `true` if `iter` was moved. If `category` is NULL, the previous source mark can be of any category. ## `iter` an iterator. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"}],"output":{"name":"bool"}}],[10,"begin_not_undoable_action","","Marks the beginning of a not undoable action on the buffer, disabling the undo manager. Typically you would call this function before initially setting the contents of the buffer (e.g. when loading a file in a text editor).",7,{"inputs":[{"name":"self"}],"output":null}],[10,"can_redo","","Determines whether a source buffer can redo the last action (i.e. if the last operation was an undo).",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_undo","","Determines whether a source buffer can undo the last action.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"change_case","","Changes the case of the text between the specified iterators.",7,{"inputs":[{"name":"self"},{"name":"changecasetype"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"create_source_mark","","Creates a source mark in the `self` of category `category`. A source mark is a `gtk::TextMark` but organised into categories. Depending on the category a pixbuf can be specified that will be displayed along the line of the mark.",7,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"textiter"}],"output":{"generics":["mark"],"name":"option"}}],[10,"end_not_undoable_action","","Marks the end of a not undoable action on the buffer. When the last not undoable block is closed through the call to this function, the list of undo actions is cleared and the undo manager is re-enabled.",7,{"inputs":[{"name":"self"}],"output":null}],[10,"ensure_highlight","","Forces buffer to analyze and highlight the given area synchronously.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"forward_iter_to_source_mark","","Moves `iter` to the position of the next `Mark` of the given `category`. Returns `true` if `iter` was moved. If `category` is NULL, the next source mark can be of any category. ## `iter` an iterator. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_context_classes_at_iter","","Get all defined context classes at `iter`.",7,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_highlight_matching_brackets","","Determines whether bracket match highlighting is activated for the source buffer.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_highlight_syntax","","Determines whether syntax highlighting is activated in the source buffer.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_implicit_trailing_newline","","Feature: `v3_14`",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_language","","Returns the `Language` associated with the buffer, see `BufferExt::set_language`. The returned object should not be unreferenced by the user.",7,{"inputs":[{"name":"self"}],"output":{"generics":["language"],"name":"option"}}],[10,"get_max_undo_levels","","Determines the number of undo levels the buffer will track for buffer edits.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_source_marks_at_iter","","Returns the list of marks of the given category at `iter`. If `category` is `None` it returns all marks at `iter`. ## `iter` an iterator. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"}],"output":{"generics":["mark"],"name":"vec"}}],[10,"get_source_marks_at_line","","Returns the list of marks of the given category at `line`. If `category` is `None`, all marks at `line` are returned. ## `line` a line number. ## `category` category to search for, or `None`",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":{"generics":["mark"],"name":"vec"}}],[10,"get_style_scheme","","Returns the `StyleScheme` associated with the buffer, see `BufferExt::set_style_scheme`. The returned object should not be unreferenced by the user.",7,{"inputs":[{"name":"self"}],"output":{"generics":["stylescheme"],"name":"option"}}],[10,"get_undo_manager","","Returns the `UndoManager` associated with the buffer, see `BufferExt::set_undo_manager`. The returned object should not be unreferenced by the user.",7,{"inputs":[{"name":"self"}],"output":{"generics":["undomanager"],"name":"option"}}],[10,"iter_backward_to_context_class_toggle","","Moves backward to the next toggle (on or off) of the context class. If no matching context class toggles are found, returns `false`, otherwise `true`. Does not return toggles located at `iter`, only toggles after `iter`. Sets `iter` to the location of the toggle, or to the end of the buffer if no toggle is found.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":{"name":"bool"}}],[10,"iter_forward_to_context_class_toggle","","Moves forward to the next toggle (on or off) of the context class. If no matching context class toggles are found, returns `false`, otherwise `true`. Does not return toggles located at `iter`, only toggles after `iter`. Sets `iter` to the location of the toggle, or to the end of the buffer if no toggle is found.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":{"name":"bool"}}],[10,"iter_has_context_class","","Check if the class `context_class` is set on `iter`.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":{"name":"bool"}}],[10,"join_lines","","Joins the lines of text between the specified iterators.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"redo","","Redoes the last undo operation. Use `BufferExt::can_redo` to check whether a call to this function will have any effect.",7,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_source_marks","","Remove all marks of `category` between `start` and `end` from the buffer. If `category` is NULL, all marks in the range will be removed. ## `start` a `gtk::TextIter`. ## `end` a `gtk::TextIter`. ## `category` category to search for, or `None`.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"p"}],"output":null}],[10,"set_highlight_matching_brackets","","Controls the bracket match highlighting function in the buffer. If activated, when you position your cursor over a bracket character (a parenthesis, a square bracket, etc.) the matching opening or closing bracket character will be highlighted. ## `highlight` `true` if you want matching brackets highlighted.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_highlight_syntax","","Controls whether syntax is highlighted in the buffer.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_implicit_trailing_newline","","Sets whether the `self` has an implicit trailing newline.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_language","","Associates a `Language` with the buffer.",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_max_undo_levels","","Sets the number of undo levels for user actions the buffer will track. If the number of user actions exceeds the limit set by this function, older actions will be discarded.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_style_scheme","","Sets a `StyleScheme` to be used by the buffer and the view.",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_undo_manager","","Set the buffer undo manager. If `manager` is `None` the default undo manager will be set. ## `manager` A `UndoManager` or `None`.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"sort_lines","","Sort the lines of text between the specified iterators.",7,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"sortflags"},{"name":"i32"}],"output":null}],[10,"undo","","Undoes the last user action which modified the buffer. Use `BufferExt::can_undo` to check whether a call to this function will have any effect.",7,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_can_redo","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_can_undo","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_highlight_updated","","The ::highlight-updated signal is emitted when the syntax highlighting and [context classes][context-classes] are updated in a certain region of the `buffer`. ## `start` the start of the updated region ## `end` the end of the updated region",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_redo","","The ::redo signal is emitted to redo the last undo operation.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_source_mark_updated","","The ::source-mark-updated signal is emitted each time a mark is added to, moved or removed from the `buffer`. ## `mark` the `Mark`",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_undo","","The ::undo signal is emitted to undo the last user action which modified the buffer.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_redo_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_undo_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_matching_brackets_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_syntax_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_implicit_trailing_newline_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_undo_levels_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_scheme_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_undo_manager_notify","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionExt","","Trait containing all `Completion` methods.",null,null],[10,"add_provider","","Add a new `CompletionProvider` to the completion object. This will add a reference `provider`, so make sure to unref your own copy when you no longer need it. ## `provider` a `CompletionProvider`.",8,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"block_interactive","","Block interactive completion. This can be used to disable interactive completion when inserting or deleting text from the buffer associated with the completion. Use `CompletionExt::unblock_interactive` to enable interactive completion again.",8,{"inputs":[{"name":"self"}],"output":null}],[10,"get_info_window","","The info widget is the window where the completion displays optional extra information of the proposal.",8,{"inputs":[{"name":"self"}],"output":{"generics":["completioninfo"],"name":"option"}}],[10,"get_providers","","Get list of providers registered on `self`. The returned list is owned by the completion and should not be freed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["completionprovider"],"name":"vec"}}],[10,"get_view","","The `View` associated with `self`, or `None` if the view has been destroyed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"hide","","Hides the completion if it is active (visible).",8,{"inputs":[{"name":"self"}],"output":null}],[10,"move_window","","Move the completion window to a specific iter.",8,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":null}],[10,"remove_provider","","Remove `provider` from the completion. ## `provider` a `CompletionProvider`.",8,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"show","","Starts a new completion with the specified `CompletionContext` and a list of potential candidate providers for completion.",8,null],[10,"unblock_interactive","","Unblock interactive completion. This can be used after using `CompletionExt::block_interactive` to enable interactive completion again.",8,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_accelerators","","Number of keyboard accelerators to show for the first proposals. For example, to activate the first proposal, the user can press `<keycombo>``<keycap>`Alt`</keycap>``<keycap>`1`</keycap>``</keycombo>`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_accelerators","","Number of keyboard accelerators to show for the first proposals. For example, to activate the first proposal, the user can press `<keycombo>``<keycap>`Alt`</keycap>``<keycap>`1`</keycap>``</keycombo>`.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_auto_complete_delay","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_auto_complete_delay","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_proposal_page_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_proposal_page_size","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_provider_page_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_provider_page_size","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_remember_info_visibility","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_remember_info_visibility","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_select_on_show","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_select_on_show","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_headers","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_headers","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_icons","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_icons","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_proposal","","The `Completion::activate-proposal` signal is a keybinding signal which gets emitted when the user initiates a proposal activation.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_proposal","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_hide","","Emitted when the completion window is hidden. The default handler will actually hide the window.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_hide","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","The `Completion::move-cursor` signal is a keybinding signal which gets emitted when the user initiates a cursor movement.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",8,{"inputs":[{"name":"self"},{"name":"scrollstep"},{"name":"i32"}],"output":null}],[10,"connect_move_page","","The `Completion::move-page` signal is a keybinding signal which gets emitted when the user initiates a page movement (i.e. switches between provider pages).",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_page","","",8,{"inputs":[{"name":"self"},{"name":"scrollstep"},{"name":"i32"}],"output":null}],[10,"connect_populate_context","","Emitted just before starting to populate the completion with providers. You can use this signal to add additional attributes in the context. ## `context` The `CompletionContext` for the current completion",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_populate_context","","",8,{"inputs":[{"name":"self"},{"name":"completioncontext"}],"output":null}],[10,"connect_show","","Emitted when the completion window is shown. The default handler will actually show the window.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_accelerators_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_auto_complete_delay_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_proposal_page_size_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_provider_page_size_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_remember_info_visibility_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_select_on_show_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_headers_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_icons_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_view_notify","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionContextExt","","Trait containing all `CompletionContext` methods.",null,null],[10,"add_proposals","","Providers can use this function to add proposals to the completion. They can do so asynchronously by means of the `finished` argument. Providers must ensure that they always call this function with `finished` set to `true` once each population (even if no proposals need to be added). Population occurs when the `CompletionProvider::populate` function is called. ## `provider` a `CompletionProvider`. ## `proposals` The list of proposals to add. ## `finished` Whether the provider is finished adding proposals.",9,null],[10,"get_activation","","Get the context activation.",9,{"inputs":[{"name":"self"}],"output":{"name":"completionactivation"}}],[10,"get_iter","","Get the iter at which the completion was invoked. Providers can use this to determine how and if to match proposals. ## `iter` a `gtk::TextIter`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["textiter"],"name":"option"}}],[10,"set_property_activation","","The completion activation",9,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[10,"get_property_completion","","The `Completion` associated with the context.",9,{"inputs":[{"name":"self"}],"output":{"generics":["completion"],"name":"option"}}],[10,"connect_cancelled","","Emitted when the current population of proposals has been cancelled. Providers adding proposals asynchronously should connect to this signal to know when to cancel running proposal queries.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cancelled","","",9,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activation_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_completion_notify","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionInfoExt","","Trait containing all `CompletionInfo` methods.",null,null],[10,"get_widget","","Get the current content widget.",10,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_widget","","Sets the content widget of the info window. See that the previous widget will lose a reference and it can be destroyed, so if you do not want this to happen you must use `gobject::Object::ref` before calling this method.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"connect_before_show","","This signal is emitted before any \"show\" management. You can connect to this signal if you want to change some properties or position before the real \"show\".",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_before_show","","",10,{"inputs":[{"name":"self"}],"output":null}],[8,"CompletionItemExt","","Trait containing all `CompletionItem` methods.",null,null],[10,"set_gicon","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_name","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_info","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_markup","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_text","","Feature: `v3_24`",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_property_gicon","","The `gio::Icon` for the icon to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"set_property_icon","","The `gdk_pixbuf::Pixbuf` for the icon to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"set_property_icon_name","","",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_info","","Optional extra information to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_label","","Label to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_markup","","Label with markup to be shown for this proposal.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_text","","Proposal text.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_gicon_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_info_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_markup_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CompletionProposalExt","","Trait containing all `CompletionProposal` methods.",null,null],[10,"changed","","Emits the \"changed\" signal on `self`. This should be called by implementations whenever the name, icon or info of the proposal has changed.",12,{"inputs":[{"name":"self"}],"output":null}],[10,"equal","","Get whether two proposal objects are the same. This is used to (together with `CompletionProposal::hash`) to match proposals in the completion model. By default, it uses direct equality (`g_direct_equal`). ## `other` a `CompletionProposal`.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_gicon","","Gets the `gio::Icon` for the icon of `self`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon","","Gets the `gdk_pixbuf::Pixbuf` for the icon of `self`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_name","","Gets the icon name of `self`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_info","","Gets extra information associated to the proposal. This information will be used to present the user with extra, detailed information about the selected proposal. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label","","Gets the label of `self`. The label is shown in the list of proposals as plain text. If you need any markup (such as bold or italic text), you have to implement `CompletionProposal::get_markup`. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_markup","","Gets the label of `self` with markup. The label is shown in the list of proposals and may contain markup. This will be used instead of `CompletionProposal::get_label` if implemented. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_text","","Gets the text of `self`. The text that is inserted into the text buffer when the proposal is activated by the default activation. You are free to implement a custom activation handler in the provider and not implement this function. For more information, see `CompletionProvider::activate_proposal`. The returned string must be freed with `g_free`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"hash","","Get the hash value of `self`. This is used to (together with `CompletionProposal::equal`) to match proposals in the completion model. By default, it uses a direct hash (`g_direct_hash`).",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_changed","","Emitted when the proposal has changed. The completion popup will react to this by updating the shown information.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_changed","","",12,{"inputs":[{"name":"self"}],"output":null}],[8,"CompletionProviderExt","","Trait containing all `CompletionProvider` methods.",null,null],[10,"activate_proposal","","Activate `proposal` at `iter`. When this functions returns `false`, the default activation of `proposal` will take place which replaces the word at `iter` with the text of `proposal` (see `CompletionProposal::get_text`).",13,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"get_activation","","Get with what kind of activation the provider should be activated.",13,{"inputs":[{"name":"self"}],"output":{"name":"completionactivation"}}],[10,"get_gicon","","Gets the `gio::Icon` for the icon of `self`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon","","Get the `gdk_pixbuf::Pixbuf` for the icon of the `self`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_name","","Gets the icon name of `self`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_info_widget","","Get a customized info widget to show extra information of a proposal. This allows for customized widgets on a proposal basis, although in general providers will have the same custom widget for all their proposals and `proposal` can be ignored. The implementation of this function is optional.",13,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_interactive_delay","","Get the delay in milliseconds before starting interactive completion for this provider. A value of -1 indicates to use the default value as set by the `Completion:auto-complete-delay` property.",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_name","","Get the name of the provider. This should be a translatable name for display to the user. For example: _(\"Document word completion provider\"). The returned string must be freed with `g_free`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_priority","","Get the provider priority. The priority determines the order in which proposals appear in the completion popup. Higher priorities are sorted before lower priorities. The default priority is 0.",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_start_iter","","Get the `gtk::TextIter` at which the completion for `proposal` starts. When implemented, this information is used to position the completion window accordingly when a proposal is selected in the completion window. The `proposal` text inside the completion window is aligned on `iter`.",13,{"inputs":[{"name":"self"},{"name":"completioncontext"},{"name":"p"}],"output":{"generics":["textiter"],"name":"option"}}],[10,"match_","","",13,{"inputs":[{"name":"self"},{"name":"completioncontext"}],"output":{"name":"bool"}}],[10,"populate","","Populate `context` with proposals from `self` added with the `CompletionContextExt::add_proposals` function. ## `context` a `CompletionContext`.",13,{"inputs":[{"name":"self"},{"name":"completioncontext"}],"output":null}],[10,"update_info","","Update extra information shown in `info` for `proposal`.",13,{"inputs":[{"name":"self"},{"name":"p"},{"name":"completioninfo"}],"output":null}],[8,"CompletionWordsExt","","Trait containing all `CompletionWords` methods.",null,null],[10,"register","","Registers `buffer` in the `self` provider. ## `buffer` a `gtk::TextBuffer`",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unregister","","Unregisters `buffer` from the `self` provider. ## `buffer` a `gtk::TextBuffer`",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_property_activation","","The type of activation.",14,{"inputs":[{"name":"self"},{"name":"completionactivation"}],"output":null}],[10,"set_property_icon","","",14,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"set_property_interactive_delay","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_minimum_word_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_minimum_word_size","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_property_name","","",14,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_priority","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_proposals_batch_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_proposals_batch_size","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_scan_batch_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_scan_batch_size","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_property_activation_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_interactive_delay_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_word_size_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_priority_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_proposals_batch_size_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scan_batch_size_notify","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileExt","","Trait containing all `File` methods.",null,null],[10,"check_file_on_disk","","Checks synchronously the file on disk, to know whether the file is externally modified, or has been deleted, and whether the file is read-only.",15,{"inputs":[{"name":"self"}],"output":null}],[10,"get_compression_type","","Feature: `v3_14`",15,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[10,"get_encoding","","The encoding is initially `None`. After a successful file loading or saving operation, the encoding is non-`None`.",15,{"inputs":[{"name":"self"}],"output":{"generics":["encoding"],"name":"option"}}],[10,"get_location","","Feature: `v3_14`",15,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_newline_type","","Feature: `v3_14`",15,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[10,"is_deleted","","Returns whether the file has been deleted. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_externally_modified","","Returns whether the file is externally modified. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_local","","Returns whether the file is local. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_readonly","","Returns whether the file is read-only. If the `File:location` is `None`, returns `false`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_location","","Sets the location.",15,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_property_read_only","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_compression_type_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_encoding_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_newline_type_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_read_only_notify","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileLoaderExt","","Trait containing all `FileLoader` methods.",null,null],[10,"get_buffer","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_compression_type","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[10,"get_encoding","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["encoding"],"name":"option"}}],[10,"get_file","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_location","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_newline_type","","Feature: `v3_14`",16,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[10,"set_candidate_encodings","","Sets the candidate encodings for the file loading. The encodings are tried in the same order as the list.",16,null],[10,"connect_property_buffer_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_file_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_stream_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileSaverExt","","Trait containing all `FileSaver` methods.",null,null],[10,"get_buffer","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_compression_type","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[10,"get_encoding","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["encoding"],"name":"option"}}],[10,"get_file","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_flags","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"name":"filesaverflags"}}],[10,"get_location","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_newline_type","","Feature: `v3_14`",17,{"inputs":[{"name":"self"}],"output":{"name":"newlinetype"}}],[10,"set_compression_type","","Sets the compression type. By default the compression type is taken from the `File`.",17,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":null}],[10,"set_encoding","","Sets the encoding. If `encoding` is `None`, the UTF-8 encoding will be set. By default the encoding is taken from the `File`.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_flags","","Feature: `v3_14`",17,{"inputs":[{"name":"self"},{"name":"filesaverflags"}],"output":null}],[10,"set_newline_type","","Sets the newline type. By default the newline type is taken from the `File`.",17,{"inputs":[{"name":"self"},{"name":"newlinetype"}],"output":null}],[10,"connect_property_buffer_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_compression_type_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_encoding_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_file_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flags_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_newline_type_notify","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterExt","","Trait containing all `Gutter` methods.",null,null],[10,"get_renderer_at_pos","","Finds the `GutterRenderer` at (x, y). ## `x` The x position to get identified. ## `y` The y position to get identified.",18,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["gutterrenderer"],"name":"option"}}],[10,"get_view","","Feature: `v3_24`",18,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"get_window","","Get the `gdk::Window` of the gutter. The window will only be available when the gutter has at least one, non-zero width, cell renderer packed.",18,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_window_type","","Feature: `v3_24`",18,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[10,"insert","","Insert `renderer` into the gutter. If `renderer` is yet unowned then gutter claims its ownership. Otherwise just increases renderer's reference count. `renderer` cannot be already inserted to another gutter. ## `renderer` a gutter renderer (must inherit from `GutterRenderer`). ## `position` the renderer position.",18,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"queue_draw","","Invalidates the drawable area of the gutter. You can use this to force a redraw of the gutter if something has changed and needs to be redrawn.",18,{"inputs":[{"name":"self"}],"output":null}],[10,"remove","","Removes `renderer` from `self`. ## `renderer` a `GutterRenderer`.",18,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"reorder","","Reorders `renderer` in `self` to new `position`. ## `renderer` a `gtk::CellRenderer`. ## `position` the new renderer position.",18,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_padding","","Deprecated since 3.12",18,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_property_view","","The `View` of the gutter.",18,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"get_property_window_type","","",18,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[10,"get_property_xpad","","The x-padding.",18,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_xpad","","The x-padding.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_ypad","","The y-padding.",18,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_ypad","","The y-padding.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_view_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_type_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterRendererExt","","Trait containing all `GutterRenderer` methods.",null,null],[10,"activate","","Emits the `GutterRenderer::activate` signal of the renderer. This is called from `Gutter` and should never have to be called manually. ## `iter` a `gtk::TextIter` at the start of the line where the renderer is activated ## `area` a `gdk::Rectangle` of the cell area where the renderer is activated ## `event` the event that triggered the activation",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"rectangle"},{"name":"event"}],"output":null}],[10,"begin","","Called when drawing a region begins. The region to be drawn is indicated by `start` and `end`. The purpose is to allow the implementation to precompute some state before the draw method is called for each cell. ## `cr` a `cairo::Context` ## `background_area` a `gdk::Rectangle` ## `cell_area` a `gdk::Rectangle` ## `start` a `gtk::TextIter` ## `end` a `gtk::TextIter`",19,{"inputs":[{"name":"self"},{"name":"context"},{"name":"rectangle"},{"name":"rectangle"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"draw","","Main renderering method. Implementations should implement this method to draw onto the cairo context. The `background_area` indicates the total area of the cell to be drawn. The `cell_area` indicates the area where content can be drawn (text, images, etc).",19,{"inputs":[{"name":"self"},{"name":"context"},{"name":"rectangle"},{"name":"rectangle"},{"name":"textiter"},{"name":"textiter"},{"name":"gutterrendererstate"}],"output":null}],[10,"end","","Called when drawing a region of lines has ended.",19,{"inputs":[{"name":"self"}],"output":null}],[10,"get_alignment","","Get the x-alignment and y-alignment of the gutter renderer. ## `xalign` return location for the x-alignment,  or `None` to ignore. ## `yalign` return location for the y-alignment,  or `None` to ignore.",19,null],[10,"get_alignment_mode","","Get the alignment mode. The alignment mode describes the manner in which the renderer is aligned (see :xalign and :yalign).",19,{"inputs":[{"name":"self"}],"output":{"name":"gutterrendereralignmentmode"}}],[10,"get_background","","Get the background color of the renderer. ## `color` return value for a `gdk::RGBA`",19,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"get_padding","","Get the x-padding and y-padding of the gutter renderer. ## `xpad` return location for the x-padding,  or `None` to ignore. ## `ypad` return location for the y-padding,  or `None` to ignore.",19,null],[10,"get_size","","Get the size of the renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_view","","Get the view associated to the gutter renderer",19,{"inputs":[{"name":"self"}],"output":{"generics":["textview"],"name":"option"}}],[10,"get_visible","","Get whether the gutter renderer is visible.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_window_type","","Get the `gtk::TextWindowType` associated with the gutter renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[10,"query_activatable","","Get whether the renderer is activatable at the location in `event`. This is called from `Gutter` to determine whether a renderer is activatable using the mouse pointer. ## `iter` a `gtk::TextIter` at the start of the line to be activated ## `area` a `gdk::Rectangle` of the cell area to be activated ## `event` the event that triggered the query",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"rectangle"},{"name":"event"}],"output":{"name":"bool"}}],[10,"query_data","","Emit the `GutterRenderer::query-data` signal. This function is called to query for data just before rendering a cell. This is called from the `Gutter`. Implementations can override the default signal handler or can connect a signal handler externally to the `GutterRenderer::query-data` signal. ## `start` a `gtk::TextIter`. ## `end` a `gtk::TextIter`. ## `state` a `GutterRendererState`.",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"gutterrendererstate"}],"output":null}],[10,"query_tooltip","","Emits the `GutterRenderer::query-tooltip` signal. This function is called from `Gutter`. Implementations can override the default signal handler or can connect to the signal externally. ## `iter` a `gtk::TextIter`. ## `area` a `gdk::Rectangle`. ## `x` The x position of the tooltip. ## `y` The y position of the tooltip. ## `tooltip` a `gtk::Tooltip`.",19,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"rectangle"},{"name":"i32"},{"name":"i32"},{"name":"tooltip"}],"output":{"name":"bool"}}],[10,"queue_draw","","Emits the `GutterRenderer::queue-draw` signal of the renderer. Call this from an implementation to inform that the renderer has changed such that it needs to redraw.",19,{"inputs":[{"name":"self"}],"output":null}],[10,"set_alignment","","Set the alignment of the gutter renderer. Both `xalign` and `yalign` can be -1, which means the values will not be changed (this allows changing only one of the values).",19,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_alignment_mode","","Set the alignment mode. The alignment mode describes the manner in which the renderer is aligned (see :xalign and :yalign). ## `mode` a `GutterRendererAlignmentMode`",19,{"inputs":[{"name":"self"},{"name":"gutterrendereralignmentmode"}],"output":null}],[10,"set_background","","Set the background color of the renderer. If `color` is set to `None`, the renderer will not have a background color. ## `color` a `gdk::RGBA` or `None`",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_padding","","Set the padding of the gutter renderer. Both `xpad` and `ypad` can be -1, which means the values will not be changed (this allows changing only one of the values).",19,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_size","","Sets the size of the renderer. A value of -1 specifies that the size is to be determined dynamically. ## `size` the size",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_visible","","Set whether the gutter renderer is visible. ## `visible` the visibility",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_background_rgba","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_background_rgba","","",19,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_background_set","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_xalign","","The horizontal alignment of the renderer. Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","The horizontal alignment of the renderer. Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xpad","","The left and right padding of the renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_xpad","","The left and right padding of the renderer.",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_yalign","","The vertical alignment of the renderer. Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","The vertical alignment of the renderer. Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells. A value lower than 0 doesn't modify the alignment.",19,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_ypad","","The top and bottom padding of the renderer.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_ypad","","The top and bottom padding of the renderer.",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_activate","","The ::activate signal is emitted when the renderer is activated. ## `iter` a `gtk::TextIter` ## `area` a `gdk::Rectangle` ## `event` the event that caused the activation",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_activatable","","The ::query-activatable signal is emitted when the renderer can possibly be activated. ## `iter` a `gtk::TextIter` ## `area` a `gdk::Rectangle` ## `event` the `GdkEvent` that is causing the activatable query",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_data","","The ::query-data signal is emitted when the renderer needs to be filled with data just before a cell is drawn. This can be used by general renderer implementations to allow render data to be filled in externally. ## `start` a `gtk::TextIter` ## `end` a `gtk::TextIter` ## `state` the renderer state",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_tooltip","","The ::query-tooltip signal is emitted when the renderer can show a tooltip. ## `iter` a `gtk::TextIter` ## `area` a `gdk::Rectangle` ## `x` the x position (in window coordinates) ## `y` the y position (in window coordinates) ## `tooltip` a `gtk::Tooltip`",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_queue_draw","","The ::queue-draw signal is emitted when the renderer needs to be redrawn. Use `GutterRendererExt::queue_draw` to emit this signal from an implementation of the `GutterRenderer` interface.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alignment_mode_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_view_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_type_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterRendererPixbufExt","","Trait containing all `GutterRendererPixbuf` methods.",null,null],[10,"get_gicon","","Get the gicon of the renderer",20,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon_name","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_pixbuf","","Get the pixbuf of the renderer.",20,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_stock_id","","Deprecated since 3.10",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_gicon","","`icon` the icon, or `None`.",20,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon_name","","`icon_name` the icon name, or `None`.",20,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_pixbuf","","`pixbuf` the pixbuf, or `None`.",20,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_stock_id","","Deprecated since 3.10",20,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_property_gicon_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GutterRendererTextExt","","Trait containing all `GutterRendererText` methods.",null,null],[10,"measure","","Measures the text provided using the pango layout used by the `GutterRendererText`. ## `text` the text to measure. ## `width` location to store the width of the text in pixels,  or `None`. ## `height` location to store the height of the text in  pixels, or `None`.",21,null],[10,"measure_markup","","Measures the pango markup provided using the pango layout used by the `GutterRendererText`. ## `markup` the pango markup to measure. ## `width` location to store the width of the text in pixels,  or `None`. ## `height` location to store the height of the text in  pixels, or `None`.",21,null],[10,"set_markup","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_text","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_markup","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_text","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_markup_notify","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LanguageExt","","Trait containing all `Language` methods.",null,null],[10,"get_globs","","Returns the globs associated to this language. This is just an utility wrapper around `LanguageExt::get_metadata` to retrieve the \"globs\" metadata property and split it into an array.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_hidden","","Returns whether the language should be hidden from the user.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_id","","Returns the ID of the language. The ID is not locale-dependent. The returned string is owned by `self` and should not be freed or modified.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_metadata","","`name` metadata property name.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mime_types","","Returns the mime types associated to this language. This is just an utility wrapper around `LanguageExt::get_metadata` to retrieve the \"mimetypes\" metadata property and split it into an array.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_name","","Returns the localized name of the language. The returned string is owned by `self` and should not be freed or modified.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_section","","Returns the localized section of the language. Each language belong to a section (ex. HTML belogs to the Markup section). The returned string is owned by `self` and should not be freed or modified.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_style_fallback","","Returns the ID of the style to use if the specified `style_id` is not present in the current style scheme.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_style_ids","","Returns the ids of the styles defined by this `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_style_name","","Returns the name of the style with ID `style_id` defined by this `self`. ## `style_id` a style ID.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_hidden_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_id_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_section_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LanguageManagerExt","","Trait containing all `LanguageManager` methods.",null,null],[10,"get_language","","Gets the `Language` identified by the given `id` in the language manager. ## `id` a language id.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["language"],"name":"option"}}],[10,"get_language_ids","","Returns the ids of the available languages.",23,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_search_path","","Gets the list directories where `self` looks for language files.",23,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"guess_language","","Picks a `Language` for given file name and content type, according to the information in lang files. Either `filename` or `content_type` may be `None`. This function can be used as follows:",23,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["language"],"name":"option"}}],[10,"set_search_path","","Sets the list of directories where the `self` looks for language files. If `dirs` is `None`, the search path is reset to default.",23,null],[10,"connect_property_language_ids_notify","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_path_notify","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MapExt","","Trait containing all `Map` methods.",null,null],[10,"get_view","","Gets the `Map:view` property, which is the view this widget is mapping.",24,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"set_view","","Sets the view that `self` will be doing the mapping to.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_view","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["view"],"name":"option"}}],[10,"set_property_view","","",24,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"connect_property_view_notify","","",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MarkExt","","Trait containing all `Mark` methods.",null,null],[10,"get_category","","Returns the mark category.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"next","","Returns the next `Mark` in the buffer or `None` if the mark was not added to a buffer. If there is no next mark, `None` will be returned.",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["mark"],"name":"option"}}],[10,"prev","","Returns the previous `Mark` in the buffer or `None` if the mark was not added to a buffer. If there is no previous mark, `None` is returned.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["mark"],"name":"option"}}],[10,"connect_property_category_notify","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MarkAttributesExt","","Trait containing all `MarkAttributes` methods.",null,null],[10,"get_background","","Stores background color in `background`. ## `background` a `gdk::RGBA`.",26,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"get_gicon","","Gets a `gio::Icon` to be used as a base for rendered icon. Note that the icon can be `None` if it wasn't set earlier.",26,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon_name","","Gets a name of an icon to be used as a base for rendered icon. Note that the icon name can be `None` if it wasn't set earlier.",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_stock_id","","Gets a stock id of an icon used by this attributes. Note that the stock id can be `None` if it wasn't set earlier.",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_markup","","Queries for a tooltip by emitting a `MarkAttributes::query-tooltip-markup` signal. The tooltip may contain a markup. ## `mark` a `Mark`.",26,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_text","","Queries for a tooltip by emitting a `MarkAttributes::query-tooltip-text` signal. The tooltip is a plain text. ## `mark` a `Mark`.",26,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_background","","Sets background color to the one given in `background`. ## `background` a `gdk::RGBA`.",26,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_gicon","","Sets an icon to be used as a base for rendered icon. ## `gicon` a `gio::Icon` to be used.",26,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_name","","Sets a name of an icon to be used as a base for rendered icon. ## `icon_name` name of an icon to be used.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_pixbuf","","Sets a pixbuf to be used as a base for rendered icon. ## `pixbuf` a `gdk_pixbuf::Pixbuf` to be used.",26,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"set_stock_id","","Sets stock id to be used as a base for rendered icon.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_pixbuf","","A `gdk_pixbuf::Pixbuf` that may be a base of a rendered icon.",26,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"connect_query_tooltip_markup","","The code should connect to this signal to provide a tooltip for given `mark`. The tooltip can contain a markup. ## `mark` The `Mark`.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_tooltip_text","","The code should connect to this signal to provide a tooltip for given `mark`. The tooltip should be just a plain text. ## `mark` The `Mark`.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintCompositorExt","","Trait containing all `PrintCompositor` methods.",null,null],[10,"get_body_font_name","","Returns the name of the font used to print the text body. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_bottom_margin","","Gets the bottom margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_buffer","","Gets the `Buffer` associated with the compositor. The returned object reference is owned by the compositor object and should not be unreferenced.",27,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_footer_font_name","","Returns the name of the font used to print the page footer. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_header_font_name","","Returns the name of the font used to print the page header. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_highlight_syntax","","Determines whether the printed text will be highlighted according to the buffer rules. Note that highlighting will happen only if the buffer to print has highlighting activated.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_left_margin","","Gets the left margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_line_numbers_font_name","","Returns the name of the font used to print line numbers on the left margin. The returned string must be freed with `g_free`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_n_pages","","Returns the number of pages in the document or `<code>`-1`</code>` if the document has not been completely paginated.",27,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_pagination_progress","","Returns the current fraction of the document pagination that has been completed.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_print_footer","","Determines if a footer is set to be printed for each page. A footer will be printed if this function returns `true` `<emphasis>`and`</emphasis>` some format strings have been specified with `PrintCompositorExt::set_footer_format`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_print_header","","Determines if a header is set to be printed for each page. A header will be printed if this function returns `true` `<emphasis>`and`</emphasis>` some format strings have been specified with `PrintCompositorExt::set_header_format`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_print_line_numbers","","Returns the interval used for line number printing. If the value is 0, no line numbers will be printed. The default value is 1 (i.e. numbers printed in all lines).",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_right_margin","","Gets the right margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_tab_width","","Returns the width of tabulation in characters for printed text.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_top_margin","","Gets the top margin in units of `unit`. ## `unit` the unit for the return value.",27,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_wrap_mode","","Gets the line wrapping mode for the printed text.",27,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_body_font_name","","Sets the default font for the printed text.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_bottom_margin","","Sets the bottom margin used by `self`. ## `margin` the new bottom margin in units of `unit`. ## `unit` the units for `margin`.",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_footer_font_name","","Sets the font for printing the page footer. If `None` is supplied, the default font (i.e. the one being used for the text) will be used instead.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_footer_format","","See `PrintCompositorExt::set_header_format` for more information about the parameters. ## `separator` `true` if you want a separator line to be printed. ## `left` a format string to print on the left of the footer. ## `center` a format string to print on the center of the footer. ## `right` a format string to print on the right of the footer.",27,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"set_header_font_name","","Sets the font for printing the page header. If `None` is supplied, the default font (i.e. the one being used for the text) will be used instead.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_header_format","","Sets strftime like header format strings, to be printed on the left, center and right of the top of each page. The strings may include strftime(3) codes which will be expanded at print time. A subset of `strftime` codes are accepted, see `glib::DateTime::format` for more details on the accepted format specifiers. Additionally the following format specifiers are accepted: - `N`: the page number - `Q`: the page count.",27,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"set_highlight_syntax","","Sets whether the printed text will be highlighted according to the buffer rules. Both color and font style are applied.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_left_margin","","Sets the left margin used by `self`. ## `margin` the new left margin in units of `unit`. ## `unit` the units for `margin`.",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_line_numbers_font_name","","Sets the font for printing line numbers on the left margin. If `None` is supplied, the default font (i.e. the one being used for the text) will be used instead.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_print_footer","","Sets whether you want to print a footer in each page. The footer consists of three pieces of text and an optional line separator, configurable with `PrintCompositorExt::set_footer_format`.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_print_header","","Sets whether you want to print a header in each page. The header consists of three pieces of text and an optional line separator, configurable with `PrintCompositorExt::set_header_format`.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_print_line_numbers","","Sets the interval for printed line numbers. If `interval` is 0 no numbers will be printed. If greater than 0, a number will be printed every `interval` lines (i.e. 1 will print all line numbers).",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_right_margin","","Sets the right margin used by `self`. ## `margin` the new right margin in units of `unit`. ## `unit` the units for `margin`.",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_tab_width","","Sets the width of tabulation in characters for printed text.",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_top_margin","","Sets the top margin used by `self`. ## `margin` the new top margin in units of `unit` ## `unit` the units for `margin`",27,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_wrap_mode","","Sets the line wrapping mode for the printed text.",27,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"connect_property_body_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_footer_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_header_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_syntax_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_line_numbers_font_name_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_pages_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_footer_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_header_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_line_numbers_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tab_width_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RegionExt","","",null,null],[10,"add_region","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add_subregion","","",28,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"get_bounds","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_buffer","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[10,"intersect_region","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["region"],"name":"option"}}],[10,"intersect_subregion","","",28,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":{"generics":["region"],"name":"option"}}],[10,"is_empty","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"subtract_region","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"subtract_subregion","","",28,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"to_string","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"connect_property_buffer_notify","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchContextExt","","Trait containing all `SearchContext` methods.",null,null],[10,"backward","","Synchronous backward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"backward2","","Synchronous backward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"backward_async","","The asynchronous version of `SearchContextExt::backward2`.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"},{"name":"q"}],"output":null}],[10,"forward","","Synchronous forward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"forward2","","Synchronous forward search. It is recommended to use the asynchronous functions instead, to not block the user interface. However, if you are sure that the `buffer` is small, this function is more convenient to use.",29,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"option"}}],[10,"forward_async","","The asynchronous version of `SearchContextExt::forward2`.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_buffer","","Feature: `v3_10`",29,{"inputs":[{"name":"self"}],"output":{"generics":["buffer"],"name":"option"}}],[10,"get_highlight","","Feature: `v3_10`",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_match_style","","Feature: `v3_16`",29,{"inputs":[{"name":"self"}],"output":{"generics":["style"],"name":"option"}}],[10,"get_occurrence_position","","Gets the position of a search occurrence. If the buffer is not already fully scanned, the position may be unknown, and -1 is returned. If 0 is returned, it means that this part of the buffer has already been scanned, and that `match_start` and `match_end` don't delimit an occurrence.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":{"name":"i32"}}],[10,"get_occurrences_count","","Gets the total number of search occurrences. If the buffer is not already fully scanned, the total number of occurrences is unknown, and -1 is returned.",29,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_regex_error","","Regular expression patterns must follow certain rules. If `SearchSettings:search-text` breaks a rule, the error can be retrieved with this function. The error domain is `G_REGEX_ERROR`.",29,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[10,"get_settings","","Feature: `v3_10`",29,{"inputs":[{"name":"self"}],"output":{"generics":["searchsettings"],"name":"option"}}],[10,"replace","","Replaces a search match by another text. If `match_start` and `match_end` doesn't correspond to a search match, `false` is returned.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"replace2","","Replaces a search match by another text. If `match_start` and `match_end` doesn't correspond to a search match, `false` is returned.",29,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"replace_all","","Replaces all search matches by another text. It is a synchronous function, so it can block the user interface.",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_highlight","","Enables or disables the search occurrences highlighting.",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_match_style","","Set the style to apply on search matches. If `match_style` is `None`, default theme's scheme 'match-style' will be used. To enable or disable the search highlighting, use `SearchContextExt::set_highlight`.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_settings","","Associate a `SearchSettings` with the search context. If `settings` is `None`, a new one will be created.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_property_buffer_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_match_style_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_occurrences_count_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_regex_error_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_settings_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchSettingsExt","","Trait containing all `SearchSettings` methods.",null,null],[10,"get_at_word_boundaries","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_case_sensitive","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_regex_enabled","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_search_text","","Gets the text to search. The return value must not be freed.",30,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_wrap_around","","Feature: `v3_10`",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_at_word_boundaries","","Change whether the search is done at word boundaries. If `at_word_boundaries` is `true`, a search match must start and end a word. The match can span multiple words. See also `gtk::TextIter::starts_word` and `gtk::TextIter::ends_word`.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_case_sensitive","","Enables or disables the case sensitivity for the search.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_regex_enabled","","Enables or disables whether to search by regular expressions. If enabled, the `SearchSettings:search-text` property contains the pattern of the regular expression.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_search_text","","Sets the text to search. If `text` is `None` or is empty, the search will be disabled. A copy of `text` will be made, so you can safely free `text` after a call to this function.",30,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_wrap_around","","Enables or disables the wrap around search. If `wrap_around` is `true`, the forward search continues at the beginning of the buffer if no search occurrences are found. Similarly, the backward search continues to search at the end of the buffer.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_at_word_boundaries_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_case_sensitive_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_regex_enabled_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_text_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_around_notify","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpaceDrawerExt","","Trait containing all `SpaceDrawer` methods.",null,null],[10,"bind_matrix_setting","","Binds the `SpaceDrawer:matrix` property to a `gio::Settings` key.",31,{"inputs":[{"name":"self"},{"name":"settings"},{"name":"str"},{"name":"settingsbindflags"}],"output":null}],[10,"get_enable_matrix","","Feature: `v3_24`",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_matrix","","Gets the value of the `SpaceDrawer:matrix` property, as a `glib::Variant`. An empty array can be returned in case the matrix is a zero matrix.",31,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_types_for_locations","","If only one location is specified, this function returns what kind of white spaces are drawn at that location. The value is retrieved from the `SpaceDrawer:matrix` property.",31,{"inputs":[{"name":"self"},{"name":"spacelocationflags"}],"output":{"name":"spacetypeflags"}}],[10,"set_enable_matrix","","Sets whether the `SpaceDrawer:matrix` property is enabled.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_matrix","","Sets a new value to the `SpaceDrawer:matrix` property, as a `glib::Variant`. If `matrix` is `None`, then an empty array is set.",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_types_for_locations","","Modifies the `SpaceDrawer:matrix` property at the specified `locations`.",31,{"inputs":[{"name":"self"},{"name":"spacelocationflags"},{"name":"spacetypeflags"}],"output":null}],[10,"connect_property_enable_matrix_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_matrix_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleExt","","Trait containing all `Style` methods.",null,null],[10,"get_property_background","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_background_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_bold","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_bold_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_foreground","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_foreground_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_italic","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_italic_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_line_background","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_line_background_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_pango_underline","","",32,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[10,"get_property_scale","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_scale_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_strikethrough","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_strikethrough_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_underline","","Deprecated since 3.18",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_underline_color","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_underline_color_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_underline_set","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_background_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_bold_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_bold_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_italic_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_italic_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_line_background_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_line_background_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pango_underline_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_color_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_color_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_set_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleSchemeExt","","Trait containing all `StyleScheme` methods.",null,null],[10,"get_authors","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_description","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_filename","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_id","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Returns",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_style","","`style_id` id of the style to retrieve.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["style"],"name":"option"}}],[10,"connect_property_description_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filename_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_id_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleSchemeChooserExt","","Trait containing all `StyleSchemeChooser` methods.",null,null],[10,"get_style_scheme","","Gets the currently-selected scheme.",34,{"inputs":[{"name":"self"}],"output":{"generics":["stylescheme"],"name":"option"}}],[10,"set_style_scheme","","Sets the scheme.",34,{"inputs":[{"name":"self"},{"name":"stylescheme"}],"output":null}],[10,"connect_property_style_scheme_notify","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleSchemeManagerExt","","Trait containing all `StyleSchemeManager` methods.",null,null],[10,"append_search_path","","Appends `path` to the list of directories where the `self` looks for style scheme files. See `StyleSchemeManagerExt::set_search_path` for details. ## `path` a directory or a filename.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"force_rescan","","Mark any currently cached information about the available style scehems as invalid. All the available style schemes will be reloaded next time the `self` is accessed.",35,{"inputs":[{"name":"self"}],"output":null}],[10,"get_scheme","","Looks up style scheme by id. ## `scheme_id` style scheme id to find.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["stylescheme"],"name":"option"}}],[10,"get_scheme_ids","","Returns the ids of the available style schemes.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_search_path","","Returns the current search path for the `self`. See `StyleSchemeManagerExt::set_search_path` for details.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"prepend_search_path","","Prepends `path` to the list of directories where the `self` looks for style scheme files. See `StyleSchemeManagerExt::set_search_path` for details. ## `path` a directory or a filename.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_search_path","","Sets the list of directories where the `self` looks for style scheme files. If `path` is `None`, the search path is reset to default. ## `path`",35,null],[10,"connect_property_scheme_ids_notify","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_path_notify","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TagExt","","Trait containing all `Tag` methods.",null,null],[10,"get_property_draw_spaces","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_draw_spaces","","",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_draw_spaces_set","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_draw_spaces_set","","",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_draw_spaces_notify","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_spaces_set_notify","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"UndoManagerExt","","Trait containing all `UndoManager` methods.",null,null],[10,"begin_not_undoable_action","","Begin a not undoable action on the buffer. All changes between this call and the call to `UndoManager::end_not_undoable_action` cannot be undone. This function should be re-entrant.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"can_redo","","Get whether there are redo operations available.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_redo_changed","","Emits the `UndoManager::can-redo-changed` signal.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"can_undo","","Get whether there are undo operations available.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_undo_changed","","Emits the `UndoManager::can-undo-changed` signal.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"end_not_undoable_action","","Ends a not undoable action on the buffer.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"redo","","Perform a single redo. Calling this function when there are no redo operations available is an error. Use `UndoManager::can_redo` to find out if there are redo operations available.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"undo","","Perform a single undo. Calling this function when there are no undo operations available is an error. Use `UndoManager::can_undo` to find out if there are undo operations available.",37,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_can_redo_changed","","Emitted when the ability to redo has changed.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_can_redo_changed","","",37,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_can_undo_changed","","Emitted when the ability to undo has changed.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_can_undo_changed","","",37,{"inputs":[{"name":"self"}],"output":null}],[8,"ViewExt","","Trait containing all `View` methods.",null,null],[10,"get_auto_indent","","Returns whether auto-indentation of text is enabled.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_background_pattern","","Returns the `BackgroundPatternType` specifying if and how the background pattern should be displayed for this `self`.",38,{"inputs":[{"name":"self"}],"output":{"name":"backgroundpatterntype"}}],[10,"get_completion","","Gets the `Completion` associated with `self`. The returned object is guaranteed to be the same for the lifetime of `self`. Each `View` object has a different `Completion`.",38,{"inputs":[{"name":"self"}],"output":{"generics":["completion"],"name":"option"}}],[10,"get_draw_spaces","","Returns the `DrawSpacesFlags` specifying if and how spaces should be displayed for this `self`.",38,{"inputs":[{"name":"self"}],"output":{"name":"drawspacesflags"}}],[10,"get_gutter","","Returns the `Gutter` object associated with `window_type` for `self`. Only GTK_TEXT_WINDOW_LEFT and GTK_TEXT_WINDOW_RIGHT are supported, respectively corresponding to the left and right gutter. The line numbers and mark category icons are rendered in the left gutter. ## `window_type` the gutter window type.",38,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"generics":["gutter"],"name":"option"}}],[10,"get_highlight_current_line","","Returns whether the current line is highlighted.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_indent_on_tab","","Returns whether when the tab key is pressed the current selection should get indented instead of replaced with the \\t character.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_indent_width","","Returns the number of spaces to use for each step of indent. See `ViewExt::set_indent_width` for details.",38,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_insert_spaces_instead_of_tabs","","Returns whether when inserting a tabulator character it should be replaced by a group of space characters.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_right_margin_position","","Gets the position of the right margin in the given `self`.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_show_line_marks","","Returns whether line marks are displayed beside the text.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_line_numbers","","Returns whether line numbers are displayed beside the text.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_right_margin","","Returns whether a right margin is displayed.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_smart_backspace","","Returns `true` if pressing the Backspace key will try to delete spaces up to the previous tab stop.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_smart_home_end","","Returns a `SmartHomeEndType` end value specifying how the cursor will move when HOME and END keys are pressed.",38,{"inputs":[{"name":"self"}],"output":{"name":"smarthomeendtype"}}],[10,"get_space_drawer","","Gets the `SpaceDrawer` associated with `self`. The returned object is guaranteed to be the same for the lifetime of `self`. Each `View` object has a different `SpaceDrawer`.",38,{"inputs":[{"name":"self"}],"output":{"generics":["spacedrawer"],"name":"option"}}],[10,"get_tab_width","","Returns the width of tabulation in characters.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_visual_column","","Determines the visual column at `iter` taking into consideration the `View:tab-width` of `self`. ## `iter` a position in `self`.",38,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"u32"}}],[10,"indent_lines","","Insert one indentation level at the beginning of the specified lines.",38,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"set_auto_indent","","If `true` auto-indentation of text is enabled.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_background_pattern","","Set if and how the background pattern should be displayed.",38,{"inputs":[{"name":"self"},{"name":"backgroundpatterntype"}],"output":null}],[10,"set_draw_spaces","","Set if and how the spaces should be visualized. Specifying `flags` as 0 will disable display of spaces.",38,{"inputs":[{"name":"self"},{"name":"drawspacesflags"}],"output":null}],[10,"set_highlight_current_line","","If `highlight` is `true` the current line will be highlighted. ## `highlight` whether to highlight the current line.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_indent_on_tab","","If `true`, when the tab key is pressed when several lines are selected, the selected lines are indented of one level instead of being replaced with a \\t character. Shift+Tab unindents the selection.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_indent_width","","Sets the number of spaces to use for each step of indent when the tab key is pressed. If `width` is -1, the value of the `View:tab-width` property will be used.",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_insert_spaces_instead_of_tabs","","If `true` a tab key pressed is replaced by a group of space characters. Of course it is still possible to insert a real \\t programmatically with the `gtk::TextBuffer` API. ## `enable` whether to insert spaces instead of tabs.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mark_attributes","","Sets attributes and priority for the `category`. ## `category` the category. ## `attributes` mark attributes. ## `priority` priority of the category.",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"markattributes"},{"name":"i32"}],"output":null}],[10,"set_right_margin_position","","Sets the position of the right margin in the given `self`. ## `pos` the width in characters where to position the right margin.",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_show_line_marks","","If `true` line marks will be displayed beside the text. ## `show` whether line marks should be displayed.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_line_numbers","","If `true` line numbers will be displayed beside the text. ## `show` whether line numbers should be displayed.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_right_margin","","If `true` a right margin is displayed. ## `show` whether to show a right margin.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_smart_backspace","","When set to `true`, pressing the Backspace key will try to delete spaces up to the previous tab stop.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_smart_home_end","","Set the desired movement of the cursor when HOME and END keys are pressed. ## `smart_home_end` the desired behavior among `SmartHomeEndType`.",38,{"inputs":[{"name":"self"},{"name":"smarthomeendtype"}],"output":null}],[10,"set_tab_width","","Sets the width of tabulation in characters. The `gtk::TextBuffer` still contains \\t characters, but they can take a different visual width in a `View` widget. ## `width` width of tab in characters.",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"unindent_lines","","Removes one indentation level at the beginning of the specified lines.",38,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"connect_change_case","","Keybinding signal to change case of the text at the current cursor position.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_change_case","","",38,{"inputs":[{"name":"self"},{"name":"changecasetype"}],"output":null}],[10,"connect_change_number","","Keybinding signal to edit a number at the current cursor position.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_change_number","","",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_join_lines","","Keybinding signal to join the lines currently selected.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_join_lines","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_line_mark_activated","","Emitted when a line mark has been activated (for instance when there was a button press in the line marks gutter). You can use `iter` to determine on which line the activation took place. ## `iter` a `gtk::TextIter` ## `event` the `GdkEvent` that activated the event",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_lines","","The ::move-lines signal is a keybinding which gets emitted when the user initiates moving a line. The default binding key is Alt+Up/Down arrow. And moves the currently selected lines, or the current line by `count`. For the moment, only `count` of -1 or 1 is valid.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_lines","","",38,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"i32"}],"output":null}],[10,"connect_move_to_matching_bracket","","Keybinding signal to move the cursor to the matching bracket.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_to_matching_bracket","","",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_move_words","","The ::move-words signal is a keybinding which gets emitted when the user initiates moving a word. The default binding key is Alt+Left/Right Arrow and moves the current selection, or the current word by one word. ## `count` the number of words to move over",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_words","","",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_redo","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_redo","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_show_completion","","The ::show-completion signal is a key binding signal which gets emitted when the user requests a completion, by pressing `<keycombo>``<keycap>`Control`</keycap>``<keycap>`space`</keycap>``</keycombo>`.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show_completion","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_smart_home_end","","Emitted when a the cursor was moved according to the smart home end setting. The signal is emitted after the cursor is moved, but during the `gtk::TextView`::move-cursor action. This can be used to find out whether the cursor was moved by a normal home/end or by a smart home/end. ## `iter` a `gtk::TextIter` ## `count` the count",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_undo","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_undo","","",38,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_auto_indent_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_pattern_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_completion_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_spaces_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_highlight_current_line_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_on_tab_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_width_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_insert_spaces_instead_of_tabs_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_position_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_line_marks_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_line_numbers_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_right_margin_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_smart_backspace_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_smart_home_end_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_space_drawer_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tab_width_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"new","","Creates an error with supplied error enum variant and message.",81,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",81,null],[11,"eq","sourceview::signal","",6,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"eq","sourceview","",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sourceview::signal","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","sourceview","",82,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","sourceview::signal","",6,{"inputs":[{"name":"self"}],"output":{"name":"inhibit"}}],[11,"static_type","sourceview","",82,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",81,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",82,null],[11,"default","sourceview::signal","",6,{"inputs":[],"output":{"name":"inhibit"}}],[11,"description","sourceview","",81,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[4,"BackgroundPatternType"],[4,"ChangeCaseType"],[4,"CompressionType"],[4,"GutterRendererAlignmentMode"],[4,"NewlineType"],[4,"SmartHomeEndType"],[3,"Inhibit"],[8,"BufferExt"],[8,"CompletionExt"],[8,"CompletionContextExt"],[8,"CompletionInfoExt"],[8,"CompletionItemExt"],[8,"CompletionProposalExt"],[8,"CompletionProviderExt"],[8,"CompletionWordsExt"],[8,"FileExt"],[8,"FileLoaderExt"],[8,"FileSaverExt"],[8,"GutterExt"],[8,"GutterRendererExt"],[8,"GutterRendererPixbufExt"],[8,"GutterRendererTextExt"],[8,"LanguageExt"],[8,"LanguageManagerExt"],[8,"MapExt"],[8,"MarkExt"],[8,"MarkAttributesExt"],[8,"PrintCompositorExt"],[8,"RegionExt"],[8,"SearchContextExt"],[8,"SearchSettingsExt"],[8,"SpaceDrawerExt"],[8,"StyleExt"],[8,"StyleSchemeExt"],[8,"StyleSchemeChooserExt"],[8,"StyleSchemeManagerExt"],[8,"TagExt"],[8,"UndoManagerExt"],[8,"ViewExt"],[3,"Buffer"],[3,"Completion"],[3,"CompletionContext"],[3,"CompletionInfo"],[3,"CompletionItem"],[3,"CompletionProposal"],[3,"CompletionProvider"],[3,"CompletionWords"],[3,"File"],[3,"FileLoader"],[3,"FileSaver"],[3,"Gutter"],[3,"GutterRenderer"],[3,"GutterRendererPixbuf"],[3,"GutterRendererText"],[3,"Language"],[3,"LanguageManager"],[3,"Map"],[3,"Mark"],[3,"MarkAttributes"],[3,"PrintCompositor"],[3,"Region"],[3,"SearchContext"],[3,"SearchSettings"],[3,"SpaceDrawer"],[3,"Style"],[3,"StyleScheme"],[3,"StyleSchemeChooser"],[3,"StyleSchemeChooserButton"],[3,"StyleSchemeChooserWidget"],[3,"StyleSchemeManager"],[3,"Tag"],[3,"UndoManager"],[3,"View"],[3,"Encoding"],[3,"CompletionActivation"],[3,"DrawSpacesFlags"],[3,"FileSaverFlags"],[3,"GutterRendererState"],[3,"SortFlags"],[3,"SpaceLocationFlags"],[3,"SpaceTypeFlags"],[3,"Error"],[3,"Object"]]};
searchIndex["glib"] = {"doc":"glib, gobject and gio bindings for Rust","items":[[3,"TimeVal","glib","",null,null],[12,"tv_sec","","",0,null],[12,"tv_usec","","",0,null],[3,"Bytes","","A shared immutable byte slice (the equivalent of `Rc<[u8]>`).",null,null],[3,"VariantTy","","Describes `Variant` types.",null,null],[3,"VariantType","","Describes `Variant` types.",null,null],[3,"EnumClass","","Representation of an `enum` for dynamically, at runtime, querying the values of the enum and using them.",null,null],[3,"EnumValue","","Representation of a single enum value of an `EnumClass`.",null,null],[3,"FlagsClass","","Representation of a `flags` for dynamically, at runtime, querying the values of the enum and using them",null,null],[3,"FlagsValue","","Representation of a single flags value of a `FlagsClass`.",null,null],[3,"FlagsBuilder","","Builder for conveniently setting/unsetting flags and returning a `Value`.",null,null],[3,"Checksum","","",null,null],[3,"DateTime","","",null,null],[3,"KeyFile","","",null,null],[3,"MainContext","","",null,null],[3,"MainLoop","","",null,null],[3,"Source","","",null,null],[3,"TimeZone","","",null,null],[3,"FileTest","","",null,null],[3,"FormatSizeFlags","","",null,null],[3,"IOCondition","","",null,null],[3,"KeyFileFlags","","",null,null],[3,"CSET_A_2_Z","","",null,null],[3,"CSET_DIGITS","","",null,null],[3,"CSET_a_2_z","","",null,null],[3,"KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX","","",null,null],[3,"KEY_FILE_DESKTOP_GROUP","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_ACTIONS","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_CATEGORIES","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_COMMENT","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_EXEC","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_FULLNAME","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_GENERIC_NAME","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_HIDDEN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_ICON","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_KEYWORDS","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_MIME_TYPE","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_NAME","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_NO_DISPLAY","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_PATH","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_TERMINAL","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_TRY_EXEC","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_TYPE","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_URL","","",null,null],[3,"KEY_FILE_DESKTOP_KEY_VERSION","","",null,null],[3,"KEY_FILE_DESKTOP_TYPE_APPLICATION","","",null,null],[3,"KEY_FILE_DESKTOP_TYPE_DIRECTORY","","",null,null],[3,"KEY_FILE_DESKTOP_TYPE_LINK","","",null,null],[3,"OPTION_REMAINING","","",null,null],[3,"STR_DELIMITERS","","",null,null],[3,"URI_RESERVED_CHARS_GENERIC_DELIMITERS","","",null,null],[3,"URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS","","",null,null],[3,"Date","","",null,null],[4,"FileError","","",null,null],[13,"Exist","","",1,null],[13,"Isdir","","",1,null],[13,"Acces","","",1,null],[13,"Nametoolong","","",1,null],[13,"Noent","","",1,null],[13,"Notdir","","",1,null],[13,"Nxio","","",1,null],[13,"Nodev","","",1,null],[13,"Rofs","","",1,null],[13,"Txtbsy","","",1,null],[13,"Fault","","",1,null],[13,"Loop","","",1,null],[13,"Nospc","","",1,null],[13,"Nomem","","",1,null],[13,"Mfile","","",1,null],[13,"Nfile","","",1,null],[13,"Badf","","",1,null],[13,"Inval","","",1,null],[13,"Pipe","","",1,null],[13,"Again","","",1,null],[13,"Intr","","",1,null],[13,"Io","","",1,null],[13,"Perm","","",1,null],[13,"Nosys","","",1,null],[13,"Failed","","",1,null],[4,"UserDirectory","","",null,null],[13,"Desktop","","",2,null],[13,"Documents","","",2,null],[13,"Downloads","","",2,null],[13,"Music","","",2,null],[13,"Pictures","","",2,null],[13,"PublicShare","","",2,null],[13,"Templates","","",2,null],[13,"Videos","","",2,null],[4,"ChecksumType","","",null,null],[13,"Md5","","",3,null],[13,"Sha1","","",3,null],[13,"Sha256","","",3,null],[13,"Sha512","","",3,null],[13,"Sha384","","",3,null],[4,"DateMonth","","",null,null],[13,"BadMonth","","",4,null],[13,"January","","",4,null],[13,"February","","",4,null],[13,"March","","",4,null],[13,"April","","",4,null],[13,"May","","",4,null],[13,"June","","",4,null],[13,"July","","",4,null],[13,"August","","",4,null],[13,"September","","",4,null],[13,"October","","",4,null],[13,"November","","",4,null],[13,"December","","",4,null],[4,"DateWeekday","","",null,null],[13,"BadWeekday","","",5,null],[13,"Monday","","",5,null],[13,"Tuesday","","",5,null],[13,"Wednesday","","",5,null],[13,"Thursday","","",5,null],[13,"Friday","","",5,null],[13,"Saturday","","",5,null],[13,"Sunday","","",5,null],[4,"KeyFileError","","",null,null],[13,"UnknownEncoding","","",6,null],[13,"Parse","","",6,null],[13,"NotFound","","",6,null],[13,"KeyNotFound","","",6,null],[13,"GroupNotFound","","",6,null],[13,"InvalidValue","","",6,null],[4,"SeekType","","",null,null],[13,"Cur","","",7,null],[13,"Set","","",7,null],[13,"End","","",7,null],[4,"TimeType","","",null,null],[13,"Standard","","",8,null],[13,"Daylight","","",8,null],[13,"Universal","","",8,null],[5,"get_current_time","","",null,{"inputs":[],"output":{"name":"timeval"}}],[5,"access","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"assert_warning","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_cmpstr","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_expr","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[5,"base64_decode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"base64_encode","","",null,null],[5,"basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"bit_nth_lsf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_nth_msf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_storage","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"u32"}}],[5,"build_filenamev","","",null,null],[5,"build_pathv","","",null,null],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"check_version","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"clear_error","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"compute_checksum_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_checksum_for_data","","",null,null],[5,"compute_checksum_for_string","","",null,{"inputs":[{"name":"checksumtype"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_data","","",null,null],[5,"compute_hmac_for_string","","",null,null],[5,"dcgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[5,"dgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"dngettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"c_ulong"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext2","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"environ_getenv","","",null,null],[5,"environ_setenv","","",null,null],[5,"environ_unsetenv","","",null,null],[5,"file_get_contents","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"file_open_tmp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[5,"file_read_link","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[5,"file_set_contents","","",null,null],[5,"file_test","","",null,{"inputs":[{"name":"p"},{"name":"filetest"}],"output":{"name":"bool"}}],[5,"filename_display_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"filename_display_name","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size","","",null,{"inputs":[{"name":"u64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_for_display","","",null,{"inputs":[{"name":"i64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_full","","",null,{"inputs":[{"name":"u64"},{"name":"formatsizeflags"}],"output":{"generics":["string"],"name":"option"}}],[5,"get_application_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_charset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_codeset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_environ","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_host_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_language_names","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_locale_variants","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"get_monotonic_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_num_processors","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_real_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_system_config_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_system_data_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_user_cache_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_config_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_data_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_runtime_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_special_dir","","",null,{"inputs":[{"name":"userdirectory"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"hostname_is_ascii_encoded","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_ip_address","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_non_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_to_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"hostname_to_unicode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_static_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"listenv","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"log_remove_handler","","",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":null}],[5,"log_writer_is_journald","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"log_writer_supports_color","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"main_current_source","","",null,{"inputs":[],"output":{"generics":["source"],"name":"option"}}],[5,"main_depth","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"markup_escape_text","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"mem_is_system_malloc","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"mem_profile","","",null,{"inputs":[],"output":null}],[5,"mkdir_with_parents","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mkdtemp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkdtemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkstemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"on_error_query","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"on_error_stack_trace","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"path_get_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_get_dirname","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_is_absolute","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"path_skip_root","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"pattern_match_simple","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"random_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"random_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"random_int","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"random_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"random_set_seed","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"reload_user_special_dirs_cache","","",null,{"inputs":[],"output":null}],[5,"return_if_fail_warning","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"q"}],"output":null}],[5,"rmdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"set_application_name","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"shell_parse_argv","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"shell_quote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"shell_unquote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"spaced_primes_closest","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"spawn_check_exit_status","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"spawn_command_line_async","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"stpcpy","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"test_assert_expected_messages_internal","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"}],"output":null}],[5,"test_bug","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_bug_base","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_fail","","",null,{"inputs":[],"output":null}],[5,"test_failed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_incomplete","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_rand_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_rand_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"test_rand_int","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_rand_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"test_run","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_set_nonfatal_assertions","","",null,{"inputs":[],"output":null}],[5,"test_skip","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_subprocess","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_timer_elapsed","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_last","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_start","","",null,{"inputs":[],"output":null}],[5,"test_trap_assertions","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"u64"},{"name":"str"}],"output":null}],[5,"test_trap_has_passed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_trap_reached_timeout","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"unix_set_fd_nonblocking","","",null,{"inputs":[{"name":"i32"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"uri_escape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_list_extract_uris","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"uri_parse_scheme","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_segment","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"usleep","","",null,{"inputs":[{"name":"c_ulong"}],"output":null}],[5,"uuid_string_is_valid","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"uuid_string_random","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"variant_get_gtype","","",null,{"inputs":[],"output":{"name":"type"}}],[5,"warn_message","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[5,"get_program_name","","Same as [`get_prgname()`].",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_prgname","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"set_program_name","","Same as [`set_prgname()`].",null,{"inputs":[{"generics":["str"],"name":"option"}],"output":null}],[5,"set_prgname","","",null,{"inputs":[{"generics":["str"],"name":"option"}],"output":null}],[5,"getenv","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"setenv","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"bool"}],"output":{"generics":["boolerror"],"name":"result"}}],[5,"unsetenv","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"get_user_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_real_name","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_current_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"filename_to_uri","","",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"filename_from_uri","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"find_program_in_path","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_home_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_tmp_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkstemp","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[0,"wrapper","","`IMPL` The `glib_wrapper!` macro and miscellaneous wrapper traits.",null,null],[6,"Void","glib::wrapper","",null,null],[8,"Wrapper","","Represents a pair of structures (instance, class) as exposed by descendants of GObject",null,null],[16,"GlibType","","type of the Instance structure",9,null],[16,"GlibClassType","","type of the Class structure",9,null],[8,"UnsafeFrom","","",null,null],[10,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"boxed","glib","`IMPL` Boxed wrapper implementation.",null,null],[3,"Boxed","glib::boxed","Encapsulates memory management logic for boxed types.",null,null],[8,"BoxedMemoryManager","","Memory management functions for a boxed type.",null,null],[10,"copy","","Makes a copy.",11,null],[10,"free","","Frees the object.",11,null],[11,"uninitialized","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"uninitialized","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"to_glib_none","","",12,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",12,null],[11,"to_glib_none_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",12,null],[11,"from_glib_none","","",12,null],[11,"from_glib_full","","",12,null],[11,"from_glib_borrow","","",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"shared","glib","`IMPL` Shared (reference counted) wrapper implementation.",null,null],[3,"Shared","glib::shared","Encapsulates memory management logic for shared types.",null,null],[8,"SharedMemoryManager","","",null,null],[10,"ref_","","",13,null],[10,"unref","","",13,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",14,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_glib_none","","",14,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",14,null],[11,"from_glib_none","","",14,null],[11,"from_glib_none","","",14,null],[11,"from_glib_full","","",14,null],[11,"from_glib_borrow","","",14,null],[0,"object","glib","`IMPL` Object wrapper implementation and `Object` binding.",null,null],[3,"Object","glib::object","The base class in the object hierarchy.",null,null],[3,"WeakRef","","",null,null],[8,"Cast","","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[8,"Downcast","","Downcasts support.",null,null],[10,"can_downcast","","Checks if it's possible to downcast to `T`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"downcast","","Tries to downcast to `T`.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"downcast_unchecked","","Downcasts to `T` unconditionally.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ObjectExt","","",null,null],[10,"get_type","","",17,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[10,"set_property","","",17,{"inputs":[{"name":"self"},{"name":"n"},{"name":"tovalue"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["value","boolerror"],"name":"result"}}],[10,"has_property","","",17,{"inputs":[{"name":"self"},{"name":"n"},{"generics":["type"],"name":"option"}],"output":{"generics":["boolerror"],"name":"result"}}],[10,"get_property_type","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["type"],"name":"option"}}],[10,"block_signal","","",17,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":null}],[10,"unblock_signal","","",17,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":null}],[10,"stop_signal_emission","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect","","",17,{"inputs":[{"name":"self"},{"name":"n"},{"name":"bool"},{"name":"f"}],"output":{"generics":["signalhandlerid","boolerror"],"name":"result"}}],[10,"emit","","",17,null],[10,"disconnect","","",17,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":null}],[10,"downgrade","","",17,{"inputs":[{"name":"self"}],"output":{"name":"weakref"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"upgrade","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"functions","glib","",null,null],[5,"access","glib::functions","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"assert_warning","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_cmpstr","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[5,"assertion_message_expr","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[5,"base64_decode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"base64_encode","","",null,null],[5,"basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"bit_nth_lsf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_nth_msf","","",null,{"inputs":[{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bit_storage","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"u32"}}],[5,"build_filenamev","","",null,null],[5,"build_pathv","","",null,null],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"check_version","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"clear_error","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"compute_checksum_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_checksum_for_data","","",null,null],[5,"compute_checksum_for_string","","",null,{"inputs":[{"name":"checksumtype"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_bytes","","",null,{"inputs":[{"name":"checksumtype"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["string"],"name":"option"}}],[5,"compute_hmac_for_data","","",null,null],[5,"compute_hmac_for_string","","",null,null],[5,"dcgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[5,"dgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"dngettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"c_ulong"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"generics":["string"],"name":"option"}}],[5,"dpgettext2","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"environ_getenv","","",null,null],[5,"environ_setenv","","",null,null],[5,"environ_unsetenv","","",null,null],[5,"file_get_contents","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"file_open_tmp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[5,"file_read_link","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[5,"file_set_contents","","",null,null],[5,"file_test","","",null,{"inputs":[{"name":"p"},{"name":"filetest"}],"output":{"name":"bool"}}],[5,"filename_display_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"filename_display_name","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size","","",null,{"inputs":[{"name":"u64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_for_display","","",null,{"inputs":[{"name":"i64"}],"output":{"generics":["string"],"name":"option"}}],[5,"format_size_full","","",null,{"inputs":[{"name":"u64"},{"name":"formatsizeflags"}],"output":{"generics":["string"],"name":"option"}}],[5,"get_application_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_charset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_codeset","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_environ","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_host_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_language_names","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"get_locale_variants","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"get_monotonic_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_num_processors","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_real_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_system_config_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_system_data_dirs","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[5,"get_user_cache_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_config_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_data_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_runtime_dir","","",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"get_user_special_dir","","",null,{"inputs":[{"name":"userdirectory"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"hostname_is_ascii_encoded","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_ip_address","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_is_non_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"hostname_to_ascii","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"hostname_to_unicode","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_static_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"intern_string","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"listenv","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"log_remove_handler","","",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":null}],[5,"log_writer_is_journald","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"log_writer_supports_color","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"main_current_source","","",null,{"inputs":[],"output":{"generics":["source"],"name":"option"}}],[5,"main_depth","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"markup_escape_text","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"mem_is_system_malloc","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"mem_profile","","",null,{"inputs":[],"output":null}],[5,"mkdir_with_parents","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mkdtemp","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkdtemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"mkstemp_full","","",null,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"on_error_query","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"on_error_stack_trace","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"path_get_basename","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_get_dirname","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"path_is_absolute","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"path_skip_root","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"pattern_match_simple","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"random_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"random_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"random_int","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"random_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"random_set_seed","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"reload_user_special_dirs_cache","","",null,{"inputs":[],"output":null}],[5,"return_if_fail_warning","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"q"}],"output":null}],[5,"rmdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"set_application_name","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"shell_parse_argv","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"shell_quote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"shell_unquote","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"spaced_primes_closest","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"spawn_check_exit_status","","",null,{"inputs":[{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[5,"spawn_command_line_async","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"stpcpy","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"test_assert_expected_messages_internal","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"}],"output":null}],[5,"test_bug","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_bug_base","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"test_fail","","",null,{"inputs":[],"output":null}],[5,"test_failed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_incomplete","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_rand_double","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_rand_double_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"test_rand_int","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_rand_int_range","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"test_run","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"test_set_nonfatal_assertions","","",null,{"inputs":[],"output":null}],[5,"test_skip","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"test_subprocess","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_timer_elapsed","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_last","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"test_timer_start","","",null,{"inputs":[],"output":null}],[5,"test_trap_assertions","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"u64"},{"name":"str"}],"output":null}],[5,"test_trap_has_passed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"test_trap_reached_timeout","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"unix_set_fd_nonblocking","","",null,{"inputs":[{"name":"i32"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"i32"}}],[5,"uri_escape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_list_extract_uris","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"uri_parse_scheme","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_segment","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["string"],"name":"option"}}],[5,"uri_unescape_string","","",null,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"usleep","","",null,{"inputs":[{"name":"c_ulong"}],"output":null}],[5,"uuid_string_is_valid","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"uuid_string_random","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"variant_get_gtype","","",null,{"inputs":[],"output":{"name":"type"}}],[5,"warn_message","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"q"}],"output":null}],[11,"clone","glib","",20,{"inputs":[{"name":"self"}],"output":{"name":"checksum"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",20,{"inputs":[{"name":"checksumtype"}],"output":{"name":"checksum"}}],[11,"reset","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","",20,null],[11,"type_get_length","","",20,{"inputs":[{"name":"checksumtype"}],"output":{"name":"isize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",21,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_local","","",21,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_utc","","",21,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_local","","",21,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_now","","",21,{"inputs":[{"name":"timezone"}],"output":{"name":"datetime"}}],[11,"new_now_local","","",21,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_now_utc","","",21,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_utc","","",21,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"name":"timespan"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_days","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_full","","",21,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_hours","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_minutes","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_months","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_seconds","","",21,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_weeks","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_years","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"difference","","",21,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"timespan"}}],[11,"format","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_day_of_month","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_day_of_week","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_day_of_year","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_hour","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_microsecond","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_minute","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_month","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_second","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_seconds","","",21,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_timezone_abbreviation","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_utc_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"timespan"}}],[11,"get_week_numbering_year","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_week_of_year","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_year","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ymd","","",21,null],[11,"is_daylight_savings","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_local","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_timezone","","",21,{"inputs":[{"name":"self"},{"name":"timezone"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_unix","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_utc","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"keyfile"}}],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"keyfile"}}],[11,"get_boolean","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_comment","","",22,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_double","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["f64","error"],"name":"result"}}],[11,"get_double_list","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_groups","","",22,null],[11,"get_int64","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["i64","error"],"name":"result"}}],[11,"get_integer","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["i32","error"],"name":"result"}}],[11,"get_integer_list","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_keys","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_locale_string","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_locale_string_list","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_start_group","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_string","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_string_list","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_uint64","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"get_value","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"has_group","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"has_key","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_bytes","","",22,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"keyfileflags"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_data","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"keyfileflags"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_file","","",22,{"inputs":[{"name":"self"},{"name":"p"},{"name":"keyfileflags"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_comment","","",22,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_group","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_key","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_boolean","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"set_comment","","",22,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_double","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f64"}],"output":null}],[11,"set_int64","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"i64"}],"output":null}],[11,"set_integer","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"i32"}],"output":null}],[11,"set_list_separator","","",22,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"set_locale_string","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"set_string","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"set_uint64","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"u64"}],"output":null}],[11,"set_value","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"maincontext"}}],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"maincontext"}}],[11,"acquire","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dispatch","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"is_owner","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iteration","","",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"pending","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop_thread_default","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"push_thread_default","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"wakeup","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"generics":["maincontext"],"name":"option"}}],[11,"get_thread_default","","",23,{"inputs":[],"output":{"generics":["maincontext"],"name":"option"}}],[11,"ref_thread_default","","",23,{"inputs":[],"output":{"generics":["maincontext"],"name":"option"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mainloop"}}],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",24,{"inputs":[{"name":"p"},{"name":"bool"}],"output":{"name":"mainloop"}}],[11,"get_context","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["maincontext"],"name":"option"}}],[11,"is_running","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"quit","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"run","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"add_child_source","","",25,{"inputs":[{"name":"self"},{"name":"source"}],"output":null}],[11,"attach","","",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"u32"}}],[11,"destroy","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"get_can_recurse","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_context","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["maincontext"],"name":"option"}}],[11,"get_id","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_name","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_priority","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ready_time","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_time","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_destroyed","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove_child_source","","",25,{"inputs":[{"name":"self"},{"name":"source"}],"output":null}],[11,"remove","","",25,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"timezone"}}],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",26,{"inputs":[{"name":"p"}],"output":{"name":"timezone"}}],[11,"new_local","","",26,{"inputs":[],"output":{"name":"timezone"}}],[11,"new_utc","","",26,{"inputs":[],"output":{"name":"timezone"}}],[11,"find_interval","","",26,{"inputs":[{"name":"self"},{"name":"timetype"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"get_abbreviation","","",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_offset","","",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"is_dst","","",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"checksumtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"checksumtype"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"checksumtype"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"datemonth"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"datemonth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"datemonth"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"dateweekday"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"dateweekday"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"dateweekday"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keyfileerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"keyfileerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"keyfileerror"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"domain","","",6,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"seektype"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"seektype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"seektype"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"timetype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"timetype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"timetype"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"filetest"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"ordering"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IS_REGULAR","","",27,null],[18,"IS_SYMLINK","","",27,null],[18,"IS_DIR","","",27,null],[18,"IS_EXECUTABLE","","",27,null],[18,"EXISTS","","",27,null],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"filetest"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"filetest"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"u32"}],"output":{"generics":["filetest"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,{"inputs":[{"name":"u32"}],"output":{"name":"filetest"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",27,{"inputs":[{"name":"self"},{"name":"filetest"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"filetest"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"filetest"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"filetest"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":{"name":"filetest"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"inputs":[{"name":"self"},{"name":"filetest"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"self"}],"output":{"name":"filetest"}}],[11,"extend","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"filetest"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"formatsizeflags"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",28,null],[18,"LONG_FORMAT","","",28,null],[18,"IEC_UNITS","","",28,null],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[],"output":{"name":"formatsizeflags"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[],"output":{"name":"formatsizeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"u32"}],"output":{"generics":["formatsizeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",28,{"inputs":[{"name":"u32"}],"output":{"name":"formatsizeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"bitor_assign","","Adds the set of flags.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":{"name":"formatsizeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",28,{"inputs":[{"name":"self"},{"name":"formatsizeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"self"}],"output":{"name":"formatsizeflags"}}],[11,"extend","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",28,{"inputs":[{"name":"t"}],"output":{"name":"formatsizeflags"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"iocondition"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IN","","",29,null],[18,"OUT","","",29,null],[18,"PRI","","",29,null],[18,"ERR","","",29,null],[18,"HUP","","",29,null],[18,"NVAL","","",29,null],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[],"output":{"name":"iocondition"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[],"output":{"name":"iocondition"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"u32"}],"output":{"generics":["iocondition"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",29,{"inputs":[{"name":"u32"}],"output":{"name":"iocondition"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",29,{"inputs":[{"name":"self"},{"name":"iocondition"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"bitor_assign","","Adds the set of flags.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"bitxor_assign","","Toggles the set of flags.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"sub_assign","","Disables all flags enabled in the set.",29,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"self"}],"output":{"name":"iocondition"}}],[11,"extend","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"iocondition"}}],[11,"static_type","","",29,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",29,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",29,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",29,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"keyfileflags"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"ordering"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",30,null],[18,"KEEP_COMMENTS","","",30,null],[18,"KEEP_TRANSLATIONS","","",30,null],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"keyfileflags"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"keyfileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"generics":["keyfileflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"keyfileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"bitor_assign","","Adds the set of flags.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":{"name":"keyfileflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",30,{"inputs":[{"name":"self"},{"name":"keyfileflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"self"}],"output":{"name":"keyfileflags"}}],[11,"extend","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"keyfileflags"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"static_type","","",67,{"inputs":[],"output":{"name":"type"}}],[11,"from_static","","Creates a view into static `data` without copying.",67,null],[11,"from_owned","","Takes ownership of `data` and creates a new `Bytes` without copying.",67,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"from","","",67,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",67,null],[11,"partial_cmp","","",67,null],[11,"eq","","",67,null],[11,"partial_cmp","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",67,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"char","","",null,null],[3,"Char","glib::char","Wrapper for values where C functions expect a plain C `char`",null,null],[12,"0","","",68,null],[3,"UChar","","Wrapper for values where C functions expect a plain C `unsigned char`",null,null],[12,"0","","",69,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"new","","Creates a `Some(Char)` if the given `char` is representable as an `libc::c_char`",68,{"inputs":[{"name":"char"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"uchar"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"uchar"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"uchar"}],"output":{"name":"bool"}}],[11,"new","","Creates a `Some(UChar)` if the given `char` is representable as an `libc::c_uchar`",69,{"inputs":[{"name":"char"}],"output":{"generics":["uchar"],"name":"option"}}],[11,"get_digest","glib","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_string","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[0,"closure","","",null,null],[3,"Closure","glib::closure","",null,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"closure"}}],[11,"static_type","","",70,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",70,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"invoke","","",70,null],[0,"error","glib","`Error` binding and helper trait.",null,null],[3,"Error","glib::error","A generic error capable of representing various error domains (types).",null,null],[3,"BoolError","","Generic error used for functions that fail without any further information",null,null],[12,"0","","",71,null],[8,"ErrorDomain","","`GLib` error domain.",null,null],[10,"domain","","Returns the quark identifying the error domain.",72,{"inputs":[],"output":{"name":"gquark"}}],[10,"code","","Gets the integer representation of the variant.",72,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"from","","Tries to convert an integer code to an enum variant.",72,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",73,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",73,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_glib","","",71,{"inputs":[{"name":"gboolean"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","glib","",2,{"inputs":[{"name":"self"}],"output":{"name":"userdirectory"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"userdirectory"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `EnumClass` from a `Type`.",74,{"inputs":[{"name":"type"}],"output":{"name":"option"}}],[11,"type_","","`Type` of the enum.",74,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_value","","Gets `EnumValue` by integer `value`, if existing.",74,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_value_by_name","","Gets `EnumValue` by string name `name`, if existing.",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_value_by_nick","","Gets `EnumValue` by string nick `nick`, if existing.",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_values","","Gets all `EnumValue` of this `EnumClass`.",74,{"inputs":[{"name":"self"}],"output":{"generics":["enumvalue"],"name":"vec"}}],[11,"to_value","","Converts integer `value` to a `Value`, if part of the enum.",74,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_name","","Converts string name `name` to a `Value`, if part of the enum.",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_nick","","Converts string nick `nick` to a `Value`, if part of the enum.",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"drop","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"enumvalue"}}],[11,"get_value","","Get integer value corresponding to the value.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_name","","Get name corresponding to the value.",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_nick","","Get nick corresponding to the value.",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_value","","Convert enum value to a `Value`.",75,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_value","","Convert enum value from a `Value`.",75,{"inputs":[{"name":"value"}],"output":{"generics":["enumvalue"],"name":"option"}}],[11,"get_class","","Get `EnumClass` to which the enum value belongs.",75,{"inputs":[{"name":"self"}],"output":{"name":"enumclass"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FlagsClass` from a `Type`",76,{"inputs":[{"name":"type"}],"output":{"name":"option"}}],[11,"type_","","`Type` of the flags.",76,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_value","","Gets `FlagsValue` by integer `value`, if existing.",76,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["flagsvalue"],"name":"option"}}],[11,"get_value_by_name","","Gets `FlagsValue` by string name `name`, if existing.",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["flagsvalue"],"name":"option"}}],[11,"get_value_by_nick","","Gets `FlagsValue` by string nick `nick`, if existing.",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["flagsvalue"],"name":"option"}}],[11,"get_values","","Gets all `FlagsValue` of this `FlagsClass`.",76,{"inputs":[{"name":"self"}],"output":{"generics":["flagsvalue"],"name":"vec"}}],[11,"to_value","","Converts integer `value` to a `Value`, if part of the flags.",76,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_name","","Converts string name `name` to a `Value`, if part of the flags.",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"to_value_by_nick","","Converts string nick `nick` to a `Value`, if part of the flags.",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_set","","Checks if the flags corresponding to integer `f` is set in `value`.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_set_by_name","","Checks if the flags corresponding to string name `name` is set in `value`.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_set_by_nick","","Checks if the flags corresponding to string nick `nick` is set in `value`.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"set","","Sets flags value corresponding to integer `f` in `value`, if part of that flags. If the flag is already set, it will succeed without doing any changes.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"u32"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"set_by_name","","Sets flags value corresponding to string name `name` in `value`, if part of that flags. If the flag is already set, it will succeed without doing any changes.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"set_by_nick","","Sets flags value corresponding to string nick `nick` in `value`, if part of that flags. If the flag is already set, it will succeed without doing any changes.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"unset","","Unsets flags value corresponding to integer `f` in `value`, if part of that flags. If the flag is already unset, it will succeed without doing any changes.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"u32"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"unset_by_name","","Unsets flags value corresponding to string name `name` in `value`, if part of that flags. If the flag is already unset, it will succeed without doing any changes.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"unset_by_nick","","Unsets flags value corresponding to string nick `nick` in `value`, if part of that flags. If the flag is already unset, it will succeed without doing any changes.",76,{"inputs":[{"name":"self"},{"name":"value"},{"name":"str"}],"output":{"generics":["value","value"],"name":"result"}}],[11,"builder","","Returns a new `FlagsBuilder` for conveniently setting/unsetting flags and building a `Value`.",76,{"inputs":[{"name":"self"}],"output":{"name":"flagsbuilder"}}],[11,"builder_with_value","","Returns a new `FlagsBuilder` for conveniently setting/unsetting flags and building a `Value`. The `Value` is initialized with `value`.",76,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["flagsbuilder"],"name":"option"}}],[11,"drop","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"flagsvalue"}}],[11,"get_value","","Get integer value corresponding to the value.",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_name","","Get name corresponding to the value.",77,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_nick","","Get nick corresponding to the value.",77,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_value","","Convert flags value to a `Value`.",77,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_value","","Convert flags values from a `Value`. This returns all flags that are set.",77,{"inputs":[{"name":"value"}],"output":{"generics":["flagsvalue"],"name":"vec"}}],[11,"get_class","","Get `FlagsClass` to which the flags value belongs.",77,{"inputs":[{"name":"self"}],"output":{"name":"flagsclass"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","Sets flags corresponding to integer value `f`.",78,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"set_by_name","","Sets flags corresponding to string name `name`.",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_by_nick","","Sets flags corresponding to string nick `nick`.",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"unset","","Unsets flags corresponding to integer value `f`.",78,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unset_by_name","","Unsets flags corresponding to string name `name`.",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"unset_by_nick","","Unsets flags corresponding to string nick `nick`.",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Converts to the final `Value`, unless any previous setting/unsetting of flags failed.",78,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fileerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fileerror"}],"output":{"name":"bool"}}],[11,"domain","","",1,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"save_to_file","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_from_data_dirs","","",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"keyfileflags"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"load_from_dirs","","",22,null],[11,"to_data","","",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"prelude","","Traits and essential types intended for blanket imports.",null,null],[0,"signal","","`IMPL` Low level signal support.",null,null],[3,"SignalHandlerId","glib::signal","The id of a signal that is returned by `connect`.",null,null],[3,"Inhibit","","Whether to propagate the signal to the default handler.",null,null],[12,"0","","",79,null],[5,"connect","","",null,null],[5,"signal_handler_block","","",null,{"inputs":[{"name":"t"},{"name":"signalhandlerid"}],"output":null}],[5,"signal_handler_unblock","","",null,{"inputs":[{"name":"t"},{"name":"signalhandlerid"}],"output":null}],[5,"signal_handler_disconnect","","",null,{"inputs":[{"name":"t"},{"name":"signalhandlerid"}],"output":null}],[5,"signal_stop_emission","","",null,{"inputs":[{"name":"t"},{"name":"u32"},{"name":"gquark"}],"output":null}],[5,"signal_stop_emission_by_name","","",null,{"inputs":[{"name":"t"},{"name":"str"}],"output":null}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"signalhandlerid"}],"output":{"name":"bool"}}],[11,"to_glib","","",80,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_glib","","",80,{"inputs":[{"name":"c_ulong"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"inhibit"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"inhibit"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[0,"source","glib","",null,null],[3,"SourceId","glib::source","The id of a source that is returned by `idle_add` and `timeout_add`.",null,null],[3,"Pid","","Process identificator",null,null],[12,"0","","",81,null],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",82,null],[3,"CallbackGuard","","Unwinding propagation guard. Aborts the process if destroyed while panicking.",null,null],[3,"Priority","","The priority of sources",null,null],[5,"idle_add","","Adds a closure to be called by the default main loop when it's idle.",null,{"inputs":[{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add","","Adds a closure to be called by the default main loop at regular intervals with millisecond granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add_seconds","","Adds a closure to be called by the default main loop at regular intervals with second granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"child_watch_add","","Adds a closure to be called by the main loop the returned `Source` is attached to when a child process exits.",null,{"inputs":[{"name":"pid"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"unix_signal_add","","Adds a closure to be called by the default main loop whenever a UNIX signal is raised.",null,{"inputs":[{"name":"i32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"source_remove","","Removes the source with the given id `source_id` from the default main context.",null,{"inputs":[{"name":"sourceid"}],"output":null}],[5,"idle_source_new","","Adds a closure to be called by the main loop the return `Source` is attached to when it's idle.",null,{"inputs":[{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"timeout_source_new","","Adds a closure to be called by the main loop the returned `Source` is attached to at regular intervals with millisecond granularity.",null,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"timeout_source_new_seconds","","Adds a closure to be called by the main loop the returned `Source` is attached to at regular intervals with second granularity.",null,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"child_watch_source_new","","Adds a closure to be called by the main loop the returned `Source` is attached to when a child process exits.",null,{"inputs":[{"name":"pid"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[5,"unix_signal_source_new","","Adds a closure to be called by the main loop the returned `Source` is attached to whenever a UNIX signal is raised.",null,{"inputs":[{"name":"i32"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[17,"PRIORITY_HIGH","","",null,null],[17,"PRIORITY_DEFAULT","","",null,null],[17,"PRIORITY_HIGH_IDLE","","",null,null],[17,"PRIORITY_DEFAULT_IDLE","","",null,null],[17,"PRIORITY_LOW","","",null,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"sourceid"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"sourceid"}],"output":{"name":"bool"}}],[11,"to_glib","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_glib","","",83,{"inputs":[{"name":"u32"}],"output":{"name":"sourceid"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"pid"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"pid"}],"output":{"name":"bool"}}],[11,"to_glib","","",82,{"inputs":[{"name":"self"}],"output":{"name":"gboolean"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"callbackguard"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"priority"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"priority"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"to_glib","","",85,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_glib","","",85,{"inputs":[{"name":"i32"}],"output":{"name":"priority"}}],[0,"translate","glib","Translation between GLib/GLib-based FFI types and their Rust counterparts.",null,null],[3,"Stash","glib::translate","Helper type that stores temporary values used for translation.",null,null],[12,"0","","",86,null],[12,"1","","",86,null],[3,"StashMut","","",null,null],[12,"0","","",87,null],[12,"1","","",87,null],[3,"List","","",null,null],[3,"SList","","",null,null],[3,"HashTable","","",null,null],[5,"mut_override","","Overrides pointer mutability.",null,null],[5,"const_override","","Overrides pointer constness.",null,null],[5,"uninitialized","","Returns an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"some_if","","Returns `Some(val)` if the condition is true and `None` otherwise.",null,{"inputs":[{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[5,"from_glib","","Translate a simple type.",null,{"inputs":[{"name":"g"}],"output":{"name":"t"}}],[5,"from_glib_none","","Translate from a pointer type, transfer: none.",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"from_glib_full","","Translate from a pointer type, transfer: full (assume ownership).",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"from_glib_borrow","","Translate from a pointer type, borrowing the pointer.",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"c_ptr_array_len","","",null,null],[8,"Ptr","","A pointer",null,null],[10,"is_null","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"from","","",88,null],[10,"to","","",88,null],[8,"Uninitialized","","A trait for creating an uninitialized value. Handy for receiving outparams.",null,null],[10,"uninitialized","","Returns an uninitialized value.",89,{"inputs":[],"output":{"name":"self"}}],[8,"ToBool","","",null,null],[10,"to_bool","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ToGlib","","Translate a simple type.",null,null],[16,"GlibType","","",91,null],[10,"to_glib","","",91,null],[8,"GlibPtrDefault","","Provides the default pointer type to be used in some container conversions.",null,null],[16,"GlibType","","",92,null],[8,"ToGlibPtr","","Translate to a pointer.",null,null],[16,"Storage","","",93,null],[10,"to_glib_none","","Transfer: none.",93,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_container","","Transfer: container.",93,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_full","","Transfer: full.",93,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[8,"ToGlibPtrMut","","Translate to a pointer with a mutable borrow.",null,null],[16,"Storage","","",94,null],[10,"to_glib_none_mut","","Transfer: none.",94,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[8,"ToGlibContainerFromSlice","","",null,null],[16,"Storage","","",95,null],[10,"to_glib_none_from_slice","","",95,null],[10,"to_glib_container_from_slice","","",95,null],[10,"to_glib_full_from_slice","","",95,null],[8,"FromGlib","","Translate a simple type.",null,null],[10,"from_glib","","",96,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"FromGlibPtrNone","","Translate from a pointer type without taking ownership, transfer: none.",null,null],[10,"from_glib_none","","",97,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibPtrFull","","Translate from a pointer type taking ownership, transfer: full.",null,null],[10,"from_glib_full","","",98,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibPtrBorrow","","Translate from a pointer type by borrowing. Don't increase the refcount",null,null],[11,"from_glib_borrow","","",99,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibContainer","","Translate from a container.",null,null],[10,"from_glib_none_num","","Transfer: none.",100,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_glib_container_num","","Transfer: container.",100,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_glib_full_num","","Transfer: full.",100,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"self"}}],[8,"FromGlibPtrContainer","","Translate from a container of pointers.",null,null],[10,"from_glib_none","","Transfer: none.",101,{"inputs":[{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_container","","Transfer: container.",101,{"inputs":[{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_full","","Transfer: full.",101,{"inputs":[{"name":"pp"}],"output":{"name":"self"}}],[8,"FromGlibContainerAsVec","","",null,null],[10,"from_glib_none_num_as_vec","","",102,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"from_glib_container_num_as_vec","","",102,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"from_glib_full_num_as_vec","","",102,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"vec"}}],[8,"FromGlibPtrArrayContainerAsVec","","",null,null],[10,"from_glib_none_as_vec","","",103,{"inputs":[{"name":"pp"}],"output":{"name":"vec"}}],[10,"from_glib_container_as_vec","","",103,{"inputs":[{"name":"pp"}],"output":{"name":"vec"}}],[10,"from_glib_full_as_vec","","",103,{"inputs":[{"name":"pp"}],"output":{"name":"vec"}}],[11,"drop","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[0,"types","glib","Runtime type information.",null,null],[4,"Type","glib::types","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",107,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",107,null],[13,"I8","","The fundamental type corresponding to `i8`",107,null],[13,"U8","","The fundamental type corresponding to `u8`",107,null],[13,"Bool","","The fundamental type corresponding to `bool`",107,null],[13,"I32","","The fundamental type corresponding to `i32`",107,null],[13,"U32","","The fundamental type corresponding to `u32`",107,null],[13,"ILong","","The fundamental type corresponding to C `long`",107,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",107,null],[13,"I64","","The fundamental type corresponding to `i64`",107,null],[13,"U64","","The fundamental type corresponding to `u64`",107,null],[13,"F32","","The fundamental type corresponding to `f32`",107,null],[13,"F64","","The fundamental type corresponding to `f64`",107,null],[13,"String","","The fundamental type corresponding to `String`",107,null],[13,"Pointer","","The fundamental type corresponding to a pointer",107,null],[13,"Variant","","The fundamental type of GVariant",107,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",107,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",107,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",107,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",107,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",107,null],[13,"BaseObject","","The fundamental type from which all objects are derived",107,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",107,null],[5,"instance_of","","",null,{"inputs":[{"name":"gconstpointer"}],"output":{"name":"bool"}}],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",108,{"inputs":[],"output":{"name":"type"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"name","","",107,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",107,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"children","","",107,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"interfaces","","",107,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"interface_prerequisites","","",107,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_name","","",107,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",107,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",107,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",107,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",107,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"from_glib","","",107,{"inputs":[{"name":"gtype"}],"output":{"name":"type"}}],[11,"to_glib","","",107,{"inputs":[{"name":"self"}],"output":{"name":"gtype"}}],[11,"to_glib_none_from_slice","","",107,null],[11,"to_glib_container_from_slice","","",107,null],[11,"to_glib_full_from_slice","","",107,null],[11,"from_glib_none_num_as_vec","","",107,null],[11,"from_glib_container_num_as_vec","","",107,null],[11,"from_glib_full_num_as_vec","","",107,null],[11,"from_glib_none_num_as_vec","","",107,null],[11,"from_glib_container_num_as_vec","","",107,null],[11,"from_glib_full_num_as_vec","","",107,null],[0,"value","glib","`Value` binding and helper traits.",null,null],[3,"Value","glib::value","A generic value capable of carrying various types.",null,null],[3,"ValueArray","","",null,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"SendValue","","A version of `Value` for storing `Send` types, that implements Send itself.",null,null],[3,"AnyValue","","A container type that allows storing any `'static` type that implements `Any` and `Clone` to be stored in a `Value`.",null,null],[3,"AnySendValue","","A container type that allows storing any `'static` type that implements `Any`, `Clone` and `Send` to be stored in a `Value` or `SendValue`.",null,null],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",109,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",109,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[8,"ToSendValue","","Converts to `SendValue`.",null,null],[10,"to_send_value","","Returns a `SendValue` clone of `self`.",110,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[8,"FromValueOptional","","Extracts a value.",null,null],[10,"from_value_optional","","",111,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[8,"FromValue","","Extracts a value.",null,null],[10,"from_value","","",112,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[8,"SetValueOptional","","Sets a value.",null,null],[10,"set_value_optional","","",113,{"inputs":[{"name":"value"},{"name":"option"}],"output":null}],[8,"SetValue","","Sets a value.",null,null],[10,"set_value","","",114,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"from_type","","Creates a new `Value` that is initialized with `type_`",115,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",115,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T` or is a sub-type of `T`.",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",115,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",115,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue"],"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",115,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"typedvalue"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"sendvalue"}],"output":{"name":"self"}}],[11,"uninitialized","","",115,{"inputs":[],"output":{"name":"value"}}],[11,"to_glib_none","","",115,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",115,null],[11,"from_glib_none","","",115,null],[11,"from_glib_full","","",115,null],[11,"from_glib_none_num_as_vec","","",115,null],[11,"from_glib_container_num_as_vec","","",115,null],[11,"from_glib_full_num_as_vec","","",115,null],[11,"from_glib_none_as_vec","","",115,null],[11,"from_glib_container_as_vec","","",115,null],[11,"from_glib_full_as_vec","","",115,null],[11,"from_glib_none_num_as_vec","","",115,null],[11,"from_glib_container_num_as_vec","","",115,null],[11,"from_glib_full_num_as_vec","","",115,null],[11,"from_glib_none_as_vec","","",115,null],[11,"from_glib_container_as_vec","","",115,null],[11,"from_glib_full_as_vec","","",115,null],[11,"drop","","",116,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"get","","Returns the value.",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",117,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_none","","Sets the value to `None`.",117,{"inputs":[{"name":"self"}],"output":null}],[11,"set_some","","Sets the value.",117,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_send_value","","",117,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"deref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from","","",117,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"name":"self"}}],[11,"to_glib_none_mut","","",117,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"to_value","","",115,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",115,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",118,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from","","",118,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"typedvalue"}],"output":{"name":"self"}}],[11,"from_glib_none","","",118,null],[11,"from_glib_none","","",118,null],[11,"from_glib_full","","",118,null],[11,"from_glib_none_num_as_vec","","",118,null],[11,"from_glib_container_num_as_vec","","",118,null],[11,"from_glib_full_num_as_vec","","",118,null],[11,"from_glib_none_as_vec","","",118,null],[11,"from_glib_container_as_vec","","",118,null],[11,"from_glib_full_as_vec","","",118,null],[11,"from_glib_none_num_as_vec","","",118,null],[11,"from_glib_container_num_as_vec","","",118,null],[11,"from_glib_full_num_as_vec","","",118,null],[11,"from_glib_none_as_vec","","",118,null],[11,"from_glib_container_as_vec","","",118,null],[11,"from_glib_full_as_vec","","",118,null],[11,"to_glib_none_mut","","",118,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"to_send_value","","",118,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"to_value","","",118,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",118,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Create a new `AnyValue` from `val`",119,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downcast","","Attempt the value to its concrete type.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"set_value","","",119,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"anysendvalue"}}],[11,"new","","Create a new `AnySendValue` from `val`.",120,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downcast","","Attempt the value to its concrete type.",120,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",120,{"inputs":[{"name":"self"}],"output":{"name":"anyvalue"}}],[11,"set_value","","",120,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"static_type","","",119,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",120,{"inputs":[],"output":{"name":"type"}}],[0,"variant","glib","`Variant` binding and helper traits.",null,null],[3,"Variant","glib::variant","A generic immutable value capable of carrying various types.",null,null],[8,"ToVariant","","Converts to `Variant`.",null,null],[10,"to_variant","","Returns a `Variant` clone of `self`.",121,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[8,"FromVariant","","Extracts a value.",null,null],[10,"from_variant","","Tries to extract a value.",122,{"inputs":[{"name":"variant"}],"output":{"name":"option"}}],[8,"StaticVariantType","","Returns `VariantType` of `Self`.",null,null],[10,"static_variant_type","","Returns the `VariantType` corresponding to `Self`.",123,{"inputs":[],"output":{"generics":["variantty"],"name":"cow"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"static_type","","",124,{"inputs":[],"output":{"name":"type"}}],[11,"type_","","Returns the type of the value.",124,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Tries to extract a value of type `T`.",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_str","","Tries to extract a `&str`.",124,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",124,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",124,{"inputs":[{"name":"t"}],"output":{"name":"variant"}}],[11,"new","glib","Tries to create a `VariantType` from a string slice.",125,{"inputs":[{"name":"str"}],"output":{"generics":["varianttype"],"name":"result"}}],[11,"drop","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"borrow","","",125,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"varianttype"}}],[11,"deref","","",125,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"into","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["variantty"],"name":"cow"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"hash","","",126,null],[11,"new","","Tries to create a `&VariantTy` from a string slice.",126,{"inputs":[{"name":"str"}],"output":{"generics":["variantty"],"name":"result"}}],[11,"from_str_unchecked","","Converts a type string into `&VariantTy` without any checks.",126,{"inputs":[{"name":"str"}],"output":{"name":"variantty"}}],[11,"to_str","","Converts to a string slice.",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",126,{"inputs":[{"name":"self"}],"output":{"name":"varianttype"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"varianttype"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"prepare","","",23,null],[11,"find_source_by_id","","",23,{"inputs":[{"name":"self"},{"name":"sourceid"}],"output":{"generics":["source"],"name":"option"}}],[11,"invoke","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"invoke_with_priority","","",23,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"f"}],"output":null}],[11,"compare","","",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"i32"}}],[11,"equal","","",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",127,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",127,{"inputs":[],"output":{"name":"date"}}],[11,"new_dmy","","",127,{"inputs":[{"name":"dateday"},{"name":"datemonth"},{"name":"dateyear"}],"output":{"name":"date"}}],[11,"new_julian","","",127,{"inputs":[{"name":"u32"}],"output":{"name":"date"}}],[11,"add_days","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_months","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_years","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"clamp","","",127,{"inputs":[{"name":"self"},{"name":"date"},{"name":"date"}],"output":null}],[11,"clear","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"days_between","","",127,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"i32"}}],[11,"get_day","","",127,{"inputs":[{"name":"self"}],"output":{"name":"dateday"}}],[11,"get_day_of_year","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_iso8601_week_of_year","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_julian","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_monday_week_of_year","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_month","","",127,{"inputs":[{"name":"self"}],"output":{"name":"datemonth"}}],[11,"get_sunday_week_of_year","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_weekday","","",127,{"inputs":[{"name":"self"}],"output":{"name":"dateweekday"}}],[11,"get_year","","",127,{"inputs":[{"name":"self"}],"output":{"name":"dateyear"}}],[11,"is_first_of_month","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_last_of_month","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"order","","",127,{"inputs":[{"name":"self"},{"name":"date"}],"output":null}],[11,"set_day","","",127,{"inputs":[{"name":"self"},{"name":"dateday"}],"output":null}],[11,"set_dmy","","",127,{"inputs":[{"name":"self"},{"name":"dateday"},{"name":"datemonth"},{"name":"dateyear"}],"output":null}],[11,"set_julian","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_month","","",127,{"inputs":[{"name":"self"},{"name":"datemonth"}],"output":null}],[11,"set_parse","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_time","","",127,{"inputs":[{"name":"self"},{"name":"time"}],"output":null}],[11,"set_time_t","","",127,{"inputs":[{"name":"self"},{"name":"c_long"}],"output":null}],[11,"set_year","","",127,{"inputs":[{"name":"self"},{"name":"dateyear"}],"output":null}],[11,"subtract_days","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"subtract_months","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"subtract_years","","",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"valid","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_days_in_month","","",127,{"inputs":[{"name":"datemonth"},{"name":"dateyear"}],"output":{"name":"u8"}}],[11,"get_monday_weeks_in_year","","",127,{"inputs":[{"name":"dateyear"}],"output":{"name":"u8"}}],[11,"get_sunday_weeks_in_year","","",127,{"inputs":[{"name":"dateyear"}],"output":{"name":"u8"}}],[11,"is_leap_year","","",127,{"inputs":[{"name":"dateyear"}],"output":{"name":"bool"}}],[11,"strftime","","",127,{"inputs":[{"name":"str"},{"name":"str"},{"name":"date"}],"output":{"name":"usize"}}],[11,"valid_day","","",127,{"inputs":[{"name":"dateday"}],"output":{"name":"bool"}}],[11,"valid_dmy","","",127,{"inputs":[{"name":"dateday"},{"name":"datemonth"},{"name":"dateyear"}],"output":{"name":"bool"}}],[11,"valid_julian","","",127,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[11,"valid_month","","",127,{"inputs":[{"name":"datemonth"}],"output":{"name":"bool"}}],[11,"valid_weekday","","",127,{"inputs":[{"name":"dateweekday"}],"output":{"name":"bool"}}],[11,"valid_year","","",127,{"inputs":[{"name":"dateyear"}],"output":{"name":"bool"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[6,"DateDay","","",null,null],[6,"DateYear","","",null,null],[6,"Time","","",null,null],[6,"TimeSpan","","",null,null],[14,"glib_wrapper","","Defines a wrapper type and implements the appropriate traits.",null,null],[14,"glib_boxed_wrapper","","Wrapper implementations for Boxed types. See `glib_wrapper!`.",null,null],[14,"glib_shared_wrapper","","Wrapper implementations for shared types. See `glib_wrapper!`.",null,null],[14,"glib_object_wrapper","","Wrapper implementations for Object types. See `glib_wrapper!`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gtimeval"}}]],"paths":[[3,"TimeVal"],[4,"FileError"],[4,"UserDirectory"],[4,"ChecksumType"],[4,"DateMonth"],[4,"DateWeekday"],[4,"KeyFileError"],[4,"SeekType"],[4,"TimeType"],[8,"Wrapper"],[8,"UnsafeFrom"],[8,"BoxedMemoryManager"],[3,"Boxed"],[8,"SharedMemoryManager"],[3,"Shared"],[8,"Cast"],[8,"Downcast"],[8,"ObjectExt"],[3,"Object"],[3,"WeakRef"],[3,"Checksum"],[3,"DateTime"],[3,"KeyFile"],[3,"MainContext"],[3,"MainLoop"],[3,"Source"],[3,"TimeZone"],[3,"FileTest"],[3,"FormatSizeFlags"],[3,"IOCondition"],[3,"KeyFileFlags"],[3,"CSET_A_2_Z"],[3,"CSET_DIGITS"],[3,"CSET_a_2_z"],[3,"KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX"],[3,"KEY_FILE_DESKTOP_GROUP"],[3,"KEY_FILE_DESKTOP_KEY_ACTIONS"],[3,"KEY_FILE_DESKTOP_KEY_CATEGORIES"],[3,"KEY_FILE_DESKTOP_KEY_COMMENT"],[3,"KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE"],[3,"KEY_FILE_DESKTOP_KEY_EXEC"],[3,"KEY_FILE_DESKTOP_KEY_FULLNAME"],[3,"KEY_FILE_DESKTOP_KEY_GENERIC_NAME"],[3,"KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN"],[3,"KEY_FILE_DESKTOP_KEY_HIDDEN"],[3,"KEY_FILE_DESKTOP_KEY_ICON"],[3,"KEY_FILE_DESKTOP_KEY_KEYWORDS"],[3,"KEY_FILE_DESKTOP_KEY_MIME_TYPE"],[3,"KEY_FILE_DESKTOP_KEY_NAME"],[3,"KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN"],[3,"KEY_FILE_DESKTOP_KEY_NO_DISPLAY"],[3,"KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN"],[3,"KEY_FILE_DESKTOP_KEY_PATH"],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY"],[3,"KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS"],[3,"KEY_FILE_DESKTOP_KEY_TERMINAL"],[3,"KEY_FILE_DESKTOP_KEY_TRY_EXEC"],[3,"KEY_FILE_DESKTOP_KEY_TYPE"],[3,"KEY_FILE_DESKTOP_KEY_URL"],[3,"KEY_FILE_DESKTOP_KEY_VERSION"],[3,"KEY_FILE_DESKTOP_TYPE_APPLICATION"],[3,"KEY_FILE_DESKTOP_TYPE_DIRECTORY"],[3,"KEY_FILE_DESKTOP_TYPE_LINK"],[3,"OPTION_REMAINING"],[3,"STR_DELIMITERS"],[3,"URI_RESERVED_CHARS_GENERIC_DELIMITERS"],[3,"URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS"],[3,"Bytes"],[3,"Char"],[3,"UChar"],[3,"Closure"],[3,"BoolError"],[8,"ErrorDomain"],[3,"Error"],[3,"EnumClass"],[3,"EnumValue"],[3,"FlagsClass"],[3,"FlagsValue"],[3,"FlagsBuilder"],[3,"Inhibit"],[3,"SignalHandlerId"],[3,"Pid"],[3,"Continue"],[3,"SourceId"],[3,"CallbackGuard"],[3,"Priority"],[3,"Stash"],[3,"StashMut"],[8,"Ptr"],[8,"Uninitialized"],[8,"ToBool"],[8,"ToGlib"],[8,"GlibPtrDefault"],[8,"ToGlibPtr"],[8,"ToGlibPtrMut"],[8,"ToGlibContainerFromSlice"],[8,"FromGlib"],[8,"FromGlibPtrNone"],[8,"FromGlibPtrFull"],[8,"FromGlibPtrBorrow"],[8,"FromGlibContainer"],[8,"FromGlibPtrContainer"],[8,"FromGlibContainerAsVec"],[8,"FromGlibPtrArrayContainerAsVec"],[3,"List"],[3,"SList"],[3,"HashTable"],[4,"Type"],[8,"StaticType"],[8,"ToValue"],[8,"ToSendValue"],[8,"FromValueOptional"],[8,"FromValue"],[8,"SetValueOptional"],[8,"SetValue"],[3,"Value"],[3,"ValueArray"],[3,"TypedValue"],[3,"SendValue"],[3,"AnyValue"],[3,"AnySendValue"],[8,"ToVariant"],[8,"FromVariant"],[8,"StaticVariantType"],[3,"Variant"],[3,"VariantType"],[3,"VariantTy"],[3,"Date"]]};
searchIndex["gio"] = {"doc":"","items":[[3,"Error","gio","A generic error capable of representing various error domains (types).",null,null],[3,"Object","","The base class in the object hierarchy.",null,null],[3,"Action","","`Action` represents a single named action.",null,null],[3,"ActionGroup","","`ActionGroup` represents a group of actions. Actions can be used to expose functionality in a structured way, either from one part of a program to another, or to the outside world. Action groups are often used together with a `MenuModel` that provides additional representation data for displaying the actions to the user, e.g. in a menu.",null,null],[3,"ActionMap","","The GActionMap interface is implemented by `ActionGroup` implementations that operate by containing a number of named `Action` instances, such as `SimpleActionGroup`.",null,null],[3,"AppInfo","","`AppInfo` and `AppLaunchContext` are used for describing and launching applications installed on the system.",null,null],[3,"AppLaunchContext","","Integrating the launch with the launching application. This is used to handle for instance startup notification and launching the new application on the same screen as the launching window.",null,null],[3,"Application","","A `Application` is the foundation of an application. It wraps some low-level platform-specific services and is intended to act as the foundation for higher-level application classes such as `GtkApplication` or `MxApplication`. In general, you should not use this class outside of a higher level framework.",null,null],[3,"BufferedInputStream","","",null,null],[3,"BufferedOutputStream","","",null,null],[3,"Cancellable","","GCancellable is a thread-safe operation cancellation stack used throughout GIO to allow for cancellation of synchronous and asynchronous operations.",null,null],[3,"DataInputStream","","",null,null],[3,"DataOutputStream","","",null,null],[3,"File","","`File` is a high level abstraction for manipulating files on a virtual file system. `GFiles` are lightweight, immutable objects that do no I/O upon creation. It is necessary to understand that `File` objects do not represent files, merely an identifier for a file. All file content I/O is implemented as streaming operations (see `InputStream` and `OutputStream`).",null,null],[3,"FileIOStream","","",null,null],[3,"FileInfo","","Functionality for manipulating basic metadata for files. `FileInfo` implements methods for getting information that all files should contain, and allows for manipulation of extended attributes.",null,null],[3,"FileInputStream","","",null,null],[3,"FileOutputStream","","",null,null],[3,"FilterInputStream","","",null,null],[3,"FilterOutputStream","","",null,null],[3,"IOStream","","",null,null],[3,"Icon","","`Icon` is a very minimal interface for icons. It provides functions for checking the equality of two icons, hashing of icons and serializing an icon to and from strings.",null,null],[3,"InetAddress","","",null,null],[3,"InetSocketAddress","","",null,null],[3,"InputStream","","",null,null],[3,"MemoryInputStream","","",null,null],[3,"MemoryOutputStream","","",null,null],[3,"Menu","","`Menu` is a simple implementation of `MenuModel`. You populate a `Menu` by adding `MenuItem` instances to it.",null,null],[3,"MenuAttributeIter","","`MenuAttributeIter` is an opaque structure type. You must access it using the functions below.",null,null],[3,"MenuItem","","`MenuItem` is an opaque structure type. You must access it using the functions below.",null,null],[3,"MenuLinkIter","","`MenuLinkIter` is an opaque structure type. You must access it using the functions below.",null,null],[3,"MenuModel","","`MenuModel` represents the contents of a menu -- an ordered list of menu items. The items are associated with actions, which can be activated through them. Items can be grouped in sections, and may have submenus associated with them. Both items and sections usually have some representation data, such as labels or icons. The type of the associated action (ie whether it is stateful, and what kind of state it has) can influence the representation of the item.",null,null],[3,"MountOperation","","",null,null],[3,"NetworkAddress","","",null,null],[3,"NetworkService","","",null,null],[3,"Notification","","`Notification` is a mechanism for creating a notification to be shown to the user -- typically as a pop-up notification presented by the desktop environment shell.",null,null],[3,"OutputStream","","",null,null],[3,"Permission","","A `Permission` represents the status of the caller's permission to perform a certain action.",null,null],[3,"Resolver","","",null,null],[3,"Seekable","","",null,null],[3,"Settings","","The `Settings` class provides a convenient API for storing and retrieving application settings.",null,null],[3,"SimpleAction","","A `SimpleAction` is the obvious simple implementation of the `Action` interface. This is the easiest way to create an action for purposes of adding it to a `SimpleActionGroup`.",null,null],[3,"SimpleActionGroup","","`SimpleActionGroup` is a hash table filled with `Action` objects, implementing the `ActionGroup` and `ActionMap` interfaces.",null,null],[3,"SimpleIOStream","","",null,null],[3,"SimplePermission","","`SimplePermission` is a trivial implementation of `Permission` that represents a permission that is either always or never allowed. The value is given at construction and doesn't change.",null,null],[3,"Socket","","",null,null],[3,"SocketAddress","","",null,null],[3,"SocketAddressEnumerator","","",null,null],[3,"SocketClient","","",null,null],[3,"SocketConnectable","","",null,null],[3,"SocketConnection","","",null,null],[3,"SocketListener","","",null,null],[3,"SocketService","","",null,null],[3,"TcpConnection","","",null,null],[3,"ThemedIcon","","`ThemedIcon` is an implementation of `Icon` that supports icon themes. `ThemedIcon` contains a list of all of the icons present in an icon theme, so that icons can be looked up quickly. `ThemedIcon` does not provide actual pixmaps for icons, just the icon names. Ideally something like `gtk_icon_theme_choose_icon` should be used to resolve the list of names so that fallback icons work nicely with themes that inherit other themes.",null,null],[3,"ThreadedSocketService","","",null,null],[3,"TlsCertificate","","A certificate used for TLS authentication and encryption. This can represent either a certificate only (eg, the certificate received by a client from a server), or the combination of a certificate and a private key (which is needed when acting as a `TlsServerConnection`).",null,null],[3,"TlsClientConnection","","",null,null],[3,"TlsConnection","","",null,null],[3,"TlsDatabase","","",null,null],[3,"TlsFileDatabase","","",null,null],[3,"TlsInteraction","","",null,null],[3,"TlsPassword","","",null,null],[3,"TlsServerConnection","","",null,null],[3,"Resource","","Applications and libraries often contain binary or textual data that is really part of the application, rather than user data. For instance `GtkBuilder` .ui files, splashscreen images, GMenu markup XML, CSS files, icons, etc. These are often shipped as files in `$datadir/appname`, or manually included as literal strings in the code.",null,null],[3,"SettingsSchema","","The `SettingsSchemaSource` and `SettingsSchema` APIs provide a mechanism for advanced control over the loading of schemas and a mechanism for introspecting their content.",null,null],[3,"SettingsSchemaKey","","`SettingsSchemaKey` is an opaque data structure and can only be accessed using the following functions.",null,null],[3,"SrvTarget","","",null,null],[3,"AppInfoCreateFlags","","",null,null],[3,"ApplicationFlags","","",null,null],[3,"AskPasswordFlags","","",null,null],[3,"FileCreateFlags","","",null,null],[3,"FileQueryInfoFlags","","",null,null],[3,"IOStreamSpliceFlags","","",null,null],[3,"OutputStreamSpliceFlags","","",null,null],[3,"ResourceLookupFlags","","",null,null],[3,"SettingsBindFlags","","",null,null],[3,"TlsCertificateFlags","","",null,null],[3,"TlsDatabaseVerifyFlags","","",null,null],[3,"TlsPasswordFlags","","",null,null],[3,"DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME","","",null,null],[3,"FILE_ATTRIBUTE_ACCESS_CAN_DELETE","","",null,null],[3,"FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE","","",null,null],[3,"FILE_ATTRIBUTE_ACCESS_CAN_READ","","",null,null],[3,"FILE_ATTRIBUTE_ACCESS_CAN_RENAME","","",null,null],[3,"FILE_ATTRIBUTE_ACCESS_CAN_TRASH","","",null,null],[3,"FILE_ATTRIBUTE_ACCESS_CAN_WRITE","","",null,null],[3,"FILE_ATTRIBUTE_DOS_IS_ARCHIVE","","",null,null],[3,"FILE_ATTRIBUTE_DOS_IS_SYSTEM","","",null,null],[3,"FILE_ATTRIBUTE_ETAG_VALUE","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_FREE","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_READONLY","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_REMOTE","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_SIZE","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_TYPE","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_USED","","",null,null],[3,"FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW","","",null,null],[3,"FILE_ATTRIBUTE_GVFS_BACKEND","","",null,null],[3,"FILE_ATTRIBUTE_ID_FILE","","",null,null],[3,"FILE_ATTRIBUTE_ID_FILESYSTEM","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_START","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE","","",null,null],[3,"FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE","","",null,null],[3,"FILE_ATTRIBUTE_OWNER_GROUP","","",null,null],[3,"FILE_ATTRIBUTE_OWNER_USER","","",null,null],[3,"FILE_ATTRIBUTE_OWNER_USER_REAL","","",null,null],[3,"FILE_ATTRIBUTE_PREVIEW_ICON","","",null,null],[3,"FILE_ATTRIBUTE_RECENT_MODIFIED","","",null,null],[3,"FILE_ATTRIBUTE_SELINUX_CONTEXT","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_COPY_NAME","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_DESCRIPTION","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_EDIT_NAME","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_ICON","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_IS_BACKUP","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_IS_HIDDEN","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_IS_SYMLINK","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_IS_VOLATILE","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_NAME","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_SIZE","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_SORT_ORDER","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_TARGET_URI","","",null,null],[3,"FILE_ATTRIBUTE_STANDARD_TYPE","","",null,null],[3,"FILE_ATTRIBUTE_THUMBNAILING_FAILED","","",null,null],[3,"FILE_ATTRIBUTE_THUMBNAIL_IS_VALID","","",null,null],[3,"FILE_ATTRIBUTE_THUMBNAIL_PATH","","",null,null],[3,"FILE_ATTRIBUTE_TIME_ACCESS","","",null,null],[3,"FILE_ATTRIBUTE_TIME_ACCESS_USEC","","",null,null],[3,"FILE_ATTRIBUTE_TIME_CHANGED","","",null,null],[3,"FILE_ATTRIBUTE_TIME_CHANGED_USEC","","",null,null],[3,"FILE_ATTRIBUTE_TIME_CREATED","","",null,null],[3,"FILE_ATTRIBUTE_TIME_CREATED_USEC","","",null,null],[3,"FILE_ATTRIBUTE_TIME_MODIFIED","","",null,null],[3,"FILE_ATTRIBUTE_TIME_MODIFIED_USEC","","",null,null],[3,"FILE_ATTRIBUTE_TRASH_DELETION_DATE","","",null,null],[3,"FILE_ATTRIBUTE_TRASH_ITEM_COUNT","","",null,null],[3,"FILE_ATTRIBUTE_TRASH_ORIG_PATH","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_BLOCKS","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_BLOCK_SIZE","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_DEVICE","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_GID","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_INODE","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_MODE","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_NLINK","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_RDEV","","",null,null],[3,"FILE_ATTRIBUTE_UNIX_UID","","",null,null],[3,"MENU_ATTRIBUTE_ACTION","","",null,null],[3,"MENU_ATTRIBUTE_ACTION_NAMESPACE","","",null,null],[3,"MENU_ATTRIBUTE_ICON","","",null,null],[3,"MENU_ATTRIBUTE_LABEL","","",null,null],[3,"MENU_ATTRIBUTE_TARGET","","",null,null],[3,"MENU_LINK_SECTION","","",null,null],[3,"MENU_LINK_SUBMENU","","",null,null],[3,"NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME","","",null,null],[3,"NETWORK_MONITOR_EXTENSION_POINT_NAME","","",null,null],[3,"PROXY_EXTENSION_POINT_NAME","","",null,null],[3,"PROXY_RESOLVER_EXTENSION_POINT_NAME","","",null,null],[3,"SETTINGS_BACKEND_EXTENSION_POINT_NAME","","",null,null],[3,"TLS_BACKEND_EXTENSION_POINT_NAME","","",null,null],[3,"TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT","","",null,null],[3,"TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER","","",null,null],[3,"VFS_EXTENSION_POINT_NAME","","",null,null],[3,"VOLUME_IDENTIFIER_KIND_CLASS","","",null,null],[3,"VOLUME_IDENTIFIER_KIND_HAL_UDI","","",null,null],[3,"VOLUME_IDENTIFIER_KIND_LABEL","","",null,null],[3,"VOLUME_IDENTIFIER_KIND_NFS_MOUNT","","",null,null],[3,"VOLUME_IDENTIFIER_KIND_UNIX_DEVICE","","",null,null],[3,"VOLUME_IDENTIFIER_KIND_UUID","","",null,null],[3,"VOLUME_MONITOR_EXTENSION_POINT_NAME","","",null,null],[4,"DataStreamByteOrder","","",null,null],[13,"BigEndian","","",0,null],[13,"LittleEndian","","",0,null],[13,"HostEndian","","",0,null],[4,"DataStreamNewlineType","","",null,null],[13,"Lf","","",1,null],[13,"Cr","","",1,null],[13,"CrLf","","",1,null],[13,"Any","","",1,null],[4,"FileType","","Indicates the file's on-disk type.",null,null],[13,"Unknown","","",2,null],[13,"Regular","","",2,null],[13,"Directory","","",2,null],[13,"SymbolicLink","","",2,null],[13,"Special","","",2,null],[13,"Shortcut","","",2,null],[13,"Mountable","","",2,null],[4,"IOErrorEnum","","",null,null],[13,"Failed","","",3,null],[13,"NotFound","","",3,null],[13,"Exists","","",3,null],[13,"IsDirectory","","",3,null],[13,"NotDirectory","","",3,null],[13,"NotEmpty","","",3,null],[13,"NotRegularFile","","",3,null],[13,"NotSymbolicLink","","",3,null],[13,"NotMountableFile","","",3,null],[13,"FilenameTooLong","","",3,null],[13,"InvalidFilename","","",3,null],[13,"TooManyLinks","","",3,null],[13,"NoSpace","","",3,null],[13,"InvalidArgument","","",3,null],[13,"PermissionDenied","","",3,null],[13,"NotSupported","","",3,null],[13,"NotMounted","","",3,null],[13,"AlreadyMounted","","",3,null],[13,"Closed","","",3,null],[13,"Cancelled","","",3,null],[13,"Pending","","",3,null],[13,"ReadOnly","","",3,null],[13,"CantCreateBackup","","",3,null],[13,"WrongEtag","","",3,null],[13,"TimedOut","","",3,null],[13,"WouldRecurse","","",3,null],[13,"Busy","","",3,null],[13,"WouldBlock","","",3,null],[13,"HostNotFound","","",3,null],[13,"WouldMerge","","",3,null],[13,"FailedHandled","","",3,null],[13,"TooManyOpenFiles","","",3,null],[13,"NotInitialized","","",3,null],[13,"AddressInUse","","",3,null],[13,"PartialInput","","",3,null],[13,"InvalidData","","",3,null],[13,"DbusError","","",3,null],[13,"HostUnreachable","","",3,null],[13,"NetworkUnreachable","","",3,null],[13,"ConnectionRefused","","",3,null],[13,"ProxyFailed","","",3,null],[13,"ProxyAuthFailed","","",3,null],[13,"ProxyNeedAuth","","",3,null],[13,"ProxyNotAllowed","","",3,null],[13,"BrokenPipe","","",3,null],[13,"NotConnected","","",3,null],[13,"MessageTooLarge","","",3,null],[4,"MountOperationResult","","",null,null],[13,"Handled","","",4,null],[13,"Aborted","","",4,null],[13,"Unhandled","","",4,null],[4,"NotificationPriority","","Priority levels for `GNotifications`.",null,null],[13,"Normal","","",5,null],[13,"Low","","",5,null],[13,"High","","",5,null],[13,"Urgent","","",5,null],[4,"PasswordSave","","",null,null],[13,"Never","","",6,null],[13,"ForSession","","",6,null],[13,"Permanently","","",6,null],[4,"ResolverRecordType","","",null,null],[13,"Srv","","",7,null],[13,"Mx","","",7,null],[13,"Txt","","",7,null],[13,"Soa","","",7,null],[13,"Ns","","",7,null],[4,"ResourceError","","An error code used with `G_RESOURCE_ERROR` in a `glib::Error` returned from a `Resource` routine.",null,null],[13,"NotFound","","",8,null],[13,"Internal","","",8,null],[4,"SocketClientEvent","","",null,null],[13,"Resolving","","",9,null],[13,"Resolved","","",9,null],[13,"Connecting","","",9,null],[13,"Connected","","",9,null],[13,"ProxyNegotiating","","",9,null],[13,"ProxyNegotiated","","",9,null],[13,"TlsHandshaking","","",9,null],[13,"TlsHandshaked","","",9,null],[13,"Complete","","",9,null],[4,"SocketFamily","","",null,null],[13,"Invalid","","",10,null],[13,"Unix","","",10,null],[13,"Ipv4","","",10,null],[13,"Ipv6","","",10,null],[4,"SocketListenerEvent","","",null,null],[13,"Binding","","",11,null],[13,"Bound","","",11,null],[13,"Listening","","",11,null],[13,"Listened","","",11,null],[4,"SocketProtocol","","",null,null],[13,"Unknown","","",12,null],[13,"Default","","",12,null],[13,"Tcp","","",12,null],[13,"Udp","","",12,null],[13,"Sctp","","",12,null],[4,"SocketType","","",null,null],[13,"Invalid","","",13,null],[13,"Stream","","",13,null],[13,"Datagram","","",13,null],[13,"Seqpacket","","",13,null],[4,"TlsAuthenticationMode","","",null,null],[13,"None","","",14,null],[13,"Requested","","",14,null],[13,"Required","","",14,null],[4,"TlsCertificateRequestFlags","","",null,null],[13,"None","","",15,null],[4,"TlsDatabaseLookupFlags","","",null,null],[13,"None","","",16,null],[13,"Keypair","","",16,null],[4,"TlsInteractionResult","","",null,null],[13,"Unhandled","","",17,null],[13,"Handled","","",17,null],[13,"Failed","","",17,null],[4,"TlsRehandshakeMode","","",null,null],[13,"Never","","",18,null],[13,"Safely","","",18,null],[13,"Unsafely","","",18,null],[5,"bus_unown_name","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"bus_unwatch_name","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"content_type_can_be_executable","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_equals","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_from_mime_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_description","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_generic_icon_name","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_icon","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["icon"],"name":"option"}}],[5,"content_type_get_mime_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_symbolic_icon","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["icon"],"name":"option"}}],[5,"content_type_guess","","",null,null],[5,"content_type_guess_for_tree","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"vec"}}],[5,"content_type_is_a","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_is_mime_type","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_is_unknown","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"content_types_get_registered","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"dbus_address_escape_value","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"dbus_address_get_stream_sync","","",null,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[5,"dbus_generate_guid","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"dbus_is_address","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_guid","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_interface_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_member_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_supported_address","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"dbus_is_unique_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"io_error_from_errno","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"ioerrorenum"}}],[5,"io_modules_scan_all_in_directory","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"io_scheduler_cancel_all_jobs","","",null,{"inputs":[],"output":null}],[5,"networking_init","","",null,{"inputs":[],"output":null}],[5,"pollable_source_new","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["source"],"name":"option"}}],[5,"pollable_source_new_full","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["source"],"name":"option"}}],[5,"resources_enumerate_children","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"resources_get_info","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["error"],"name":"result"}}],[5,"resources_lookup_data","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["bytes","error"],"name":"result"}}],[5,"resources_open_stream","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["inputstream","error"],"name":"result"}}],[5,"resources_register","","",null,{"inputs":[{"name":"resource"}],"output":null}],[5,"resources_unregister","","",null,{"inputs":[{"name":"resource"}],"output":null}],[5,"unix_is_mount_path_system_internal","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"unix_mount_points_changed_since","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"unix_mounts_changed_since","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[11,"new_from_data","","Creates a GResource from a reference to the binary resource bundle. This will keep a reference to `data` while the resource lives, so the data should not be modified or freed.",19,{"inputs":[{"name":"bytes"}],"output":{"generics":["resource","error"],"name":"result"}}],[11,"new_from_fd","","",20,{"inputs":[{"name":"t"}],"output":{"generics":["socket","error"],"name":"result"}}],[11,"new_from_socket","","",20,{"inputs":[{"name":"t"}],"output":{"generics":["socket","error"],"name":"result"}}],[0,"functions","","",null,null],[5,"bus_unown_name","gio::functions","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"bus_unwatch_name","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"content_type_can_be_executable","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_equals","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_from_mime_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_description","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_generic_icon_name","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_icon","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["icon"],"name":"option"}}],[5,"content_type_get_mime_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"content_type_get_symbolic_icon","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["icon"],"name":"option"}}],[5,"content_type_guess","","",null,null],[5,"content_type_guess_for_tree","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"vec"}}],[5,"content_type_is_a","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_is_mime_type","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"content_type_is_unknown","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"content_types_get_registered","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"dbus_address_escape_value","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"dbus_address_get_stream_sync","","",null,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[5,"dbus_generate_guid","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"dbus_is_address","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_guid","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_interface_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_member_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"dbus_is_supported_address","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"dbus_is_unique_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"io_error_from_errno","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"ioerrorenum"}}],[5,"io_modules_scan_all_in_directory","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"io_scheduler_cancel_all_jobs","","",null,{"inputs":[],"output":null}],[5,"networking_init","","",null,{"inputs":[],"output":null}],[5,"pollable_source_new","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["source"],"name":"option"}}],[5,"pollable_source_new_full","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["source"],"name":"option"}}],[5,"resources_enumerate_children","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"resources_get_info","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["error"],"name":"result"}}],[5,"resources_lookup_data","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["bytes","error"],"name":"result"}}],[5,"resources_open_stream","","",null,{"inputs":[{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["inputstream","error"],"name":"result"}}],[5,"resources_register","","",null,{"inputs":[{"name":"resource"}],"output":null}],[5,"resources_unregister","","",null,{"inputs":[{"name":"resource"}],"output":null}],[5,"unix_is_mount_path_system_internal","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"unix_mount_points_changed_since","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"unix_mounts_changed_since","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[0,"signal","gio","",null,null],[3,"Inhibit","gio::signal","Whether to propagate the signal to the default handler.",null,null],[12,"0","","",21,null],[0,"prelude","gio","",null,null],[8,"ActionExt","gio::prelude","Trait containing all `Action` methods.",null,null],[10,"activate","","Activates the action.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"change_state","","Request for the state of `self` to be changed to `value`.",22,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"get_enabled","","Checks if `self` is currently enabled.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_name","","Queries the name of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_parameter_type","","Queries the type of the parameter that must be given when activating `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"get_state","","Queries the current state of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_state_hint","","Requests a hint about the valid range of values for the state of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_state_type","","Queries the type of the state of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"connect_property_enabled_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parameter_type_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_type_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ActionGroupExt","","Trait containing all `ActionGroup` methods.",null,null],[10,"action_added","","Emits the `ActionGroup::action-added` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"action_enabled_changed","","Emits the `ActionGroup::action-enabled-changed` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"action_removed","","Emits the `ActionGroup::action-removed` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"action_state_changed","","Emits the `ActionGroup::action-state-changed` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":null}],[10,"activate_action","","Activate the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"change_action_state","","Request for the state of the named action within `self` to be changed to `value`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":null}],[10,"get_action_enabled","","Checks if the named action within `self` is currently enabled.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_action_parameter_type","","Queries the type of the parameter that must be given when activating the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"get_action_state","","Queries the current state of the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_action_state_hint","","Requests a hint about the valid range of values for the state of the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_action_state_type","","Queries the type of the state of the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"has_action","","Checks if the named action exists within `self`. ## `action_name` the name of the action to check for",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_actions","","Lists the actions contained within `self`.",23,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"connect_action_added","","Signals that a new action was just added to the group. This signal is emitted after the action has been added and is now visible. ## `action_name` the name of the action in `action_group`",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_action_enabled_changed","","Signals that the enabled status of the named action has changed. ## `action_name` the name of the action in `action_group` ## `enabled` whether the action is enabled or not",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_action_removed","","Signals that an action is just about to be removed from the group. This signal is emitted before the action is removed, so the action is still visible and can be queried from the signal handler. ## `action_name` the name of the action in `action_group`",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_action_state_changed","","Signals that the state of the named action has changed. ## `action_name` the name of the action in `action_group` ## `value` the new value of the state",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ActionMapExt","","Trait containing all `ActionMap` methods.",null,null],[10,"add_action","","Adds an action to the `self`.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"lookup_action","","Looks up the action with the name `action_name` in `self`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["action"],"name":"option"}}],[10,"remove_action","","Removes the named action from the action map.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"AppInfoExt","","Trait containing all `AppInfo` methods.",null,null],[10,"add_supports_type","","Adds a content type to the application information to indicate the application is capable of opening files with the given content type. ## `content_type` a string.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"can_delete","","Obtains the information whether the `AppInfo` can be deleted. See `AppInfo::delete`.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_remove_supports_type","","Checks if a supported content type can be removed from an application.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"delete","","Tries to delete a `AppInfo`.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"dup","","Creates a duplicate of a `AppInfo`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["appinfo"],"name":"option"}}],[10,"equal","","Checks if two `GAppInfos` are equal.",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_commandline","","Gets the commandline with which the application will be started.",25,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_description","","Gets a human-readable description of an installed application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_display_name","","Gets the display name of the application. The display name is often more descriptive to the user than the name itself.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_executable","","Gets the executable's name for the installed application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_icon","","Gets the icon for the application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_id","","Gets the ID of an application. An id is a string that identifies the application. The exact format of the id is platform dependent. For instance, on Unix this is the desktop file id from the xdg menu specification.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Gets the installed name of the application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_supported_types","","Retrieves the list of content types that `app_info` claims to support. If this information is not provided by the environment, this function will return `None`. This function does not take in consideration associations added with `AppInfo::add_supports_type`, but only those exported directly by the application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"launch","","Launches the application. Passes `files` to the launched application as arguments, using the optional `launch_context` to get information about the details of the launcher (like what screen it is on). On error, `error` will be set accordingly.",25,null],[10,"launch_uris","","Launches the application. This passes the `uris` to the launched application as arguments, using the optional `launch_context` to get information about the details of the launcher (like what screen it is on). On error, `error` will be set accordingly.",25,null],[10,"remove_supports_type","","Removes a supported type from an application, if possible. ## `content_type` a string.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_as_default_for_extension","","Sets the application as the default handler for the given file extension. ## `extension` a string containing the file extension  (without the dot).",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_as_default_for_type","","Sets the application as the default handler for a given type. ## `content_type` the content type.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_as_last_used_for_type","","Sets the application as the last used application for a given type. This will make the application appear as first in the list returned by `AppInfo::get_recommended_for_type`, regardless of the default application for that content type. ## `content_type` the content type.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"should_show","","Checks if the application info should be shown in menus that list available applications.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_files","","Checks if the application accepts files as arguments.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_uris","","Checks if the application supports reading files and directories from URIs.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"AppLaunchContextExt","","Trait containing all `AppLaunchContext` methods.",null,null],[10,"get_display","","Gets the display string for the `self`. This is used to ensure new applications are started on the same display as the launching application, by setting the `DISPLAY` environment variable. ## `info` a `AppInfo` ## `files` a `glib::List` of `File` objects",26,null],[10,"get_environment","","Gets the complete environment variable list to be passed to the child process when `self` is used to launch an application. This is a `None`-terminated array of strings, where each string has the form `KEY=VALUE`.",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_startup_notify_id","","Initiates startup notification for the application and returns the `DESKTOP_STARTUP_ID` for the launched operation, if supported.",26,null],[10,"launch_failed","","Called when an application has failed to launch, so that it can cancel the application startup notification started in `AppLaunchContextExt::get_startup_notify_id`. ## `startup_notify_id` the startup notification id that was returned by `AppLaunchContextExt::get_startup_notify_id`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"setenv","","Arranges for `variable` to be set to `value` in the child's environment when `self` is used to launch an application. ## `variable` the environment variable to set ## `value` the value for to set the variable to.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"unsetenv","","Arranges for `variable` to be unset in the child's environment when `self` is used to launch an application. ## `variable` the environment variable to remove",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_launch_failed","","The ::launch-failed signal is emitted when a `AppInfo` launch fails. The startup notification id is provided, so that the launcher can cancel the startup notification.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_launched","","The ::launched signal is emitted when a `AppInfo` is successfully launched. The `platform_data` is an GVariant dictionary mapping strings to variants (ie a{sv}), which contains additional, platform-specific data about this launch. On UNIX, at least the \"pid\" and \"startup-notification-id\" keys will be present.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ApplicationExt","","Trait containing all `Application` methods.",null,null],[10,"activate","","Activates the application.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"bind_busy_property","","Marks `self` as busy (see `ApplicationExt::mark_busy`) while `property` on `object` is `true`.",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"get_application_id","","Gets the unique identifier for `self`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_dbus_object_path","","Gets the D-Bus object path being used by the application, or `None`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_flags","","Gets the flags for `self`.",27,{"inputs":[{"name":"self"}],"output":{"name":"applicationflags"}}],[10,"get_inactivity_timeout","","Gets the current inactivity timeout for the application.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_is_busy","","Gets the application's current busy state, as set through `ApplicationExt::mark_busy` or `ApplicationExt::bind_busy_property`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_registered","","Checks if `self` is registered.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_remote","","Checks if `self` is remote.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_resource_base_path","","Gets the resource base path of `self`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"hold","","Increases the use count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"mark_busy","","Increases the busy count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"open","","Opens the given files.",27,null],[10,"quit","","Immediately quits the application.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"register","","Attempts registration of the application.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"release","","Decrease the use count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"send_notification","","Sends a notification on behalf of `self` to the desktop shell. There is no guarantee that the notification is displayed immediately, or even at all.",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"notification"}],"output":null}],[10,"set_action_group","","This used to be how actions were associated with a `Application`. Now there is `ActionMap` for that.",27,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_application_id","","Sets the unique identifier for `self`.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_default","","Sets or unsets the default application for the process, as returned by `Application::get_default`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"set_flags","","Sets the flags for `self`.",27,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[10,"set_inactivity_timeout","","Sets the current inactivity timeout for the application.",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_resource_base_path","","Sets (or unsets) the base resource path of `self`.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unbind_busy_property","","Destroys a binding between `property` and the busy state of `self` that was previously created with `ApplicationExt::bind_busy_property`.",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"unmark_busy","","Decreases the busy count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"withdraw_notification","","Withdraws a notification that was sent with `ApplicationExt::send_notification`.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_resource_base_path","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_resource_base_path","","",27,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_activate","","The ::activate signal is emitted on the primary instance when an activation occurs. See `ApplicationExt::activate`.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_shutdown","","The ::shutdown signal is emitted only on the registered primary instance immediately after the main loop terminates.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_startup","","The ::startup signal is emitted on the primary instance immediately after registration. See `ApplicationExt::register`.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_action_group_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_application_id_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flags_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inactivity_timeout_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_busy_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_registered_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_remote_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resource_base_path_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BufferedInputStreamExt","","",null,null],[10,"fill","","",28,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"p"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"fill_async","","",28,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_available","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_buffer_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"peek_buffer","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[10,"read_byte","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"set_buffer_size","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"connect_property_buffer_size_notify","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BufferedOutputStreamExt","","",null,null],[10,"get_auto_grow","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_buffer_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"set_auto_grow","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_buffer_size","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"connect_property_auto_grow_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_size_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CancellableExt","","Trait containing all `Cancellable` methods.",null,null],[10,"cancel","","Will set `self` to cancelled, and will emit the `Cancellable::cancelled` signal. (However, see the warning about race conditions in the documentation for that signal if you are planning to connect to it.)",30,{"inputs":[{"name":"self"}],"output":null}],[10,"disconnect","","Disconnects a handler from a cancellable instance similar to `g_signal_handler_disconnect`. Additionally, in the event that a signal handler is currently running, this call will block until the handler has finished. Calling this function from a `Cancellable::cancelled` signal handler will therefore result in a deadlock.",30,{"inputs":[{"name":"self"},{"name":"c_ulong"}],"output":null}],[10,"get_fd","","Gets the file descriptor for a cancellable job. This can be used to implement cancellable operations on Unix systems. The returned fd will turn readable when `self` is cancelled.",30,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"is_cancelled","","Checks if a cancellable job has been cancelled.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pop_current","","Pops `self` off the cancellable stack (verifying that `self` is on the top of the stack).",30,{"inputs":[{"name":"self"}],"output":null}],[10,"push_current","","Pushes `self` onto the cancellable stack. The current cancellable can then be received using `Cancellable::get_current`.",30,{"inputs":[{"name":"self"}],"output":null}],[10,"release_fd","","Releases a resources previously allocated by `CancellableExt::get_fd` or `CancellableExt::make_pollfd`.",30,{"inputs":[{"name":"self"}],"output":null}],[10,"reset","","Resets `self` to its uncancelled state.",30,{"inputs":[{"name":"self"}],"output":null}],[10,"set_error_if_cancelled","","If the `self` is cancelled, sets the error to notify that the operation was cancelled.",30,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"source_new","","Creates a source that triggers if `self` is cancelled and calls its callback of type `GCancellableSourceFunc`. This is primarily useful for attaching to another (non-cancellable) source with `glib::Source::add_child_source` to add cancellability to it.",30,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"option"}}],[10,"connect_cancelled","","Emitted when the operation has been cancelled.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DataInputStreamExt","","",null,null],[10,"get_byte_order","","",31,{"inputs":[{"name":"self"}],"output":{"name":"datastreambyteorder"}}],[10,"get_newline_type","","",31,{"inputs":[{"name":"self"}],"output":{"name":"datastreamnewlinetype"}}],[10,"read_byte","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u8","error"],"name":"result"}}],[10,"read_int16","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i16","error"],"name":"result"}}],[10,"read_int32","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"read_int64","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i64","error"],"name":"result"}}],[10,"read_line_utf8","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_uint16","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u16","error"],"name":"result"}}],[10,"read_uint32","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u32","error"],"name":"result"}}],[10,"read_uint64","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u64","error"],"name":"result"}}],[10,"read_until","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_until_async","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"read_upto","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_upto_async","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_byte_order","","",31,{"inputs":[{"name":"self"},{"name":"datastreambyteorder"}],"output":null}],[10,"set_newline_type","","",31,{"inputs":[{"name":"self"},{"name":"datastreamnewlinetype"}],"output":null}],[10,"connect_property_byte_order_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_newline_type_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DataOutputStreamExt","","",null,null],[10,"get_byte_order","","",32,{"inputs":[{"name":"self"}],"output":{"name":"datastreambyteorder"}}],[10,"put_byte","","",32,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_int16","","",32,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_int32","","",32,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_int64","","",32,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_string","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_uint16","","",32,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_uint32","","",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_uint64","","",32,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_byte_order","","",32,{"inputs":[{"name":"self"},{"name":"datastreambyteorder"}],"output":null}],[10,"connect_property_byte_order_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileExt","","Trait containing all `File` methods.",null,null],[10,"append_to","","Gets an output stream for appending data to the file. If the file doesn't already exist it is created.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"p"}],"output":{"generics":["fileoutputstream","error"],"name":"result"}}],[10,"append_to_async","","Asynchronously opens `self` for appending.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"create","","Creates a new file and returns an output stream for writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"p"}],"output":{"generics":["fileoutputstream","error"],"name":"result"}}],[10,"create_async","","Asynchronously creates a new file and returns an output stream for writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"create_readwrite","","Creates a new file and returns a stream for reading and writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"p"}],"output":{"generics":["fileiostream","error"],"name":"result"}}],[10,"create_readwrite_async","","Asynchronously creates a new file and returns a stream for reading and writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"delete","","Deletes a file. If the `self` is a directory, it will only be deleted if it is empty. This has the same semantics as `g_unlink`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"delete_async","","Asynchronously delete a file. If the `self` is a directory, it will only be deleted if it is empty. This has the same semantics as `g_unlink`.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"dup","","Duplicates a `File` handle. This operation does not duplicate the actual file or directory represented by the `File`; see `File::copy` if attempting to copy a file.",33,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"equal","","Checks if the two given `GFiles` refer to the same file.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_basename","","Gets the base name (the last component of the path) for a given `File`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_child","","Gets a child of `self` with basename equal to `name`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_child_for_display_name","","Gets the child of `self` for a given `display_name` (i.e. a UTF-8 version of the name). If this function fails, it returns `None` and `error` will be set. This is very useful when constructing a `File` for a new file and the user entered the filename in the user interface, for instance when you select a directory and type a filename in the file selector.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["file","error"],"name":"result"}}],[10,"get_parent","","Gets the parent directory for the `self`. If the `self` represents the root directory of the file system, then `None` will be returned.",33,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_parse_name","","Gets the parse name of the `self`. A parse name is a UTF-8 string that describes the file such that one can get the `File` back using `File::parse_name`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_path","","Gets the local pathname for `File`, if one exists. If non-`None`, this is guaranteed to be an absolute, canonical path. It might contain symlinks.",33,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_relative_path","","Gets the path for `descendant` relative to `self`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_uri","","Gets the URI for the `self`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_uri_scheme","","Gets the URI scheme for a `File`. RFC 3986 decodes the scheme as:",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"has_parent","","Checks if `self` has a parent, and optionally, if it is `parent`.",33,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[10,"has_prefix","","Checks whether `self` has the prefix specified by `prefix`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"has_uri_scheme","","Checks to see if a `File` has a given URI scheme.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"is_native","","Checks to see if a file is native to the platform.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"load_contents","","Loads the content of the file into memory. The data is always zero-terminated, but this is not included in the resultant `length`. The returned `content` should be freed with `g_free` when no longer needed.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_contents_async","","Starts an asynchronous load of the `self`'s contents.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"make_directory","","Creates a directory. Note that this will only create a child directory of the immediate parent directory of the path or URI given by the `File`. To recursively create directories, see `File::make_directory_with_parents`. This function will fail if the parent directory does not exist, setting `error` to `IOErrorEnum::NotFound`. If the file system doesn't support creating directories, this function will fail, setting `error` to `IOErrorEnum::NotSupported`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"make_directory_async","","Asynchronously creates a directory.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"make_directory_with_parents","","Creates a directory and any parent directories that may not exist similar to 'mkdir -p'. If the file system does not support creating directories, this function will fail, setting `error` to `IOErrorEnum::NotSupported`. If the directory itself already exists, this function will fail setting `error` to `IOErrorEnum::Exists`, unlike the similar `g_mkdir_with_parents`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"make_symbolic_link","","Creates a symbolic link named `self` which contains the string `symlink_value`.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"open_readwrite","","Opens an existing file for reading and writing. The result is a `FileIOStream` that can be used to read and write the contents of the file.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["fileiostream","error"],"name":"result"}}],[10,"open_readwrite_async","","Asynchronously opens `self` for reading and writing.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"query_default_handler","","Returns the `AppInfo` that is registered as the default application to handle the file specified by `self`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["appinfo","error"],"name":"result"}}],[10,"query_exists","","Utility function to check if a particular file exists. This is implemented using `File::query_info` and as such does blocking I/O.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"query_file_type","","Utility function to inspect the `FileType` of a file. This is implemented using `File::query_info` and as such does blocking I/O.",33,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"name":"filetype"}}],[10,"query_filesystem_info","","Similar to `File::query_info`, but obtains information about the filesystem the `self` is on, rather than the file itself. For instance the amount of space available and the type of the filesystem.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_filesystem_info_async","","Asynchronously gets the requested information about the filesystem that the specified `self` is on. The result is a `FileInfo` object that contains key-value attributes (such as type or size for the file).",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"query_info","","Gets the requested information about specified `self`. The result is a `FileInfo` object that contains key-value attributes (such as the type or size of the file).",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","Asynchronously gets the requested information about specified `self`. The result is a `FileInfo` object that contains key-value attributes (such as type or size for the file).",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"read","","Opens a file for reading. The result is a `FileInputStream` that can be used to read the contents of the file.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["fileinputstream","error"],"name":"result"}}],[10,"read_async","","Asynchronously opens `self` for reading.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"replace","","Returns an output stream for overwriting the file, possibly creating a backup copy of the file first. If the file doesn't exist, it will be created.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"q"}],"output":{"generics":["fileoutputstream","error"],"name":"result"}}],[10,"replace_async","","Asynchronously overwrites the file, replacing the contents, possibly creating a backup copy of the file first.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"priority"},{"name":"q"},{"name":"r"}],"output":null}],[10,"replace_contents","","Replaces the contents of `self` with `contents` of `length` bytes.",33,null],[10,"replace_contents_async","","Starts an asynchronous replacement of `self` with the given `contents` of `length` bytes. `etag` will replace the document's current entity tag.",33,null],[10,"replace_readwrite","","Returns an output stream for overwriting the file in readwrite mode, possibly creating a backup copy of the file first. If the file doesn't exist, it will be created.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"q"}],"output":{"generics":["fileiostream","error"],"name":"result"}}],[10,"replace_readwrite_async","","Asynchronously overwrites the file in read-write mode, replacing the contents, possibly creating a backup copy of the file first.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"priority"},{"name":"q"},{"name":"r"}],"output":null}],[10,"resolve_relative_path","","Resolves a relative path for `self` to an absolute path.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file"],"name":"option"}}],[10,"set_attribute_byte_string","","Sets `attribute` of type `FileAttributeType::ByteString` to `value`. If `attribute` is of a different type, this operation will fail, returning `false`.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_int32","","Sets `attribute` of type `FileAttributeType::Int32` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_int64","","Sets `attribute` of type `FileAttributeType::Int64` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_string","","Sets `attribute` of type `FileAttributeType::String` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_uint32","","Sets `attribute` of type `FileAttributeType::Uint32` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_uint64","","Sets `attribute` of type `FileAttributeType::Uint64` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attributes_async","","Asynchronously sets the attributes of `self` with `info`.",33,{"inputs":[{"name":"self"},{"name":"fileinfo"},{"name":"filequeryinfoflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_attributes_from_info","","Tries to set all attributes in the `FileInfo` on the target values, not stopping on the first error.",33,{"inputs":[{"name":"self"},{"name":"fileinfo"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_display_name","","Renames `self` to the specified display name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["file","error"],"name":"result"}}],[10,"set_display_name_async","","Asynchronously sets the display name for a given `File`.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"supports_thread_contexts","","Checks if `self` supports [thread-default contexts][g-main-context-push-thread-default-context]. If this returns `false`, you cannot perform asynchronous operations on `self` in a thread that has a thread-default context.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"trash","","Sends `self` to the \"Trashcan\", if possible. This is similar to deleting it, but the user can recover it before emptying the trashcan. Not all file systems support trashing, so this call can return the `IOErrorEnum::NotSupported` error.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"trash_async","","Asynchronously sends `self` to the Trash location, if possible.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FileIOStreamExt","","",null,null],[10,"get_etag","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"query_info","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FileInfoExt","","Trait containing all `FileInfo` methods.",null,null],[10,"clear_status","","Clears the status information from `self`.",35,{"inputs":[{"name":"self"}],"output":null}],[10,"copy_into","","First clears all of the [GFileAttribute][gio-GFileAttribute] of `dest_info`, and then copies all of the file attributes from `self` to `dest_info`. ## `dest_info` destination to copy attributes to.",35,{"inputs":[{"name":"self"},{"name":"fileinfo"}],"output":null}],[10,"dup","","Duplicates a file info structure.",35,{"inputs":[{"name":"self"}],"output":{"generics":["fileinfo"],"name":"option"}}],[10,"get_attribute_as_string","","Gets the value of a attribute, formated as a string. This escapes things as needed to make the string valid utf8. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_attribute_boolean","","Gets the value of a boolean attribute. If the attribute does not contain a boolean value, `false` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_attribute_byte_string","","Gets the value of a byte string attribute. If the attribute does not contain a byte string, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_attribute_int32","","Gets a signed 32-bit integer contained within the attribute. If the attribute does not contain a signed 32-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_attribute_int64","","Gets a signed 64-bit integer contained within the attribute. If the attribute does not contain an signed 64-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i64"}}],[10,"get_attribute_object","","Gets the value of a `gobject::Object` attribute. If the attribute does not contain a `gobject::Object`, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_attribute_string","","Gets the value of a string attribute. If the attribute does not contain a string, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_attribute_stringv","","Gets the value of a stringv attribute. If the attribute does not contain a stringv, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_attribute_uint32","","Gets an unsigned 32-bit integer contained within the attribute. If the attribute does not contain an unsigned 32-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_attribute_uint64","","Gets a unsigned 64-bit integer contained within the attribute. If the attribute does not contain an unsigned 64-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u64"}}],[10,"get_content_type","","Gets the file's content type.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_display_name","","Gets a display name for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_edit_name","","Gets the edit name for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_etag","","Gets the [entity tag][gfile-etag] for a given `FileInfo`. See `G_FILE_ATTRIBUTE_ETAG_VALUE`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_file_type","","Gets a file's type (whether it is a regular file, symlink, etc). This is different from the file's content type, see `FileInfoExt::get_content_type`.",35,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[10,"get_icon","","Gets the icon for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_is_backup","","Checks if a file is a backup file.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_hidden","","Checks if a file is hidden.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_symlink","","Checks if a file is a symlink.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_name","","Gets the name for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_size","","Gets the file's size.",35,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_sort_order","","Gets the value of the sort_order attribute from the `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER`.",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_symbolic_icon","","Gets the symbolic icon for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_symlink_target","","Gets the symlink target for a given `FileInfo`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"has_attribute","","Checks if a file info structure has an attribute named `attribute`. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"has_namespace","","Checks if a file info structure has an attribute in the specified `name_space`. ## `name_space` a file attribute namespace.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_attributes","","Lists the file info structure's attributes. ## `name_space` a file attribute key's namespace, or `None` to list  all attributes.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"vec"}}],[10,"remove_attribute","","Removes all cases of `attribute` from `self` if it exists. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_attribute_boolean","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a boolean value.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"set_attribute_byte_string","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a byte string.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_attribute_int32","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a signed 32-bit integer",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_attribute_int64","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` attribute name to set. ## `attr_value` int64 value to set attribute to.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":null}],[10,"set_attribute_object","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a `gobject::Object`.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_attribute_string","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a UTF-8 string.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_attribute_stringv","","Sets the `attribute` to contain the given `attr_value`, if possible.",35,null],[10,"set_attribute_uint32","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` an unsigned 32-bit integer.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":null}],[10,"set_attribute_uint64","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` an unsigned 64-bit integer.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":null}],[10,"set_content_type","","Sets the content type attribute for a given `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE`. ## `content_type` a content type. See [GContentType][gio-GContentType]",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_display_name","","Sets the display name for the current `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME`. ## `display_name` a string containing a display name.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_edit_name","","Sets the edit name for the current file. See `G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME`. ## `edit_name` a string containing an edit name.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_file_type","","Sets the file type in a `FileInfo` to `type_`. See `G_FILE_ATTRIBUTE_STANDARD_TYPE`. ## `type_` a `FileType`.",35,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":null}],[10,"set_icon","","Sets the icon for a given `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_ICON`. ## `icon` a `Icon`.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_is_hidden","","Sets the \"is_hidden\" attribute in a `FileInfo` according to `is_hidden`. See `G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN`. ## `is_hidden` a `gboolean`.",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_is_symlink","","Sets the \"is_symlink\" attribute in a `FileInfo` according to `is_symlink`. See `G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK`. ## `is_symlink` a `gboolean`.",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_name","","Sets the name attribute for the current `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_NAME`. ## `name` a string containing a name.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_size","","Sets the `G_FILE_ATTRIBUTE_STANDARD_SIZE` attribute in the file info to the given size. ## `size` a `goffset` containing the file's size.",35,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[10,"set_sort_order","","Sets the sort order attribute in the file info structure. See `G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER`. ## `sort_order` a sort order integer.",35,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_symbolic_icon","","Sets the symbolic icon for a given `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON`.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_symlink_target","","Sets the `G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET` attribute in the file info to the given symlink target. ## `symlink_target` a static string containing a path to a symlink target.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"unset_attribute_mask","","Unsets a mask set by `FileInfoExt::set_attribute_mask`, if one is set.",35,{"inputs":[{"name":"self"}],"output":null}],[8,"FileInputStreamExt","","",null,null],[10,"query_info","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FileOutputStreamExt","","",null,null],[10,"get_etag","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"query_info","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FilterInputStreamExt","","",null,null],[10,"get_base_stream","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["inputstream"],"name":"option"}}],[10,"get_close_base_stream","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_close_base_stream","","",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_close_base_stream_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FilterOutputStreamExt","","",null,null],[10,"get_base_stream","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["outputstream"],"name":"option"}}],[10,"get_close_base_stream","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_close_base_stream","","",39,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_close_base_stream_notify","","",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IOStreamExt","","",null,null],[10,"clear_pending","","",40,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_async","","",40,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_input_stream","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["inputstream"],"name":"option"}}],[10,"get_output_stream","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["outputstream"],"name":"option"}}],[10,"has_pending","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_pending","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_property_closed","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_closed_notify","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IconExt","","Trait containing all `Icon` methods.",null,null],[10,"equal","","Checks if two icons are equal. ## `icon2` pointer to the second `Icon`.",41,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[10,"serialize","","Serializes a `Icon` into a `glib::Variant`. An equivalent `Icon` can be retrieved back by calling `Icon::deserialize` on the returned value. As serialization will avoid using raw icon data when possible, it only makes sense to transfer the `glib::Variant` between processes on the same machine, (as opposed to over the network), and within the same file system namespace.",41,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"to_string","","Generates a textual representation of `self` that can be used for serialization such as when passing `self` to a different process or saving it to persistent storage. Use `Icon::new_for_string` to get `self` back from the returned string.",41,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"InetAddressExt","","",null,null],[10,"get_family","","",42,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_is_any","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_link_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_loopback","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_global","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_link_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_node_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_org_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_site_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_multicast","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_site_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_native_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"connect_property_bytes_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_any_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_link_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_loopback_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_global_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_link_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_node_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_org_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_site_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_multicast_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_site_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InetSocketAddressExt","","",null,null],[10,"get_address","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["inetaddress"],"name":"option"}}],[10,"get_flowinfo","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_port","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[10,"get_scope_id","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_property_address_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flowinfo_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_port_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scope_id_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InputStreamExt","","",null,null],[10,"clear_pending","","",44,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","",44,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_async","","",44,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"has_pending","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"read_bytes","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"generics":["bytes","error"],"name":"result"}}],[10,"read_bytes_async","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_pending","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"skip","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"skip_async","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"MemoryInputStreamExt","","",null,null],[10,"add_bytes","","",45,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[8,"MemoryOutputStreamExt","","",null,null],[10,"get_data_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"steal_as_bytes","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"connect_property_data_size_notify","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuExt","","Trait containing all `Menu` methods.",null,null],[10,"append","","Convenience function for appending a normal menu item to the end of `self`. Combine `MenuItem::new` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `detailed_action` the detailed action string, or `None`",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"append_item","","Appends `item` to the end of `self`.",47,{"inputs":[{"name":"self"},{"name":"menuitem"}],"output":null}],[10,"append_section","","Convenience function for appending a section menu item to the end of `self`. Combine `MenuItem::new_section` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `section` a `MenuModel` with the items of the section",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"append_submenu","","Convenience function for appending a submenu menu item to the end of `self`. Combine `MenuItem::new_submenu` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `submenu` a `MenuModel` with the items of the submenu",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"freeze","","Marks `self` as frozen.",47,{"inputs":[{"name":"self"}],"output":null}],[10,"insert","","Convenience function for inserting a normal menu item into `self`. Combine `MenuItem::new` and `MenuExt::insert_item` for a more flexible alternative. ## `position` the position at which to insert the item ## `label` the section label, or `None` ## `detailed_action` the detailed action string, or `None`",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"q"}],"output":null}],[10,"insert_item","","Inserts `item` into `self`.",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"menuitem"}],"output":null}],[10,"insert_section","","Convenience function for inserting a section menu item into `self`. Combine `MenuItem::new_section` and `MenuExt::insert_item` for a more flexible alternative. ## `position` the position at which to insert the item ## `label` the section label, or `None` ## `section` a `MenuModel` with the items of the section",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"q"}],"output":null}],[10,"insert_submenu","","Convenience function for inserting a submenu menu item into `self`. Combine `MenuItem::new_submenu` and `MenuExt::insert_item` for a more flexible alternative. ## `position` the position at which to insert the item ## `label` the section label, or `None` ## `submenu` a `MenuModel` with the items of the submenu",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"q"}],"output":null}],[10,"prepend","","Convenience function for prepending a normal menu item to the start of `self`. Combine `MenuItem::new` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `detailed_action` the detailed action string, or `None`",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"prepend_item","","Prepends `item` to the start of `self`.",47,{"inputs":[{"name":"self"},{"name":"menuitem"}],"output":null}],[10,"prepend_section","","Convenience function for prepending a section menu item to the start of `self`. Combine `MenuItem::new_section` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `section` a `MenuModel` with the items of the section",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"prepend_submenu","","Convenience function for prepending a submenu menu item to the start of `self`. Combine `MenuItem::new_submenu` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `submenu` a `MenuModel` with the items of the submenu",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"remove","","Removes an item from the menu.",47,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_all","","Removes all items in the menu.",47,{"inputs":[{"name":"self"}],"output":null}],[8,"MenuAttributeIterExt","","Trait containing all `MenuAttributeIter` methods.",null,null],[10,"get_name","","Gets the name of the attribute at the current iterator position, as a string.",48,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_next","","This function combines `MenuAttributeIterExt::next` with `MenuAttributeIterExt::get_name` and `MenuAttributeIterExt::get_value`.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_value","","Gets the value of the attribute at the current iterator position.",48,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"next","","Attempts to advance the iterator to the next (possibly first) attribute.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MenuItemExt","","Trait containing all `MenuItem` methods.",null,null],[10,"get_attribute_value","","Queries the named `attribute` on `self`.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_link","","Queries the named `link` on `self`.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"set_action_and_target_value","","Sets or unsets the \"action\" and \"target\" attributes of `self`.",49,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_attribute_value","","Sets or unsets an attribute on `self`.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_detailed_action","","Sets the \"action\" and possibly the \"target\" attribute of `self`.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_icon","","Sets (or unsets) the icon on `self`.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label","","Sets or unsets the \"label\" attribute of `self`.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_link","","Creates a link from `self` to `model` if non-`None`, or unsets it.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"q"}],"output":null}],[10,"set_section","","Sets or unsets the \"section\" link of `self` to `section`.",49,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_submenu","","Sets or unsets the \"submenu\" link of `self` to `submenu`.",49,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[8,"MenuLinkIterExt","","Trait containing all `MenuLinkIter` methods.",null,null],[10,"get_name","","Gets the name of the link at the current iterator position.",50,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_next","","This function combines `MenuLinkIterExt::next` with `MenuLinkIterExt::get_name` and `MenuLinkIterExt::get_value`.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_value","","Gets the linked `MenuModel` at the current iterator position.",50,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"next","","Attempts to advance the iterator to the next (possibly first) link.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MenuModelExt","","Trait containing all `MenuModel` methods.",null,null],[10,"get_item_attribute_value","","Queries the item at position `item_index` in `self` for the attribute specified by `attribute`.",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"},{"name":"p"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_item_link","","Queries the item at position `item_index` in `self` for the link specified by `link`.",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_n_items","","Query the number of items in `self`.",51,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"is_mutable","","Queries if `self` is mutable.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"items_changed","","Requests emission of the `MenuModel::items-changed` signal on `self`.",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"iterate_item_attributes","","Creates a `MenuAttributeIter` to iterate over the attributes of the item at position `item_index` in `self`.",51,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["menuattributeiter"],"name":"option"}}],[10,"iterate_item_links","","Creates a `MenuLinkIter` to iterate over the links of the item at position `item_index` in `self`.",51,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["menulinkiter"],"name":"option"}}],[10,"connect_items_changed","","Emitted when a change has occured to the menu.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MountOperationExt","","",null,null],[10,"get_anonymous","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_choice","","",52,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_domain","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_password","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_password_save","","",52,{"inputs":[{"name":"self"}],"output":{"name":"passwordsave"}}],[10,"get_username","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"reply","","",52,{"inputs":[{"name":"self"},{"name":"mountoperationresult"}],"output":null}],[10,"set_anonymous","","",52,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_choice","","",52,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_domain","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_password","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_password_save","","",52,{"inputs":[{"name":"self"},{"name":"passwordsave"}],"output":null}],[10,"set_username","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_aborted","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_ask_password","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_reply","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_unmount_progress","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_anonymous_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_choice_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_domain_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_password_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_password_save_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_username_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NetworkAddressExt","","",null,null],[10,"get_hostname","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_port","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[10,"get_scheme","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_hostname_notify","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_port_notify","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scheme_notify","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NetworkServiceExt","","",null,null],[10,"get_domain","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_protocol","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_scheme","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_service","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_scheme","","",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_property_domain_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_protocol_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scheme_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_service_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NotificationExt","","Trait containing all `Notification` methods.",null,null],[10,"add_button","","Adds a button to `self` that activates the action in `detailed_action` when clicked. That action must be an application-wide action (starting with \"app.\"). If `detailed_action` contains a target, the action will be activated with that target as its parameter.",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"add_button_with_target_value","","Adds a button to `self` that activates `action` when clicked. `action` must be an application-wide action (it must start with \"app.\").",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_body","","Sets the body of `self` to `body`.",55,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_default_action","","Sets the default action of `self` to `detailed_action`. This action is activated when the notification is clicked on.",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_default_action_and_target_value","","Sets the default action of `self` to `action`. This action is activated when the notification is clicked on. It must be an application-wide action (start with \"app.\").",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_icon","","Sets the icon of `self` to `icon`.",55,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_priority","","Sets the priority of `self` to `priority`. See `NotificationPriority` for possible values.",55,{"inputs":[{"name":"self"},{"name":"notificationpriority"}],"output":null}],[10,"set_title","","Sets the title of `self` to `title`.",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_urgent","","Deprecated in favor of `NotificationExt::set_priority`.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"OutputStreamExt","","",null,null],[10,"clear_pending","","",56,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","",56,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_async","","",56,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"flush","","",56,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"flush_async","","",56,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"has_pending","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closing","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_pending","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"splice","","",56,{"inputs":[{"name":"self"},{"name":"p"},{"name":"outputstreamspliceflags"},{"name":"q"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"splice_async","","",56,{"inputs":[{"name":"self"},{"name":"p"},{"name":"outputstreamspliceflags"},{"name":"priority"},{"name":"q"},{"name":"r"}],"output":null}],[10,"write","","",56,null],[10,"write_all","","",56,null],[10,"write_bytes","","",56,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"p"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"write_bytes_async","","",56,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"PermissionExt","","Trait containing all `Permission` methods.",null,null],[10,"acquire","","Attempts to acquire the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"acquire_async","","Attempts to acquire the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_allowed","","Gets the value of the 'allowed' property. This property is `true` if the caller currently has permission to perform the action that `self` represents the permission to perform.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_acquire","","Gets the value of the 'can-acquire' property. This property is `true` if it is generally possible to acquire the permission by calling `PermissionExt::acquire`.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_release","","Gets the value of the 'can-release' property. This property is `true` if it is generally possible to release the permission by calling `PermissionExt::release`.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"impl_update","","This function is called by the `Permission` implementation to update the properties of the permission. You should never call this function except from a `Permission` implementation.",57,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"release","","Attempts to release the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"release_async","","Attempts to release the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"connect_property_allowed_notify","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_acquire_notify","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_release_notify","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ResolverExt","","",null,null],[10,"lookup_by_address","","",58,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"p"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"lookup_by_address_async","","",58,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"p"},{"name":"q"}],"output":null}],[10,"lookup_by_name","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"lookup_by_name_async","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":null}],[10,"lookup_records","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resolverrecordtype"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"lookup_records_async","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resolverrecordtype"},{"name":"p"},{"name":"q"}],"output":null}],[10,"lookup_service","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"lookup_service_async","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_default","","",58,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_reload","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SeekableExt","","",null,null],[10,"can_seek","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_truncate","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"seek","","",59,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"seektype"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"tell","","",59,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"truncate","","",59,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[8,"SettingsExt","","Trait containing all `Settings` methods.",null,null],[10,"apply","","Applies any changes that have been made to the settings. This function does nothing unless `self` is in 'delay-apply' mode; see `SettingsExt::delay`. In the normal case settings are always applied immediately.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"bind","","Create a binding between the `key` in the `self` object and the property `property` of `object`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"str"},{"name":"settingsbindflags"}],"output":null}],[10,"bind_writable","","Create a binding between the writability of `key` in the `self` object and the property `property` of `object`. The property must be boolean; \"sensitive\" or \"visible\" properties of widgets are the most likely candidates.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"create_action","","Creates a `Action` corresponding to a given `Settings` key.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["action"],"name":"option"}}],[10,"delay","","Changes the `Settings` object into 'delay-apply' mode. In this mode, changes to `self` are not immediately propagated to the backend, but kept locally until `SettingsExt::apply` is called.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"get_boolean","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_child","","Creates a child settings object which has a base path of `base-path/@name`, where `base-path` is the base path of `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["settings"],"name":"option"}}],[10,"get_default_value","","Gets the \"default value\" of a key.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_double","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"f64"}}],[10,"get_enum","","Gets the value that is stored in `self` for `key` and converts it to the enum value that it represents.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_flags","","Gets the value that is stored in `self` for `key` and converts it to the flags value that it represents.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_has_unapplied","","Returns whether the `Settings` object has any unapplied changes. This can only be the case if it is in 'delayed-apply' mode.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_int","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_int64","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i64"}}],[10,"get_range","","Queries the range of a key.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_string","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_strv","","A convenience variant of `SettingsExt::get` for string arrays.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_uint","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_uint64","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u64"}}],[10,"get_user_value","","Checks the \"user value\" of a key, if there is one.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_value","","Gets the value that is stored in `self` for `key`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"is_writable","","Finds out if a key can be written or not ## `name` the name of a key",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_children","","Gets the list of children on `self`.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_keys","","Introspects the list of keys on `self`.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"range_check","","Checks if the given `value` is of the correct type and within the permitted range for `key`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":{"name":"bool"}}],[10,"reset","","Resets `key` to its default value.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"revert","","Reverts all non-applied changes to the settings. This function does nothing unless `self` is in 'delay-apply' mode; see `SettingsExt::delay`. In the normal case settings are always applied immediately.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"set_boolean","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"set_double","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"bool"}}],[10,"set_enum","","Looks up the enumerated type nick for `value` and writes it to `key`, within `self`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_flags","","Looks up the flags type nicks for the bits specified by `value`, puts them in an array of strings and writes the array to `key`, within `self`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"set_int","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_int64","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"bool"}}],[10,"set_string","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_strv","","Sets `key` in `self` to `value`.",60,null],[10,"set_uint","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"set_uint64","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":{"name":"bool"}}],[10,"set_value","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":{"name":"bool"}}],[10,"get_property_delay_apply","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_path","","The path within the backend where the settings are stored.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_schema","","The name of the schema that describes the types of keys for this `Settings` object.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_schema_id","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_settings_schema","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["settingsschema"],"name":"option"}}],[10,"connect_changed","","The \"changed\" signal is emitted when a key has potentially changed. You should call one of the `SettingsExt::get` calls to check the new value.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_writable_change_event","","The \"writable-change-event\" signal is emitted once per writability change event that affects this settings object. You should connect to this signal if you are interested in viewing groups of changes before they are split out into multiple emissions of the \"writable-changed\" signal. For most use cases it is more appropriate to use the \"writable-changed\" signal.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_writable_changed","","The \"writable-changed\" signal is emitted when the writability of a key has potentially changed. You should call `SettingsExt::is_writable` in order to determine the new status.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_backend_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_delay_apply_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_unapplied_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_path_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_schema_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_schema_id_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_settings_schema_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SimpleActionExt","","Trait containing all `SimpleAction` methods.",null,null],[10,"set_enabled","","Sets the action as enabled or not.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_state","","Sets the state of the action.",61,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"set_state_hint","","Sets the state hint for the action.",61,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_activate","","Indicates that the action was just activated.",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_change_state","","Indicates that the action just received a request to change its state.",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enabled_notify","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_type_notify","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SimpleActionGroupExt","","Trait containing all `SimpleActionGroup` methods.",null,null],[10,"insert","","Adds an action to the action group.",62,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"lookup","","Looks up the action with the name `action_name` in the group.",62,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["action"],"name":"option"}}],[10,"remove","","Removes the named action from the action group.",62,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"SocketExt","","",null,null],[10,"accept","","",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["socket","error"],"name":"result"}}],[10,"bind","","",63,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[10,"check_connect_result","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"close","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"condition_check","","",63,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[10,"condition_timed_wait","","",63,{"inputs":[{"name":"self"},{"name":"iocondition"},{"name":"i64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"condition_wait","","",63,{"inputs":[{"name":"self"},{"name":"iocondition"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"connect","","",63,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"connection_factory_create_connection","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["socketconnection"],"name":"option"}}],[10,"get_available_bytes","","",63,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[10,"get_blocking","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_broadcast","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_family","","",63,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_keepalive","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_listen_backlog","","",63,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_local_address","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_multicast_loopback","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_multicast_ttl","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_option","","",63,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"get_protocol","","",63,{"inputs":[{"name":"self"}],"output":{"name":"socketprotocol"}}],[10,"get_remote_address","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_socket_type","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"get_timeout","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_ttl","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"is_closed","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_connected","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"join_multicast_group","","",63,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"bool"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"leave_multicast_group","","",63,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"bool"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"listen","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_blocking","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_broadcast","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_keepalive","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_listen_backlog","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_multicast_loopback","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_multicast_ttl","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_option","","",63,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_timeout","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_ttl","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"shutdown","","",63,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[10,"speaks_ipv4","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_type","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"connect_property_blocking_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_broadcast_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_keepalive_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_listen_backlog_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_address_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_multicast_loopback_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_multicast_ttl_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_protocol_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_remote_address_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_timeout_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ttl_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketAddressExt","","",null,null],[10,"get_family","","",64,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_native_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[10,"connect_property_family_notify","","",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketAddressEnumeratorExt","","",null,null],[10,"next","","",65,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"next_async","","",65,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[8,"SocketClientExt","","",null,null],[10,"add_application_proxy","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect","","",66,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_async","","",66,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"connect_to_host","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_to_host_async","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"},{"name":"q"}],"output":null}],[10,"connect_to_service","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_to_service_async","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":null}],[10,"connect_to_uri","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_to_uri_async","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_enable_proxy","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_family","","",66,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_local_address","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress"],"name":"option"}}],[10,"get_protocol","","",66,{"inputs":[{"name":"self"}],"output":{"name":"socketprotocol"}}],[10,"get_socket_type","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"get_timeout","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_tls","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tls_validation_flags","","",66,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[10,"set_enable_proxy","","",66,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_family","","",66,{"inputs":[{"name":"self"},{"name":"socketfamily"}],"output":null}],[10,"set_local_address","","",66,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_protocol","","",66,{"inputs":[{"name":"self"},{"name":"socketprotocol"}],"output":null}],[10,"set_socket_type","","",66,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":null}],[10,"set_timeout","","",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_tls","","",66,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tls_validation_flags","","",66,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[10,"get_property_type","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"set_property_type","","",66,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":null}],[10,"connect_event","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_proxy_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_address_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_protocol_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_proxy_resolver_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_timeout_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tls_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tls_validation_flags_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketConnectableExt","","",null,null],[10,"enumerate","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddressenumerator"],"name":"option"}}],[10,"proxy_enumerate","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddressenumerator"],"name":"option"}}],[10,"to_string","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"SocketConnectionExt","","",null,null],[10,"connect","","",68,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"connect_async","","",68,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"get_local_address","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_remote_address","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_socket","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["socket"],"name":"option"}}],[10,"is_connected","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_socket_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketListenerExt","","",null,null],[10,"accept","","",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"accept_async","","",69,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"accept_socket","","",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_address","","",69,{"inputs":[{"name":"self"},{"name":"p"},{"name":"sockettype"},{"name":"socketprotocol"},{"name":"r"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"add_any_inet_port","","",69,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["u16","error"],"name":"result"}}],[10,"add_inet_port","","",69,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_socket","","",69,{"inputs":[{"name":"self"},{"name":"socket"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"close","","",69,{"inputs":[{"name":"self"}],"output":null}],[10,"set_backlog","","",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_listen_backlog","","",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_listen_backlog","","",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_event","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_listen_backlog_notify","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketServiceExt","","",null,null],[10,"is_active","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"start","","",70,{"inputs":[{"name":"self"}],"output":null}],[10,"stop","","",70,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_active","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","",70,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_incoming","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TcpConnectionExt","","",null,null],[10,"get_graceful_disconnect","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_graceful_disconnect","","",71,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_graceful_disconnect_notify","","",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ThemedIconExt","","Trait containing all `ThemedIcon` methods.",null,null],[10,"append_name","","Append a name to the list of icons from within `self`.",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_names","","Gets the names of icons from within `self`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"prepend_name","","Prepend a name to the list of icons from within `self`.",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_use_default_fallbacks","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_name_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_names_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_default_fallbacks_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ThreadedSocketServiceExt","","",null,null],[10,"get_property_max_threads","","",73,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_run","","",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_threads_notify","","",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsCertificateExt","","Trait containing all `TlsCertificate` methods.",null,null],[10,"get_issuer","","Gets the `TlsCertificate` representing `self`'s issuer, if known",74,{"inputs":[{"name":"self"}],"output":{"generics":["tlscertificate"],"name":"option"}}],[10,"is_same","","Check if two `TlsCertificate` objects represent the same certificate. The raw DER byte data of the two certificates are checked for equality. This has the effect that two certificates may compare equal even if their `TlsCertificate:issuer`, `TlsCertificate:private-key`, or `TlsCertificate:private-key-pem` properties differ.",74,{"inputs":[{"name":"self"},{"name":"tlscertificate"}],"output":{"name":"bool"}}],[10,"verify","","This verifies `self` and returns a set of `TlsCertificateFlags` indicating any problems found with it. This can be used to verify a certificate outside the context of making a connection, or to check a certificate against a CA that is not part of the system CA database.",74,{"inputs":[{"name":"self"},{"name":"q"},{"name":"r"}],"output":{"name":"tlscertificateflags"}}],[10,"get_property_certificate_pem","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_certificate_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_certificate_pem_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_issuer_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_private_key_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_private_key_pem_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsClientConnectionExt","","",null,null],[10,"copy_session_state","","",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_server_identity","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["socketconnectable"],"name":"option"}}],[10,"get_use_ssl3","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_validation_flags","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[10,"set_server_identity","","",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_use_ssl3","","",75,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_validation_flags","","",75,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[10,"connect_property_accepted_cas_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_server_identity_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_ssl3_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_validation_flags_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsConnectionExt","","",null,null],[10,"emit_accept_certificate","","",76,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[10,"get_certificate","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlscertificate"],"name":"option"}}],[10,"get_database","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlsdatabase"],"name":"option"}}],[10,"get_interaction","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlsinteraction"],"name":"option"}}],[10,"get_peer_certificate","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlscertificate"],"name":"option"}}],[10,"get_peer_certificate_errors","","",76,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[10,"get_rehandshake_mode","","",76,{"inputs":[{"name":"self"}],"output":{"name":"tlsrehandshakemode"}}],[10,"get_require_close_notify","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_system_certdb","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"handshake","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"handshake_async","","",76,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_certificate","","",76,{"inputs":[{"name":"self"},{"name":"tlscertificate"}],"output":null}],[10,"set_database","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_interaction","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_rehandshake_mode","","",76,{"inputs":[{"name":"self"},{"name":"tlsrehandshakemode"}],"output":null}],[10,"set_require_close_notify","","",76,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_system_certdb","","",76,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_base_io_stream","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["iostream"],"name":"option"}}],[10,"connect_accept_certificate","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_base_io_stream_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_certificate_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_database_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_interaction_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_peer_certificate_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_peer_certificate_errors_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rehandshake_mode_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_require_close_notify_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_system_certdb_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsDatabaseExt","","",null,null],[10,"create_certificate_handle","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"}],"output":{"generics":["string"],"name":"option"}}],[10,"lookup_certificate_for_handle","","",77,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"lookup_certificate_for_handle_async","","",77,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"},{"name":"r"}],"output":null}],[10,"lookup_certificate_issuer","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"}],"output":{"generics":["tlscertificate","error"],"name":"result"}}],[10,"lookup_certificate_issuer_async","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"},{"name":"r"}],"output":null}],[10,"verify_chain","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"str"},{"name":"q"},{"name":"r"},{"name":"tlsdatabaseverifyflags"},{"name":"s"}],"output":{"generics":["tlscertificateflags","error"],"name":"result"}}],[10,"verify_chain_async","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"str"},{"name":"q"},{"name":"r"},{"name":"tlsdatabaseverifyflags"},{"name":"s"},{"name":"t"}],"output":null}],[8,"TlsFileDatabaseExt","","",null,null],[10,"get_property_anchors","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_anchors","","",78,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_anchors_notify","","",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsInteractionExt","","",null,null],[10,"ask_password","","",79,{"inputs":[{"name":"self"},{"name":"tlspassword"},{"name":"p"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"ask_password_async","","",79,{"inputs":[{"name":"self"},{"name":"tlspassword"},{"name":"p"},{"name":"q"}],"output":null}],[10,"invoke_ask_password","","",79,{"inputs":[{"name":"self"},{"name":"tlspassword"},{"name":"p"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"invoke_request_certificate","","",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"tlscertificaterequestflags"},{"name":"q"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"request_certificate","","",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"tlscertificaterequestflags"},{"name":"q"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"request_certificate_async","","",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"tlscertificaterequestflags"},{"name":"q"},{"name":"r"}],"output":null}],[8,"TlsPasswordExt","","",null,null],[10,"get_description","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_flags","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tlspasswordflags"}}],[10,"get_warning","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_description","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_flags","","",80,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[10,"set_warning","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_property_description_notify","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flags_notify","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_warning_notify","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsServerConnectionExt","","",null,null],[10,"get_property_authentication_mode","","",81,{"inputs":[{"name":"self"}],"output":{"name":"tlsauthenticationmode"}}],[10,"set_property_authentication_mode","","",81,{"inputs":[{"name":"self"},{"name":"tlsauthenticationmode"}],"output":null}],[10,"connect_property_authentication_mode_notify","","",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ApplicationExtManual","","",null,null],[10,"run","","",82,null],[10,"connect_open","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InputStreamExtManual","","",null,null],[10,"read","","",83,{"inputs":[{"name":"self"},{"name":"b"},{"name":"p"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"read_all","","",83,{"inputs":[{"name":"self"},{"name":"b"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_all_async","","",83,{"inputs":[{"name":"self"},{"name":"b"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"read_async","","",83,{"inputs":[{"name":"self"},{"name":"b"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"OutputStreamExtManual","","",null,null],[10,"write_async","","",84,{"inputs":[{"name":"self"},{"name":"b"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"write_all_async","","",84,{"inputs":[{"name":"self"},{"name":"b"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"SocketExtManual","","",null,null],[10,"receive","","",85,{"inputs":[{"name":"self"},{"name":"b"},{"name":"p"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"receive_from","","",85,{"inputs":[{"name":"self"},{"name":"b"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"receive_with_blocking","","",85,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bool"},{"name":"p"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"send","","",85,{"inputs":[{"name":"self"},{"name":"b"},{"name":"p"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"send_to","","",85,{"inputs":[{"name":"self"},{"name":"q"},{"name":"b"},{"name":"r"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"send_with_blocking","","",85,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bool"},{"name":"p"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"get_fd","","",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"get_socket","","",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"create_source","","",85,{"inputs":[{"name":"self"},{"name":"iocondition"},{"name":"p"},{"name":"n"},{"name":"priority"},{"name":"f"}],"output":{"name":"source"}}],[8,"IntoRawSocket","","",null,null],[10,"into_raw_socket","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"FromRawSocket","","",null,null],[10,"from_raw_socket","","",87,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[8,"SocketListenerExtManual","","",null,null],[10,"accept_socket_async","","",88,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[11,"clone","gio","",89,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"static_type","","",89,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"name_is_valid","","Checks if `action_name` is valid.",89,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"parse_detailed_name","","Parses a detailed action name into its separate name and target components.",89,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_detailed_name","","Formats a detailed action name from `action_name` and `target_value`.",89,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"actiongroup"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"static_type","","",90,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"actionmap"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"static_type","","",91,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"appinfo"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"static_type","","",92,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"create_from_commandline","","Creates a new `AppInfo` from the given information.",92,{"inputs":[{"name":"str"},{"name":"p"},{"name":"appinfocreateflags"}],"output":{"generics":["appinfo","error"],"name":"result"}}],[11,"get_all","","Gets a list of all of the applications currently registered on this system.",92,{"inputs":[],"output":{"generics":["appinfo"],"name":"vec"}}],[11,"get_all_for_type","","Gets a list of all `GAppInfos` for a given content type, including the recommended and fallback `GAppInfos`. See `AppInfo::get_recommended_for_type` and `AppInfo::get_fallback_for_type`. ## `content_type` the content type to find a `AppInfo` for",92,{"inputs":[{"name":"str"}],"output":{"generics":["appinfo"],"name":"vec"}}],[11,"get_default_for_type","","Gets the default `AppInfo` for a given content type. ## `content_type` the content type to find a `AppInfo` for ## `must_support_uris` if `true`, the `AppInfo` is expected to  support URIs",92,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["appinfo"],"name":"option"}}],[11,"get_default_for_uri_scheme","","Gets the default application for handling URIs with the given URI scheme. A URI scheme is the initial part of the URI, up to but not including the ':', e.g. \"http\", \"ftp\" or \"sip\". ## `uri_scheme` a string containing a URI scheme.",92,{"inputs":[{"name":"str"}],"output":{"generics":["appinfo"],"name":"option"}}],[11,"get_fallback_for_type","","Gets a list of fallback `GAppInfos` for a given content type, i.e. those applications which claim to support the given content type by MIME type subclassing and not directly. ## `content_type` the content type to find a `AppInfo` for",92,{"inputs":[{"name":"str"}],"output":{"generics":["appinfo"],"name":"vec"}}],[11,"get_recommended_for_type","","Gets a list of recommended `GAppInfos` for a given content type, i.e. those applications which claim to support the given content type exactly, and not by MIME type subclassing. Note that the first application of the list is the last used one, i.e. the last one for which `AppInfo::set_as_last_used_for_type` has been called. ## `content_type` the content type to find a `AppInfo` for",92,{"inputs":[{"name":"str"}],"output":{"generics":["appinfo"],"name":"vec"}}],[11,"launch_default_for_uri","","Utility function that launches the default application registered to handle the specified uri. Synchronous I/O is done on the uri to detect the type of the file if required. ## `uri` the uri to show ## `launch_context` an optional `AppLaunchContext`",92,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"launch_default_for_uri_async","","Async version of `AppInfo::launch_default_for_uri`.",92,{"inputs":[{"name":"str"},{"name":"applaunchcontext"},{"name":"p"},{"name":"q"}],"output":null}],[11,"reset_type_associations","","Removes all changes to the type associations done by `AppInfo::set_as_default_for_type`, `AppInfo::set_as_default_for_extension`, `AppInfo::add_supports_type` or `AppInfo::remove_supports_type`. ## `content_type` a content type",92,{"inputs":[{"name":"str"}],"output":null}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"applaunchcontext"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"static_type","","",93,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new application launch context. This is not normally used, instead you instantiate a subclass of this, such as `GdkAppLaunchContext`.",93,{"inputs":[],"output":{"name":"applaunchcontext"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"application"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"static_type","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Application` instance.",94,{"inputs":[{"name":"p"},{"name":"applicationflags"}],"output":{"name":"application"}}],[11,"get_default","","Returns the default `Application` instance for this process.",94,{"inputs":[],"output":{"generics":["application"],"name":"option"}}],[11,"id_is_valid","","Checks if `application_id` is a valid application identifier.",94,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bufferedinputstream"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"static_type","","",95,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",95,{"inputs":[{"name":"p"}],"output":{"name":"bufferedinputstream"}}],[11,"new_sized","","",95,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"bufferedinputstream"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bufferedoutputstream"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"static_type","","",96,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",96,{"inputs":[{"name":"p"}],"output":{"name":"bufferedoutputstream"}}],[11,"new_sized","","",96,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"bufferedoutputstream"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"cancellable"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"static_type","","",97,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Cancellable` object.",97,{"inputs":[],"output":{"name":"cancellable"}}],[11,"get_current","","Gets the top cancellable from the stack.",97,{"inputs":[],"output":{"generics":["cancellable"],"name":"option"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"datainputstream"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"static_type","","",98,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",98,{"inputs":[{"name":"p"}],"output":{"name":"datainputstream"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"dataoutputstream"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"static_type","","",99,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",99,{"inputs":[{"name":"p"}],"output":{"name":"dataoutputstream"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"static_type","","",100,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_for_commandline_arg","","Creates a `File` with the given argument from the command line. The value of `arg` can be either a URI, an absolute path or a relative path resolved relative to the current working directory. This operation never fails, but the returned object might not support any I/O operation if `arg` points to a malformed path.",100,{"inputs":[{"name":"str"}],"output":{"name":"file"}}],[11,"new_for_commandline_arg_and_cwd","","Creates a `File` with the given argument from the command line.",100,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"file"}}],[11,"new_for_path","","Constructs a `File` for a given path. This operation never fails, but the returned object might not support any I/O operation if `path` is malformed. ## `path` a string containing a relative or absolute path.  The string must be encoded in the glib filename encoding.",100,{"inputs":[{"name":"p"}],"output":{"name":"file"}}],[11,"new_for_uri","","Constructs a `File` for a given URI. This operation never fails, but the returned object might not support any I/O operation if `uri` is malformed or if the uri type is not supported. ## `uri` a UTF-8 string containing a URI",100,{"inputs":[{"name":"str"}],"output":{"name":"file"}}],[11,"new_tmp","","Opens a file in the preferred directory for temporary files (as returned by `g_get_tmp_dir`) and returns a `File` and `FileIOStream` pointing to it.",100,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"parse_name","","Constructs a `File` with the given `parse_name` (i.e. something given by `File::get_parse_name`). This operation never fails, but the returned object might not support any I/O operation if the `parse_name` cannot be parsed. ## `parse_name` a file name or path to be parsed",100,{"inputs":[{"name":"str"}],"output":{"generics":["file"],"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"fileiostream"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"static_type","","",101,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"fileinfo"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"static_type","","",102,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new file info structure.",102,{"inputs":[],"output":{"name":"fileinfo"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"fileinputstream"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"static_type","","",103,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"fileoutputstream"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"static_type","","",104,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"filterinputstream"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"static_type","","",105,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"filteroutputstream"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"static_type","","",106,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"iostream"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"static_type","","",107,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"icon"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"static_type","","",108,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deserialize","","Deserializes a `Icon` previously serialized using `Icon::serialize`.",108,{"inputs":[{"name":"variant"}],"output":{"generics":["icon"],"name":"option"}}],[11,"new_for_string","","Generate a `Icon` instance from `str`. This function can fail if `str` is not valid - see `Icon::to_string` for discussion.",108,{"inputs":[{"name":"str"}],"output":{"generics":["icon","error"],"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"inetaddress"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"static_type","","",109,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_any","","",109,{"inputs":[{"name":"socketfamily"}],"output":{"name":"inetaddress"}}],[11,"new_from_string","","",109,{"inputs":[{"name":"str"}],"output":{"name":"inetaddress"}}],[11,"new_loopback","","",109,{"inputs":[{"name":"socketfamily"}],"output":{"name":"inetaddress"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"inetsocketaddress"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"static_type","","",110,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",110,{"inputs":[{"name":"inetaddress"},{"name":"u16"}],"output":{"name":"inetsocketaddress"}}],[11,"new_from_string","","",110,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"inetsocketaddress"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"inputstream"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"static_type","","",111,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"memoryinputstream"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"static_type","","",112,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",112,{"inputs":[],"output":{"name":"memoryinputstream"}}],[11,"new_from_bytes","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"memoryinputstream"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"memoryoutputstream"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"static_type","","",113,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_resizable","","",113,{"inputs":[],"output":{"name":"memoryoutputstream"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"menu"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"static_type","","",114,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Menu`.",114,{"inputs":[],"output":{"name":"menu"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"menuattributeiter"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"static_type","","",115,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"menuitem"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"static_type","","",116,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MenuItem`.",116,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"menuitem"}}],[11,"new_from_model","","Creates a `MenuItem` as an exact copy of an existing menu item in a `MenuModel`.",116,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"menuitem"}}],[11,"new_section","","Creates a new `MenuItem` representing a section.",116,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"menuitem"}}],[11,"new_submenu","","Creates a new `MenuItem` representing a submenu.",116,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"menuitem"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"menulinkiter"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"static_type","","",117,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"menumodel"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"static_type","","",118,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"mountoperation"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"static_type","","",119,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"mountoperation"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"networkaddress"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"static_type","","",120,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",120,{"inputs":[{"name":"str"},{"name":"u16"}],"output":{"name":"networkaddress"}}],[11,"new_loopback","","",120,{"inputs":[{"name":"u16"}],"output":{"name":"networkaddress"}}],[11,"parse","","",120,{"inputs":[{"name":"str"},{"name":"u16"}],"output":{"generics":["networkaddress","error"],"name":"result"}}],[11,"parse_uri","","",120,{"inputs":[{"name":"str"},{"name":"u16"}],"output":{"generics":["networkaddress","error"],"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"networkservice"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"static_type","","",121,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",121,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"networkservice"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"notification"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"static_type","","",122,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Notification` with `title` as its title.",122,{"inputs":[{"name":"str"}],"output":{"name":"notification"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"outputstream"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"static_type","","",123,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"permission"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"static_type","","",124,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"resolver"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"static_type","","",125,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_default","","",125,{"inputs":[],"output":{"generics":["resolver"],"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"seekable"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"static_type","","",126,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"settings"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"static_type","","",127,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Settings` object with the schema specified by `schema_id`.",127,{"inputs":[{"name":"str"}],"output":{"name":"settings"}}],[11,"new_with_path","","Creates a new `Settings` object with the relocatable schema specified by `schema_id` and a given path.",127,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"settings"}}],[11,"list_relocatable_schemas","","",127,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[11,"list_schemas","","",127,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[11,"sync","","Ensures that all pending operations are complete for the default backend.",127,{"inputs":[],"output":null}],[11,"unbind","","Removes an existing binding for `property` on `object`.",127,{"inputs":[{"name":"p"},{"name":"str"}],"output":null}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"simpleaction"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"static_type","","",128,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new action.",128,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"simpleaction"}}],[11,"new_stateful","","Creates a new stateful action.",128,{"inputs":[{"name":"str"},{"name":"p"},{"name":"variant"}],"output":{"name":"simpleaction"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"simpleactiongroup"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"static_type","","",129,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new, empty, `SimpleActionGroup`.",129,{"inputs":[],"output":{"name":"simpleactiongroup"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"simpleiostream"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"static_type","","",130,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",130,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"simpleiostream"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"simplepermission"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"static_type","","",131,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Permission` instance that represents an action that is either always or never allowed. ## `allowed` `true` if the action is allowed",131,{"inputs":[{"name":"bool"}],"output":{"name":"simplepermission"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"socket"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",20,{"inputs":[{"name":"socketfamily"},{"name":"sockettype"},{"name":"socketprotocol"}],"output":{"generics":["socket","error"],"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"socketaddress"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"static_type","","",132,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"socketaddressenumerator"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"static_type","","",133,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"socketclient"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"static_type","","",134,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",134,{"inputs":[],"output":{"name":"socketclient"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"socketconnectable"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"static_type","","",135,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"socketconnection"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"static_type","","",136,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"factory_lookup_type","","",136,{"inputs":[{"name":"socketfamily"},{"name":"sockettype"},{"name":"i32"}],"output":{"name":"type"}}],[11,"factory_register_type","","",136,{"inputs":[{"name":"type"},{"name":"socketfamily"},{"name":"sockettype"},{"name":"i32"}],"output":null}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"socketlistener"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"static_type","","",137,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",137,{"inputs":[],"output":{"name":"socketlistener"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"socketservice"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"static_type","","",138,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",138,{"inputs":[],"output":{"name":"socketservice"}}],[11,"default","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"tcpconnection"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"static_type","","",139,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"themedicon"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"static_type","","",140,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new themed icon for `iconname`. ## `iconname` a string containing an icon name.",140,{"inputs":[{"name":"str"}],"output":{"name":"themedicon"}}],[11,"new_from_names","","Creates a new themed icon for `iconnames`. ## `iconnames` an array of strings containing icon names. ## `len` the length of the `iconnames` array, or -1 if `iconnames` is  `None`-terminated",140,null],[11,"new_with_default_fallbacks","","Creates a new themed icon for `iconname`, and all the names that can be created by shortening `iconname` at '-' characters.",140,{"inputs":[{"name":"str"}],"output":{"name":"themedicon"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"threadedsocketservice"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",141,null],[11,"static_type","","",141,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",141,{"inputs":[{"name":"i32"}],"output":{"name":"threadedsocketservice"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificate"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",142,null],[11,"static_type","","",142,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_from_file","","Creates a `TlsCertificate` from the PEM-encoded data in `file`. The returned certificate will be the first certificate found in `file`. As of GLib 2.44, if `file` contains more certificates it will try to load a certificate chain. All certificates will be verified in the order found (top-level certificate should be the last one in the file) and the `TlsCertificate:issuer` property of each certificate will be set accordingly if the verification succeeds. If any certificate in the chain cannot be verified, the first certificate in the file will still be returned.",142,{"inputs":[{"name":"p"}],"output":{"generics":["tlscertificate","error"],"name":"result"}}],[11,"new_from_files","","Creates a `TlsCertificate` from the PEM-encoded data in `cert_file` and `key_file`. The returned certificate will be the first certificate found in `cert_file`. As of GLib 2.44, if `cert_file` contains more certificates it will try to load a certificate chain. All certificates will be verified in the order found (top-level certificate should be the last one in the file) and the `TlsCertificate:issuer` property of each certificate will be set accordingly if the verification succeeds. If any certificate in the chain cannot be verified, the first certificate in the file will still be returned.",142,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["tlscertificate","error"],"name":"result"}}],[11,"new_from_pem","","Creates a `TlsCertificate` from the PEM-encoded data in `data`. If `data` includes both a certificate and a private key, then the returned certificate will include the private key data as well. (See the `TlsCertificate:private-key-pem` property for information about supported formats.)",142,{"inputs":[{"name":"str"}],"output":{"generics":["tlscertificate","error"],"name":"result"}}],[11,"list_new_from_file","","Creates one or more `GTlsCertificates` from the PEM-encoded data in `file`. If `file` cannot be read or parsed, the function will return `None` and set `error`. If `file` does not contain any PEM-encoded certificates, this will return an empty list and not set `error`. ## `file` file containing PEM-encoded certificates to import",142,{"inputs":[{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"tlsclientconnection"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"static_type","","",143,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",143,{"inputs":[{"name":"p"},{"name":"r"}],"output":{"generics":["tlsclientconnection","error"],"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"tlsconnection"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"static_type","","",144,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"tlsdatabase"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",145,null],[11,"static_type","","",145,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"tlsfiledatabase"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"static_type","","",146,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",146,{"inputs":[{"name":"p"}],"output":{"generics":["tlsfiledatabase","error"],"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"tlsinteraction"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"static_type","","",147,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"tlspassword"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",148,null],[11,"static_type","","",148,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",148,{"inputs":[{"name":"tlspasswordflags"},{"name":"str"}],"output":{"name":"tlspassword"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"tlsserverconnection"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"static_type","","",149,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",149,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["tlsserverconnection","error"],"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"resource"}}],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"enumerate_children","","Returns all the names of children at the specified `path` in the resource. The return result is a `None` terminated list of strings which should be released with `g_strfreev`.",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_info","","Looks for a file at the specified `path` in the resource and if found returns information about it.",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["error"],"name":"result"}}],[11,"lookup_data","","Looks for a file at the specified `path` in the resource and returns a `glib::Bytes` that lets you directly access the data in memory.",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"open_stream","","Looks for a file at the specified `path` in the resource and returns a `InputStream` that lets you read the data.",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resourcelookupflags"}],"output":{"generics":["inputstream","error"],"name":"result"}}],[11,"load","","Loads a binary resource bundle and creates a `Resource` representation of it, allowing you to query it for data.",19,{"inputs":[{"name":"p"}],"output":{"generics":["resource","error"],"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"settingsschema"}}],[11,"static_type","","",150,{"inputs":[],"output":{"name":"type"}}],[11,"get_id","","Get the ID of `self`.",150,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_key","","Gets the key named `name` from `self`.",150,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["settingsschemakey"],"name":"option"}}],[11,"get_path","","Gets the path associated with `self`, or `None`.",150,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"has_key","","Checks if `self` has a key named `name`.",150,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"list_children","","Gets the list of children in `self`.",150,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"list_keys","","Introspects the list of keys on `self`.",150,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"settingsschemakey"}}],[11,"static_type","","",151,{"inputs":[],"output":{"name":"type"}}],[11,"get_default_value","","Gets the default value for `self`.",151,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[11,"get_description","","Gets the description for `self`.",151,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_name","","Gets the name of `self`.",151,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_range","","Queries the range of a key.",151,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[11,"get_summary","","Gets the summary for `self`.",151,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_value_type","","Gets the `glib::VariantType` of `self`.",151,{"inputs":[{"name":"self"}],"output":{"generics":["varianttype"],"name":"option"}}],[11,"range_check","","Checks if the given `value` is of the correct type and within the permitted range for `self`.",151,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"srvtarget"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",152,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",152,{"inputs":[{"name":"str"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"srvtarget"}}],[11,"get_hostname","","",152,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_port","","",152,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_priority","","",152,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_weight","","",152,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"datastreambyteorder"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"datastreambyteorder"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"datastreambyteorder"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"static_type","","",0,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",0,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",0,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",0,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"datastreamnewlinetype"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"datastreamnewlinetype"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"datastreamnewlinetype"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"static_type","","",1,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",1,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",1,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",1,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"static_type","","",2,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",2,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",2,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",2,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ioerrorenum"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"ioerrorenum"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"ioerrorenum"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"domain","","",3,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",3,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",3,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",3,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",3,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"mountoperationresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"mountoperationresult"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"mountoperationresult"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"static_type","","",4,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",4,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",4,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"notificationpriority"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"notificationpriority"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"notificationpriority"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"passwordsave"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"passwordsave"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"passwordsave"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",6,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",6,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"resolverrecordtype"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"resolverrecordtype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"resolverrecordtype"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",7,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",7,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"resourceerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"resourceerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"resourceerror"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"domain","","",8,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",8,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",8,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",8,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"socketclientevent"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"socketclientevent"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"socketclientevent"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"socketfamily"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"socketfamily"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",10,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",10,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"socketlistenerevent"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"socketlistenerevent"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"socketlistenerevent"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"socketprotocol"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"socketprotocol"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"socketprotocol"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"tlsauthenticationmode"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"tlsauthenticationmode"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"tlsauthenticationmode"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",14,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",14,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",14,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificaterequestflags"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"tlscertificaterequestflags"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"tlscertificaterequestflags"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",15,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",15,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",15,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"tlsdatabaselookupflags"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"tlsdatabaselookupflags"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"tlsdatabaselookupflags"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",16,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",16,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",16,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tlsinteractionresult"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"tlsinteractionresult"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"tlsinteractionresult"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",17,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",17,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",17,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"tlsrehandshakemode"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"tlsrehandshakemode"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"tlsrehandshakemode"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",18,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",18,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",18,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"appinfocreateflags"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"le","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"gt","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"ge","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",153,null],[18,"NEEDS_TERMINAL","","",153,null],[18,"SUPPORTS_URIS","","",153,null],[18,"SUPPORTS_STARTUP_NOTIFICATION","","",153,null],[11,"empty","","Returns an empty set of flags.",153,{"inputs":[],"output":{"name":"appinfocreateflags"}}],[11,"all","","Returns the set containing all flags.",153,{"inputs":[],"output":{"name":"appinfocreateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",153,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",153,{"inputs":[{"name":"u32"}],"output":{"generics":["appinfocreateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",153,{"inputs":[{"name":"u32"}],"output":{"name":"appinfocreateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"appinfocreateflags"}}],[11,"bitor_assign","","Adds the set of flags.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"appinfocreateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"appinfocreateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":{"name":"appinfocreateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",153,{"inputs":[{"name":"self"},{"name":"appinfocreateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",153,{"inputs":[{"name":"self"}],"output":{"name":"appinfocreateflags"}}],[11,"extend","","",153,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",153,{"inputs":[{"name":"t"}],"output":{"name":"appinfocreateflags"}}],[11,"static_type","","",153,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",153,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",153,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",153,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"applicationflags"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"cmp","","",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"ordering"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAGS_NONE","","",154,null],[18,"IS_SERVICE","","",154,null],[18,"IS_LAUNCHER","","",154,null],[18,"HANDLES_OPEN","","",154,null],[18,"HANDLES_COMMAND_LINE","","",154,null],[18,"SEND_ENVIRONMENT","","",154,null],[18,"NON_UNIQUE","","",154,null],[18,"CAN_OVERRIDE_APP_ID","","",154,null],[11,"empty","","Returns an empty set of flags.",154,{"inputs":[],"output":{"name":"applicationflags"}}],[11,"all","","Returns the set containing all flags.",154,{"inputs":[],"output":{"name":"applicationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",154,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",154,{"inputs":[{"name":"u32"}],"output":{"generics":["applicationflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",154,{"inputs":[{"name":"u32"}],"output":{"name":"applicationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",154,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",154,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"applicationflags"}}],[11,"bitor_assign","","Adds the set of flags.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"applicationflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"applicationflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":{"name":"applicationflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",154,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",154,{"inputs":[{"name":"self"}],"output":{"name":"applicationflags"}}],[11,"extend","","",154,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",154,{"inputs":[{"name":"t"}],"output":{"name":"applicationflags"}}],[11,"static_type","","",154,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",154,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",154,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",154,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"askpasswordflags"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"cmp","","",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"ordering"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NEED_PASSWORD","","",155,null],[18,"NEED_USERNAME","","",155,null],[18,"NEED_DOMAIN","","",155,null],[18,"SAVING_SUPPORTED","","",155,null],[18,"ANONYMOUS_SUPPORTED","","",155,null],[11,"empty","","Returns an empty set of flags.",155,{"inputs":[],"output":{"name":"askpasswordflags"}}],[11,"all","","Returns the set containing all flags.",155,{"inputs":[],"output":{"name":"askpasswordflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",155,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",155,{"inputs":[{"name":"u32"}],"output":{"generics":["askpasswordflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",155,{"inputs":[{"name":"u32"}],"output":{"name":"askpasswordflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"askpasswordflags"}}],[11,"bitor_assign","","Adds the set of flags.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"askpasswordflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"askpasswordflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":{"name":"askpasswordflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",155,{"inputs":[{"name":"self"},{"name":"askpasswordflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",155,{"inputs":[{"name":"self"}],"output":{"name":"askpasswordflags"}}],[11,"extend","","",155,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",155,{"inputs":[{"name":"t"}],"output":{"name":"askpasswordflags"}}],[11,"static_type","","",155,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",155,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",155,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",155,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"filecreateflags"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"le","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"gt","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"ge","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",156,null],[18,"PRIVATE","","",156,null],[18,"REPLACE_DESTINATION","","",156,null],[11,"empty","","Returns an empty set of flags.",156,{"inputs":[],"output":{"name":"filecreateflags"}}],[11,"all","","Returns the set containing all flags.",156,{"inputs":[],"output":{"name":"filecreateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",156,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",156,{"inputs":[{"name":"u32"}],"output":{"generics":["filecreateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",156,{"inputs":[{"name":"u32"}],"output":{"name":"filecreateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"filecreateflags"}}],[11,"bitor_assign","","Adds the set of flags.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"filecreateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"filecreateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":{"name":"filecreateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",156,{"inputs":[{"name":"self"},{"name":"filecreateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",156,{"inputs":[{"name":"self"}],"output":{"name":"filecreateflags"}}],[11,"extend","","",156,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",156,{"inputs":[{"name":"t"}],"output":{"name":"filecreateflags"}}],[11,"static_type","","",156,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",156,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",156,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",156,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"filequeryinfoflags"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"cmp","","",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"ordering"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",157,null],[18,"NOFOLLOW_SYMLINKS","","",157,null],[11,"empty","","Returns an empty set of flags.",157,{"inputs":[],"output":{"name":"filequeryinfoflags"}}],[11,"all","","Returns the set containing all flags.",157,{"inputs":[],"output":{"name":"filequeryinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",157,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",157,{"inputs":[{"name":"u32"}],"output":{"generics":["filequeryinfoflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",157,{"inputs":[{"name":"u32"}],"output":{"name":"filequeryinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"filequeryinfoflags"}}],[11,"bitor_assign","","Adds the set of flags.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"filequeryinfoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"filequeryinfoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":{"name":"filequeryinfoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",157,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",157,{"inputs":[{"name":"self"}],"output":{"name":"filequeryinfoflags"}}],[11,"extend","","",157,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",157,{"inputs":[{"name":"t"}],"output":{"name":"filequeryinfoflags"}}],[11,"static_type","","",157,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",157,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",157,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",157,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"iostreamspliceflags"}}],[11,"partial_cmp","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"le","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"gt","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"ge","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",158,null],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",158,null],[18,"CLOSE_STREAM1","","",158,null],[18,"CLOSE_STREAM2","","",158,null],[18,"WAIT_FOR_BOTH","","",158,null],[11,"empty","","Returns an empty set of flags.",158,{"inputs":[],"output":{"name":"iostreamspliceflags"}}],[11,"all","","Returns the set containing all flags.",158,{"inputs":[],"output":{"name":"iostreamspliceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",158,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",158,{"inputs":[{"name":"u32"}],"output":{"generics":["iostreamspliceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",158,{"inputs":[{"name":"u32"}],"output":{"name":"iostreamspliceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"iostreamspliceflags"}}],[11,"bitor_assign","","Adds the set of flags.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"iostreamspliceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"iostreamspliceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":{"name":"iostreamspliceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",158,{"inputs":[{"name":"self"},{"name":"iostreamspliceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",158,{"inputs":[{"name":"self"}],"output":{"name":"iostreamspliceflags"}}],[11,"extend","","",158,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",158,{"inputs":[{"name":"t"}],"output":{"name":"iostreamspliceflags"}}],[11,"static_type","","",158,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",158,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",158,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",158,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"outputstreamspliceflags"}}],[11,"partial_cmp","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"le","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"gt","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"ge","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",159,null],[18,"CLOSE_SOURCE","","",159,null],[18,"CLOSE_TARGET","","",159,null],[11,"empty","","Returns an empty set of flags.",159,{"inputs":[],"output":{"name":"outputstreamspliceflags"}}],[11,"all","","Returns the set containing all flags.",159,{"inputs":[],"output":{"name":"outputstreamspliceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",159,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",159,{"inputs":[{"name":"u32"}],"output":{"generics":["outputstreamspliceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",159,{"inputs":[{"name":"u32"}],"output":{"name":"outputstreamspliceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"outputstreamspliceflags"}}],[11,"bitor_assign","","Adds the set of flags.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"outputstreamspliceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"outputstreamspliceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":{"name":"outputstreamspliceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",159,{"inputs":[{"name":"self"},{"name":"outputstreamspliceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",159,{"inputs":[{"name":"self"}],"output":{"name":"outputstreamspliceflags"}}],[11,"extend","","",159,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"outputstreamspliceflags"}}],[11,"static_type","","",159,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",159,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",159,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",159,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"resourcelookupflags"}}],[11,"partial_cmp","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"le","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"gt","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"ge","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"cmp","","",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"ordering"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",160,null],[11,"empty","","Returns an empty set of flags.",160,{"inputs":[],"output":{"name":"resourcelookupflags"}}],[11,"all","","Returns the set containing all flags.",160,{"inputs":[],"output":{"name":"resourcelookupflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",160,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",160,{"inputs":[{"name":"u32"}],"output":{"generics":["resourcelookupflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",160,{"inputs":[{"name":"u32"}],"output":{"name":"resourcelookupflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"resourcelookupflags"}}],[11,"bitor_assign","","Adds the set of flags.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"resourcelookupflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"resourcelookupflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":{"name":"resourcelookupflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",160,{"inputs":[{"name":"self"},{"name":"resourcelookupflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",160,{"inputs":[{"name":"self"}],"output":{"name":"resourcelookupflags"}}],[11,"extend","","",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"resourcelookupflags"}}],[11,"static_type","","",160,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",160,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",160,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",160,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"settingsbindflags"}}],[11,"partial_cmp","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"le","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"gt","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"ge","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"cmp","","",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"ordering"}}],[11,"hash","","",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",161,null],[18,"GET","","",161,null],[18,"SET","","",161,null],[18,"NO_SENSITIVITY","","",161,null],[18,"GET_NO_CHANGES","","",161,null],[18,"INVERT_BOOLEAN","","",161,null],[11,"empty","","Returns an empty set of flags.",161,{"inputs":[],"output":{"name":"settingsbindflags"}}],[11,"all","","Returns the set containing all flags.",161,{"inputs":[],"output":{"name":"settingsbindflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",161,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",161,{"inputs":[{"name":"u32"}],"output":{"generics":["settingsbindflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",161,{"inputs":[{"name":"u32"}],"output":{"name":"settingsbindflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"settingsbindflags"}}],[11,"bitor_assign","","Adds the set of flags.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"settingsbindflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"settingsbindflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":{"name":"settingsbindflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",161,{"inputs":[{"name":"self"},{"name":"settingsbindflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",161,{"inputs":[{"name":"self"}],"output":{"name":"settingsbindflags"}}],[11,"extend","","",161,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",161,{"inputs":[{"name":"t"}],"output":{"name":"settingsbindflags"}}],[11,"static_type","","",161,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",161,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",161,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",161,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"le","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"gt","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"ge","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"UNKNOWN_CA","","",162,null],[18,"BAD_IDENTITY","","",162,null],[18,"NOT_ACTIVATED","","",162,null],[18,"EXPIRED","","",162,null],[18,"REVOKED","","",162,null],[18,"INSECURE","","",162,null],[18,"GENERIC_ERROR","","",162,null],[18,"VALIDATE_ALL","","",162,null],[11,"empty","","Returns an empty set of flags.",162,{"inputs":[],"output":{"name":"tlscertificateflags"}}],[11,"all","","Returns the set containing all flags.",162,{"inputs":[],"output":{"name":"tlscertificateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",162,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",162,{"inputs":[{"name":"u32"}],"output":{"generics":["tlscertificateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",162,{"inputs":[{"name":"u32"}],"output":{"name":"tlscertificateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"tlscertificateflags"}}],[11,"bitor_assign","","Adds the set of flags.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"tlscertificateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"tlscertificateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":{"name":"tlscertificateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",162,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",162,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[11,"extend","","",162,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",162,{"inputs":[{"name":"t"}],"output":{"name":"tlscertificateflags"}}],[11,"static_type","","",162,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",162,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",162,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",162,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"partial_cmp","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"le","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"gt","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"ge","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",163,null],[11,"empty","","Returns an empty set of flags.",163,{"inputs":[],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"all","","Returns the set containing all flags.",163,{"inputs":[],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",163,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",163,{"inputs":[{"name":"u32"}],"output":{"generics":["tlsdatabaseverifyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",163,{"inputs":[{"name":"u32"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",163,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",163,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"bitor_assign","","Adds the set of flags.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",163,{"inputs":[{"name":"self"},{"name":"tlsdatabaseverifyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",163,{"inputs":[{"name":"self"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"extend","","",163,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",163,{"inputs":[{"name":"t"}],"output":{"name":"tlsdatabaseverifyflags"}}],[11,"static_type","","",163,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",163,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",163,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",163,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"tlspasswordflags"}}],[11,"partial_cmp","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"le","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"gt","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"ge","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"cmp","","",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"ordering"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",164,null],[18,"RETRY","","",164,null],[18,"MANY_TRIES","","",164,null],[18,"FINAL_TRY","","",164,null],[11,"empty","","Returns an empty set of flags.",164,{"inputs":[],"output":{"name":"tlspasswordflags"}}],[11,"all","","Returns the set containing all flags.",164,{"inputs":[],"output":{"name":"tlspasswordflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",164,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",164,{"inputs":[{"name":"u32"}],"output":{"generics":["tlspasswordflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",164,{"inputs":[{"name":"u32"}],"output":{"name":"tlspasswordflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"tlspasswordflags"}}],[11,"bitor_assign","","Adds the set of flags.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"tlspasswordflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"tlspasswordflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":{"name":"tlspasswordflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",164,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",164,{"inputs":[{"name":"self"}],"output":{"name":"tlspasswordflags"}}],[11,"extend","","",164,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",164,{"inputs":[{"name":"t"}],"output":{"name":"tlspasswordflags"}}],[11,"static_type","","",164,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",164,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",164,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",164,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"deref","","",165,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",165,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",166,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",166,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",167,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",167,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",168,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",168,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",169,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",170,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",170,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",171,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",172,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",172,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",173,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",174,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",174,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",175,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",175,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",176,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",176,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",177,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",177,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",178,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",178,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",179,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",179,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",180,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",180,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",181,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",181,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",182,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",182,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",183,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",183,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",184,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",185,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",185,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",186,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",186,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",187,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",187,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",188,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",188,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",189,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",190,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",190,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",191,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",191,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",192,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",192,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",193,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",193,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",194,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",194,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",195,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",195,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",196,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",196,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",197,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",197,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",199,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",200,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",201,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",201,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",202,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",202,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",203,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",203,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",204,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",204,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",205,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",205,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",206,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",206,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",207,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",207,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",208,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",208,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",209,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",209,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",210,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",211,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",212,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",212,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",213,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",213,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",214,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",214,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",215,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",215,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",216,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",216,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",217,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",217,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",218,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",218,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",219,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",219,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",220,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",220,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",221,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",221,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",222,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",222,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",223,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",223,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",224,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",224,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",225,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",225,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",226,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",226,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",227,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",227,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",228,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",228,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",229,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",229,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",230,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",230,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",231,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",232,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",233,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",234,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",234,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",235,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",235,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",236,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",236,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",237,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",237,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",238,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",238,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",239,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",239,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",240,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",240,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",241,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",242,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",242,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",243,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",243,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",244,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",244,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",245,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",245,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",246,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",246,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",247,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",247,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",248,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",248,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",249,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",249,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",250,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",250,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",251,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",251,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",252,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",252,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",253,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",253,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",254,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",254,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",255,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",255,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",256,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",256,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",257,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",257,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",258,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",258,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",259,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",259,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",260,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",260,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",261,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",261,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",262,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",262,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",263,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",263,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",264,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",264,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",265,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",265,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",266,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",266,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",267,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",267,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",268,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",268,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",269,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",269,{"inputs":[{"name":"self"}],"output":null}],[8,"ActionExt","","Trait containing all `Action` methods.",null,null],[10,"activate","","Activates the action.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"change_state","","Request for the state of `self` to be changed to `value`.",22,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"get_enabled","","Checks if `self` is currently enabled.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_name","","Queries the name of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_parameter_type","","Queries the type of the parameter that must be given when activating `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"get_state","","Queries the current state of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_state_hint","","Requests a hint about the valid range of values for the state of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_state_type","","Queries the type of the state of `self`.",22,{"inputs":[{"name":"self"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"connect_property_enabled_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parameter_type_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_type_notify","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ActionGroupExt","","Trait containing all `ActionGroup` methods.",null,null],[10,"action_added","","Emits the `ActionGroup::action-added` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"action_enabled_changed","","Emits the `ActionGroup::action-enabled-changed` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"action_removed","","Emits the `ActionGroup::action-removed` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"action_state_changed","","Emits the `ActionGroup::action-state-changed` signal on `self`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":null}],[10,"activate_action","","Activate the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"change_action_state","","Request for the state of the named action within `self` to be changed to `value`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":null}],[10,"get_action_enabled","","Checks if the named action within `self` is currently enabled.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_action_parameter_type","","Queries the type of the parameter that must be given when activating the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"get_action_state","","Queries the current state of the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_action_state_hint","","Requests a hint about the valid range of values for the state of the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_action_state_type","","Queries the type of the state of the named action within `self`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["varianttype"],"name":"option"}}],[10,"has_action","","Checks if the named action exists within `self`. ## `action_name` the name of the action to check for",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_actions","","Lists the actions contained within `self`.",23,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"connect_action_added","","Signals that a new action was just added to the group. This signal is emitted after the action has been added and is now visible. ## `action_name` the name of the action in `action_group`",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_action_enabled_changed","","Signals that the enabled status of the named action has changed. ## `action_name` the name of the action in `action_group` ## `enabled` whether the action is enabled or not",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_action_removed","","Signals that an action is just about to be removed from the group. This signal is emitted before the action is removed, so the action is still visible and can be queried from the signal handler. ## `action_name` the name of the action in `action_group`",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_action_state_changed","","Signals that the state of the named action has changed. ## `action_name` the name of the action in `action_group` ## `value` the new value of the state",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ActionMapExt","","Trait containing all `ActionMap` methods.",null,null],[10,"add_action","","Adds an action to the `self`.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"lookup_action","","Looks up the action with the name `action_name` in `self`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["action"],"name":"option"}}],[10,"remove_action","","Removes the named action from the action map.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"AppInfoExt","","Trait containing all `AppInfo` methods.",null,null],[10,"add_supports_type","","Adds a content type to the application information to indicate the application is capable of opening files with the given content type. ## `content_type` a string.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"can_delete","","Obtains the information whether the `AppInfo` can be deleted. See `AppInfo::delete`.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_remove_supports_type","","Checks if a supported content type can be removed from an application.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"delete","","Tries to delete a `AppInfo`.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"dup","","Creates a duplicate of a `AppInfo`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["appinfo"],"name":"option"}}],[10,"equal","","Checks if two `GAppInfos` are equal.",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_commandline","","Gets the commandline with which the application will be started.",25,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_description","","Gets a human-readable description of an installed application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_display_name","","Gets the display name of the application. The display name is often more descriptive to the user than the name itself.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_executable","","Gets the executable's name for the installed application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_icon","","Gets the icon for the application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_id","","Gets the ID of an application. An id is a string that identifies the application. The exact format of the id is platform dependent. For instance, on Unix this is the desktop file id from the xdg menu specification.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Gets the installed name of the application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_supported_types","","Retrieves the list of content types that `app_info` claims to support. If this information is not provided by the environment, this function will return `None`. This function does not take in consideration associations added with `AppInfo::add_supports_type`, but only those exported directly by the application.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"launch","","Launches the application. Passes `files` to the launched application as arguments, using the optional `launch_context` to get information about the details of the launcher (like what screen it is on). On error, `error` will be set accordingly.",25,null],[10,"launch_uris","","Launches the application. This passes the `uris` to the launched application as arguments, using the optional `launch_context` to get information about the details of the launcher (like what screen it is on). On error, `error` will be set accordingly.",25,null],[10,"remove_supports_type","","Removes a supported type from an application, if possible. ## `content_type` a string.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_as_default_for_extension","","Sets the application as the default handler for the given file extension. ## `extension` a string containing the file extension  (without the dot).",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_as_default_for_type","","Sets the application as the default handler for a given type. ## `content_type` the content type.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_as_last_used_for_type","","Sets the application as the last used application for a given type. This will make the application appear as first in the list returned by `AppInfo::get_recommended_for_type`, regardless of the default application for that content type. ## `content_type` the content type.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"should_show","","Checks if the application info should be shown in menus that list available applications.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_files","","Checks if the application accepts files as arguments.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_uris","","Checks if the application supports reading files and directories from URIs.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"AppLaunchContextExt","","Trait containing all `AppLaunchContext` methods.",null,null],[10,"get_display","","Gets the display string for the `self`. This is used to ensure new applications are started on the same display as the launching application, by setting the `DISPLAY` environment variable. ## `info` a `AppInfo` ## `files` a `glib::List` of `File` objects",26,null],[10,"get_environment","","Gets the complete environment variable list to be passed to the child process when `self` is used to launch an application. This is a `None`-terminated array of strings, where each string has the form `KEY=VALUE`.",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_startup_notify_id","","Initiates startup notification for the application and returns the `DESKTOP_STARTUP_ID` for the launched operation, if supported.",26,null],[10,"launch_failed","","Called when an application has failed to launch, so that it can cancel the application startup notification started in `AppLaunchContextExt::get_startup_notify_id`. ## `startup_notify_id` the startup notification id that was returned by `AppLaunchContextExt::get_startup_notify_id`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"setenv","","Arranges for `variable` to be set to `value` in the child's environment when `self` is used to launch an application. ## `variable` the environment variable to set ## `value` the value for to set the variable to.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"unsetenv","","Arranges for `variable` to be unset in the child's environment when `self` is used to launch an application. ## `variable` the environment variable to remove",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_launch_failed","","The ::launch-failed signal is emitted when a `AppInfo` launch fails. The startup notification id is provided, so that the launcher can cancel the startup notification.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_launched","","The ::launched signal is emitted when a `AppInfo` is successfully launched. The `platform_data` is an GVariant dictionary mapping strings to variants (ie a{sv}), which contains additional, platform-specific data about this launch. On UNIX, at least the \"pid\" and \"startup-notification-id\" keys will be present.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ApplicationExt","","Trait containing all `Application` methods.",null,null],[10,"activate","","Activates the application.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"bind_busy_property","","Marks `self` as busy (see `ApplicationExt::mark_busy`) while `property` on `object` is `true`.",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"get_application_id","","Gets the unique identifier for `self`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_dbus_object_path","","Gets the D-Bus object path being used by the application, or `None`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_flags","","Gets the flags for `self`.",27,{"inputs":[{"name":"self"}],"output":{"name":"applicationflags"}}],[10,"get_inactivity_timeout","","Gets the current inactivity timeout for the application.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_is_busy","","Gets the application's current busy state, as set through `ApplicationExt::mark_busy` or `ApplicationExt::bind_busy_property`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_registered","","Checks if `self` is registered.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_remote","","Checks if `self` is remote.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_resource_base_path","","Gets the resource base path of `self`.",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"hold","","Increases the use count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"mark_busy","","Increases the busy count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"open","","Opens the given files.",27,null],[10,"quit","","Immediately quits the application.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"register","","Attempts registration of the application.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"release","","Decrease the use count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"send_notification","","Sends a notification on behalf of `self` to the desktop shell. There is no guarantee that the notification is displayed immediately, or even at all.",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"notification"}],"output":null}],[10,"set_action_group","","This used to be how actions were associated with a `Application`. Now there is `ActionMap` for that.",27,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_application_id","","Sets the unique identifier for `self`.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_default","","Sets or unsets the default application for the process, as returned by `Application::get_default`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"set_flags","","Sets the flags for `self`.",27,{"inputs":[{"name":"self"},{"name":"applicationflags"}],"output":null}],[10,"set_inactivity_timeout","","Sets the current inactivity timeout for the application.",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_resource_base_path","","Sets (or unsets) the base resource path of `self`.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unbind_busy_property","","Destroys a binding between `property` and the busy state of `self` that was previously created with `ApplicationExt::bind_busy_property`.",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"unmark_busy","","Decreases the busy count of `self`.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"withdraw_notification","","Withdraws a notification that was sent with `ApplicationExt::send_notification`.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_resource_base_path","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_resource_base_path","","",27,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_activate","","The ::activate signal is emitted on the primary instance when an activation occurs. See `ApplicationExt::activate`.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_shutdown","","The ::shutdown signal is emitted only on the registered primary instance immediately after the main loop terminates.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_startup","","The ::startup signal is emitted on the primary instance immediately after registration. See `ApplicationExt::register`.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_action_group_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_application_id_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flags_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inactivity_timeout_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_busy_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_registered_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_remote_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resource_base_path_notify","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BufferedInputStreamExt","","",null,null],[10,"fill","","",28,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"p"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"fill_async","","",28,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_available","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_buffer_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"peek_buffer","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[10,"read_byte","","",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"set_buffer_size","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"connect_property_buffer_size_notify","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BufferedOutputStreamExt","","",null,null],[10,"get_auto_grow","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_buffer_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"set_auto_grow","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_buffer_size","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"connect_property_auto_grow_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_size_notify","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CancellableExt","","Trait containing all `Cancellable` methods.",null,null],[10,"cancel","","Will set `self` to cancelled, and will emit the `Cancellable::cancelled` signal. (However, see the warning about race conditions in the documentation for that signal if you are planning to connect to it.)",30,{"inputs":[{"name":"self"}],"output":null}],[10,"disconnect","","Disconnects a handler from a cancellable instance similar to `g_signal_handler_disconnect`. Additionally, in the event that a signal handler is currently running, this call will block until the handler has finished. Calling this function from a `Cancellable::cancelled` signal handler will therefore result in a deadlock.",30,{"inputs":[{"name":"self"},{"name":"c_ulong"}],"output":null}],[10,"get_fd","","Gets the file descriptor for a cancellable job. This can be used to implement cancellable operations on Unix systems. The returned fd will turn readable when `self` is cancelled.",30,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"is_cancelled","","Checks if a cancellable job has been cancelled.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pop_current","","Pops `self` off the cancellable stack (verifying that `self` is on the top of the stack).",30,{"inputs":[{"name":"self"}],"output":null}],[10,"push_current","","Pushes `self` onto the cancellable stack. The current cancellable can then be received using `Cancellable::get_current`.",30,{"inputs":[{"name":"self"}],"output":null}],[10,"release_fd","","Releases a resources previously allocated by `CancellableExt::get_fd` or `CancellableExt::make_pollfd`.",30,{"inputs":[{"name":"self"}],"output":null}],[10,"reset","","Resets `self` to its uncancelled state.",30,{"inputs":[{"name":"self"}],"output":null}],[10,"set_error_if_cancelled","","If the `self` is cancelled, sets the error to notify that the operation was cancelled.",30,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"source_new","","Creates a source that triggers if `self` is cancelled and calls its callback of type `GCancellableSourceFunc`. This is primarily useful for attaching to another (non-cancellable) source with `glib::Source::add_child_source` to add cancellability to it.",30,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"option"}}],[10,"connect_cancelled","","Emitted when the operation has been cancelled.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DataInputStreamExt","","",null,null],[10,"get_byte_order","","",31,{"inputs":[{"name":"self"}],"output":{"name":"datastreambyteorder"}}],[10,"get_newline_type","","",31,{"inputs":[{"name":"self"}],"output":{"name":"datastreamnewlinetype"}}],[10,"read_byte","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u8","error"],"name":"result"}}],[10,"read_int16","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i16","error"],"name":"result"}}],[10,"read_int32","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"read_int64","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i64","error"],"name":"result"}}],[10,"read_line_utf8","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_uint16","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u16","error"],"name":"result"}}],[10,"read_uint32","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u32","error"],"name":"result"}}],[10,"read_uint64","","",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["u64","error"],"name":"result"}}],[10,"read_until","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_until_async","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"read_upto","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"read_upto_async","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_byte_order","","",31,{"inputs":[{"name":"self"},{"name":"datastreambyteorder"}],"output":null}],[10,"set_newline_type","","",31,{"inputs":[{"name":"self"},{"name":"datastreamnewlinetype"}],"output":null}],[10,"connect_property_byte_order_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_newline_type_notify","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DataOutputStreamExt","","",null,null],[10,"get_byte_order","","",32,{"inputs":[{"name":"self"}],"output":{"name":"datastreambyteorder"}}],[10,"put_byte","","",32,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_int16","","",32,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_int32","","",32,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_int64","","",32,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_string","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_uint16","","",32,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_uint32","","",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"put_uint64","","",32,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_byte_order","","",32,{"inputs":[{"name":"self"},{"name":"datastreambyteorder"}],"output":null}],[10,"connect_property_byte_order_notify","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileExt","","Trait containing all `File` methods.",null,null],[10,"append_to","","Gets an output stream for appending data to the file. If the file doesn't already exist it is created.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"p"}],"output":{"generics":["fileoutputstream","error"],"name":"result"}}],[10,"append_to_async","","Asynchronously opens `self` for appending.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"create","","Creates a new file and returns an output stream for writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"p"}],"output":{"generics":["fileoutputstream","error"],"name":"result"}}],[10,"create_async","","Asynchronously creates a new file and returns an output stream for writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"create_readwrite","","Creates a new file and returns a stream for reading and writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"p"}],"output":{"generics":["fileiostream","error"],"name":"result"}}],[10,"create_readwrite_async","","Asynchronously creates a new file and returns a stream for reading and writing to it. The file must not already exist.",33,{"inputs":[{"name":"self"},{"name":"filecreateflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"delete","","Deletes a file. If the `self` is a directory, it will only be deleted if it is empty. This has the same semantics as `g_unlink`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"delete_async","","Asynchronously delete a file. If the `self` is a directory, it will only be deleted if it is empty. This has the same semantics as `g_unlink`.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"dup","","Duplicates a `File` handle. This operation does not duplicate the actual file or directory represented by the `File`; see `File::copy` if attempting to copy a file.",33,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"equal","","Checks if the two given `GFiles` refer to the same file.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_basename","","Gets the base name (the last component of the path) for a given `File`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_child","","Gets a child of `self` with basename equal to `name`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_child_for_display_name","","Gets the child of `self` for a given `display_name` (i.e. a UTF-8 version of the name). If this function fails, it returns `None` and `error` will be set. This is very useful when constructing a `File` for a new file and the user entered the filename in the user interface, for instance when you select a directory and type a filename in the file selector.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["file","error"],"name":"result"}}],[10,"get_parent","","Gets the parent directory for the `self`. If the `self` represents the root directory of the file system, then `None` will be returned.",33,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_parse_name","","Gets the parse name of the `self`. A parse name is a UTF-8 string that describes the file such that one can get the `File` back using `File::parse_name`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_path","","Gets the local pathname for `File`, if one exists. If non-`None`, this is guaranteed to be an absolute, canonical path. It might contain symlinks.",33,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_relative_path","","Gets the path for `descendant` relative to `self`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_uri","","Gets the URI for the `self`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_uri_scheme","","Gets the URI scheme for a `File`. RFC 3986 decodes the scheme as:",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"has_parent","","Checks if `self` has a parent, and optionally, if it is `parent`.",33,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[10,"has_prefix","","Checks whether `self` has the prefix specified by `prefix`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"has_uri_scheme","","Checks to see if a `File` has a given URI scheme.",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"is_native","","Checks to see if a file is native to the platform.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"load_contents","","Loads the content of the file into memory. The data is always zero-terminated, but this is not included in the resultant `length`. The returned `content` should be freed with `g_free` when no longer needed.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_contents_async","","Starts an asynchronous load of the `self`'s contents.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"make_directory","","Creates a directory. Note that this will only create a child directory of the immediate parent directory of the path or URI given by the `File`. To recursively create directories, see `File::make_directory_with_parents`. This function will fail if the parent directory does not exist, setting `error` to `IOErrorEnum::NotFound`. If the file system doesn't support creating directories, this function will fail, setting `error` to `IOErrorEnum::NotSupported`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"make_directory_async","","Asynchronously creates a directory.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"make_directory_with_parents","","Creates a directory and any parent directories that may not exist similar to 'mkdir -p'. If the file system does not support creating directories, this function will fail, setting `error` to `IOErrorEnum::NotSupported`. If the directory itself already exists, this function will fail setting `error` to `IOErrorEnum::Exists`, unlike the similar `g_mkdir_with_parents`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"make_symbolic_link","","Creates a symbolic link named `self` which contains the string `symlink_value`.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"open_readwrite","","Opens an existing file for reading and writing. The result is a `FileIOStream` that can be used to read and write the contents of the file.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["fileiostream","error"],"name":"result"}}],[10,"open_readwrite_async","","Asynchronously opens `self` for reading and writing.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"query_default_handler","","Returns the `AppInfo` that is registered as the default application to handle the file specified by `self`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["appinfo","error"],"name":"result"}}],[10,"query_exists","","Utility function to check if a particular file exists. This is implemented using `File::query_info` and as such does blocking I/O.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"query_file_type","","Utility function to inspect the `FileType` of a file. This is implemented using `File::query_info` and as such does blocking I/O.",33,{"inputs":[{"name":"self"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"name":"filetype"}}],[10,"query_filesystem_info","","Similar to `File::query_info`, but obtains information about the filesystem the `self` is on, rather than the file itself. For instance the amount of space available and the type of the filesystem.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_filesystem_info_async","","Asynchronously gets the requested information about the filesystem that the specified `self` is on. The result is a `FileInfo` object that contains key-value attributes (such as type or size for the file).",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"query_info","","Gets the requested information about specified `self`. The result is a `FileInfo` object that contains key-value attributes (such as the type or size of the file).",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","Asynchronously gets the requested information about specified `self`. The result is a `FileInfo` object that contains key-value attributes (such as type or size for the file).",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"read","","Opens a file for reading. The result is a `FileInputStream` that can be used to read the contents of the file.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["fileinputstream","error"],"name":"result"}}],[10,"read_async","","Asynchronously opens `self` for reading.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"replace","","Returns an output stream for overwriting the file, possibly creating a backup copy of the file first. If the file doesn't exist, it will be created.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"q"}],"output":{"generics":["fileoutputstream","error"],"name":"result"}}],[10,"replace_async","","Asynchronously overwrites the file, replacing the contents, possibly creating a backup copy of the file first.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"priority"},{"name":"q"},{"name":"r"}],"output":null}],[10,"replace_contents","","Replaces the contents of `self` with `contents` of `length` bytes.",33,null],[10,"replace_contents_async","","Starts an asynchronous replacement of `self` with the given `contents` of `length` bytes. `etag` will replace the document's current entity tag.",33,null],[10,"replace_readwrite","","Returns an output stream for overwriting the file in readwrite mode, possibly creating a backup copy of the file first. If the file doesn't exist, it will be created.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"q"}],"output":{"generics":["fileiostream","error"],"name":"result"}}],[10,"replace_readwrite_async","","Asynchronously overwrites the file in read-write mode, replacing the contents, possibly creating a backup copy of the file first.",33,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"filecreateflags"},{"name":"priority"},{"name":"q"},{"name":"r"}],"output":null}],[10,"resolve_relative_path","","Resolves a relative path for `self` to an absolute path.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file"],"name":"option"}}],[10,"set_attribute_byte_string","","Sets `attribute` of type `FileAttributeType::ByteString` to `value`. If `attribute` is of a different type, this operation will fail, returning `false`.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_int32","","Sets `attribute` of type `FileAttributeType::Int32` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_int64","","Sets `attribute` of type `FileAttributeType::Int64` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_string","","Sets `attribute` of type `FileAttributeType::String` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_uint32","","Sets `attribute` of type `FileAttributeType::Uint32` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attribute_uint64","","Sets `attribute` of type `FileAttributeType::Uint64` to `value`. If `attribute` is of a different type, this operation will fail.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_attributes_async","","Asynchronously sets the attributes of `self` with `info`.",33,{"inputs":[{"name":"self"},{"name":"fileinfo"},{"name":"filequeryinfoflags"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_attributes_from_info","","Tries to set all attributes in the `FileInfo` on the target values, not stopping on the first error.",33,{"inputs":[{"name":"self"},{"name":"fileinfo"},{"name":"filequeryinfoflags"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_display_name","","Renames `self` to the specified display name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["file","error"],"name":"result"}}],[10,"set_display_name_async","","Asynchronously sets the display name for a given `File`.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"supports_thread_contexts","","Checks if `self` supports [thread-default contexts][g-main-context-push-thread-default-context]. If this returns `false`, you cannot perform asynchronous operations on `self` in a thread that has a thread-default context.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"trash","","Sends `self` to the \"Trashcan\", if possible. This is similar to deleting it, but the user can recover it before emptying the trashcan. Not all file systems support trashing, so this call can return the `IOErrorEnum::NotSupported` error.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"trash_async","","Asynchronously sends `self` to the Trash location, if possible.",33,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FileIOStreamExt","","",null,null],[10,"get_etag","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"query_info","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FileInfoExt","","Trait containing all `FileInfo` methods.",null,null],[10,"clear_status","","Clears the status information from `self`.",35,{"inputs":[{"name":"self"}],"output":null}],[10,"copy_into","","First clears all of the [GFileAttribute][gio-GFileAttribute] of `dest_info`, and then copies all of the file attributes from `self` to `dest_info`. ## `dest_info` destination to copy attributes to.",35,{"inputs":[{"name":"self"},{"name":"fileinfo"}],"output":null}],[10,"dup","","Duplicates a file info structure.",35,{"inputs":[{"name":"self"}],"output":{"generics":["fileinfo"],"name":"option"}}],[10,"get_attribute_as_string","","Gets the value of a attribute, formated as a string. This escapes things as needed to make the string valid utf8. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_attribute_boolean","","Gets the value of a boolean attribute. If the attribute does not contain a boolean value, `false` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_attribute_byte_string","","Gets the value of a byte string attribute. If the attribute does not contain a byte string, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_attribute_int32","","Gets a signed 32-bit integer contained within the attribute. If the attribute does not contain a signed 32-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_attribute_int64","","Gets a signed 64-bit integer contained within the attribute. If the attribute does not contain an signed 64-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i64"}}],[10,"get_attribute_object","","Gets the value of a `gobject::Object` attribute. If the attribute does not contain a `gobject::Object`, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_attribute_string","","Gets the value of a string attribute. If the attribute does not contain a string, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_attribute_stringv","","Gets the value of a stringv attribute. If the attribute does not contain a stringv, `None` will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_attribute_uint32","","Gets an unsigned 32-bit integer contained within the attribute. If the attribute does not contain an unsigned 32-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_attribute_uint64","","Gets a unsigned 64-bit integer contained within the attribute. If the attribute does not contain an unsigned 64-bit integer, or is invalid, 0 will be returned. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u64"}}],[10,"get_content_type","","Gets the file's content type.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_display_name","","Gets a display name for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_edit_name","","Gets the edit name for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_etag","","Gets the [entity tag][gfile-etag] for a given `FileInfo`. See `G_FILE_ATTRIBUTE_ETAG_VALUE`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_file_type","","Gets a file's type (whether it is a regular file, symlink, etc). This is different from the file's content type, see `FileInfoExt::get_content_type`.",35,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[10,"get_icon","","Gets the icon for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_is_backup","","Checks if a file is a backup file.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_hidden","","Checks if a file is hidden.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_symlink","","Checks if a file is a symlink.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_name","","Gets the name for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_size","","Gets the file's size.",35,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_sort_order","","Gets the value of the sort_order attribute from the `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER`.",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_symbolic_icon","","Gets the symbolic icon for a file.",35,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_symlink_target","","Gets the symlink target for a given `FileInfo`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"has_attribute","","Checks if a file info structure has an attribute named `attribute`. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"has_namespace","","Checks if a file info structure has an attribute in the specified `name_space`. ## `name_space` a file attribute namespace.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_attributes","","Lists the file info structure's attributes. ## `name_space` a file attribute key's namespace, or `None` to list  all attributes.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"vec"}}],[10,"remove_attribute","","Removes all cases of `attribute` from `self` if it exists. ## `attribute` a file attribute key.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_attribute_boolean","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a boolean value.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"set_attribute_byte_string","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a byte string.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_attribute_int32","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a signed 32-bit integer",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_attribute_int64","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` attribute name to set. ## `attr_value` int64 value to set attribute to.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":null}],[10,"set_attribute_object","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a `gobject::Object`.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_attribute_string","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` a UTF-8 string.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_attribute_stringv","","Sets the `attribute` to contain the given `attr_value`, if possible.",35,null],[10,"set_attribute_uint32","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` an unsigned 32-bit integer.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":null}],[10,"set_attribute_uint64","","Sets the `attribute` to contain the given `attr_value`, if possible. ## `attribute` a file attribute key. ## `attr_value` an unsigned 64-bit integer.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":null}],[10,"set_content_type","","Sets the content type attribute for a given `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE`. ## `content_type` a content type. See [GContentType][gio-GContentType]",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_display_name","","Sets the display name for the current `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME`. ## `display_name` a string containing a display name.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_edit_name","","Sets the edit name for the current file. See `G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME`. ## `edit_name` a string containing an edit name.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_file_type","","Sets the file type in a `FileInfo` to `type_`. See `G_FILE_ATTRIBUTE_STANDARD_TYPE`. ## `type_` a `FileType`.",35,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":null}],[10,"set_icon","","Sets the icon for a given `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_ICON`. ## `icon` a `Icon`.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_is_hidden","","Sets the \"is_hidden\" attribute in a `FileInfo` according to `is_hidden`. See `G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN`. ## `is_hidden` a `gboolean`.",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_is_symlink","","Sets the \"is_symlink\" attribute in a `FileInfo` according to `is_symlink`. See `G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK`. ## `is_symlink` a `gboolean`.",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_name","","Sets the name attribute for the current `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_NAME`. ## `name` a string containing a name.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_size","","Sets the `G_FILE_ATTRIBUTE_STANDARD_SIZE` attribute in the file info to the given size. ## `size` a `goffset` containing the file's size.",35,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[10,"set_sort_order","","Sets the sort order attribute in the file info structure. See `G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER`. ## `sort_order` a sort order integer.",35,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_symbolic_icon","","Sets the symbolic icon for a given `FileInfo`. See `G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON`.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_symlink_target","","Sets the `G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET` attribute in the file info to the given symlink target. ## `symlink_target` a static string containing a path to a symlink target.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"unset_attribute_mask","","Unsets a mask set by `FileInfoExt::set_attribute_mask`, if one is set.",35,{"inputs":[{"name":"self"}],"output":null}],[8,"FileInputStreamExt","","",null,null],[10,"query_info","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FileOutputStreamExt","","",null,null],[10,"get_etag","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"query_info","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["fileinfo","error"],"name":"result"}}],[10,"query_info_async","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"FilterInputStreamExt","","",null,null],[10,"get_base_stream","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["inputstream"],"name":"option"}}],[10,"get_close_base_stream","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_close_base_stream","","",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_close_base_stream_notify","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FilterOutputStreamExt","","",null,null],[10,"get_base_stream","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["outputstream"],"name":"option"}}],[10,"get_close_base_stream","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_close_base_stream","","",39,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_close_base_stream_notify","","",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IOStreamExt","","",null,null],[10,"clear_pending","","",40,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_async","","",40,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_input_stream","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["inputstream"],"name":"option"}}],[10,"get_output_stream","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["outputstream"],"name":"option"}}],[10,"has_pending","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_pending","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_property_closed","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_closed_notify","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IconExt","","Trait containing all `Icon` methods.",null,null],[10,"equal","","Checks if two icons are equal. ## `icon2` pointer to the second `Icon`.",41,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[10,"serialize","","Serializes a `Icon` into a `glib::Variant`. An equivalent `Icon` can be retrieved back by calling `Icon::deserialize` on the returned value. As serialization will avoid using raw icon data when possible, it only makes sense to transfer the `glib::Variant` between processes on the same machine, (as opposed to over the network), and within the same file system namespace.",41,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"to_string","","Generates a textual representation of `self` that can be used for serialization such as when passing `self` to a different process or saving it to persistent storage. Use `Icon::new_for_string` to get `self` back from the returned string.",41,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"InetAddressExt","","",null,null],[10,"get_family","","",42,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_is_any","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_link_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_loopback","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_global","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_link_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_node_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_org_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_mc_site_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_multicast","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_is_site_local","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_native_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"connect_property_bytes_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_any_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_link_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_loopback_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_global_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_link_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_node_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_org_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_mc_site_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_multicast_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_site_local_notify","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InetSocketAddressExt","","",null,null],[10,"get_address","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["inetaddress"],"name":"option"}}],[10,"get_flowinfo","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_port","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[10,"get_scope_id","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_property_address_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flowinfo_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_port_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scope_id_notify","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InputStreamExt","","",null,null],[10,"clear_pending","","",44,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","",44,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_async","","",44,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"has_pending","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"read_bytes","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"generics":["bytes","error"],"name":"result"}}],[10,"read_bytes_async","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_pending","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"skip","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"skip_async","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"MemoryInputStreamExt","","",null,null],[10,"add_bytes","","",45,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[8,"MemoryOutputStreamExt","","",null,null],[10,"get_data_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"steal_as_bytes","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"connect_property_data_size_notify","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuExt","","Trait containing all `Menu` methods.",null,null],[10,"append","","Convenience function for appending a normal menu item to the end of `self`. Combine `MenuItem::new` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `detailed_action` the detailed action string, or `None`",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"append_item","","Appends `item` to the end of `self`.",47,{"inputs":[{"name":"self"},{"name":"menuitem"}],"output":null}],[10,"append_section","","Convenience function for appending a section menu item to the end of `self`. Combine `MenuItem::new_section` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `section` a `MenuModel` with the items of the section",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"append_submenu","","Convenience function for appending a submenu menu item to the end of `self`. Combine `MenuItem::new_submenu` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `submenu` a `MenuModel` with the items of the submenu",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"freeze","","Marks `self` as frozen.",47,{"inputs":[{"name":"self"}],"output":null}],[10,"insert","","Convenience function for inserting a normal menu item into `self`. Combine `MenuItem::new` and `MenuExt::insert_item` for a more flexible alternative. ## `position` the position at which to insert the item ## `label` the section label, or `None` ## `detailed_action` the detailed action string, or `None`",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"q"}],"output":null}],[10,"insert_item","","Inserts `item` into `self`.",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"menuitem"}],"output":null}],[10,"insert_section","","Convenience function for inserting a section menu item into `self`. Combine `MenuItem::new_section` and `MenuExt::insert_item` for a more flexible alternative. ## `position` the position at which to insert the item ## `label` the section label, or `None` ## `section` a `MenuModel` with the items of the section",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"q"}],"output":null}],[10,"insert_submenu","","Convenience function for inserting a submenu menu item into `self`. Combine `MenuItem::new_submenu` and `MenuExt::insert_item` for a more flexible alternative. ## `position` the position at which to insert the item ## `label` the section label, or `None` ## `submenu` a `MenuModel` with the items of the submenu",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"q"}],"output":null}],[10,"prepend","","Convenience function for prepending a normal menu item to the start of `self`. Combine `MenuItem::new` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `detailed_action` the detailed action string, or `None`",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"prepend_item","","Prepends `item` to the start of `self`.",47,{"inputs":[{"name":"self"},{"name":"menuitem"}],"output":null}],[10,"prepend_section","","Convenience function for prepending a section menu item to the start of `self`. Combine `MenuItem::new_section` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `section` a `MenuModel` with the items of the section",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"prepend_submenu","","Convenience function for prepending a submenu menu item to the start of `self`. Combine `MenuItem::new_submenu` and `MenuExt::insert_item` for a more flexible alternative. ## `label` the section label, or `None` ## `submenu` a `MenuModel` with the items of the submenu",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"remove","","Removes an item from the menu.",47,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_all","","Removes all items in the menu.",47,{"inputs":[{"name":"self"}],"output":null}],[8,"MenuAttributeIterExt","","Trait containing all `MenuAttributeIter` methods.",null,null],[10,"get_name","","Gets the name of the attribute at the current iterator position, as a string.",48,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_next","","This function combines `MenuAttributeIterExt::next` with `MenuAttributeIterExt::get_name` and `MenuAttributeIterExt::get_value`.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_value","","Gets the value of the attribute at the current iterator position.",48,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"next","","Attempts to advance the iterator to the next (possibly first) attribute.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MenuItemExt","","Trait containing all `MenuItem` methods.",null,null],[10,"get_attribute_value","","Queries the named `attribute` on `self`.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_link","","Queries the named `link` on `self`.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"set_action_and_target_value","","Sets or unsets the \"action\" and \"target\" attributes of `self`.",49,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_attribute_value","","Sets or unsets an attribute on `self`.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_detailed_action","","Sets the \"action\" and possibly the \"target\" attribute of `self`.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_icon","","Sets (or unsets) the icon on `self`.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label","","Sets or unsets the \"label\" attribute of `self`.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_link","","Creates a link from `self` to `model` if non-`None`, or unsets it.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"q"}],"output":null}],[10,"set_section","","Sets or unsets the \"section\" link of `self` to `section`.",49,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_submenu","","Sets or unsets the \"submenu\" link of `self` to `submenu`.",49,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[8,"MenuLinkIterExt","","Trait containing all `MenuLinkIter` methods.",null,null],[10,"get_name","","Gets the name of the link at the current iterator position.",50,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_next","","This function combines `MenuLinkIterExt::next` with `MenuLinkIterExt::get_name` and `MenuLinkIterExt::get_value`.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_value","","Gets the linked `MenuModel` at the current iterator position.",50,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"next","","Attempts to advance the iterator to the next (possibly first) link.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MenuModelExt","","Trait containing all `MenuModel` methods.",null,null],[10,"get_item_attribute_value","","Queries the item at position `item_index` in `self` for the attribute specified by `attribute`.",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"},{"name":"p"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_item_link","","Queries the item at position `item_index` in `self` for the link specified by `link`.",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_n_items","","Query the number of items in `self`.",51,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"is_mutable","","Queries if `self` is mutable.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"items_changed","","Requests emission of the `MenuModel::items-changed` signal on `self`.",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"iterate_item_attributes","","Creates a `MenuAttributeIter` to iterate over the attributes of the item at position `item_index` in `self`.",51,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["menuattributeiter"],"name":"option"}}],[10,"iterate_item_links","","Creates a `MenuLinkIter` to iterate over the links of the item at position `item_index` in `self`.",51,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["menulinkiter"],"name":"option"}}],[10,"connect_items_changed","","Emitted when a change has occured to the menu.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MountOperationExt","","",null,null],[10,"get_anonymous","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_choice","","",52,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_domain","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_password","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_password_save","","",52,{"inputs":[{"name":"self"}],"output":{"name":"passwordsave"}}],[10,"get_username","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"reply","","",52,{"inputs":[{"name":"self"},{"name":"mountoperationresult"}],"output":null}],[10,"set_anonymous","","",52,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_choice","","",52,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_domain","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_password","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_password_save","","",52,{"inputs":[{"name":"self"},{"name":"passwordsave"}],"output":null}],[10,"set_username","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_aborted","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_ask_password","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_reply","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_unmount_progress","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_anonymous_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_choice_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_domain_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_password_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_password_save_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_username_notify","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NetworkAddressExt","","",null,null],[10,"get_hostname","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_port","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[10,"get_scheme","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_hostname_notify","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_port_notify","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scheme_notify","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NetworkServiceExt","","",null,null],[10,"get_domain","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_protocol","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_scheme","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_service","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_scheme","","",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_property_domain_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_protocol_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scheme_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_service_notify","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NotificationExt","","Trait containing all `Notification` methods.",null,null],[10,"add_button","","Adds a button to `self` that activates the action in `detailed_action` when clicked. That action must be an application-wide action (starting with \"app.\"). If `detailed_action` contains a target, the action will be activated with that target as its parameter.",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"add_button_with_target_value","","Adds a button to `self` that activates `action` when clicked. `action` must be an application-wide action (it must start with \"app.\").",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_body","","Sets the body of `self` to `body`.",55,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_default_action","","Sets the default action of `self` to `detailed_action`. This action is activated when the notification is clicked on.",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_default_action_and_target_value","","Sets the default action of `self` to `action`. This action is activated when the notification is clicked on. It must be an application-wide action (start with \"app.\").",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_icon","","Sets the icon of `self` to `icon`.",55,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_priority","","Sets the priority of `self` to `priority`. See `NotificationPriority` for possible values.",55,{"inputs":[{"name":"self"},{"name":"notificationpriority"}],"output":null}],[10,"set_title","","Sets the title of `self` to `title`.",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_urgent","","Deprecated in favor of `NotificationExt::set_priority`.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"OutputStreamExt","","",null,null],[10,"clear_pending","","",56,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","",56,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_async","","",56,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"flush","","",56,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"flush_async","","",56,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"has_pending","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closing","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_pending","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"splice","","",56,{"inputs":[{"name":"self"},{"name":"p"},{"name":"outputstreamspliceflags"},{"name":"q"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"splice_async","","",56,{"inputs":[{"name":"self"},{"name":"p"},{"name":"outputstreamspliceflags"},{"name":"priority"},{"name":"q"},{"name":"r"}],"output":null}],[10,"write","","",56,null],[10,"write_all","","",56,null],[10,"write_bytes","","",56,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"p"}],"output":{"generics":["isize","error"],"name":"result"}}],[10,"write_bytes_async","","",56,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[8,"PermissionExt","","Trait containing all `Permission` methods.",null,null],[10,"acquire","","Attempts to acquire the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"acquire_async","","Attempts to acquire the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_allowed","","Gets the value of the 'allowed' property. This property is `true` if the caller currently has permission to perform the action that `self` represents the permission to perform.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_acquire","","Gets the value of the 'can-acquire' property. This property is `true` if it is generally possible to acquire the permission by calling `PermissionExt::acquire`.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_release","","Gets the value of the 'can-release' property. This property is `true` if it is generally possible to release the permission by calling `PermissionExt::release`.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"impl_update","","This function is called by the `Permission` implementation to update the properties of the permission. You should never call this function except from a `Permission` implementation.",57,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"release","","Attempts to release the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"release_async","","Attempts to release the permission represented by `self`.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"connect_property_allowed_notify","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_acquire_notify","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_release_notify","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ResolverExt","","",null,null],[10,"lookup_by_address","","",58,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"p"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"lookup_by_address_async","","",58,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"p"},{"name":"q"}],"output":null}],[10,"lookup_by_name","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"lookup_by_name_async","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":null}],[10,"lookup_records","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resolverrecordtype"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"lookup_records_async","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"resolverrecordtype"},{"name":"p"},{"name":"q"}],"output":null}],[10,"lookup_service","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"lookup_service_async","","",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_default","","",58,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_reload","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SeekableExt","","",null,null],[10,"can_seek","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"can_truncate","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"seek","","",59,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"seektype"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"tell","","",59,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"truncate","","",59,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[8,"SettingsExt","","Trait containing all `Settings` methods.",null,null],[10,"apply","","Applies any changes that have been made to the settings. This function does nothing unless `self` is in 'delay-apply' mode; see `SettingsExt::delay`. In the normal case settings are always applied immediately.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"bind","","Create a binding between the `key` in the `self` object and the property `property` of `object`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"str"},{"name":"settingsbindflags"}],"output":null}],[10,"bind_writable","","Create a binding between the writability of `key` in the `self` object and the property `property` of `object`. The property must be boolean; \"sensitive\" or \"visible\" properties of widgets are the most likely candidates.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"create_action","","Creates a `Action` corresponding to a given `Settings` key.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["action"],"name":"option"}}],[10,"delay","","Changes the `Settings` object into 'delay-apply' mode. In this mode, changes to `self` are not immediately propagated to the backend, but kept locally until `SettingsExt::apply` is called.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"get_boolean","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_child","","Creates a child settings object which has a base path of `base-path/@name`, where `base-path` is the base path of `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["settings"],"name":"option"}}],[10,"get_default_value","","Gets the \"default value\" of a key.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_double","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"f64"}}],[10,"get_enum","","Gets the value that is stored in `self` for `key` and converts it to the enum value that it represents.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_flags","","Gets the value that is stored in `self` for `key` and converts it to the flags value that it represents.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_has_unapplied","","Returns whether the `Settings` object has any unapplied changes. This can only be the case if it is in 'delayed-apply' mode.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_int","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_int64","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i64"}}],[10,"get_range","","Queries the range of a key.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_string","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_strv","","A convenience variant of `SettingsExt::get` for string arrays.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_uint","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_uint64","","Gets the value that is stored at `key` in `self`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u64"}}],[10,"get_user_value","","Checks the \"user value\" of a key, if there is one.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"get_value","","Gets the value that is stored in `self` for `key`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["variant"],"name":"option"}}],[10,"is_writable","","Finds out if a key can be written or not ## `name` the name of a key",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_children","","Gets the list of children on `self`.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_keys","","Introspects the list of keys on `self`.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"range_check","","Checks if the given `value` is of the correct type and within the permitted range for `key`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":{"name":"bool"}}],[10,"reset","","Resets `key` to its default value.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"revert","","Reverts all non-applied changes to the settings. This function does nothing unless `self` is in 'delay-apply' mode; see `SettingsExt::delay`. In the normal case settings are always applied immediately.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"set_boolean","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"set_double","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"bool"}}],[10,"set_enum","","Looks up the enumerated type nick for `value` and writes it to `key`, within `self`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_flags","","Looks up the flags type nicks for the bits specified by `value`, puts them in an array of strings and writes the array to `key`, within `self`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"set_int","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_int64","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"bool"}}],[10,"set_string","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_strv","","Sets `key` in `self` to `value`.",60,null],[10,"set_uint","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"set_uint64","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":{"name":"bool"}}],[10,"set_value","","Sets `key` in `self` to `value`.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"variant"}],"output":{"name":"bool"}}],[10,"get_property_delay_apply","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_path","","The path within the backend where the settings are stored.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_schema","","The name of the schema that describes the types of keys for this `Settings` object.",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_schema_id","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_settings_schema","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["settingsschema"],"name":"option"}}],[10,"connect_changed","","The \"changed\" signal is emitted when a key has potentially changed. You should call one of the `SettingsExt::get` calls to check the new value.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_writable_change_event","","The \"writable-change-event\" signal is emitted once per writability change event that affects this settings object. You should connect to this signal if you are interested in viewing groups of changes before they are split out into multiple emissions of the \"writable-changed\" signal. For most use cases it is more appropriate to use the \"writable-changed\" signal.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_writable_changed","","The \"writable-changed\" signal is emitted when the writability of a key has potentially changed. You should call `SettingsExt::is_writable` in order to determine the new status.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_backend_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_delay_apply_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_unapplied_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_path_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_schema_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_schema_id_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_settings_schema_notify","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SimpleActionExt","","Trait containing all `SimpleAction` methods.",null,null],[10,"set_enabled","","Sets the action as enabled or not.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_state","","Sets the state of the action.",61,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"set_state_hint","","Sets the state hint for the action.",61,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_activate","","Indicates that the action was just activated.",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_change_state","","Indicates that the action just received a request to change its state.",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enabled_notify","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_type_notify","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SimpleActionGroupExt","","Trait containing all `SimpleActionGroup` methods.",null,null],[10,"insert","","Adds an action to the action group.",62,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"lookup","","Looks up the action with the name `action_name` in the group.",62,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["action"],"name":"option"}}],[10,"remove","","Removes the named action from the action group.",62,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"SocketExt","","",null,null],[10,"accept","","",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["socket","error"],"name":"result"}}],[10,"bind","","",63,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[10,"check_connect_result","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"close","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"condition_check","","",63,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[10,"condition_timed_wait","","",63,{"inputs":[{"name":"self"},{"name":"iocondition"},{"name":"i64"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"condition_wait","","",63,{"inputs":[{"name":"self"},{"name":"iocondition"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"connect","","",63,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"connection_factory_create_connection","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["socketconnection"],"name":"option"}}],[10,"get_available_bytes","","",63,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[10,"get_blocking","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_broadcast","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_family","","",63,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_keepalive","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_listen_backlog","","",63,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_local_address","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_multicast_loopback","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_multicast_ttl","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_option","","",63,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"get_protocol","","",63,{"inputs":[{"name":"self"}],"output":{"name":"socketprotocol"}}],[10,"get_remote_address","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_socket_type","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"get_timeout","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_ttl","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"is_closed","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_connected","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"join_multicast_group","","",63,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"bool"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"leave_multicast_group","","",63,{"inputs":[{"name":"self"},{"name":"inetaddress"},{"name":"bool"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"listen","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_blocking","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_broadcast","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_keepalive","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_listen_backlog","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_multicast_loopback","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_multicast_ttl","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_option","","",63,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_timeout","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_ttl","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"shutdown","","",63,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[10,"speaks_ipv4","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_type","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"connect_property_blocking_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_broadcast_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_keepalive_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_listen_backlog_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_address_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_multicast_loopback_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_multicast_ttl_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_protocol_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_remote_address_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_timeout_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ttl_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketAddressExt","","",null,null],[10,"get_family","","",64,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_native_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[10,"connect_property_family_notify","","",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketAddressEnumeratorExt","","",null,null],[10,"next","","",65,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"next_async","","",65,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[8,"SocketClientExt","","",null,null],[10,"add_application_proxy","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect","","",66,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_async","","",66,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"connect_to_host","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_to_host_async","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"},{"name":"q"}],"output":null}],[10,"connect_to_service","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_to_service_async","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":null}],[10,"connect_to_uri","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"}],"output":{"generics":["socketconnection","error"],"name":"result"}}],[10,"connect_to_uri_async","","",66,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"p"},{"name":"q"}],"output":null}],[10,"get_enable_proxy","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_family","","",66,{"inputs":[{"name":"self"}],"output":{"name":"socketfamily"}}],[10,"get_local_address","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress"],"name":"option"}}],[10,"get_protocol","","",66,{"inputs":[{"name":"self"}],"output":{"name":"socketprotocol"}}],[10,"get_socket_type","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"get_timeout","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_tls","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tls_validation_flags","","",66,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[10,"set_enable_proxy","","",66,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_family","","",66,{"inputs":[{"name":"self"},{"name":"socketfamily"}],"output":null}],[10,"set_local_address","","",66,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_protocol","","",66,{"inputs":[{"name":"self"},{"name":"socketprotocol"}],"output":null}],[10,"set_socket_type","","",66,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":null}],[10,"set_timeout","","",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_tls","","",66,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tls_validation_flags","","",66,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[10,"get_property_type","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[10,"set_property_type","","",66,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":null}],[10,"connect_event","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_proxy_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_address_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_protocol_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_proxy_resolver_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_timeout_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tls_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tls_validation_flags_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketConnectableExt","","",null,null],[10,"enumerate","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddressenumerator"],"name":"option"}}],[10,"proxy_enumerate","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddressenumerator"],"name":"option"}}],[10,"to_string","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"SocketConnectionExt","","",null,null],[10,"connect","","",68,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"connect_async","","",68,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[10,"get_local_address","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_remote_address","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"get_socket","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["socket"],"name":"option"}}],[10,"is_connected","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_socket_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketListenerExt","","",null,null],[10,"accept","","",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"accept_async","","",69,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"accept_socket","","",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_address","","",69,{"inputs":[{"name":"self"},{"name":"p"},{"name":"sockettype"},{"name":"socketprotocol"},{"name":"r"}],"output":{"generics":["socketaddress","error"],"name":"result"}}],[10,"add_any_inet_port","","",69,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["u16","error"],"name":"result"}}],[10,"add_inet_port","","",69,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_socket","","",69,{"inputs":[{"name":"self"},{"name":"socket"},{"name":"q"}],"output":{"generics":["error"],"name":"result"}}],[10,"close","","",69,{"inputs":[{"name":"self"}],"output":null}],[10,"set_backlog","","",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_listen_backlog","","",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_listen_backlog","","",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_event","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_listen_backlog_notify","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketServiceExt","","",null,null],[10,"is_active","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"start","","",70,{"inputs":[{"name":"self"}],"output":null}],[10,"stop","","",70,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_active","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","",70,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_incoming","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TcpConnectionExt","","",null,null],[10,"get_graceful_disconnect","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_graceful_disconnect","","",71,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_graceful_disconnect_notify","","",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ThemedIconExt","","Trait containing all `ThemedIcon` methods.",null,null],[10,"append_name","","Append a name to the list of icons from within `self`.",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_names","","Gets the names of icons from within `self`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"prepend_name","","Prepend a name to the list of icons from within `self`.",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_use_default_fallbacks","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_name_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_names_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_default_fallbacks_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ThreadedSocketServiceExt","","",null,null],[10,"get_property_max_threads","","",73,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_run","","",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_threads_notify","","",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsCertificateExt","","Trait containing all `TlsCertificate` methods.",null,null],[10,"get_issuer","","Gets the `TlsCertificate` representing `self`'s issuer, if known",74,{"inputs":[{"name":"self"}],"output":{"generics":["tlscertificate"],"name":"option"}}],[10,"is_same","","Check if two `TlsCertificate` objects represent the same certificate. The raw DER byte data of the two certificates are checked for equality. This has the effect that two certificates may compare equal even if their `TlsCertificate:issuer`, `TlsCertificate:private-key`, or `TlsCertificate:private-key-pem` properties differ.",74,{"inputs":[{"name":"self"},{"name":"tlscertificate"}],"output":{"name":"bool"}}],[10,"verify","","This verifies `self` and returns a set of `TlsCertificateFlags` indicating any problems found with it. This can be used to verify a certificate outside the context of making a connection, or to check a certificate against a CA that is not part of the system CA database.",74,{"inputs":[{"name":"self"},{"name":"q"},{"name":"r"}],"output":{"name":"tlscertificateflags"}}],[10,"get_property_certificate_pem","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_property_certificate_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_certificate_pem_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_issuer_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_private_key_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_private_key_pem_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsClientConnectionExt","","",null,null],[10,"copy_session_state","","",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_server_identity","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["socketconnectable"],"name":"option"}}],[10,"get_use_ssl3","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_validation_flags","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[10,"set_server_identity","","",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_use_ssl3","","",75,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_validation_flags","","",75,{"inputs":[{"name":"self"},{"name":"tlscertificateflags"}],"output":null}],[10,"connect_property_accepted_cas_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_server_identity_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_ssl3_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_validation_flags_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsConnectionExt","","",null,null],[10,"emit_accept_certificate","","",76,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"tlscertificateflags"}],"output":{"name":"bool"}}],[10,"get_certificate","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlscertificate"],"name":"option"}}],[10,"get_database","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlsdatabase"],"name":"option"}}],[10,"get_interaction","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlsinteraction"],"name":"option"}}],[10,"get_peer_certificate","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["tlscertificate"],"name":"option"}}],[10,"get_peer_certificate_errors","","",76,{"inputs":[{"name":"self"}],"output":{"name":"tlscertificateflags"}}],[10,"get_rehandshake_mode","","",76,{"inputs":[{"name":"self"}],"output":{"name":"tlsrehandshakemode"}}],[10,"get_require_close_notify","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_system_certdb","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"handshake","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"handshake_async","","",76,{"inputs":[{"name":"self"},{"name":"priority"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_certificate","","",76,{"inputs":[{"name":"self"},{"name":"tlscertificate"}],"output":null}],[10,"set_database","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_interaction","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_rehandshake_mode","","",76,{"inputs":[{"name":"self"},{"name":"tlsrehandshakemode"}],"output":null}],[10,"set_require_close_notify","","",76,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_system_certdb","","",76,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_base_io_stream","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["iostream"],"name":"option"}}],[10,"connect_accept_certificate","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_base_io_stream_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_certificate_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_database_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_interaction_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_peer_certificate_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_peer_certificate_errors_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rehandshake_mode_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_require_close_notify_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_system_certdb_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsDatabaseExt","","",null,null],[10,"create_certificate_handle","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"}],"output":{"generics":["string"],"name":"option"}}],[10,"lookup_certificate_for_handle","","",77,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"lookup_certificate_for_handle_async","","",77,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"},{"name":"r"}],"output":null}],[10,"lookup_certificate_issuer","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"}],"output":{"generics":["tlscertificate","error"],"name":"result"}}],[10,"lookup_certificate_issuer_async","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"p"},{"name":"tlsdatabaselookupflags"},{"name":"q"},{"name":"r"}],"output":null}],[10,"verify_chain","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"str"},{"name":"q"},{"name":"r"},{"name":"tlsdatabaseverifyflags"},{"name":"s"}],"output":{"generics":["tlscertificateflags","error"],"name":"result"}}],[10,"verify_chain_async","","",77,{"inputs":[{"name":"self"},{"name":"tlscertificate"},{"name":"str"},{"name":"q"},{"name":"r"},{"name":"tlsdatabaseverifyflags"},{"name":"s"},{"name":"t"}],"output":null}],[8,"TlsFileDatabaseExt","","",null,null],[10,"get_property_anchors","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_anchors","","",78,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_anchors_notify","","",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsInteractionExt","","",null,null],[10,"ask_password","","",79,{"inputs":[{"name":"self"},{"name":"tlspassword"},{"name":"p"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"ask_password_async","","",79,{"inputs":[{"name":"self"},{"name":"tlspassword"},{"name":"p"},{"name":"q"}],"output":null}],[10,"invoke_ask_password","","",79,{"inputs":[{"name":"self"},{"name":"tlspassword"},{"name":"p"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"invoke_request_certificate","","",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"tlscertificaterequestflags"},{"name":"q"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"request_certificate","","",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"tlscertificaterequestflags"},{"name":"q"}],"output":{"generics":["tlsinteractionresult","error"],"name":"result"}}],[10,"request_certificate_async","","",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"tlscertificaterequestflags"},{"name":"q"},{"name":"r"}],"output":null}],[8,"TlsPasswordExt","","",null,null],[10,"get_description","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_flags","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tlspasswordflags"}}],[10,"get_warning","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_description","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_flags","","",80,{"inputs":[{"name":"self"},{"name":"tlspasswordflags"}],"output":null}],[10,"set_warning","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_property_description_notify","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_flags_notify","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_warning_notify","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TlsServerConnectionExt","","",null,null],[10,"get_property_authentication_mode","","",81,{"inputs":[{"name":"self"}],"output":{"name":"tlsauthenticationmode"}}],[10,"set_property_authentication_mode","","",81,{"inputs":[{"name":"self"},{"name":"tlsauthenticationmode"}],"output":null}],[10,"connect_property_authentication_mode_notify","","",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"new","","Creates an error with supplied error enum variant and message.",270,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",270,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",270,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",270,null],[11,"eq","gio::signal","",21,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"eq","gio","",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gio::signal","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","gio","",271,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","gio::signal","",21,{"inputs":[{"name":"self"}],"output":{"name":"inhibit"}}],[11,"static_type","gio","",271,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",270,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",271,null],[11,"default","gio::signal","",21,{"inputs":[],"output":{"name":"inhibit"}}],[11,"description","gio","",270,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[4,"DataStreamByteOrder"],[4,"DataStreamNewlineType"],[4,"FileType"],[4,"IOErrorEnum"],[4,"MountOperationResult"],[4,"NotificationPriority"],[4,"PasswordSave"],[4,"ResolverRecordType"],[4,"ResourceError"],[4,"SocketClientEvent"],[4,"SocketFamily"],[4,"SocketListenerEvent"],[4,"SocketProtocol"],[4,"SocketType"],[4,"TlsAuthenticationMode"],[4,"TlsCertificateRequestFlags"],[4,"TlsDatabaseLookupFlags"],[4,"TlsInteractionResult"],[4,"TlsRehandshakeMode"],[3,"Resource"],[3,"Socket"],[3,"Inhibit"],[8,"ActionExt"],[8,"ActionGroupExt"],[8,"ActionMapExt"],[8,"AppInfoExt"],[8,"AppLaunchContextExt"],[8,"ApplicationExt"],[8,"BufferedInputStreamExt"],[8,"BufferedOutputStreamExt"],[8,"CancellableExt"],[8,"DataInputStreamExt"],[8,"DataOutputStreamExt"],[8,"FileExt"],[8,"FileIOStreamExt"],[8,"FileInfoExt"],[8,"FileInputStreamExt"],[8,"FileOutputStreamExt"],[8,"FilterInputStreamExt"],[8,"FilterOutputStreamExt"],[8,"IOStreamExt"],[8,"IconExt"],[8,"InetAddressExt"],[8,"InetSocketAddressExt"],[8,"InputStreamExt"],[8,"MemoryInputStreamExt"],[8,"MemoryOutputStreamExt"],[8,"MenuExt"],[8,"MenuAttributeIterExt"],[8,"MenuItemExt"],[8,"MenuLinkIterExt"],[8,"MenuModelExt"],[8,"MountOperationExt"],[8,"NetworkAddressExt"],[8,"NetworkServiceExt"],[8,"NotificationExt"],[8,"OutputStreamExt"],[8,"PermissionExt"],[8,"ResolverExt"],[8,"SeekableExt"],[8,"SettingsExt"],[8,"SimpleActionExt"],[8,"SimpleActionGroupExt"],[8,"SocketExt"],[8,"SocketAddressExt"],[8,"SocketAddressEnumeratorExt"],[8,"SocketClientExt"],[8,"SocketConnectableExt"],[8,"SocketConnectionExt"],[8,"SocketListenerExt"],[8,"SocketServiceExt"],[8,"TcpConnectionExt"],[8,"ThemedIconExt"],[8,"ThreadedSocketServiceExt"],[8,"TlsCertificateExt"],[8,"TlsClientConnectionExt"],[8,"TlsConnectionExt"],[8,"TlsDatabaseExt"],[8,"TlsFileDatabaseExt"],[8,"TlsInteractionExt"],[8,"TlsPasswordExt"],[8,"TlsServerConnectionExt"],[8,"ApplicationExtManual"],[8,"InputStreamExtManual"],[8,"OutputStreamExtManual"],[8,"SocketExtManual"],[8,"IntoRawSocket"],[8,"FromRawSocket"],[8,"SocketListenerExtManual"],[3,"Action"],[3,"ActionGroup"],[3,"ActionMap"],[3,"AppInfo"],[3,"AppLaunchContext"],[3,"Application"],[3,"BufferedInputStream"],[3,"BufferedOutputStream"],[3,"Cancellable"],[3,"DataInputStream"],[3,"DataOutputStream"],[3,"File"],[3,"FileIOStream"],[3,"FileInfo"],[3,"FileInputStream"],[3,"FileOutputStream"],[3,"FilterInputStream"],[3,"FilterOutputStream"],[3,"IOStream"],[3,"Icon"],[3,"InetAddress"],[3,"InetSocketAddress"],[3,"InputStream"],[3,"MemoryInputStream"],[3,"MemoryOutputStream"],[3,"Menu"],[3,"MenuAttributeIter"],[3,"MenuItem"],[3,"MenuLinkIter"],[3,"MenuModel"],[3,"MountOperation"],[3,"NetworkAddress"],[3,"NetworkService"],[3,"Notification"],[3,"OutputStream"],[3,"Permission"],[3,"Resolver"],[3,"Seekable"],[3,"Settings"],[3,"SimpleAction"],[3,"SimpleActionGroup"],[3,"SimpleIOStream"],[3,"SimplePermission"],[3,"SocketAddress"],[3,"SocketAddressEnumerator"],[3,"SocketClient"],[3,"SocketConnectable"],[3,"SocketConnection"],[3,"SocketListener"],[3,"SocketService"],[3,"TcpConnection"],[3,"ThemedIcon"],[3,"ThreadedSocketService"],[3,"TlsCertificate"],[3,"TlsClientConnection"],[3,"TlsConnection"],[3,"TlsDatabase"],[3,"TlsFileDatabase"],[3,"TlsInteraction"],[3,"TlsPassword"],[3,"TlsServerConnection"],[3,"SettingsSchema"],[3,"SettingsSchemaKey"],[3,"SrvTarget"],[3,"AppInfoCreateFlags"],[3,"ApplicationFlags"],[3,"AskPasswordFlags"],[3,"FileCreateFlags"],[3,"FileQueryInfoFlags"],[3,"IOStreamSpliceFlags"],[3,"OutputStreamSpliceFlags"],[3,"ResourceLookupFlags"],[3,"SettingsBindFlags"],[3,"TlsCertificateFlags"],[3,"TlsDatabaseVerifyFlags"],[3,"TlsPasswordFlags"],[3,"DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME"],[3,"FILE_ATTRIBUTE_ACCESS_CAN_DELETE"],[3,"FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE"],[3,"FILE_ATTRIBUTE_ACCESS_CAN_READ"],[3,"FILE_ATTRIBUTE_ACCESS_CAN_RENAME"],[3,"FILE_ATTRIBUTE_ACCESS_CAN_TRASH"],[3,"FILE_ATTRIBUTE_ACCESS_CAN_WRITE"],[3,"FILE_ATTRIBUTE_DOS_IS_ARCHIVE"],[3,"FILE_ATTRIBUTE_DOS_IS_SYSTEM"],[3,"FILE_ATTRIBUTE_ETAG_VALUE"],[3,"FILE_ATTRIBUTE_FILESYSTEM_FREE"],[3,"FILE_ATTRIBUTE_FILESYSTEM_READONLY"],[3,"FILE_ATTRIBUTE_FILESYSTEM_REMOTE"],[3,"FILE_ATTRIBUTE_FILESYSTEM_SIZE"],[3,"FILE_ATTRIBUTE_FILESYSTEM_TYPE"],[3,"FILE_ATTRIBUTE_FILESYSTEM_USED"],[3,"FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW"],[3,"FILE_ATTRIBUTE_GVFS_BACKEND"],[3,"FILE_ATTRIBUTE_ID_FILE"],[3,"FILE_ATTRIBUTE_ID_FILESYSTEM"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_START"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP"],[3,"FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT"],[3,"FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI"],[3,"FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC"],[3,"FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE"],[3,"FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE"],[3,"FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE"],[3,"FILE_ATTRIBUTE_OWNER_GROUP"],[3,"FILE_ATTRIBUTE_OWNER_USER"],[3,"FILE_ATTRIBUTE_OWNER_USER_REAL"],[3,"FILE_ATTRIBUTE_PREVIEW_ICON"],[3,"FILE_ATTRIBUTE_RECENT_MODIFIED"],[3,"FILE_ATTRIBUTE_SELINUX_CONTEXT"],[3,"FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE"],[3,"FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE"],[3,"FILE_ATTRIBUTE_STANDARD_COPY_NAME"],[3,"FILE_ATTRIBUTE_STANDARD_DESCRIPTION"],[3,"FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME"],[3,"FILE_ATTRIBUTE_STANDARD_EDIT_NAME"],[3,"FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE"],[3,"FILE_ATTRIBUTE_STANDARD_ICON"],[3,"FILE_ATTRIBUTE_STANDARD_IS_BACKUP"],[3,"FILE_ATTRIBUTE_STANDARD_IS_HIDDEN"],[3,"FILE_ATTRIBUTE_STANDARD_IS_SYMLINK"],[3,"FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL"],[3,"FILE_ATTRIBUTE_STANDARD_IS_VOLATILE"],[3,"FILE_ATTRIBUTE_STANDARD_NAME"],[3,"FILE_ATTRIBUTE_STANDARD_SIZE"],[3,"FILE_ATTRIBUTE_STANDARD_SORT_ORDER"],[3,"FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON"],[3,"FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET"],[3,"FILE_ATTRIBUTE_STANDARD_TARGET_URI"],[3,"FILE_ATTRIBUTE_STANDARD_TYPE"],[3,"FILE_ATTRIBUTE_THUMBNAILING_FAILED"],[3,"FILE_ATTRIBUTE_THUMBNAIL_IS_VALID"],[3,"FILE_ATTRIBUTE_THUMBNAIL_PATH"],[3,"FILE_ATTRIBUTE_TIME_ACCESS"],[3,"FILE_ATTRIBUTE_TIME_ACCESS_USEC"],[3,"FILE_ATTRIBUTE_TIME_CHANGED"],[3,"FILE_ATTRIBUTE_TIME_CHANGED_USEC"],[3,"FILE_ATTRIBUTE_TIME_CREATED"],[3,"FILE_ATTRIBUTE_TIME_CREATED_USEC"],[3,"FILE_ATTRIBUTE_TIME_MODIFIED"],[3,"FILE_ATTRIBUTE_TIME_MODIFIED_USEC"],[3,"FILE_ATTRIBUTE_TRASH_DELETION_DATE"],[3,"FILE_ATTRIBUTE_TRASH_ITEM_COUNT"],[3,"FILE_ATTRIBUTE_TRASH_ORIG_PATH"],[3,"FILE_ATTRIBUTE_UNIX_BLOCKS"],[3,"FILE_ATTRIBUTE_UNIX_BLOCK_SIZE"],[3,"FILE_ATTRIBUTE_UNIX_DEVICE"],[3,"FILE_ATTRIBUTE_UNIX_GID"],[3,"FILE_ATTRIBUTE_UNIX_INODE"],[3,"FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT"],[3,"FILE_ATTRIBUTE_UNIX_MODE"],[3,"FILE_ATTRIBUTE_UNIX_NLINK"],[3,"FILE_ATTRIBUTE_UNIX_RDEV"],[3,"FILE_ATTRIBUTE_UNIX_UID"],[3,"MENU_ATTRIBUTE_ACTION"],[3,"MENU_ATTRIBUTE_ACTION_NAMESPACE"],[3,"MENU_ATTRIBUTE_ICON"],[3,"MENU_ATTRIBUTE_LABEL"],[3,"MENU_ATTRIBUTE_TARGET"],[3,"MENU_LINK_SECTION"],[3,"MENU_LINK_SUBMENU"],[3,"NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME"],[3,"NETWORK_MONITOR_EXTENSION_POINT_NAME"],[3,"PROXY_EXTENSION_POINT_NAME"],[3,"PROXY_RESOLVER_EXTENSION_POINT_NAME"],[3,"SETTINGS_BACKEND_EXTENSION_POINT_NAME"],[3,"TLS_BACKEND_EXTENSION_POINT_NAME"],[3,"TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT"],[3,"TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER"],[3,"VFS_EXTENSION_POINT_NAME"],[3,"VOLUME_IDENTIFIER_KIND_CLASS"],[3,"VOLUME_IDENTIFIER_KIND_HAL_UDI"],[3,"VOLUME_IDENTIFIER_KIND_LABEL"],[3,"VOLUME_IDENTIFIER_KIND_NFS_MOUNT"],[3,"VOLUME_IDENTIFIER_KIND_UNIX_DEVICE"],[3,"VOLUME_IDENTIFIER_KIND_UUID"],[3,"VOLUME_MONITOR_EXTENSION_POINT_NAME"],[3,"Error"],[3,"Object"]]};
searchIndex["pango"] = {"doc":"","items":[[3,"Error","pango","A generic error capable of representing various error domains (types).",null,null],[17,"SCALE","","",null,null],[3,"Context","","",null,null],[3,"EngineShape","","",null,null],[3,"Font","","",null,null],[3,"FontFace","","",null,null],[3,"FontFamily","","",null,null],[3,"FontMap","","",null,null],[3,"Fontset","","",null,null],[3,"Layout","","",null,null],[3,"Renderer","","",null,null],[3,"AttrList","","",null,null],[3,"Attribute","","",null,null],[3,"Color","","",null,null],[3,"Coverage","","",null,null],[3,"FontDescription","","",null,null],[3,"FontMetrics","","",null,null],[3,"GlyphItem","","",null,null],[3,"GlyphItemIter","","",null,null],[3,"GlyphString","","",null,null],[3,"LayoutIter","","",null,null],[3,"LayoutLine","","",null,null],[3,"Matrix","","",null,null],[3,"TabArray","","",null,null],[3,"FontMask","","",null,null],[4,"Alignment","","",null,null],[13,"Left","","",0,null],[13,"Center","","",0,null],[13,"Right","","",0,null],[4,"AttrType","","",null,null],[13,"Invalid","","",1,null],[13,"Language","","",1,null],[13,"Family","","",1,null],[13,"Style","","",1,null],[13,"Weight","","",1,null],[13,"Variant","","",1,null],[13,"Stretch","","",1,null],[13,"Size","","",1,null],[13,"FontDesc","","",1,null],[13,"Foreground","","",1,null],[13,"Background","","",1,null],[13,"Underline","","",1,null],[13,"Strikethrough","","",1,null],[13,"Rise","","",1,null],[13,"Shape","","",1,null],[13,"Scale","","",1,null],[13,"Fallback","","",1,null],[13,"LetterSpacing","","",1,null],[13,"UnderlineColor","","",1,null],[13,"StrikethroughColor","","",1,null],[13,"AbsoluteSize","","",1,null],[13,"Gravity","","",1,null],[13,"GravityHint","","",1,null],[13,"FontFeatures","","",1,null],[13,"ForegroundAlpha","","",1,null],[13,"BackgroundAlpha","","",1,null],[4,"BidiType","","",null,null],[13,"L","","",2,null],[13,"Lre","","",2,null],[13,"Lro","","",2,null],[13,"R","","",2,null],[13,"Al","","",2,null],[13,"Rle","","",2,null],[13,"Rlo","","",2,null],[13,"Pdf","","",2,null],[13,"En","","",2,null],[13,"Es","","",2,null],[13,"Et","","",2,null],[13,"An","","",2,null],[13,"Cs","","",2,null],[13,"Nsm","","",2,null],[13,"Bn","","",2,null],[13,"B","","",2,null],[13,"S","","",2,null],[13,"Ws","","",2,null],[13,"On","","",2,null],[4,"CoverageLevel","","",null,null],[13,"None","","",3,null],[13,"Fallback","","",3,null],[13,"Approximate","","",3,null],[13,"Exact","","",3,null],[4,"Direction","","",null,null],[13,"Ltr","","",4,null],[13,"Rtl","","",4,null],[13,"TtbLtr","","",4,null],[13,"TtbRtl","","",4,null],[13,"WeakLtr","","",4,null],[13,"WeakRtl","","",4,null],[13,"Neutral","","",4,null],[4,"EllipsizeMode","","",null,null],[13,"None","","",5,null],[13,"Start","","",5,null],[13,"Middle","","",5,null],[13,"End","","",5,null],[4,"Gravity","","",null,null],[13,"South","","",6,null],[13,"East","","",6,null],[13,"North","","",6,null],[13,"West","","",6,null],[13,"Auto","","",6,null],[4,"GravityHint","","",null,null],[13,"Natural","","",7,null],[13,"Strong","","",7,null],[13,"Line","","",7,null],[4,"RenderPart","","",null,null],[13,"Foreground","","",8,null],[13,"Background","","",8,null],[13,"Underline","","",8,null],[13,"Strikethrough","","",8,null],[4,"Script","","",null,null],[13,"InvalidCode","","",9,null],[13,"Common","","",9,null],[13,"Inherited","","",9,null],[13,"Arabic","","",9,null],[13,"Armenian","","",9,null],[13,"Bengali","","",9,null],[13,"Bopomofo","","",9,null],[13,"Cherokee","","",9,null],[13,"Coptic","","",9,null],[13,"Cyrillic","","",9,null],[13,"Deseret","","",9,null],[13,"Devanagari","","",9,null],[13,"Ethiopic","","",9,null],[13,"Georgian","","",9,null],[13,"Gothic","","",9,null],[13,"Greek","","",9,null],[13,"Gujarati","","",9,null],[13,"Gurmukhi","","",9,null],[13,"Han","","",9,null],[13,"Hangul","","",9,null],[13,"Hebrew","","",9,null],[13,"Hiragana","","",9,null],[13,"Kannada","","",9,null],[13,"Katakana","","",9,null],[13,"Khmer","","",9,null],[13,"Lao","","",9,null],[13,"Latin","","",9,null],[13,"Malayalam","","",9,null],[13,"Mongolian","","",9,null],[13,"Myanmar","","",9,null],[13,"Ogham","","",9,null],[13,"OldItalic","","",9,null],[13,"Oriya","","",9,null],[13,"Runic","","",9,null],[13,"Sinhala","","",9,null],[13,"Syriac","","",9,null],[13,"Tamil","","",9,null],[13,"Telugu","","",9,null],[13,"Thaana","","",9,null],[13,"Thai","","",9,null],[13,"Tibetan","","",9,null],[13,"CanadianAboriginal","","",9,null],[13,"Yi","","",9,null],[13,"Tagalog","","",9,null],[13,"Hanunoo","","",9,null],[13,"Buhid","","",9,null],[13,"Tagbanwa","","",9,null],[13,"Braille","","",9,null],[13,"Cypriot","","",9,null],[13,"Limbu","","",9,null],[13,"Osmanya","","",9,null],[13,"Shavian","","",9,null],[13,"LinearB","","",9,null],[13,"TaiLe","","",9,null],[13,"Ugaritic","","",9,null],[13,"NewTaiLue","","",9,null],[13,"Buginese","","",9,null],[13,"Glagolitic","","",9,null],[13,"Tifinagh","","",9,null],[13,"SylotiNagri","","",9,null],[13,"OldPersian","","",9,null],[13,"Kharoshthi","","",9,null],[13,"Unknown","","",9,null],[13,"Balinese","","",9,null],[13,"Cuneiform","","",9,null],[13,"Phoenician","","",9,null],[13,"PhagsPa","","",9,null],[13,"Nko","","",9,null],[13,"KayahLi","","",9,null],[13,"Lepcha","","",9,null],[13,"Rejang","","",9,null],[13,"Sundanese","","",9,null],[13,"Saurashtra","","",9,null],[13,"Cham","","",9,null],[13,"OlChiki","","",9,null],[13,"Vai","","",9,null],[13,"Carian","","",9,null],[13,"Lycian","","",9,null],[13,"Lydian","","",9,null],[13,"Batak","","",9,null],[13,"Brahmi","","",9,null],[13,"Mandaic","","",9,null],[13,"Chakma","","",9,null],[13,"MeroiticCursive","","",9,null],[13,"MeroiticHieroglyphs","","",9,null],[13,"Miao","","",9,null],[13,"Sharada","","",9,null],[13,"SoraSompeng","","",9,null],[13,"Takri","","",9,null],[13,"BassaVah","","",9,null],[13,"CaucasianAlbanian","","",9,null],[13,"Duployan","","",9,null],[13,"Elbasan","","",9,null],[13,"Grantha","","",9,null],[13,"Khojki","","",9,null],[13,"Khudawadi","","",9,null],[13,"LinearA","","",9,null],[13,"Mahajani","","",9,null],[13,"Manichaean","","",9,null],[13,"MendeKikakui","","",9,null],[13,"Modi","","",9,null],[13,"Mro","","",9,null],[13,"Nabataean","","",9,null],[13,"OldNorthArabian","","",9,null],[13,"OldPermic","","",9,null],[13,"PahawhHmong","","",9,null],[13,"Palmyrene","","",9,null],[13,"PauCinHau","","",9,null],[13,"PsalterPahlavi","","",9,null],[13,"Siddham","","",9,null],[13,"Tirhuta","","",9,null],[13,"WarangCiti","","",9,null],[13,"Ahom","","",9,null],[13,"AnatolianHieroglyphs","","",9,null],[13,"Hatran","","",9,null],[13,"Multani","","",9,null],[13,"OldHungarian","","",9,null],[13,"Signwriting","","",9,null],[4,"Stretch","","",null,null],[13,"UltraCondensed","","",10,null],[13,"ExtraCondensed","","",10,null],[13,"Condensed","","",10,null],[13,"SemiCondensed","","",10,null],[13,"Normal","","",10,null],[13,"SemiExpanded","","",10,null],[13,"Expanded","","",10,null],[13,"ExtraExpanded","","",10,null],[13,"UltraExpanded","","",10,null],[4,"Style","","",null,null],[13,"Normal","","",11,null],[13,"Oblique","","",11,null],[13,"Italic","","",11,null],[4,"TabAlign","","",null,null],[13,"Left","","",12,null],[4,"Underline","","",null,null],[13,"None","","",13,null],[13,"Single","","",13,null],[13,"Double","","",13,null],[13,"Low","","",13,null],[13,"Error","","",13,null],[4,"Variant","","",null,null],[13,"Normal","","",14,null],[13,"SmallCaps","","",14,null],[4,"Weight","","",null,null],[13,"Thin","","",15,null],[13,"Ultralight","","",15,null],[13,"Light","","",15,null],[13,"Semilight","","",15,null],[13,"Book","","",15,null],[13,"Normal","","",15,null],[13,"Medium","","",15,null],[13,"Semibold","","",15,null],[13,"Bold","","",15,null],[13,"Ultrabold","","",15,null],[13,"Heavy","","",15,null],[13,"Ultraheavy","","",15,null],[4,"WrapMode","","",null,null],[13,"Word","","",16,null],[13,"Char","","",16,null],[13,"WordChar","","",16,null],[5,"config_key_get","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"config_key_get_system","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"extents_to_pixels","","",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":null}],[5,"find_base_dir","","",null,{"inputs":[{"name":"str"}],"output":{"name":"direction"}}],[5,"find_paragraph_boundary","","",null,null],[5,"get_lib_subdirectory","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_sysconf_subdirectory","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"is_zero_width","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"lookup_aliases","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"parse_enum","","",null,{"inputs":[{"name":"type"},{"name":"p"},{"name":"bool"}],"output":{"name":"option"}}],[5,"parse_markup","","",null,{"inputs":[{"name":"str"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[5,"parse_stretch","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["stretch"],"name":"option"}}],[5,"parse_style","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["style"],"name":"option"}}],[5,"parse_variant","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["variant"],"name":"option"}}],[5,"parse_weight","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["weight"],"name":"option"}}],[5,"quantize_line_geometry","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":null}],[5,"split_file_list","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"trim_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"unichar_direction","","",null,{"inputs":[{"name":"char"}],"output":{"name":"direction"}}],[5,"units_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"units_to_double","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[5,"version","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"version_check","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[5,"version_string","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"context"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"engineshape"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fontface"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"fontfamily"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fontmap"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"fontset"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",24,{"inputs":[{"name":"context"}],"output":{"name":"layout"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"renderer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"attrlist"}}],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"attrlist"}}],[11,"copy","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[11,"splice","","",26,{"inputs":[{"name":"self"},{"name":"attrlist"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"default","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"init","","",27,{"inputs":[{"name":"self"},{"name":"attrclass"}],"output":null}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",28,{"inputs":[],"output":{"name":"type"}}],[11,"parse","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"coverage"}}],[11,"copy","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["coverage"],"name":"option"}}],[11,"get","","",29,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"coveragelevel"}}],[11,"max","","",29,{"inputs":[{"name":"self"},{"name":"coverage"}],"output":null}],[11,"set","","",29,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"coveragelevel"}],"output":null}],[11,"to_bytes","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_bytes","","",29,null],[11,"new","","",29,{"inputs":[],"output":{"name":"coverage"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"fontdescription"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",30,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"fontdescription"}}],[11,"better_match","","",30,{"inputs":[{"name":"self"},{"name":"p"},{"name":"fontdescription"}],"output":{"name":"bool"}}],[11,"get_family","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_gravity","","",30,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"get_set_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"fontmask"}}],[11,"get_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_size_is_absolute","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_stretch","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stretch"}}],[11,"get_style","","",30,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"get_variant","","",30,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"get_weight","","",30,{"inputs":[{"name":"self"}],"output":{"name":"weight"}}],[11,"hash","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"merge","","",30,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[11,"set_absolute_size","","",30,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"set_family","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_gravity","","",30,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"set_size","","",30,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_stretch","","",30,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":null}],[11,"set_style","","",30,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[11,"set_variant","","",30,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"set_weight","","",30,{"inputs":[{"name":"self"},{"name":"weight"}],"output":null}],[11,"to_filename","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"unset_fields","","",30,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"from_string","","",30,{"inputs":[{"name":"str"}],"output":{"name":"fontdescription"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"fontmetrics"}}],[11,"static_type","","",31,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"fontmetrics"}}],[11,"get_approximate_char_width","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_approximate_digit_width","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ascent","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_descent","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_strikethrough_position","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_strikethrough_thickness","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_underline_position","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_underline_thickness","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"glyphitem"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",32,{"inputs":[],"output":{"name":"type"}}],[11,"apply_attrs","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"attrlist"}],"output":{"generics":["glyphitem"],"name":"vec"}}],[11,"split","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["glyphitem"],"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"glyphitemiter"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",33,{"inputs":[],"output":{"name":"type"}}],[11,"init_end","","",33,{"inputs":[{"name":"self"},{"name":"glyphitem"},{"name":"str"}],"output":{"name":"bool"}}],[11,"init_start","","",33,{"inputs":[{"name":"self"},{"name":"glyphitem"},{"name":"str"}],"output":{"name":"bool"}}],[11,"next_cluster","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"prev_cluster","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glyphstring"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",34,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"glyphstring"}}],[11,"extents","","",34,null],[11,"extents_range","","",34,null],[11,"get_width","","",34,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_size","","",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"default","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",35,{"inputs":[],"output":{"name":"type"}}],[11,"at_last_line","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_baseline","","",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_char_extents","","",35,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"get_cluster_extents","","",35,null],[11,"get_index","","",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_layout","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[11,"get_layout_extents","","",35,null],[11,"get_line","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"option"}}],[11,"get_line_extents","","",35,null],[11,"get_line_readonly","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"option"}}],[11,"get_line_yrange","","",35,null],[11,"get_run","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["layoutrun"],"name":"option"}}],[11,"get_run_extents","","",35,null],[11,"get_run_readonly","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["layoutrun"],"name":"option"}}],[11,"next_char","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_cluster","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_line","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_run","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"layoutline"}}],[11,"static_type","","",36,{"inputs":[],"output":{"name":"type"}}],[11,"get_extents","","",36,null],[11,"get_pixel_extents","","",36,null],[11,"get_x_ranges","","",36,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"index_to_x","","",36,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"}],"output":{"name":"i32"}}],[11,"x_to_index","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",37,{"inputs":[],"output":{"name":"type"}}],[11,"concat","","",37,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"get_font_scale_factor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_font_scale_factors","","",37,null],[11,"rotate","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"scale","","",37,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"transform_distance","","",37,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"transform_point","","",37,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"translate","","",37,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"tabarray"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",38,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",38,{"inputs":[{"name":"i32"},{"name":"bool"}],"output":{"name":"tabarray"}}],[11,"get_positions_in_pixels","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_size","","",38,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_tab","","",38,null],[11,"resize","","",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_tab","","",38,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"tabalign"},{"name":"i32"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"static_type","","",0,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",0,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",0,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",0,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"attrtype"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"attrtype"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"attrtype"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"static_type","","",1,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",1,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",1,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",1,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biditype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biditype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"biditype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"static_type","","",2,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",2,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",2,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",2,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"coveragelevel"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"coveragelevel"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"coveragelevel"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"static_type","","",3,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",3,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",3,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",3,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"static_type","","",4,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",4,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",4,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",6,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",6,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"gravityhint"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"gravityhint"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"gravityhint"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",7,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",7,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"renderpart"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",8,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",8,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",8,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"script"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"stretch"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",10,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",10,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"tabalign"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"tabalign"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"tabalign"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"underline"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"underline"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",14,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",14,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",14,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"weight"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"weight"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"weight"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",15,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",15,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",15,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",16,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",16,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",16,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"fontmask"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FAMILY","","",39,null],[18,"STYLE","","",39,null],[18,"VARIANT","","",39,null],[18,"WEIGHT","","",39,null],[18,"STRETCH","","",39,null],[18,"SIZE","","",39,null],[18,"GRAVITY","","",39,null],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[],"output":{"name":"fontmask"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[],"output":{"name":"fontmask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"u32"}],"output":{"generics":["fontmask"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",39,{"inputs":[{"name":"u32"}],"output":{"name":"fontmask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",39,{"inputs":[{"name":"self"},{"name":"fontmask"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"fontmask"}}],[11,"bitor_assign","","Adds the set of flags.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"fontmask"}}],[11,"bitxor_assign","","Toggles the set of flags.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"fontmask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":{"name":"fontmask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",39,{"inputs":[{"name":"self"},{"name":"fontmask"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"self"}],"output":{"name":"fontmask"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"fontmask"}}],[11,"static_type","","",39,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",39,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",39,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",39,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[0,"functions","","",null,null],[5,"config_key_get","pango::functions","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"config_key_get_system","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"extents_to_pixels","","",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":null}],[5,"find_base_dir","","",null,{"inputs":[{"name":"str"}],"output":{"name":"direction"}}],[5,"find_paragraph_boundary","","",null,null],[5,"get_lib_subdirectory","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_sysconf_subdirectory","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"is_zero_width","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"lookup_aliases","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"parse_enum","","",null,{"inputs":[{"name":"type"},{"name":"p"},{"name":"bool"}],"output":{"name":"option"}}],[5,"parse_markup","","",null,{"inputs":[{"name":"str"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[5,"parse_stretch","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["stretch"],"name":"option"}}],[5,"parse_style","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["style"],"name":"option"}}],[5,"parse_variant","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["variant"],"name":"option"}}],[5,"parse_weight","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"generics":["weight"],"name":"option"}}],[5,"quantize_line_geometry","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":null}],[5,"split_file_list","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[5,"trim_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"unichar_direction","","",null,{"inputs":[{"name":"char"}],"output":{"name":"direction"}}],[5,"units_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"units_to_double","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[5,"version","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"version_check","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[5,"version_string","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[0,"prelude","pango","Traits and essential types inteded for blanket imports.",null,null],[8,"ContextExt","pango::prelude","",null,null],[10,"changed","","",40,{"inputs":[{"name":"self"}],"output":null}],[10,"get_base_dir","","",40,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[10,"get_base_gravity","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[10,"get_font_description","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_font_map","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_gravity","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[10,"get_gravity_hint","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gravityhint"}}],[10,"get_language","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["language"],"name":"option"}}],[10,"get_matrix","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["matrix"],"name":"option"}}],[10,"get_metrics","","",40,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["fontmetrics"],"name":"option"}}],[10,"get_serial","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"list_families","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["fontfamily"],"name":"vec"}}],[10,"load_font","","",40,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":{"generics":["font"],"name":"option"}}],[10,"load_fontset","","",40,{"inputs":[{"name":"self"},{"name":"fontdescription"},{"name":"language"}],"output":{"generics":["fontset"],"name":"option"}}],[10,"set_base_dir","","",40,{"inputs":[{"name":"self"},{"name":"direction"}],"output":null}],[10,"set_base_gravity","","",40,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[10,"set_font_description","","",40,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":null}],[10,"set_font_map","","",40,{"inputs":[{"name":"self"},{"name":"fontmap"}],"output":null}],[10,"set_gravity_hint","","",40,{"inputs":[{"name":"self"},{"name":"gravityhint"}],"output":null}],[10,"set_language","","",40,{"inputs":[{"name":"self"},{"name":"language"}],"output":null}],[10,"set_matrix","","",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"FontExt","","",null,null],[10,"describe","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"describe_with_absolute_size","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"find_shaper","","",41,{"inputs":[{"name":"self"},{"name":"language"},{"name":"u32"}],"output":{"generics":["engineshape"],"name":"option"}}],[10,"get_coverage","","",41,{"inputs":[{"name":"self"},{"name":"language"}],"output":{"generics":["coverage"],"name":"option"}}],[10,"get_font_map","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_glyph_extents","","",41,null],[10,"get_metrics","","",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["fontmetrics"],"name":"option"}}],[8,"FontFaceExt","","",null,null],[10,"describe","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_face_name","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"is_synthesized","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_sizes","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[8,"FontFamilyExt","","",null,null],[10,"get_name","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"is_monospace","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_faces","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["fontface"],"name":"vec"}}],[8,"FontMapExt","","",null,null],[10,"changed","","",44,{"inputs":[{"name":"self"}],"output":null}],[10,"create_context","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_serial","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_shape_engine_type","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"list_families","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["fontfamily"],"name":"vec"}}],[10,"load_font","","",44,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontdescription"}],"output":{"generics":["font"],"name":"option"}}],[10,"load_fontset","","",44,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontdescription"},{"name":"language"}],"output":{"generics":["fontset"],"name":"option"}}],[8,"FontsetExt","","",null,null],[10,"get_font","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["font"],"name":"option"}}],[10,"get_metrics","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["fontmetrics"],"name":"option"}}],[8,"LayoutExt","","",null,null],[10,"context_changed","","",46,{"inputs":[{"name":"self"}],"output":null}],[10,"copy","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_alignment","","",46,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[10,"get_attributes","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[10,"get_auto_dir","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_baseline","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_character_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_context","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_cursor_pos","","",46,null],[10,"get_ellipsize","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_extents","","",46,null],[10,"get_font_description","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_height","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_indent","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_iter","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layoutiter"],"name":"option"}}],[10,"get_justify","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_line","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["layoutline"],"name":"option"}}],[10,"get_line_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_line_readonly","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["layoutline"],"name":"option"}}],[10,"get_lines","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"vec"}}],[10,"get_lines_readonly","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"vec"}}],[10,"get_pixel_extents","","",46,null],[10,"get_pixel_size","","",46,null],[10,"get_serial","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_single_paragraph_mode","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_size","","",46,null],[10,"get_spacing","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tabs","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["tabarray"],"name":"option"}}],[10,"get_text","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_unknown_glyphs_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_width","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_wrap","","",46,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"index_to_line_x","","",46,null],[10,"index_to_pos","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangle"}}],[10,"is_ellipsized","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_wrapped","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"move_cursor_visually","","",46,null],[10,"set_alignment","","",46,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":null}],[10,"set_attributes","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_auto_dir","","",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_ellipsize","","",46,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_font_description","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_height","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_indent","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_justify","","",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_markup","","",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_markup_with_accel","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"name":"char"}}],[10,"set_single_paragraph_mode","","",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_spacing","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tabs","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_text","","",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_width","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_wrap","","",46,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"xy_to_index","","",46,null],[8,"RendererExt","","",null,null],[10,"activate","","",47,{"inputs":[{"name":"self"}],"output":null}],[10,"deactivate","","",47,{"inputs":[{"name":"self"}],"output":null}],[10,"draw_error_underline","","",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_glyph","","",47,{"inputs":[{"name":"self"},{"name":"font"},{"name":"glyph"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"draw_glyph_item","","",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"glyphitem"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_glyphs","","",47,{"inputs":[{"name":"self"},{"name":"font"},{"name":"glyphstring"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_layout","","",47,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_layout_line","","",47,{"inputs":[{"name":"self"},{"name":"layoutline"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_rectangle","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_trapezoid","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"get_alpha","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":{"name":"u16"}}],[10,"get_color","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":{"generics":["color"],"name":"option"}}],[10,"get_layout","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_line","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"option"}}],[10,"get_matrix","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["matrix"],"name":"option"}}],[10,"part_changed","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":null}],[10,"set_alpha","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"u16"}],"output":null}],[10,"set_color","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"p"}],"output":null}],[10,"set_matrix","","",47,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[0,"attr_class","pango","",null,null],[3,"AttrClass","pango::attr_class","",null,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"attrclass"}],"output":{"name":"bool"}}],[0,"attr_list","pango","",null,null],[11,"change","","",26,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"insert","","",26,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"insert_before","","",26,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[0,"attribute","","",null,null],[11,"new_background_alpha","","",27,{"inputs":[{"name":"u16"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_background","","",27,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_fallback","","",27,{"inputs":[{"name":"bool"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_family","","",27,{"inputs":[{"name":"str"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_foreground_alpha","","",27,{"inputs":[{"name":"u16"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_foreground","","",27,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_gravity_hint","","",27,{"inputs":[{"name":"gravityhint"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_gravity","","",27,{"inputs":[{"name":"gravity"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_letter_spacing","","",27,{"inputs":[{"name":"i32"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_rise","","",27,{"inputs":[{"name":"i32"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_scale","","",27,{"inputs":[{"name":"f64"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_stretch","","",27,{"inputs":[{"name":"stretch"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_strikethrough_color","","",27,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_strikethrough","","",27,{"inputs":[{"name":"bool"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_style","","",27,{"inputs":[{"name":"style"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_underline_color","","",27,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_underline","","",27,{"inputs":[{"name":"underline"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_variant","","",27,{"inputs":[{"name":"variant"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"new_weight","","",27,{"inputs":[{"name":"weight"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"get_attr_class","","",27,{"inputs":[{"name":"self"}],"output":{"name":"attrclass"}}],[11,"get_start_index","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_end_index","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_start_index","","",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_end_index","","",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[0,"font_description","","",null,null],[11,"set_family_static","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[0,"item","","",null,null],[3,"Item","pango::item","",null,null],[11,"new","","",49,{"inputs":[],"output":{"generics":["item"],"name":"option"}}],[11,"copy","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["item"],"name":"option"}}],[11,"split","","",49,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["item"],"name":"option"}}],[11,"drop","","",49,{"inputs":[{"name":"self"}],"output":null}],[0,"language","pango","",null,null],[3,"Language","pango::language","",null,null],[11,"default","","",50,{"inputs":[],"output":{"name":"language"}}],[11,"from_string","","",50,{"inputs":[{"name":"str"}],"output":{"name":"language"}}],[11,"to_string","","",50,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"matches","","",50,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"includes_script","","",50,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"get_scripts","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["script"],"name":"vec"}}],[11,"get_sample_string","","",50,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"rectangle","pango","",null,null],[3,"Rectangle","pango::rectangle","",null,null],[12,"x","","",51,null],[12,"y","","",51,null],[12,"width","","",51,null],[12,"height","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"new","","",51,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"rectangle"}}],[6,"Glyph","pango","",null,null],[6,"LayoutRun","","",null,null],[8,"ContextExt","","",null,null],[10,"changed","","",40,{"inputs":[{"name":"self"}],"output":null}],[10,"get_base_dir","","",40,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[10,"get_base_gravity","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[10,"get_font_description","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_font_map","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_gravity","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[10,"get_gravity_hint","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gravityhint"}}],[10,"get_language","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["language"],"name":"option"}}],[10,"get_matrix","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["matrix"],"name":"option"}}],[10,"get_metrics","","",40,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"generics":["fontmetrics"],"name":"option"}}],[10,"get_serial","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"list_families","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["fontfamily"],"name":"vec"}}],[10,"load_font","","",40,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":{"generics":["font"],"name":"option"}}],[10,"load_fontset","","",40,{"inputs":[{"name":"self"},{"name":"fontdescription"},{"name":"language"}],"output":{"generics":["fontset"],"name":"option"}}],[10,"set_base_dir","","",40,{"inputs":[{"name":"self"},{"name":"direction"}],"output":null}],[10,"set_base_gravity","","",40,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[10,"set_font_description","","",40,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":null}],[10,"set_font_map","","",40,{"inputs":[{"name":"self"},{"name":"fontmap"}],"output":null}],[10,"set_gravity_hint","","",40,{"inputs":[{"name":"self"},{"name":"gravityhint"}],"output":null}],[10,"set_language","","",40,{"inputs":[{"name":"self"},{"name":"language"}],"output":null}],[10,"set_matrix","","",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"FontExt","","",null,null],[10,"describe","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"describe_with_absolute_size","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"find_shaper","","",41,{"inputs":[{"name":"self"},{"name":"language"},{"name":"u32"}],"output":{"generics":["engineshape"],"name":"option"}}],[10,"get_coverage","","",41,{"inputs":[{"name":"self"},{"name":"language"}],"output":{"generics":["coverage"],"name":"option"}}],[10,"get_font_map","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_glyph_extents","","",41,null],[10,"get_metrics","","",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["fontmetrics"],"name":"option"}}],[8,"FontFaceExt","","",null,null],[10,"describe","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_face_name","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"is_synthesized","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_sizes","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[8,"FontFamilyExt","","",null,null],[10,"get_name","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"is_monospace","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_faces","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["fontface"],"name":"vec"}}],[8,"FontMapExt","","",null,null],[10,"changed","","",44,{"inputs":[{"name":"self"}],"output":null}],[10,"create_context","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_serial","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_shape_engine_type","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"list_families","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["fontfamily"],"name":"vec"}}],[10,"load_font","","",44,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontdescription"}],"output":{"generics":["font"],"name":"option"}}],[10,"load_fontset","","",44,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontdescription"},{"name":"language"}],"output":{"generics":["fontset"],"name":"option"}}],[8,"FontsetExt","","",null,null],[10,"get_font","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["font"],"name":"option"}}],[10,"get_metrics","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["fontmetrics"],"name":"option"}}],[8,"LayoutExt","","",null,null],[10,"context_changed","","",46,{"inputs":[{"name":"self"}],"output":null}],[10,"copy","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_alignment","","",46,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[10,"get_attributes","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[10,"get_auto_dir","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_baseline","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_character_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_context","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_cursor_pos","","",46,null],[10,"get_ellipsize","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_extents","","",46,null],[10,"get_font_description","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_height","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_indent","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_iter","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layoutiter"],"name":"option"}}],[10,"get_justify","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_line","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["layoutline"],"name":"option"}}],[10,"get_line_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_line_readonly","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["layoutline"],"name":"option"}}],[10,"get_lines","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"vec"}}],[10,"get_lines_readonly","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"vec"}}],[10,"get_pixel_extents","","",46,null],[10,"get_pixel_size","","",46,null],[10,"get_serial","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_single_paragraph_mode","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_size","","",46,null],[10,"get_spacing","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tabs","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["tabarray"],"name":"option"}}],[10,"get_text","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_unknown_glyphs_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_width","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_wrap","","",46,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"index_to_line_x","","",46,null],[10,"index_to_pos","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangle"}}],[10,"is_ellipsized","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_wrapped","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"move_cursor_visually","","",46,null],[10,"set_alignment","","",46,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":null}],[10,"set_attributes","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_auto_dir","","",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_ellipsize","","",46,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_font_description","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_height","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_indent","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_justify","","",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_markup","","",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_markup_with_accel","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"name":"char"}}],[10,"set_single_paragraph_mode","","",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_spacing","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tabs","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_text","","",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_width","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_wrap","","",46,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"xy_to_index","","",46,null],[8,"RendererExt","","",null,null],[10,"activate","","",47,{"inputs":[{"name":"self"}],"output":null}],[10,"deactivate","","",47,{"inputs":[{"name":"self"}],"output":null}],[10,"draw_error_underline","","",47,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_glyph","","",47,{"inputs":[{"name":"self"},{"name":"font"},{"name":"glyph"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"draw_glyph_item","","",47,{"inputs":[{"name":"self"},{"name":"p"},{"name":"glyphitem"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_glyphs","","",47,{"inputs":[{"name":"self"},{"name":"font"},{"name":"glyphstring"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_layout","","",47,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_layout_line","","",47,{"inputs":[{"name":"self"},{"name":"layoutline"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_rectangle","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"draw_trapezoid","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"get_alpha","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":{"name":"u16"}}],[10,"get_color","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":{"generics":["color"],"name":"option"}}],[10,"get_layout","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_line","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["layoutline"],"name":"option"}}],[10,"get_matrix","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["matrix"],"name":"option"}}],[10,"part_changed","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"}],"output":null}],[10,"set_alpha","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"u16"}],"output":null}],[10,"set_color","","",47,{"inputs":[{"name":"self"},{"name":"renderpart"},{"name":"p"}],"output":null}],[10,"set_matrix","","",47,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"new","","Creates an error with supplied error enum variant and message.",52,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"static_type","","",52,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[4,"Alignment"],[4,"AttrType"],[4,"BidiType"],[4,"CoverageLevel"],[4,"Direction"],[4,"EllipsizeMode"],[4,"Gravity"],[4,"GravityHint"],[4,"RenderPart"],[4,"Script"],[4,"Stretch"],[4,"Style"],[4,"TabAlign"],[4,"Underline"],[4,"Variant"],[4,"Weight"],[4,"WrapMode"],[3,"Context"],[3,"EngineShape"],[3,"Font"],[3,"FontFace"],[3,"FontFamily"],[3,"FontMap"],[3,"Fontset"],[3,"Layout"],[3,"Renderer"],[3,"AttrList"],[3,"Attribute"],[3,"Color"],[3,"Coverage"],[3,"FontDescription"],[3,"FontMetrics"],[3,"GlyphItem"],[3,"GlyphItemIter"],[3,"GlyphString"],[3,"LayoutIter"],[3,"LayoutLine"],[3,"Matrix"],[3,"TabArray"],[3,"FontMask"],[8,"ContextExt"],[8,"FontExt"],[8,"FontFaceExt"],[8,"FontFamilyExt"],[8,"FontMapExt"],[8,"FontsetExt"],[8,"LayoutExt"],[8,"RendererExt"],[3,"AttrClass"],[3,"Item"],[3,"Language"],[3,"Rectangle"],[3,"Error"]]};
searchIndex["gdk_pixbuf"] = {"doc":"","items":[[8,"Cast","gdk_pixbuf","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[3,"Object","","The base class in the object hierarchy.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"Pixbuf","","This is the main structure in the gdk-pixbuf library. It is used to represent images. It contains information about the image's pixel data, its color space, bits per sample, width and height, and the rowstride (the number of bytes between the start of one row and the start of the next).",null,null],[3,"PixbufLoader","","The `PixbufLoader` struct contains only private fields.",null,null],[3,"PixbufSimpleAnim","","An opaque struct representing a simple animation.",null,null],[3,"PixbufFormat","","",null,null],[3,"PixbufAnimation","","An opaque struct representing an animation.",null,null],[3,"PixbufAnimationIter","","An opaque struct representing an iterator which points to a certain position in an animation.",null,null],[4,"Colorspace","","",null,null],[13,"Rgb","","",5,null],[4,"InterpType","","",null,null],[13,"Nearest","","",6,null],[13,"Tiles","","",6,null],[13,"Bilinear","","",6,null],[13,"Hyper","","",6,null],[4,"PixbufAlphaMode","","",null,null],[13,"Bilevel","","",7,null],[13,"Full","","",7,null],[4,"PixbufError","","",null,null],[13,"CorruptImage","","",8,null],[13,"InsufficientMemory","","",8,null],[13,"BadOption","","",8,null],[13,"UnknownType","","",8,null],[13,"UnsupportedOperation","","",8,null],[13,"Failed","","",8,null],[13,"IncompleteAnimation","","",8,null],[4,"PixbufRotation","","",null,null],[13,"None","","",9,null],[13,"Counterclockwise","","",9,null],[13,"Upsidedown","","",9,null],[13,"Clockwise","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"pixbuf"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Pixbuf` structure and allocates a buffer for it. The buffer has an optimal rowstride. Note that the buffer is not cleared; you will have to fill it completely yourself. ## `colorspace` Color space for image ## `has_alpha` Whether the image should have transparency information ## `bits_per_sample` Number of bits per color sample ## `width` Width of image in pixels, must be > 0 ## `height` Height of image in pixels, must be > 0",10,{"inputs":[{"name":"colorspace"},{"name":"bool"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"pixbuf"}}],[11,"new_from_bytes","","Creates a new `Pixbuf` out of in-memory readonly image data. Currently only RGB images with 8 bits per sample are supported. This is the `glib::Bytes` variant of `Pixbuf::new_from_data`.",10,{"inputs":[{"name":"bytes"},{"name":"colorspace"},{"name":"bool"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"pixbuf"}}],[11,"new_from_inline","","Create a `Pixbuf` from a flat representation that is suitable for storing as inline data in a program. This is useful if you want to ship a program with images, but don't want to depend on any external files.",10,null],[11,"new_from_resource","","Creates a new pixbuf by loading an image from an resource.",10,{"inputs":[{"name":"str"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_resource_at_scale","","Creates a new pixbuf by loading an image from an resource.",10,{"inputs":[{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_stream","","Creates a new pixbuf by loading an image from an input stream.",10,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_stream_at_scale","","Creates a new pixbuf by loading an image from an input stream.",10,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"bool"},{"name":"q"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_xpm_data","","Creates a new pixbuf by parsing XPM data in memory. This data is commonly the result of including an XPM file into a program's C source. ## `data` Pointer to inline XPM data.",10,null],[11,"calculate_rowstride","","",10,{"inputs":[{"name":"colorspace"},{"name":"bool"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"get_formats","","Obtains the available information about the image formats supported by `Pixbuf`.",10,{"inputs":[],"output":{"generics":["pixbufformat"],"name":"vec"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"pixbufloader"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new pixbuf loader object.",11,{"inputs":[],"output":{"name":"pixbufloader"}}],[11,"new_with_mime_type","","Creates a new pixbuf loader object that always attempts to parse image data as if it were an image of mime type `mime_type`, instead of identifying the type automatically. Useful if you want an error if the image isn't the expected mime type, for loading image formats that can't be reliably identified by looking at the data, or if the user manually forces a specific mime type.",11,{"inputs":[{"name":"str"}],"output":{"generics":["pixbufloader","error"],"name":"result"}}],[11,"new_with_type","","Creates a new pixbuf loader object that always attempts to parse image data as if it were an image of type `image_type`, instead of identifying the type automatically. Useful if you want an error if the image isn't the expected type, for loading image formats that can't be reliably identified by looking at the data, or if the user manually forces a specific type.",11,{"inputs":[{"name":"str"}],"output":{"generics":["pixbufloader","error"],"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pixbufsimpleanim"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new, empty animation. ## `width` the width of the animation ## `height` the height of the animation ## `rate` the speed of the animation, in frames per second",12,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f32"}],"output":{"name":"pixbufsimpleanim"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"pixbufformat"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"get_description","","Returns a description of the format.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_extensions","","Returns the filename extensions typically used for files in the given format.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_license","","Returns information about the license of the image loader for the format. The returned string should be a shorthand for a wellknown license, e.g. \"LGPL\", \"GPL\", \"QPL\", \"GPL/QPL\", or \"other\" to indicate some other license. This string should be freed with `g_free` when it's no longer needed.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_mime_types","","Returns the mime types supported by the format.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_name","","Returns the name of the format.",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"is_disabled","","Returns whether this image format is disabled. See `PixbufFormat::set_disabled`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_save_option_supported","","Returns `true` if the save option specified by `option_key` is supported when saving a pixbuf using the module implementing `self`. See `PixbufExt::save` for more information about option keys.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_scalable","","Returns whether this image format is scalable. If a file is in a scalable format, it is preferable to load it at the desired size, rather than loading it at the default size and scaling the resulting pixbuf to the desired size.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","Returns whether pixbufs can be saved in the given format.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_disabled","","Disables or enables an image format. If a format is disabled, gdk-pixbuf won't use the image loader for this format to load images. Applications can use this to avoid using image loaders with an inappropriate license, see `PixbufFormat::get_license`. ## `disabled` `true` to disable the format `self`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"colorspace"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"colorspace"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"colorspace"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"interptype"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"interptype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"interptype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",6,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",6,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"pixbufalphamode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"pixbufalphamode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"pixbufalphamode"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",7,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",7,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pixbuferror"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"pixbuferror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"pixbuferror"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"domain","","",8,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",8,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",8,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",8,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pixbufrotation"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"pixbufrotation"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"pixbufrotation"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pixbufanimationiter"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"advance","","",14,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"get_pixbuf","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pixbuf"}}],[11,"get_delay_time","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"on_currently_loading_frame","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"pixbufanimation"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_from_file","","Creates a new animation by loading it from a file. The file format is detected automatically. If the file's format does not support multi-frame images, then an animation with a single frame will be created. Possible errors are in the `GDK_PIXBUF_ERROR` and `G_FILE_ERROR` domains. ## `filename` Name of file to load, in the GLib file name encoding",15,{"inputs":[{"name":"t"}],"output":{"generics":["pixbufanimation","error"],"name":"result"}}],[11,"new_from_resource","","Creates a new pixbuf animation by loading an image from an resource.",15,{"inputs":[{"name":"str"}],"output":{"generics":["pixbufanimation","error"],"name":"result"}}],[11,"new_from_vec","","",10,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"colorspace"},{"name":"bool"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"pixbuf"}}],[11,"new_from_file","","Creates a new pixbuf by loading an image from a file. The file format is detected automatically. If `None` is returned, then `error` will be set. Possible errors are in the `GDK_PIXBUF_ERROR` and `G_FILE_ERROR` domains. ## `filename` Name of file to load, in the GLib file name encoding",10,{"inputs":[{"name":"t"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_file_at_size","","Creates a new pixbuf by loading an image from a file. The file format is detected automatically. If `None` is returned, then `error` will be set. Possible errors are in the `GDK_PIXBUF_ERROR` and `G_FILE_ERROR` domains.",10,{"inputs":[{"name":"t"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_file_at_scale","","Creates a new pixbuf by loading an image from a file. The file format is detected automatically. If `None` is returned, then `error` will be set. Possible errors are in the `GDK_PIXBUF_ERROR` and `G_FILE_ERROR` domains. The image will be scaled to fit in the requested size, optionally preserving the image's aspect ratio.",10,{"inputs":[{"name":"t"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[11,"new_from_stream_async","","Creates a new pixbuf by asynchronously loading an image from an input stream.",10,{"inputs":[{"name":"p"},{"name":"q"},{"name":"r"}],"output":null}],[11,"new_from_stream_at_scale_async","","Creates a new pixbuf by asynchronously loading an image from an input stream.",10,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"bool"},{"name":"q"},{"name":"r"}],"output":null}],[11,"get_pixels","","",10,null],[11,"put_pixel","","",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"get_file_info","","Parses an image file far enough to determine its format and size. ## `filename` The name of the file to identify. ## `width` Return location for the width of the  image, or `None` ## `height` Return location for the height of the  image, or `None`",10,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"get_file_info_async","","Asynchronously parses an image file far enough to determine its format and size.",10,{"inputs":[{"name":"t"},{"name":"p"},{"name":"q"}],"output":null}],[11,"save_to_bufferv","","",10,null],[11,"save_to_streamv","","",10,null],[11,"savev","","",10,null],[0,"prelude","","Traits inteded for blanket imports.",null,null],[8,"PixbufExt","gdk_pixbuf::prelude","Trait containing all `Pixbuf` methods.",null,null],[10,"add_alpha","","Takes an existing pixbuf and adds an alpha channel to it. If the existing pixbuf already had an alpha channel, the channel values are copied from the original; otherwise, the alpha channel is initialized to 255 (full opacity).",16,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"apply_embedded_orientation","","Takes an existing pixbuf and checks for the presence of an associated \"orientation\" option, which may be provided by the jpeg loader (which reads the exif orientation tag) or the tiff loader (which reads the tiff orientation tag, and compensates it for the partial transforms performed by libtiff). If an orientation option/tag is present, the appropriate transform will be performed so that the pixbuf is oriented correctly.",16,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"composite","","Creates a transformation of the source image `self` by scaling by `scale_x` and `scale_y` then translating by `offset_x` and `offset_y`. This gives an image in the coordinates of the destination pixbuf. The rectangle (`dest_x`, `dest_y`, `dest_width`, `dest_height`) is then alpha blended onto the corresponding rectangle of the original destination image.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"interptype"},{"name":"i32"}],"output":null}],[10,"composite_color","","Creates a transformation of the source image `self` by scaling by `scale_x` and `scale_y` then translating by `offset_x` and `offset_y`, then alpha blends the rectangle (`dest_x` ,`dest_y`, `dest_width`, `dest_height`) of the resulting image with a checkboard of the colors `color1` and `color2` and renders it onto the destination image.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"interptype"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"composite_color_simple","","Creates a new `Pixbuf` by scaling `self` to `dest_width` x `dest_height` and alpha blending the result with a checkboard of colors `color1` and `color2`. ## `dest_width` the width of destination image ## `dest_height` the height of destination image ## `interp_type` the interpolation type for the transformation. ## `overall_alpha` overall alpha for source image (0..255) ## `check_size` the size of checks in the checkboard (must be a power of two) ## `color1` the color of check at upper left ## `color2` the color of the other check",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"interptype"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"copy","","Creates a new `Pixbuf` with a copy of the information in the specified `self`. Note that this does not copy the options set on the original `Pixbuf`, use `PixbufExt::copy_options` for this.",16,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"copy_area","","Copies a rectangular area from `self` to `dest_pixbuf`. Conversion of pixbuf formats is done automatically.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"copy_options","","Copy the key/value pair options attached to a `Pixbuf` to another. This is useful to keep original metadata after having manipulated a file. However be careful to remove metadata which you've already applied, such as the \"orientation\" option after rotating the image.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":{"name":"bool"}}],[10,"fill","","Clears a pixbuf to the given RGBA value, converting the RGBA value into the pixbuf's pixel format. The alpha will be ignored if the pixbuf doesn't have an alpha channel. ## `pixel` RGBA pixel to clear to  (0xffffffff is opaque white, 0x00000000 transparent black)",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"flip","","Flips a pixbuf horizontally or vertically and returns the result in a new pixbuf. ## `horizontal` `true` to flip horizontally, `false` to flip vertically",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_bits_per_sample","","Queries the number of bits per color sample in a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_byte_length","","Returns the length of the pixel data, in bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_colorspace","","Queries the color space of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"colorspace"}}],[10,"get_has_alpha","","Queries whether a pixbuf has an alpha channel (opacity information).",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_height","","Queries the height of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_channels","","Queries the number of channels of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_option","","Looks up `key` in the list of options that may have been attached to the `self` when it was loaded, or that may have been attached by another function using `PixbufExt::set_option`.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_rowstride","","Queries the rowstride of a pixbuf, which is the number of bytes between the start of a row and the start of the next row.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_width","","Queries the width of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"new_subpixbuf","","Creates a new pixbuf which represents a sub-region of `self`. The new pixbuf shares its pixels with the original pixbuf, so writing to one affects both. The new pixbuf holds a reference to `self`, so `self` will not be finalized until the new pixbuf is finalized.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"read_pixel_bytes","","Feature: `v2_32`",16,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"remove_option","","Remove the key/value pair option attached to a `Pixbuf`.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"rotate_simple","","Rotates a pixbuf by a multiple of 90 degrees, and returns the result in a new pixbuf.",16,{"inputs":[{"name":"self"},{"name":"pixbufrotation"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"saturate_and_pixelate","","Modifies saturation and optionally pixelates `self`, placing the result in `dest`. `self` and `dest` may be the same pixbuf with no ill effects. If `saturation` is 1.0 then saturation is not changed. If it's less than 1.0, saturation is reduced (the image turns toward grayscale); if greater than 1.0, saturation is increased (the image gets more vivid colors). If `pixelate` is `true`, then pixels are faded in a checkerboard pattern to create a pixelated image. `self` and `dest` must have the same image format, size, and rowstride. ## `dest` place to write modified version of `self` ## `saturation` saturation factor ## `pixelate` whether to pixelate",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"f32"},{"name":"bool"}],"output":null}],[10,"scale","","Creates a transformation of the source image `self` by scaling by `scale_x` and `scale_y` then translating by `offset_x` and `offset_y`, then renders the rectangle (`dest_x`, `dest_y`, `dest_width`, `dest_height`) of the resulting image onto the destination image replacing the previous contents.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"interptype"}],"output":null}],[10,"scale_simple","","Create a new `Pixbuf` containing a copy of `self` scaled to `dest_width` x `dest_height`. Leaves `self` unaffected. `interp_type` should be `InterpType::Nearest` if you want maximum speed (but when scaling down `InterpType::Nearest` is usually unusably ugly). The default `interp_type` should be `InterpType::Bilinear` which offers reasonable quality and speed.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"interptype"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_option","","Attaches a key/value pair as an option to a `Pixbuf`. If `key` already exists in the list of options attached to `self`, the new value is ignored and `false` is returned. ## `key` a nul-terminated string. ## `value` a nul-terminated string.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_property_pixel_bytes","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"connect_property_bits_per_sample_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_colorspace_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_alpha_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_channels_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixel_bytes_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rowstride_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PixbufLoaderExt","","Trait containing all `PixbufLoader` methods.",null,null],[10,"close","","Informs a pixbuf loader that no further writes with `PixbufLoaderExt::write` will occur, so that it can free its internal loading structures. Also, tries to parse any data that hasn't yet been parsed; if the remaining data is partial or corrupt, an error will be returned. If `false` is returned, `error` will be set to an error from the `GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains. If you're just cancelling a load rather than expecting it to be finished, passing `None` for `error` to ignore it is reasonable.",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_animation","","Queries the `PixbufAnimation` that a pixbuf loader is currently creating. In general it only makes sense to call this function after the \"area-prepared\" signal has been emitted by the loader. If the loader doesn't have enough bytes yet (hasn't emitted the \"area-prepared\" signal) this function will return `None`.",17,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufanimation"],"name":"option"}}],[10,"get_format","","Obtains the available information about the format of the currently loading image file.",17,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufformat"],"name":"option"}}],[10,"get_pixbuf","","Queries the `Pixbuf` that a pixbuf loader is currently creating. In general it only makes sense to call this function after the \"area-prepared\" signal has been emitted by the loader; this means that enough data has been read to know the size of the image that will be allocated. If the loader has not received enough data via `PixbufLoaderExt::write`, then this function returns `None`. The returned pixbuf will be the same in all future calls to the loader, so simply calling `gobject::Object::ref` should be sufficient to continue using it. Additionally, if the loader is an animation, it will return the \"static image\" of the animation (see `PixbufAnimationExt::get_static_image`).",17,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_size","","Causes the image to be scaled while it is loaded. The desired image size can be determined relative to the original size of the image by calling `PixbufLoaderExt::set_size` from a signal handler for the ::size-prepared signal.",17,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"write","","This will cause a pixbuf loader to parse the next `count` bytes of an image. It will return `true` if the data was loaded successfully, and `false` if an error occurred. In the latter case, the loader will be closed, and will not accept further writes. If `false` is returned, `error` will be set to an error from the `GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains. ## `buf` Pointer to image data. ## `count` Length of the `buf` buffer in bytes.",17,null],[10,"write_bytes","","This will cause a pixbuf loader to parse a buffer inside a `glib::Bytes` for an image. It will return `true` if the data was loaded successfully, and `false` if an error occurred. In the latter case, the loader will be closed, and will not accept further writes. If `false` is returned, `error` will be set to an error from the `GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains.",17,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[10,"connect_area_prepared","","This signal is emitted when the pixbuf loader has allocated the pixbuf in the desired size. After this signal is emitted, applications can call `PixbufLoaderExt::get_pixbuf` to fetch the partially-loaded pixbuf.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_area_updated","","This signal is emitted when a significant area of the image being loaded has been updated. Normally it means that a complete scanline has been read in, but it could be a different area as well. Applications can use this signal to know when to repaint areas of an image that is being loaded. ## `x` X offset of upper-left corner of the updated area. ## `y` Y offset of upper-left corner of the updated area. ## `width` Width of updated area. ## `height` Height of updated area.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_closed","","This signal is emitted when `PixbufLoaderExt::close` is called. It can be used by different parts of an application to receive notification when an image loader is closed by the code that drives it.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_size_prepared","","This signal is emitted when the pixbuf loader has been fed the initial amount of data that is required to figure out the size of the image that it will create. Applications can call `PixbufLoaderExt::set_size` in response to this signal to set the desired size to which the image should be scaled. ## `width` the original width of the image ## `height` the original height of the image",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PixbufSimpleAnimExt","","Trait containing all `PixbufSimpleAnim` methods.",null,null],[10,"add_frame","","Adds a new frame to `self`. The `pixbuf` must have the dimensions specified when the animation was constructed. ## `pixbuf` the pixbuf to add",18,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"get_loop","","Gets whether `self` should loop indefinitely when it reaches the end.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_loop","","Sets whether `self` should loop indefinitely when it reaches the end. ## `loop_` whether to loop the animation",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_loop_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PixbufAnimationExt","","Trait containing all `PixbufAnimation` methods.",null,null],[10,"get_width","","Queries the width of the bounding box of a pixbuf animation.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_height","","Queries the height of the bounding box of a pixbuf animation.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_iter","","Get an iterator for displaying an animation. The iterator provides the frames that should be displayed at a given time. It should be freed after use with `gobject::Object::unref`.",19,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"pixbufanimationiter"}}],[10,"is_static_image","","If you load a file with `PixbufAnimation::new_from_file` and it turns out to be a plain, unanimated image, then this function will return `true`. Use `PixbufAnimationExt::get_static_image` to retrieve the image.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_static_image","","If an animation is really just a plain image (has only one frame), this function returns that image. If the animation is an animation, this function returns a reasonable thing to display as a static unanimated image, which might be the first frame, or something more sophisticated. If an animation hasn't loaded any frames yet, this function will return `None`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[8,"PixbufExt","gdk_pixbuf","Trait containing all `Pixbuf` methods.",null,null],[10,"add_alpha","","Takes an existing pixbuf and adds an alpha channel to it. If the existing pixbuf already had an alpha channel, the channel values are copied from the original; otherwise, the alpha channel is initialized to 255 (full opacity).",16,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"apply_embedded_orientation","","Takes an existing pixbuf and checks for the presence of an associated \"orientation\" option, which may be provided by the jpeg loader (which reads the exif orientation tag) or the tiff loader (which reads the tiff orientation tag, and compensates it for the partial transforms performed by libtiff). If an orientation option/tag is present, the appropriate transform will be performed so that the pixbuf is oriented correctly.",16,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"composite","","Creates a transformation of the source image `self` by scaling by `scale_x` and `scale_y` then translating by `offset_x` and `offset_y`. This gives an image in the coordinates of the destination pixbuf. The rectangle (`dest_x`, `dest_y`, `dest_width`, `dest_height`) is then alpha blended onto the corresponding rectangle of the original destination image.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"interptype"},{"name":"i32"}],"output":null}],[10,"composite_color","","Creates a transformation of the source image `self` by scaling by `scale_x` and `scale_y` then translating by `offset_x` and `offset_y`, then alpha blends the rectangle (`dest_x` ,`dest_y`, `dest_width`, `dest_height`) of the resulting image with a checkboard of the colors `color1` and `color2` and renders it onto the destination image.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"interptype"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"composite_color_simple","","Creates a new `Pixbuf` by scaling `self` to `dest_width` x `dest_height` and alpha blending the result with a checkboard of colors `color1` and `color2`. ## `dest_width` the width of destination image ## `dest_height` the height of destination image ## `interp_type` the interpolation type for the transformation. ## `overall_alpha` overall alpha for source image (0..255) ## `check_size` the size of checks in the checkboard (must be a power of two) ## `color1` the color of check at upper left ## `color2` the color of the other check",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"interptype"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"copy","","Creates a new `Pixbuf` with a copy of the information in the specified `self`. Note that this does not copy the options set on the original `Pixbuf`, use `PixbufExt::copy_options` for this.",16,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"copy_area","","Copies a rectangular area from `self` to `dest_pixbuf`. Conversion of pixbuf formats is done automatically.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"copy_options","","Copy the key/value pair options attached to a `Pixbuf` to another. This is useful to keep original metadata after having manipulated a file. However be careful to remove metadata which you've already applied, such as the \"orientation\" option after rotating the image.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":{"name":"bool"}}],[10,"fill","","Clears a pixbuf to the given RGBA value, converting the RGBA value into the pixbuf's pixel format. The alpha will be ignored if the pixbuf doesn't have an alpha channel. ## `pixel` RGBA pixel to clear to  (0xffffffff is opaque white, 0x00000000 transparent black)",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"flip","","Flips a pixbuf horizontally or vertically and returns the result in a new pixbuf. ## `horizontal` `true` to flip horizontally, `false` to flip vertically",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_bits_per_sample","","Queries the number of bits per color sample in a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_byte_length","","Returns the length of the pixel data, in bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_colorspace","","Queries the color space of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"colorspace"}}],[10,"get_has_alpha","","Queries whether a pixbuf has an alpha channel (opacity information).",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_height","","Queries the height of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_channels","","Queries the number of channels of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_option","","Looks up `key` in the list of options that may have been attached to the `self` when it was loaded, or that may have been attached by another function using `PixbufExt::set_option`.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_rowstride","","Queries the rowstride of a pixbuf, which is the number of bytes between the start of a row and the start of the next row.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_width","","Queries the width of a pixbuf.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"new_subpixbuf","","Creates a new pixbuf which represents a sub-region of `self`. The new pixbuf shares its pixels with the original pixbuf, so writing to one affects both. The new pixbuf holds a reference to `self`, so `self` will not be finalized until the new pixbuf is finalized.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"read_pixel_bytes","","Feature: `v2_32`",16,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"remove_option","","Remove the key/value pair option attached to a `Pixbuf`.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"rotate_simple","","Rotates a pixbuf by a multiple of 90 degrees, and returns the result in a new pixbuf.",16,{"inputs":[{"name":"self"},{"name":"pixbufrotation"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"saturate_and_pixelate","","Modifies saturation and optionally pixelates `self`, placing the result in `dest`. `self` and `dest` may be the same pixbuf with no ill effects. If `saturation` is 1.0 then saturation is not changed. If it's less than 1.0, saturation is reduced (the image turns toward grayscale); if greater than 1.0, saturation is increased (the image gets more vivid colors). If `pixelate` is `true`, then pixels are faded in a checkerboard pattern to create a pixelated image. `self` and `dest` must have the same image format, size, and rowstride. ## `dest` place to write modified version of `self` ## `saturation` saturation factor ## `pixelate` whether to pixelate",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"f32"},{"name":"bool"}],"output":null}],[10,"scale","","Creates a transformation of the source image `self` by scaling by `scale_x` and `scale_y` then translating by `offset_x` and `offset_y`, then renders the rectangle (`dest_x`, `dest_y`, `dest_width`, `dest_height`) of the resulting image onto the destination image replacing the previous contents.",16,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"interptype"}],"output":null}],[10,"scale_simple","","Create a new `Pixbuf` containing a copy of `self` scaled to `dest_width` x `dest_height`. Leaves `self` unaffected. `interp_type` should be `InterpType::Nearest` if you want maximum speed (but when scaling down `InterpType::Nearest` is usually unusably ugly). The default `interp_type` should be `InterpType::Bilinear` which offers reasonable quality and speed.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"interptype"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_option","","Attaches a key/value pair as an option to a `Pixbuf`. If `key` already exists in the list of options attached to `self`, the new value is ignored and `false` is returned. ## `key` a nul-terminated string. ## `value` a nul-terminated string.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_property_pixel_bytes","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"connect_property_bits_per_sample_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_colorspace_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_alpha_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_channels_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixel_bytes_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rowstride_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PixbufLoaderExt","","Trait containing all `PixbufLoader` methods.",null,null],[10,"close","","Informs a pixbuf loader that no further writes with `PixbufLoaderExt::write` will occur, so that it can free its internal loading structures. Also, tries to parse any data that hasn't yet been parsed; if the remaining data is partial or corrupt, an error will be returned. If `false` is returned, `error` will be set to an error from the `GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains. If you're just cancelling a load rather than expecting it to be finished, passing `None` for `error` to ignore it is reasonable.",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_animation","","Queries the `PixbufAnimation` that a pixbuf loader is currently creating. In general it only makes sense to call this function after the \"area-prepared\" signal has been emitted by the loader. If the loader doesn't have enough bytes yet (hasn't emitted the \"area-prepared\" signal) this function will return `None`.",17,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufanimation"],"name":"option"}}],[10,"get_format","","Obtains the available information about the format of the currently loading image file.",17,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufformat"],"name":"option"}}],[10,"get_pixbuf","","Queries the `Pixbuf` that a pixbuf loader is currently creating. In general it only makes sense to call this function after the \"area-prepared\" signal has been emitted by the loader; this means that enough data has been read to know the size of the image that will be allocated. If the loader has not received enough data via `PixbufLoaderExt::write`, then this function returns `None`. The returned pixbuf will be the same in all future calls to the loader, so simply calling `gobject::Object::ref` should be sufficient to continue using it. Additionally, if the loader is an animation, it will return the \"static image\" of the animation (see `PixbufAnimationExt::get_static_image`).",17,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_size","","Causes the image to be scaled while it is loaded. The desired image size can be determined relative to the original size of the image by calling `PixbufLoaderExt::set_size` from a signal handler for the ::size-prepared signal.",17,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"write","","This will cause a pixbuf loader to parse the next `count` bytes of an image. It will return `true` if the data was loaded successfully, and `false` if an error occurred. In the latter case, the loader will be closed, and will not accept further writes. If `false` is returned, `error` will be set to an error from the `GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains. ## `buf` Pointer to image data. ## `count` Length of the `buf` buffer in bytes.",17,null],[10,"write_bytes","","This will cause a pixbuf loader to parse a buffer inside a `glib::Bytes` for an image. It will return `true` if the data was loaded successfully, and `false` if an error occurred. In the latter case, the loader will be closed, and will not accept further writes. If `false` is returned, `error` will be set to an error from the `GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains.",17,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[10,"connect_area_prepared","","This signal is emitted when the pixbuf loader has allocated the pixbuf in the desired size. After this signal is emitted, applications can call `PixbufLoaderExt::get_pixbuf` to fetch the partially-loaded pixbuf.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_area_updated","","This signal is emitted when a significant area of the image being loaded has been updated. Normally it means that a complete scanline has been read in, but it could be a different area as well. Applications can use this signal to know when to repaint areas of an image that is being loaded. ## `x` X offset of upper-left corner of the updated area. ## `y` Y offset of upper-left corner of the updated area. ## `width` Width of updated area. ## `height` Height of updated area.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_closed","","This signal is emitted when `PixbufLoaderExt::close` is called. It can be used by different parts of an application to receive notification when an image loader is closed by the code that drives it.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_size_prepared","","This signal is emitted when the pixbuf loader has been fed the initial amount of data that is required to figure out the size of the image that it will create. Applications can call `PixbufLoaderExt::set_size` in response to this signal to set the desired size to which the image should be scaled. ## `width` the original width of the image ## `height` the original height of the image",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PixbufSimpleAnimExt","","Trait containing all `PixbufSimpleAnim` methods.",null,null],[10,"add_frame","","Adds a new frame to `self`. The `pixbuf` must have the dimensions specified when the animation was constructed. ## `pixbuf` the pixbuf to add",18,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"get_loop","","Gets whether `self` should loop indefinitely when it reaches the end.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_loop","","Sets whether `self` should loop indefinitely when it reaches the end. ## `loop_` whether to loop the animation",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_loop_notify","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PixbufAnimationExt","","Trait containing all `PixbufAnimation` methods.",null,null],[10,"get_width","","Queries the width of the bounding box of a pixbuf animation.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_height","","Queries the height of the bounding box of a pixbuf animation.",19,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_iter","","Get an iterator for displaying an animation. The iterator provides the frames that should be displayed at a given time. It should be freed after use with `gobject::Object::unref`.",19,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"pixbufanimationiter"}}],[10,"is_static_image","","If you load a file with `PixbufAnimation::new_from_file` and it turns out to be a plain, unanimated image, then this function will return `true`. Use `PixbufAnimationExt::get_static_image` to retrieve the image.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_static_image","","If an animation is really just a plain image (has only one frame), this function returns that image. If the animation is an animation, this function returns a reasonable thing to display as a static unanimated image, which might be the first frame, or something more sophisticated. If an animation hasn't loaded any frames yet, this function will return `None`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"to_glib_none","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"from_glib_none","","",20,null],[11,"from_glib_none","","",20,null],[11,"to_value","","",20,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",20,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",23,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",23,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",23,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",23,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",23,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from_value","","",4,{"inputs":[{"name":"value"}],"output":{"name":"type"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",4,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"from_type","","Creates a new `Value` that is initialized with `type_`",20,{"inputs":[{"name":"type"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",20,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T` or is a sub-type of `T`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",20,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",20,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",20,null],[11,"from_glib_container_num_as_vec","","",20,null],[11,"from_glib_full_num_as_vec","","",20,null],[11,"from_glib_none_num_as_vec","","",20,null],[11,"from_glib_container_num_as_vec","","",20,null],[11,"from_glib_full_num_as_vec","","",20,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_value","","",4,null],[11,"from_value_optional","","",4,{"inputs":[{"name":"value"}],"output":{"generics":["type"],"name":"option"}}],[11,"hash","","",21,null],[11,"to_glib_none_mut","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"drop","","",20,null],[11,"from_glib_full","","",20,null],[11,"to_glib_none_from_slice","","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_glib_none_as_vec","","",20,null],[11,"from_glib_container_as_vec","","",20,null],[11,"from_glib_full_as_vec","","",20,null],[11,"from_glib_none_as_vec","","",20,null],[11,"from_glib_container_as_vec","","",20,null],[11,"from_glib_full_as_vec","","",20,null],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"uninitialized","","",20,{"inputs":[],"output":{"name":"value"}}],[11,"new","","Creates an error with supplied error enum variant and message.",22,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",22,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",23,null],[11,"set_none","","Sets the value to `None`.",23,null],[11,"set_some","","Sets the value.",23,null],[11,"into_send_value","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[4,"Colorspace"],[4,"InterpType"],[4,"PixbufAlphaMode"],[4,"PixbufError"],[4,"PixbufRotation"],[3,"Pixbuf"],[3,"PixbufLoader"],[3,"PixbufSimpleAnim"],[3,"PixbufFormat"],[3,"PixbufAnimationIter"],[3,"PixbufAnimation"],[8,"PixbufExt"],[8,"PixbufLoaderExt"],[8,"PixbufSimpleAnimExt"],[8,"PixbufAnimationExt"],[3,"Value"],[3,"Object"],[3,"Error"],[3,"TypedValue"]]};
searchIndex["gdk"] = {"doc":"","items":[[3,"Color","gdk","",null,null],[12,"pixel","","",0,null],[12,"red","","",0,null],[12,"green","","",0,null],[12,"blue","","",0,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[3,"AppLaunchContext","","`AppLaunchContext` is an implementation of `gio::AppLaunchContext` that handles launching an application in a graphical context. It provides startup notification and allows to launch applications on a specific screen or workspace.",null,null],[3,"Cursor","","A `Cursor` represents a cursor. Its contents are private.",null,null],[3,"Device","","The `Device` object represents a single input device, such as a keyboard, a mouse, a touchpad, etc.",null,null],[3,"DeviceManager","","In addition to a single pointer and keyboard for user interface input, GDK contains support for a variety of input devices, including graphics tablets, touchscreens and multiple pointers/keyboards interacting simultaneously with the user interface. Such input devices often have additional features, such as sub-pixel positioning information and additional device-dependent information.",null,null],[3,"DeviceTool","","Feature: `v3_22`",null,null],[3,"Display","","`Display` objects purpose are two fold:",null,null],[3,"DisplayManager","","The purpose of the `DisplayManager` singleton object is to offer notification when displays appear or disappear or the default display changes.",null,null],[3,"DragContext","","Implements",null,null],[3,"DrawingContext","","`DrawingContext` is an object that represents the current drawing state of a `Window`.",null,null],[3,"FrameClock","","A `FrameClock` tells the application when to update and repaint a window. This may be synced to the vertical refresh rate of the monitor, for example. Even when the frame clock uses a simple timer rather than a hardware-based vertical sync, the frame clock helps because it ensures everything paints at the same time (reducing the total number of frames). The frame clock can also automatically stop painting when it knows the frames will not be visible, or scale back animation framerates.",null,null],[3,"GLContext","","`GLContext` is an object representing the platform-specific OpenGL drawing context.",null,null],[3,"Monitor","","`Monitor` objects represent the individual outputs that are associated with a `Display`. `Display` has APIs to enumerate monitors with `gdk_display_get_monitors` and to find particular monitors with `DisplayExt::get_primary_monitor` or `DisplayExt::get_monitor_at_window`.",null,null],[3,"Screen","","`Screen` objects are the GDK representation of the screen on which windows can be displayed and on which the pointer moves. X originally identified screens with physical screens, but nowadays it is more common to have a single `Screen` which combines several physical monitors (see `ScreenExt::get_n_monitors`).",null,null],[3,"Seat","","The `Seat` object represents a collection of input devices that belong to a user.",null,null],[3,"Visual","","A `Visual` contains information about a particular visual.",null,null],[3,"Window","","Implements",null,null],[3,"FrameTimings","","A `FrameTimings` object holds timing information for a single frame of the application’s displays. To retrieve `FrameTimings` objects, use `FrameClockExt::get_timings` or `FrameClockExt::get_current_timings`. The information in `FrameTimings` is useful for precise synchronization of video with the event or audio streams, and for measuring quality metrics for the application’s display, such as latency and jitter.",null,null],[3,"AnchorHints","","",null,null],[3,"AxisFlags","","",null,null],[3,"DragAction","","",null,null],[3,"EventMask","","",null,null],[3,"FrameClockPhase","","",null,null],[3,"ModifierType","","",null,null],[3,"SeatCapabilities","","",null,null],[3,"WMDecoration","","",null,null],[3,"WMFunction","","",null,null],[3,"WindowHints","","",null,null],[3,"WindowState","","",null,null],[3,"Atom","","",null,null],[3,"Event","","A generic GDK event.",null,null],[3,"EventButton","","Used for button press and button release events. The `type` field will be one of `EventType::ButtonPress`, `EventType::2buttonPress`, `EventType::3buttonPress` or `EventType::ButtonRelease`,",null,null],[3,"EventConfigure","","Generated when a window size or position has changed.",null,null],[3,"EventCrossing","","Generated when the pointer enters or leaves a window.",null,null],[3,"EventDND","","Generated during DND operations.",null,null],[3,"EventExpose","","Generated when all or part of a window becomes visible and needs to be redrawn.",null,null],[3,"EventFocus","","Describes a change of keyboard focus.",null,null],[3,"EventGrabBroken","","Generated when a pointer or keyboard grab is broken. On X11, this happens when the grab window becomes unviewable (i.e. it or one of its ancestors is unmapped), or if the same application grabs the pointer or keyboard again. Note that implicit grabs (which are initiated by button presses) can also cause `EventGrabBroken` events.",null,null],[3,"EventKey","","Describes a key press or key release event.",null,null],[3,"EventMotion","","Generated when the pointer moves.",null,null],[3,"EventOwnerChange","","Generated when the owner of a selection changes. On X11, this information is only available if the X server supports the XFIXES extension.",null,null],[3,"EventProperty","","Describes a property change on a window.",null,null],[3,"EventProximity","","Proximity events are generated when using GDK’s wrapper for the XInput extension. The XInput extension is an add-on for standard X that allows you to use nonstandard devices such as graphics tablets. A proximity event indicates that the stylus has moved in or out of contact with the tablet, or perhaps that the user’s finger has moved in or out of contact with a touch screen.",null,null],[3,"EventScroll","","Generated from button presses for the buttons 4 to 7. Wheel mice are usually configured to generate button press events for buttons 4 and 5 when the wheel is turned.",null,null],[3,"EventSelection","","Generated when a selection is requested or ownership of a selection is taken over by another client application.",null,null],[3,"EventSetting","","Generated when a setting is modified.",null,null],[3,"EventTouch","","Used for touch events. `type` field will be one of `EventType::TouchBegin`, `EventType::TouchUpdate`, `EventType::TouchEnd` or `EventType::TouchCancel`.",null,null],[3,"EventVisibility","","`[Deprecated since 3.12]` Generated when the window visibility status has changed.",null,null],[3,"EventWindowState","","Generated when the state of a toplevel window changes.",null,null],[3,"Geometry","","The `Geometry` struct gives the window manager information about a window’s geometry constraints. Normally you would set these on the GTK+ level using `gtk_window_set_geometry_hints`. `GtkWindow` then sets the hints on the `Window` it creates.",null,null],[12,"min_width","","",1,null],[12,"min_height","","",1,null],[12,"max_width","","",1,null],[12,"max_height","","",1,null],[12,"base_width","","",1,null],[12,"base_height","","",1,null],[12,"width_inc","","",1,null],[12,"height_inc","","",1,null],[12,"min_aspect","","",1,null],[12,"max_aspect","","",1,null],[12,"win_gravity","","",1,null],[3,"Rectangle","","Defines the position and size of a rectangle. It is identical to `cairo::RectangleInt`.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[12,"width","","",2,null],[12,"height","","",2,null],[3,"RGBA","","A `RGBA` is used to represent a (possibly translucent) color, in a way that is compatible with cairos notion of color.",null,null],[12,"red","","",3,null],[12,"green","","",3,null],[12,"blue","","",3,null],[12,"alpha","","",3,null],[3,"RgbaParseError","","",null,null],[3,"WindowAttr","","",null,null],[12,"title","","",4,null],[12,"event_mask","","",4,null],[12,"x","","",4,null],[12,"y","","",4,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"wclass","","",4,null],[12,"visual","","",4,null],[12,"window_type","","",4,null],[12,"cursor","","",4,null],[12,"override_redirect","","",4,null],[12,"type_hint","","",4,null],[4,"AxisUse","","An enumeration describing the way in which a device axis (valuator) maps onto the predefined valuator types that GTK+ understands.",null,null],[13,"Ignore","","",5,null],[13,"X","","",5,null],[13,"Y","","",5,null],[13,"Pressure","","",5,null],[13,"Xtilt","","",5,null],[13,"Ytilt","","",5,null],[13,"Wheel","","",5,null],[13,"Distance","","",5,null],[13,"Rotation","","",5,null],[13,"Slider","","",5,null],[13,"Last","","",5,null],[4,"ByteOrder","","A set of values describing the possible byte-orders for storing pixel values in memory.",null,null],[13,"LsbFirst","","",6,null],[13,"MsbFirst","","",6,null],[4,"CrossingMode","","Specifies the crossing mode for `EventCrossing`.",null,null],[13,"Normal","","",7,null],[13,"Grab","","",7,null],[13,"Ungrab","","",7,null],[13,"GtkGrab","","",7,null],[13,"GtkUngrab","","",7,null],[13,"StateChanged","","",7,null],[13,"TouchBegin","","",7,null],[13,"TouchEnd","","",7,null],[13,"DeviceSwitch","","",7,null],[4,"CursorType","","Predefined cursors.",null,null],[13,"XCursor","","",8,null],[13,"Arrow","","",8,null],[13,"BasedArrowDown","","",8,null],[13,"BasedArrowUp","","",8,null],[13,"Boat","","",8,null],[13,"Bogosity","","",8,null],[13,"BottomLeftCorner","","",8,null],[13,"BottomRightCorner","","",8,null],[13,"BottomSide","","",8,null],[13,"BottomTee","","",8,null],[13,"BoxSpiral","","",8,null],[13,"CenterPtr","","",8,null],[13,"Circle","","",8,null],[13,"Clock","","",8,null],[13,"CoffeeMug","","",8,null],[13,"Cross","","",8,null],[13,"CrossReverse","","",8,null],[13,"Crosshair","","",8,null],[13,"DiamondCross","","",8,null],[13,"Dot","","",8,null],[13,"Dotbox","","",8,null],[13,"DoubleArrow","","",8,null],[13,"DraftLarge","","",8,null],[13,"DraftSmall","","",8,null],[13,"DrapedBox","","",8,null],[13,"Exchange","","",8,null],[13,"Fleur","","",8,null],[13,"Gobbler","","",8,null],[13,"Gumby","","",8,null],[13,"Hand1","","",8,null],[13,"Hand2","","",8,null],[13,"Heart","","",8,null],[13,"Icon","","",8,null],[13,"IronCross","","",8,null],[13,"LeftPtr","","",8,null],[13,"LeftSide","","",8,null],[13,"LeftTee","","",8,null],[13,"Leftbutton","","",8,null],[13,"LlAngle","","",8,null],[13,"LrAngle","","",8,null],[13,"Man","","",8,null],[13,"Middlebutton","","",8,null],[13,"Mouse","","",8,null],[13,"Pencil","","",8,null],[13,"Pirate","","",8,null],[13,"Plus","","",8,null],[13,"QuestionArrow","","",8,null],[13,"RightPtr","","",8,null],[13,"RightSide","","",8,null],[13,"RightTee","","",8,null],[13,"Rightbutton","","",8,null],[13,"RtlLogo","","",8,null],[13,"Sailboat","","",8,null],[13,"SbDownArrow","","",8,null],[13,"SbHDoubleArrow","","",8,null],[13,"SbLeftArrow","","",8,null],[13,"SbRightArrow","","",8,null],[13,"SbUpArrow","","",8,null],[13,"SbVDoubleArrow","","",8,null],[13,"Shuttle","","",8,null],[13,"Sizing","","",8,null],[13,"Spider","","",8,null],[13,"Spraycan","","",8,null],[13,"Star","","",8,null],[13,"Target","","",8,null],[13,"Tcross","","",8,null],[13,"TopLeftArrow","","",8,null],[13,"TopLeftCorner","","",8,null],[13,"TopRightCorner","","",8,null],[13,"TopSide","","",8,null],[13,"TopTee","","",8,null],[13,"Trek","","",8,null],[13,"UlAngle","","",8,null],[13,"Umbrella","","",8,null],[13,"UrAngle","","",8,null],[13,"Watch","","",8,null],[13,"Xterm","","",8,null],[13,"LastCursor","","",8,null],[13,"BlankCursor","","",8,null],[13,"CursorIsPixmap","","",8,null],[4,"DeviceToolType","","Indicates the specific type of tool being used being a tablet. Such as an airbrush, pencil, etc.",null,null],[13,"Unknown","","",9,null],[13,"Pen","","",9,null],[13,"Eraser","","",9,null],[13,"Brush","","",9,null],[13,"Pencil","","",9,null],[13,"Airbrush","","",9,null],[13,"Mouse","","",9,null],[13,"Lens","","",9,null],[4,"DeviceType","","Indicates the device type. See [above][`DeviceManager`.description] for more information about the meaning of these device types.",null,null],[13,"Master","","",10,null],[13,"Slave","","",10,null],[13,"Floating","","",10,null],[4,"DragCancelReason","","Used in `DragContext` to the reason of a cancelled DND operation.",null,null],[13,"NoTarget","","",11,null],[13,"UserCancelled","","",11,null],[13,"Error","","",11,null],[4,"DragProtocol","","Used in `DragContext` to indicate the protocol according to which DND is done.",null,null],[13,"None","","",12,null],[13,"Motif","","",12,null],[13,"Xdnd","","",12,null],[13,"Rootwin","","",12,null],[13,"Win32Dropfiles","","",12,null],[13,"Ole2","","",12,null],[13,"Local","","",12,null],[13,"Wayland","","",12,null],[4,"EventType","","Specifies the type of the event.",null,null],[13,"Nothing","","",13,null],[13,"Delete","","",13,null],[13,"Destroy","","",13,null],[13,"Expose","","",13,null],[13,"MotionNotify","","",13,null],[13,"ButtonPress","","",13,null],[13,"DoubleButtonPress","","",13,null],[13,"TripleButtonPress","","",13,null],[13,"ButtonRelease","","",13,null],[13,"KeyPress","","",13,null],[13,"KeyRelease","","",13,null],[13,"EnterNotify","","",13,null],[13,"LeaveNotify","","",13,null],[13,"FocusChange","","",13,null],[13,"Configure","","",13,null],[13,"Map","","",13,null],[13,"Unmap","","",13,null],[13,"PropertyNotify","","",13,null],[13,"SelectionClear","","",13,null],[13,"SelectionRequest","","",13,null],[13,"SelectionNotify","","",13,null],[13,"ProximityIn","","",13,null],[13,"ProximityOut","","",13,null],[13,"DragEnter","","",13,null],[13,"DragLeave","","",13,null],[13,"DragMotion","","",13,null],[13,"DragStatus","","",13,null],[13,"DropStart","","",13,null],[13,"DropFinished","","",13,null],[13,"ClientEvent","","",13,null],[13,"VisibilityNotify","","",13,null],[13,"Scroll","","",13,null],[13,"WindowState","","",13,null],[13,"Setting","","",13,null],[13,"OwnerChange","","",13,null],[13,"GrabBroken","","",13,null],[13,"Damage","","",13,null],[13,"TouchBegin","","",13,null],[13,"TouchUpdate","","",13,null],[13,"TouchEnd","","",13,null],[13,"TouchCancel","","",13,null],[13,"TouchpadSwipe","","",13,null],[13,"TouchpadPinch","","",13,null],[13,"PadButtonPress","","",13,null],[13,"PadButtonRelease","","",13,null],[13,"PadRing","","",13,null],[13,"PadStrip","","",13,null],[13,"PadGroupMode","","",13,null],[4,"FullscreenMode","","Indicates which monitor (in a multi-head setup) a window should span over when in fullscreen mode.",null,null],[13,"CurrentMonitor","","",14,null],[13,"AllMonitors","","",14,null],[4,"GLError","","Error enumeration for `GLContext`.",null,null],[13,"NotAvailable","","",15,null],[13,"UnsupportedFormat","","",15,null],[13,"UnsupportedProfile","","",15,null],[4,"GrabOwnership","","Defines how device grabs interact with other devices.",null,null],[13,"None","","",16,null],[13,"Window","","",16,null],[13,"Application","","",16,null],[4,"GrabStatus","","Returned by `DeviceExt::grab`, `gdk_pointer_grab` and `gdk_keyboard_grab` to indicate success or the reason for the failure of the grab attempt.",null,null],[13,"Success","","",17,null],[13,"AlreadyGrabbed","","",17,null],[13,"InvalidTime","","",17,null],[13,"NotViewable","","",17,null],[13,"Frozen","","",17,null],[13,"Failed","","",17,null],[4,"Gravity","","Defines the reference point of a window and the meaning of coordinates passed to `gtk_window_move`. See `gtk_window_move` and the \"implementation notes\" section of the Extended Window Manager Hints specification for more details.",null,null],[13,"NorthWest","","",18,null],[13,"North","","",18,null],[13,"NorthEast","","",18,null],[13,"West","","",18,null],[13,"Center","","",18,null],[13,"East","","",18,null],[13,"SouthWest","","",18,null],[13,"South","","",18,null],[13,"SouthEast","","",18,null],[13,"Static","","",18,null],[4,"InputMode","","An enumeration that describes the mode of an input device.",null,null],[13,"Disabled","","",19,null],[13,"Screen","","",19,null],[13,"Window","","",19,null],[4,"InputSource","","An enumeration describing the type of an input device in general terms.",null,null],[13,"Mouse","","",20,null],[13,"Pen","","",20,null],[13,"Eraser","","",20,null],[13,"Cursor","","",20,null],[13,"Keyboard","","",20,null],[13,"Touchscreen","","",20,null],[13,"Touchpad","","",20,null],[13,"Trackpoint","","",20,null],[13,"TabletPad","","",20,null],[4,"ModifierIntent","","This enum is used with `Keymap::get_modifier_mask` in order to determine what modifiers the currently used windowing system backend uses for particular purposes. For example, on X11/Windows, the Control key is used for invoking menu shortcuts (accelerators), whereas on Apple computers it’s the Command key (which correspond to `ModifierType::ControlMask` and `ModifierType::Mod2Mask`, respectively).",null,null],[13,"PrimaryAccelerator","","",21,null],[13,"ContextMenu","","",21,null],[13,"ExtendSelection","","",21,null],[13,"ModifySelection","","",21,null],[13,"NoTextInput","","",21,null],[13,"ShiftGroup","","",21,null],[13,"DefaultModMask","","",21,null],[4,"NotifyType","","Specifies the kind of crossing for `EventCrossing`.",null,null],[13,"Ancestor","","",22,null],[13,"Virtual","","",22,null],[13,"Inferior","","",22,null],[13,"Nonlinear","","",22,null],[13,"NonlinearVirtual","","",22,null],[13,"Unknown","","",22,null],[4,"OwnerChange","","Specifies why a selection ownership was changed.",null,null],[13,"NewOwner","","",23,null],[13,"Destroy","","",23,null],[13,"Close","","",23,null],[4,"PropertyState","","Specifies the type of a property change for a `EventProperty`.",null,null],[13,"NewValue","","",24,null],[13,"Delete","","",24,null],[4,"ScrollDirection","","Specifies the direction for `EventScroll`.",null,null],[13,"Up","","",25,null],[13,"Down","","",25,null],[13,"Left","","",25,null],[13,"Right","","",25,null],[13,"Smooth","","",25,null],[4,"SettingAction","","Specifies the kind of modification applied to a setting in a `EventSetting`.",null,null],[13,"New","","",26,null],[13,"Changed","","",26,null],[13,"Deleted","","",26,null],[4,"SubpixelLayout","","This enumeration describes how the red, green and blue components of physical pixels on an output device are laid out.",null,null],[13,"Unknown","","",27,null],[13,"None","","",27,null],[13,"HorizontalRgb","","",27,null],[13,"HorizontalBgr","","",27,null],[13,"VerticalRgb","","",27,null],[13,"VerticalBgr","","",27,null],[4,"VisibilityState","","Specifies the visiblity status of a window for a `EventVisibility`.",null,null],[13,"Unobscured","","",28,null],[13,"Partial","","",28,null],[13,"FullyObscured","","",28,null],[4,"VisualType","","A set of values that describe the manner in which the pixel values for a visual are converted into RGB values for display.",null,null],[13,"StaticGray","","",29,null],[13,"Grayscale","","",29,null],[13,"StaticColor","","",29,null],[13,"PseudoColor","","",29,null],[13,"TrueColor","","",29,null],[13,"DirectColor","","",29,null],[4,"WindowEdge","","Determines a window edge or corner.",null,null],[13,"NorthWest","","",30,null],[13,"North","","",30,null],[13,"NorthEast","","",30,null],[13,"West","","",30,null],[13,"East","","",30,null],[13,"SouthWest","","",30,null],[13,"South","","",30,null],[13,"SouthEast","","",30,null],[4,"WindowType","","Describes the kind of window.",null,null],[13,"Root","","",31,null],[13,"Toplevel","","",31,null],[13,"Child","","",31,null],[13,"Temp","","",31,null],[13,"Foreign","","",31,null],[13,"Offscreen","","",31,null],[13,"Subsurface","","",31,null],[4,"WindowTypeHint","","These are hints for the window manager that indicate what type of function the window has. The window manager can use this when determining decoration and behaviour of the window. The hint must be set before mapping the window.",null,null],[13,"Normal","","",32,null],[13,"Dialog","","",32,null],[13,"Menu","","",32,null],[13,"Toolbar","","",32,null],[13,"Splashscreen","","",32,null],[13,"Utility","","",32,null],[13,"Dock","","",32,null],[13,"Desktop","","",32,null],[13,"DropdownMenu","","",32,null],[13,"PopupMenu","","",32,null],[13,"Tooltip","","",32,null],[13,"Notification","","",32,null],[13,"Combo","","",32,null],[13,"Dnd","","",32,null],[4,"WindowWindowClass","","`WindowWindowClass::InputOutput` windows are the standard kind of window you might expect. Such windows receive events and are also displayed on screen. `WindowWindowClass::InputOnly` windows are invisible; they are usually placed above other windows in order to trap or filter the events. You can’t draw on `WindowWindowClass::InputOnly` windows.",null,null],[13,"InputOutput","","",33,null],[13,"InputOnly","","",33,null],[5,"beep","","",null,{"inputs":[],"output":null}],[5,"error_trap_pop","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"error_trap_pop_ignored","","",null,{"inputs":[],"output":null}],[5,"error_trap_push","","",null,{"inputs":[],"output":null}],[5,"events_get_angle","","",null,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"generics":["f64"],"name":"option"}}],[5,"events_get_center","","",null,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"option"}}],[5,"events_get_distance","","",null,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"generics":["f64"],"name":"option"}}],[5,"events_pending","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"flush","","",null,{"inputs":[],"output":null}],[5,"get_display","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_display_arg_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_program_class","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_show_events","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"keyboard_grab","","",null,{"inputs":[{"name":"window"},{"name":"bool"},{"name":"u32"}],"output":{"name":"grabstatus"}}],[5,"keyboard_ungrab","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"keyval_convert_case","","",null,null],[5,"keyval_from_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u32"}}],[5,"keyval_is_lower","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"keyval_is_upper","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"keyval_to_lower","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"keyval_to_upper","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"list_visuals","","",null,{"inputs":[],"output":{"generics":["visual"],"name":"vec"}}],[5,"notify_startup_complete","","",null,{"inputs":[],"output":null}],[5,"notify_startup_complete_with_id","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"pango_context_get","","",null,{"inputs":[],"output":{"generics":["context"],"name":"option"}}],[5,"pango_context_get_for_display","","",null,{"inputs":[{"name":"display"}],"output":{"generics":["context"],"name":"option"}}],[5,"pango_context_get_for_screen","","",null,{"inputs":[{"name":"screen"}],"output":{"generics":["context"],"name":"option"}}],[5,"pixbuf_get_from_surface","","",null,{"inputs":[{"name":"surface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[5,"pointer_grab","","",null,{"inputs":[{"name":"window"},{"name":"bool"},{"name":"eventmask"},{"name":"p"},{"name":"q"},{"name":"u32"}],"output":{"name":"grabstatus"}}],[5,"pointer_is_grabbed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pointer_ungrab","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"pre_parse_libgtk_only","","",null,{"inputs":[],"output":null}],[5,"property_delete","","",null,{"inputs":[{"name":"window"},{"name":"atom"}],"output":null}],[5,"property_get","","",null,{"inputs":[{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"c_ulong"},{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"option"}}],[5,"query_depths","","",null,{"inputs":[],"output":{"generics":["i32"],"name":"vec"}}],[5,"selection_convert","","",null,{"inputs":[{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"selection_owner_get","","",null,{"inputs":[{"name":"atom"}],"output":{"generics":["window"],"name":"option"}}],[5,"selection_owner_get_for_display","","",null,{"inputs":[{"name":"display"},{"name":"atom"}],"output":{"generics":["window"],"name":"option"}}],[5,"selection_owner_set","","",null,{"inputs":[{"name":"p"},{"name":"atom"},{"name":"u32"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"selection_owner_set_for_display","","",null,{"inputs":[{"name":"display"},{"name":"p"},{"name":"atom"},{"name":"u32"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"selection_send_notify","","",null,{"inputs":[{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"selection_send_notify_for_display","","",null,{"inputs":[{"name":"display"},{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"set_allowed_backends","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"set_double_click_time","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"set_program_class","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"set_show_events","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"synthesize_window_state","","",null,{"inputs":[{"name":"window"},{"name":"windowstate"},{"name":"windowstate"}],"output":null}],[5,"test_render_sync","","",null,{"inputs":[{"name":"window"}],"output":null}],[5,"test_simulate_button","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"modifiertype"},{"name":"eventtype"}],"output":{"name":"bool"}}],[5,"test_simulate_key","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"modifiertype"},{"name":"eventtype"}],"output":{"name":"bool"}}],[5,"text_property_to_utf8_list_for_display","","",null,null],[5,"threads_enter","","",null,{"inputs":[],"output":null}],[5,"threads_init","","",null,{"inputs":[],"output":null}],[5,"threads_leave","","",null,{"inputs":[],"output":null}],[5,"unicode_to_keyval","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"utf8_to_string_target","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"init","","",null,{"inputs":[],"output":null}],[5,"set_initialized","","Informs this crate that GDK has been initialized and the current thread is the main one.",null,{"inputs":[],"output":null}],[5,"keyval_name","","",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"keyval_to_unicode","","",null,{"inputs":[{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",34,{"inputs":[],"output":{"name":"type"}}],[11,"get_event_type","","Returns the event type.",34,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"get_window","","Returns the associated `Window` if applicable.",34,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[11,"get_send_event","","Returns whether the event was sent explicitly.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is","","Returns `true` if the event type matches `T`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast","","Tries to downcast to a specific event type.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_glib_none","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",34,null],[11,"from_glib_borrow","","",34,null],[11,"from_glib_full","","",34,null],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventany"}}],[11,"as_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventany"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"applaunchcontext"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"static_type","","",35,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AppLaunchContext`.",35,{"inputs":[],"output":{"name":"applaunchcontext"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"static_type","","",36,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cursor from the set of builtin cursors for the default display. See `Cursor::new_for_display`.",36,{"inputs":[{"name":"cursortype"}],"output":{"name":"cursor"}}],[11,"new_for_display","","Creates a new cursor from the set of builtin cursors. ## `display` the `Display` for which the cursor will be created ## `cursor_type` cursor to create",36,{"inputs":[{"name":"display"},{"name":"cursortype"}],"output":{"name":"cursor"}}],[11,"new_from_name","","Creates a new cursor by looking up `name` in the current cursor theme.",36,{"inputs":[{"name":"display"},{"name":"str"}],"output":{"name":"cursor"}}],[11,"new_from_pixbuf","","Creates a new cursor from a pixbuf.",36,{"inputs":[{"name":"display"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"}],"output":{"name":"cursor"}}],[11,"new_from_surface","","Creates a new cursor from a cairo image surface.",36,{"inputs":[{"name":"display"},{"name":"surface"},{"name":"f64"},{"name":"f64"}],"output":{"name":"cursor"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"static_type","","",37,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"grab_info_libgtk_only","","Determines information about the current keyboard grab. This is not public API and must not be used by applications.",37,{"inputs":[{"name":"display"},{"name":"p"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"devicemanager"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"static_type","","",38,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"devicetool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"static_type","","",39,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"static_type","","",40,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_default","","Gets the default `Display`. This is a convenience function for: `gdk_display_manager_get_default_display (gdk_display_manager_get ())`.",40,{"inputs":[],"output":{"generics":["display"],"name":"option"}}],[11,"open","","Opens a display. ## `display_name` the name of the display to open",40,{"inputs":[{"name":"str"}],"output":{"generics":["display"],"name":"option"}}],[11,"open_default_libgtk_only","","Opens the default display specified by command line arguments or environment variables, sets it as the default display, and returns it. `gdk_parse_args` must have been called first. If the default display has previously been set, simply returns that. An internal function that should not be used by applications.",40,{"inputs":[],"output":{"generics":["display"],"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"displaymanager"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"static_type","","",41,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Gets the singleton `DisplayManager` object.",41,{"inputs":[],"output":{"name":"displaymanager"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"dragcontext"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"static_type","","",42,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"drawingcontext"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"static_type","","",43,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"frameclock"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"static_type","","",44,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"glcontext"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"static_type","","",45,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clear_current","","Clears the current `GLContext`.",45,{"inputs":[],"output":null}],[11,"get_current","","Retrieves the current `GLContext`.",45,{"inputs":[],"output":{"generics":["glcontext"],"name":"option"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"monitor"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"static_type","","",46,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"static_type","","",47,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_default","","Gets the default screen for the default display. (See gdk_display_get_default ()).",47,{"inputs":[],"output":{"generics":["screen"],"name":"option"}}],[11,"height","","Gets the height of the default screen in pixels. The returned size is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",47,{"inputs":[],"output":{"name":"i32"}}],[11,"height_mm","","Returns the height of the default screen in millimeters. Note that on many X servers this value will not be correct.",47,{"inputs":[],"output":{"name":"i32"}}],[11,"width","","Gets the width of the default screen in pixels. The returned size is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",47,{"inputs":[],"output":{"name":"i32"}}],[11,"width_mm","","Returns the width of the default screen in millimeters. Note that on many X servers this value will not be correct.",47,{"inputs":[],"output":{"name":"i32"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"seat"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"static_type","","",48,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"visual"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"static_type","","",49,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_best","","Get the visual with the most available colors for the default GDK screen. The return value should not be freed.",49,{"inputs":[],"output":{"name":"visual"}}],[11,"get_best_depth","","Get the best available depth for the default GDK screen. “Best” means “largest,” i.e. 32 preferred over 24 preferred over 8 bits per pixel.",49,{"inputs":[],"output":{"name":"i32"}}],[11,"get_best_type","","Return the best available visual type for the default GDK screen.",49,{"inputs":[],"output":{"name":"visualtype"}}],[11,"get_best_with_both","","Combines `Visual::get_best_with_depth` and `Visual::get_best_with_type`.",49,{"inputs":[{"name":"i32"},{"name":"visualtype"}],"output":{"generics":["visual"],"name":"option"}}],[11,"get_best_with_depth","","Get the best visual with depth `depth` for the default GDK screen. Color visuals and visuals with mutable colormaps are preferred over grayscale or fixed-colormap visuals. The return value should not be freed. `None` may be returned if no visual supports `depth`.",49,{"inputs":[{"name":"i32"}],"output":{"generics":["visual"],"name":"option"}}],[11,"get_best_with_type","","Get the best visual of the given `visual_type` for the default GDK screen. Visuals with higher color depths are considered better. The return value should not be freed. `None` may be returned if no visual has type `visual_type`.",49,{"inputs":[{"name":"visualtype"}],"output":{"generics":["visual"],"name":"option"}}],[11,"get_system","","Get the system’s default visual for the default GDK screen. This is the visual for the root window of the display. The return value should not be freed.",49,{"inputs":[],"output":{"name":"visual"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"static_type","","",50,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"at_pointer","","Obtains the window underneath the mouse pointer, returning the location of that window in `win_x`, `win_y`. Returns `None` if the window under the mouse pointer is not known to GDK (if the window belongs to another application and a `Window` hasn’t been created for it with `gdk_window_foreign_new`)",50,null],[11,"constrain_size","","Constrains a desired width and height according to a set of geometry hints (such as minimum and maximum size). ## `geometry` a `Geometry` structure ## `flags` a mask indicating what portions of `geometry` are set ## `width` desired width of window ## `height` desired height of the window ## `new_width` location to store resulting width ## `new_height` location to store resulting height",50,null],[11,"process_all_updates","","Calls `WindowExt::process_updates` for all windows (see `Window`) in the application.",50,{"inputs":[],"output":null}],[11,"set_debug_updates","","With update debugging enabled, calls to `WindowExt::invalidate_region` clear the invalidated region of the screen to a noticeable color, and GDK pauses for a short time before sending exposes to windows during `WindowExt::process_updates`. The net effect is that you can see the invalid region for each window and watch redraws as they occur. This allows you to diagnose inefficiencies in your application.",50,{"inputs":[{"name":"bool"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"frametimings"}}],[11,"static_type","","",51,{"inputs":[],"output":{"name":"type"}}],[11,"get_complete","","The timing information in a `FrameTimings` is filled in incrementally as the frame as drawn and passed off to the window system for processing and display to the user. The accessor functions for `FrameTimings` can return 0 to indicate an unavailable value for two reasons: either because the information is not yet available, or because it isn't available at all. Once `FrameTimings::get_complete` returns `true` for a frame, you can be certain that no further values will become available and be stored in the `FrameTimings`.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_frame_counter","","Gets the frame counter value of the `FrameClock` when this this frame was drawn.",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_frame_time","","Returns the frame time for the frame. This is the time value that is typically used to time animations for the frame. See `FrameClockExt::get_frame_time`.",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_predicted_presentation_time","","Gets the predicted time at which this frame will be displayed. Although no predicted time may be available, if one is available, it will be available while the frame is being generated, in contrast to `FrameTimings::get_presentation_time`, which is only available after the frame has been presented. In general, if you are simply animating, you should use `FrameClockExt::get_frame_time` rather than this function, but this function is useful for applications that want exact control over latency. For example, a movie player may want this information for Audio/Video synchronization.",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_presentation_time","","Reurns the presentation time. This is the time at which the frame became visible to the user.",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_refresh_interval","","Gets the natural interval between presentation times for the display that this frame was displayed on. Frame presentation usually happens during the “vertical blanking interval”.",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"axisuse"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"axisuse"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"axisuse"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",5,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",5,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",5,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"byteorder"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"byteorder"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",6,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",6,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"crossingmode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"crossingmode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"crossingmode"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"static_type","","",7,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",7,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",7,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cursortype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"cursortype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"cursortype"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"static_type","","",8,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",8,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",8,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",8,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"devicetooltype"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"devicetooltype"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"devicetooltype"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"devicetype"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"devicetype"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"devicetype"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",10,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",10,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"dragcancelreason"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"dragcancelreason"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"dragcancelreason"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"dragprotocol"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"dragprotocol"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"dragprotocol"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenmode"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fullscreenmode"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fullscreenmode"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",14,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",14,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",14,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"glerror"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"glerror"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"glerror"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"domain","","",15,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",15,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",15,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",15,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"grabownership"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"grabownership"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"grabownership"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",16,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",16,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",16,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"grabstatus"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"grabstatus"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"grabstatus"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",17,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",17,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",17,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",18,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",18,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",18,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"inputmode"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"inputmode"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"inputmode"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",19,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",19,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",19,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"inputsource"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"inputsource"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"inputsource"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",20,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",20,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",20,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"modifierintent"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"modifierintent"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"modifierintent"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",21,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",21,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",21,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"notifytype"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"notifytype"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"notifytype"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",22,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",22,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",22,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ownerchange"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ownerchange"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ownerchange"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",23,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",23,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",23,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"propertystate"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"propertystate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"propertystate"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",24,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",24,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",24,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"scrolldirection"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"scrolldirection"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"scrolldirection"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",25,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",25,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",25,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"settingaction"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"settingaction"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"settingaction"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",26,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",26,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",26,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"subpixellayout"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"subpixellayout"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"subpixellayout"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"static_type","","",27,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",27,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",27,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",27,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"visibilitystate"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"visibilitystate"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"visibilitystate"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"static_type","","",28,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",28,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",28,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",28,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"visualtype"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"visualtype"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"visualtype"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"static_type","","",29,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",29,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",29,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",29,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"windowedge"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"windowedge"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"windowedge"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"static_type","","",30,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",30,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",30,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",30,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"windowtype"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"windowtype"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"static_type","","",31,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",31,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",31,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",31,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"static_type","","",32,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",32,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",32,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",32,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"windowwindowclass"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"windowwindowclass"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"windowwindowclass"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"static_type","","",33,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",33,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",33,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",33,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"anchorhints"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"ordering"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLIP_X","","",52,null],[18,"FLIP_Y","","",52,null],[18,"SLIDE_X","","",52,null],[18,"SLIDE_Y","","",52,null],[18,"RESIZE_X","","",52,null],[18,"RESIZE_Y","","",52,null],[18,"FLIP","","",52,null],[18,"SLIDE","","",52,null],[18,"RESIZE","","",52,null],[11,"empty","","Returns an empty set of flags.",52,{"inputs":[],"output":{"name":"anchorhints"}}],[11,"all","","Returns the set containing all flags.",52,{"inputs":[],"output":{"name":"anchorhints"}}],[11,"bits","","Returns the raw value of the flags currently stored.",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",52,{"inputs":[{"name":"u32"}],"output":{"generics":["anchorhints"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",52,{"inputs":[{"name":"u32"}],"output":{"name":"anchorhints"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"anchorhints"}}],[11,"bitor_assign","","Adds the set of flags.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"anchorhints"}}],[11,"bitxor_assign","","Toggles the set of flags.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"anchorhints"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":{"name":"anchorhints"}}],[11,"sub_assign","","Disables all flags enabled in the set.",52,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",52,{"inputs":[{"name":"self"}],"output":{"name":"anchorhints"}}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",52,{"inputs":[{"name":"t"}],"output":{"name":"anchorhints"}}],[11,"static_type","","",52,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",52,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",52,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",52,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"axisflags"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"ordering"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"X","","",53,null],[18,"Y","","",53,null],[18,"PRESSURE","","",53,null],[18,"XTILT","","",53,null],[18,"YTILT","","",53,null],[18,"WHEEL","","",53,null],[18,"DISTANCE","","",53,null],[18,"ROTATION","","",53,null],[18,"SLIDER","","",53,null],[11,"empty","","Returns an empty set of flags.",53,{"inputs":[],"output":{"name":"axisflags"}}],[11,"all","","Returns the set containing all flags.",53,{"inputs":[],"output":{"name":"axisflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",53,{"inputs":[{"name":"u32"}],"output":{"generics":["axisflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",53,{"inputs":[{"name":"u32"}],"output":{"name":"axisflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",53,{"inputs":[{"name":"self"},{"name":"axisflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"axisflags"}}],[11,"bitor_assign","","Adds the set of flags.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"axisflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"axisflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":{"name":"axisflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",53,{"inputs":[{"name":"self"},{"name":"axisflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",53,{"inputs":[{"name":"self"}],"output":{"name":"axisflags"}}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",53,{"inputs":[{"name":"t"}],"output":{"name":"axisflags"}}],[11,"static_type","","",53,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",53,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",53,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",53,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"ordering"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",54,null],[18,"COPY","","",54,null],[18,"MOVE","","",54,null],[18,"LINK","","",54,null],[18,"PRIVATE","","",54,null],[18,"ASK","","",54,null],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[],"output":{"name":"dragaction"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[],"output":{"name":"dragaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"u32"}],"output":{"generics":["dragaction"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",54,{"inputs":[{"name":"u32"}],"output":{"name":"dragaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",54,{"inputs":[{"name":"self"},{"name":"dragaction"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"dragaction"}}],[11,"bitor_assign","","Adds the set of flags.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"dragaction"}}],[11,"bitxor_assign","","Toggles the set of flags.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"dragaction"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":{"name":"dragaction"}}],[11,"sub_assign","","Disables all flags enabled in the set.",54,{"inputs":[{"name":"self"},{"name":"dragaction"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",54,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[11,"extend","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",54,{"inputs":[{"name":"t"}],"output":{"name":"dragaction"}}],[11,"static_type","","",54,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",54,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",54,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",54,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"eventmask"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"ordering"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EXPOSURE_MASK","","",55,null],[18,"POINTER_MOTION_MASK","","",55,null],[18,"POINTER_MOTION_HINT_MASK","","",55,null],[18,"BUTTON_MOTION_MASK","","",55,null],[18,"BUTTON1_MOTION_MASK","","",55,null],[18,"BUTTON2_MOTION_MASK","","",55,null],[18,"BUTTON3_MOTION_MASK","","",55,null],[18,"BUTTON_PRESS_MASK","","",55,null],[18,"BUTTON_RELEASE_MASK","","",55,null],[18,"KEY_PRESS_MASK","","",55,null],[18,"KEY_RELEASE_MASK","","",55,null],[18,"ENTER_NOTIFY_MASK","","",55,null],[18,"LEAVE_NOTIFY_MASK","","",55,null],[18,"FOCUS_CHANGE_MASK","","",55,null],[18,"STRUCTURE_MASK","","",55,null],[18,"PROPERTY_CHANGE_MASK","","",55,null],[18,"VISIBILITY_NOTIFY_MASK","","",55,null],[18,"PROXIMITY_IN_MASK","","",55,null],[18,"PROXIMITY_OUT_MASK","","",55,null],[18,"SUBSTRUCTURE_MASK","","",55,null],[18,"SCROLL_MASK","","",55,null],[18,"TOUCH_MASK","","",55,null],[18,"SMOOTH_SCROLL_MASK","","",55,null],[18,"TOUCHPAD_GESTURE_MASK","","",55,null],[18,"TABLET_PAD_MASK","","",55,null],[18,"ALL_EVENTS_MASK","","",55,null],[11,"empty","","Returns an empty set of flags.",55,{"inputs":[],"output":{"name":"eventmask"}}],[11,"all","","Returns the set containing all flags.",55,{"inputs":[],"output":{"name":"eventmask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",55,{"inputs":[{"name":"u32"}],"output":{"generics":["eventmask"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",55,{"inputs":[{"name":"u32"}],"output":{"name":"eventmask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",55,{"inputs":[{"name":"self"},{"name":"eventmask"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"eventmask"}}],[11,"bitor_assign","","Adds the set of flags.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"eventmask"}}],[11,"bitxor_assign","","Toggles the set of flags.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"eventmask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":{"name":"eventmask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",55,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",55,{"inputs":[{"name":"self"}],"output":{"name":"eventmask"}}],[11,"extend","","",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",55,{"inputs":[{"name":"t"}],"output":{"name":"eventmask"}}],[11,"static_type","","",55,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",55,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",55,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",55,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"frameclockphase"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"ordering"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",56,null],[18,"FLUSH_EVENTS","","",56,null],[18,"BEFORE_PAINT","","",56,null],[18,"UPDATE","","",56,null],[18,"LAYOUT","","",56,null],[18,"PAINT","","",56,null],[18,"RESUME_EVENTS","","",56,null],[18,"AFTER_PAINT","","",56,null],[11,"empty","","Returns an empty set of flags.",56,{"inputs":[],"output":{"name":"frameclockphase"}}],[11,"all","","Returns the set containing all flags.",56,{"inputs":[],"output":{"name":"frameclockphase"}}],[11,"bits","","Returns the raw value of the flags currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",56,{"inputs":[{"name":"u32"}],"output":{"generics":["frameclockphase"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",56,{"inputs":[{"name":"u32"}],"output":{"name":"frameclockphase"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"frameclockphase"}}],[11,"bitor_assign","","Adds the set of flags.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"frameclockphase"}}],[11,"bitxor_assign","","Toggles the set of flags.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"frameclockphase"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":{"name":"frameclockphase"}}],[11,"sub_assign","","Disables all flags enabled in the set.",56,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",56,{"inputs":[{"name":"self"}],"output":{"name":"frameclockphase"}}],[11,"extend","","",56,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",56,{"inputs":[{"name":"t"}],"output":{"name":"frameclockphase"}}],[11,"static_type","","",56,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",56,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",56,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",56,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SHIFT_MASK","","",57,null],[18,"LOCK_MASK","","",57,null],[18,"CONTROL_MASK","","",57,null],[18,"MOD1_MASK","","",57,null],[18,"MOD2_MASK","","",57,null],[18,"MOD3_MASK","","",57,null],[18,"MOD4_MASK","","",57,null],[18,"MOD5_MASK","","",57,null],[18,"BUTTON1_MASK","","",57,null],[18,"BUTTON2_MASK","","",57,null],[18,"BUTTON3_MASK","","",57,null],[18,"BUTTON4_MASK","","",57,null],[18,"BUTTON5_MASK","","",57,null],[18,"MODIFIER_RESERVED_13_MASK","","",57,null],[18,"MODIFIER_RESERVED_14_MASK","","",57,null],[18,"MODIFIER_RESERVED_15_MASK","","",57,null],[18,"MODIFIER_RESERVED_16_MASK","","",57,null],[18,"MODIFIER_RESERVED_17_MASK","","",57,null],[18,"MODIFIER_RESERVED_18_MASK","","",57,null],[18,"MODIFIER_RESERVED_19_MASK","","",57,null],[18,"MODIFIER_RESERVED_20_MASK","","",57,null],[18,"MODIFIER_RESERVED_21_MASK","","",57,null],[18,"MODIFIER_RESERVED_22_MASK","","",57,null],[18,"MODIFIER_RESERVED_23_MASK","","",57,null],[18,"MODIFIER_RESERVED_24_MASK","","",57,null],[18,"MODIFIER_RESERVED_25_MASK","","",57,null],[18,"SUPER_MASK","","",57,null],[18,"HYPER_MASK","","",57,null],[18,"META_MASK","","",57,null],[18,"MODIFIER_RESERVED_29_MASK","","",57,null],[18,"RELEASE_MASK","","",57,null],[18,"MODIFIER_MASK","","",57,null],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[],"output":{"name":"modifiertype"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[],"output":{"name":"modifiertype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"u32"}],"output":{"generics":["modifiertype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",57,{"inputs":[{"name":"u32"}],"output":{"name":"modifiertype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"modifiertype"}}],[11,"bitor_assign","","Adds the set of flags.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"modifiertype"}}],[11,"bitxor_assign","","Toggles the set of flags.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"modifiertype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":{"name":"modifiertype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",57,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",57,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"modifiertype"}}],[11,"static_type","","",57,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",57,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",57,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",57,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"seatcapabilities"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"ordering"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",58,null],[18,"POINTER","","",58,null],[18,"TOUCH","","",58,null],[18,"TABLET_STYLUS","","",58,null],[18,"KEYBOARD","","",58,null],[18,"ALL_POINTING","","",58,null],[18,"ALL","","",58,null],[11,"empty","","Returns an empty set of flags.",58,{"inputs":[],"output":{"name":"seatcapabilities"}}],[11,"all","","Returns the set containing all flags.",58,{"inputs":[],"output":{"name":"seatcapabilities"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,{"inputs":[{"name":"u32"}],"output":{"generics":["seatcapabilities"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,{"inputs":[{"name":"u32"}],"output":{"name":"seatcapabilities"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"seatcapabilities"}}],[11,"bitor_assign","","Adds the set of flags.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"seatcapabilities"}}],[11,"bitxor_assign","","Toggles the set of flags.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"seatcapabilities"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"seatcapabilities"}}],[11,"sub_assign","","Disables all flags enabled in the set.",58,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"seatcapabilities"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"seatcapabilities"}}],[11,"static_type","","",58,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",58,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",58,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",58,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"wmdecoration"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"ordering"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ALL","","",59,null],[18,"BORDER","","",59,null],[18,"RESIZEH","","",59,null],[18,"TITLE","","",59,null],[18,"MENU","","",59,null],[18,"MINIMIZE","","",59,null],[18,"MAXIMIZE","","",59,null],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[],"output":{"name":"wmdecoration"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[],"output":{"name":"wmdecoration"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"u32"}],"output":{"generics":["wmdecoration"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",59,{"inputs":[{"name":"u32"}],"output":{"name":"wmdecoration"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"wmdecoration"}}],[11,"bitor_assign","","Adds the set of flags.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"wmdecoration"}}],[11,"bitxor_assign","","Toggles the set of flags.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"wmdecoration"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":{"name":"wmdecoration"}}],[11,"sub_assign","","Disables all flags enabled in the set.",59,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"self"}],"output":{"name":"wmdecoration"}}],[11,"extend","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",59,{"inputs":[{"name":"t"}],"output":{"name":"wmdecoration"}}],[11,"static_type","","",59,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",59,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",59,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",59,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"wmfunction"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"ordering"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ALL","","",60,null],[18,"RESIZE","","",60,null],[18,"MOVE","","",60,null],[18,"MINIMIZE","","",60,null],[18,"MAXIMIZE","","",60,null],[18,"CLOSE","","",60,null],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[],"output":{"name":"wmfunction"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[],"output":{"name":"wmfunction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"u32"}],"output":{"generics":["wmfunction"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",60,{"inputs":[{"name":"u32"}],"output":{"name":"wmfunction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"wmfunction"}}],[11,"bitor_assign","","Adds the set of flags.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"wmfunction"}}],[11,"bitxor_assign","","Toggles the set of flags.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"wmfunction"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":{"name":"wmfunction"}}],[11,"sub_assign","","Disables all flags enabled in the set.",60,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"self"}],"output":{"name":"wmfunction"}}],[11,"extend","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",60,{"inputs":[{"name":"t"}],"output":{"name":"wmfunction"}}],[11,"static_type","","",60,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",60,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",60,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",60,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"windowhints"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"ordering"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"POS","","",61,null],[18,"MIN_SIZE","","",61,null],[18,"MAX_SIZE","","",61,null],[18,"BASE_SIZE","","",61,null],[18,"ASPECT","","",61,null],[18,"RESIZE_INC","","",61,null],[18,"WIN_GRAVITY","","",61,null],[18,"USER_POS","","",61,null],[18,"USER_SIZE","","",61,null],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[],"output":{"name":"windowhints"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[],"output":{"name":"windowhints"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"u32"}],"output":{"generics":["windowhints"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",61,{"inputs":[{"name":"u32"}],"output":{"name":"windowhints"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",61,{"inputs":[{"name":"self"},{"name":"windowhints"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"windowhints"}}],[11,"bitor_assign","","Adds the set of flags.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"windowhints"}}],[11,"bitxor_assign","","Toggles the set of flags.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"windowhints"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":{"name":"windowhints"}}],[11,"sub_assign","","Disables all flags enabled in the set.",61,{"inputs":[{"name":"self"},{"name":"windowhints"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"self"}],"output":{"name":"windowhints"}}],[11,"extend","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",61,{"inputs":[{"name":"t"}],"output":{"name":"windowhints"}}],[11,"static_type","","",61,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",61,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",61,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",61,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"windowstate"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"ordering"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"WITHDRAWN","","",62,null],[18,"ICONIFIED","","",62,null],[18,"MAXIMIZED","","",62,null],[18,"STICKY","","",62,null],[18,"FULLSCREEN","","",62,null],[18,"ABOVE","","",62,null],[18,"BELOW","","",62,null],[18,"FOCUSED","","",62,null],[18,"TILED","","",62,null],[18,"TOP_TILED","","",62,null],[18,"TOP_RESIZABLE","","",62,null],[18,"RIGHT_TILED","","",62,null],[18,"RIGHT_RESIZABLE","","",62,null],[18,"BOTTOM_TILED","","",62,null],[18,"BOTTOM_RESIZABLE","","",62,null],[18,"LEFT_TILED","","",62,null],[18,"LEFT_RESIZABLE","","",62,null],[11,"empty","","Returns an empty set of flags.",62,{"inputs":[],"output":{"name":"windowstate"}}],[11,"all","","Returns the set containing all flags.",62,{"inputs":[],"output":{"name":"windowstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",62,{"inputs":[{"name":"u32"}],"output":{"generics":["windowstate"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",62,{"inputs":[{"name":"u32"}],"output":{"name":"windowstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",62,{"inputs":[{"name":"self"},{"name":"windowstate"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"windowstate"}}],[11,"bitor_assign","","Adds the set of flags.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"windowstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"windowstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":{"name":"windowstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",62,{"inputs":[{"name":"self"},{"name":"windowstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",62,{"inputs":[{"name":"self"}],"output":{"name":"windowstate"}}],[11,"extend","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"windowstate"}}],[11,"static_type","","",62,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",62,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",62,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",62,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[0,"prelude","","Traits intended for blanket imports.",null,null],[8,"ContextExt","gdk::prelude","",null,null],[10,"create_from_window","","",63,{"inputs":[{"name":"window"}],"output":{"name":"context"}}],[10,"cairo_draw_from_gl","","",63,{"inputs":[{"name":"context"},{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"cairo_surface_create_from_pixbuf","","",63,{"inputs":[{"name":"pixbuf"},{"name":"i32"},{"name":"p"}],"output":{"generics":["surface"],"name":"option"}}],[10,"get_clip_rectangle","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"set_source_rgba","","",63,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_source_pixbuf","","",63,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_source_window","","",63,{"inputs":[{"name":"self"},{"name":"window"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"rectangle","","",63,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"add_region","","",63,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[8,"AppLaunchContextExt","","Trait containing all `AppLaunchContext` methods.",null,null],[10,"set_desktop","","Sets the workspace on which applications will be launched when using this context when running under a window manager that supports multiple workspaces, as described in the Extended Window Manager Hints.",64,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_display","","Sets the display on which applications will be launched when using this context. See also `AppLaunchContextExt::set_screen`.",64,{"inputs":[{"name":"self"},{"name":"display"}],"output":null}],[10,"set_icon","","Sets the icon for applications that are launched with this context.",64,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon_name","","Sets the icon for applications that are launched with this context. The `icon_name` will be interpreted in the same way as the Icon field in desktop files. See also `AppLaunchContextExt::set_icon`.",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_screen","","Sets the screen on which applications will be launched when using this context. See also `AppLaunchContextExt::set_display`.",64,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_timestamp","","Sets the timestamp of `self`. The timestamp should ideally be taken from the event that triggered the launch.",64,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_display","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"connect_property_display_notify","","",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CursorExt","","Trait containing all `Cursor` methods.",null,null],[10,"get_cursor_type","","Returns the cursor type for this cursor.",65,{"inputs":[{"name":"self"}],"output":{"name":"cursortype"}}],[10,"get_display","","Returns the display on which the `Cursor` is defined.",65,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_image","","Returns a `gdk_pixbuf::Pixbuf` with the image used to display the cursor.",65,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_surface","","Returns a cairo image surface with the image used to display the cursor.",65,null],[10,"connect_property_cursor_type_notify","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceExt","","Trait containing all `Device` methods.",null,null],[10,"get_associated_device","","Returns the associated device to `self`, if `self` is of type `DeviceType::Master`, it will return the paired pointer or keyboard.",66,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_axes","","Returns the axes currently available on the device.",66,{"inputs":[{"name":"self"}],"output":{"name":"axisflags"}}],[10,"get_axis_use","","Returns the axis use for `index_`. ## `index_` the index of the axis.",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"axisuse"}}],[10,"get_device_type","","Returns the device type for `self`.",66,{"inputs":[{"name":"self"}],"output":{"name":"devicetype"}}],[10,"get_display","","Returns the `Display` to which `self` pertains.",66,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_has_cursor","","Determines whether the pointer follows device motion. This is not meaningful for keyboard devices, which don't have a pointer.",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_key","","If `index_` has a valid keyval, this function will return `true` and fill in `keyval` and `modifiers` with the keyval settings. ## `index_` the index of the macro button to get. ## `keyval` return value for the keyval. ## `modifiers` return value for modifiers.",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"get_last_event_window","","Gets information about which window the given pointer device is in, based on events that have been received so far from the display server. If another application has a pointer grab, or this application has a grab with owner_events = `false`, `None` may be returned even if the pointer is physically over one of this application's windows.",66,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_mode","","Determines the mode of the device.",66,{"inputs":[{"name":"self"}],"output":{"name":"inputmode"}}],[10,"get_n_axes","","Returns the number of axes the device currently has.",66,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_keys","","Returns the number of keys the device currently has.",66,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_name","","Determines the name of the device.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_position","","Gets the current location of `self`. As a slave device coordinates are those of its master pointer, This function may not be called on devices of type `DeviceType::Slave`, unless there is an ongoing grab on them, see `DeviceExt::grab`. ## `screen` location to store the `Screen`  the `self` is on, or `None`. ## `x` location to store root window X coordinate of `self`, or `None`. ## `y` location to store root window Y coordinate of `self`, or `None`.",66,null],[10,"get_position_double","","Gets the current location of `self` in double precision. As a slave device's coordinates are those of its master pointer, this function may not be called on devices of type `DeviceType::Slave`, unless there is an ongoing grab on them. See `DeviceExt::grab`.",66,null],[10,"get_product_id","","Returns the product ID of this device, or `None` if this information couldn't be obtained. This ID is retrieved from the device, and is thus constant for it. See `DeviceExt::get_vendor_id` for more information.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_seat","","Returns the `Seat` the device belongs to.",66,{"inputs":[{"name":"self"}],"output":{"generics":["seat"],"name":"option"}}],[10,"get_source","","Determines the type of the device.",66,{"inputs":[{"name":"self"}],"output":{"name":"inputsource"}}],[10,"get_vendor_id","","Returns the vendor ID of this device, or `None` if this information couldn't be obtained. This ID is retrieved from the device, and is thus constant for it.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_window_at_position","","Obtains the window underneath `self`, returning the location of the device in `win_x` and `win_y`. Returns `None` if the window tree under `self` is not known to GDK (for example, belongs to another application).",66,null],[10,"get_window_at_position_double","","Obtains the window underneath `self`, returning the location of the device in `win_x` and `win_y` in double precision. Returns `None` if the window tree under `self` is not known to GDK (for example, belongs to another application).",66,null],[10,"grab","","Grabs the device so that all events coming from this device are passed to this application until the device is ungrabbed with `DeviceExt::ungrab`, or the window becomes unviewable. This overrides any previous grab on the device by this client.",66,{"inputs":[{"name":"self"},{"name":"window"},{"name":"grabownership"},{"name":"bool"},{"name":"eventmask"},{"name":"p"},{"name":"u32"}],"output":{"name":"grabstatus"}}],[10,"list_axes","","Returns a `glib::List` of `GdkAtoms`, containing the labels for the axes that `self` currently has.",66,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"list_slave_devices","","If the device if of type `DeviceType::Master`, it will return the list of slave devices attached to it, otherwise it will return `None`",66,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"set_axis_use","","Specifies how an axis of a device is used. ## `index_` the index of the axis ## `use_` specifies how the axis is used",66,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"axisuse"}],"output":null}],[10,"set_key","","Specifies the X key event to generate when a macro button of a device is pressed. ## `index_` the index of the macro button to set ## `keyval` the keyval to generate ## `modifiers` the modifiers to set",66,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"modifiertype"}],"output":null}],[10,"set_mode","","Sets a the mode of an input device. The mode controls if the device is active and whether the device’s range is mapped to the entire screen or to a single window.",66,{"inputs":[{"name":"self"},{"name":"inputmode"}],"output":{"name":"bool"}}],[10,"ungrab","","Release any grab on `self`.",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"warp","","Warps `self` in `display` to the point `x`,`y` on the screen `screen`, unless the device is confined to a window by a grab, in which case it will be moved as far as allowed by the grab. Warping the pointer creates events as if the user had moved the mouse instantaneously to the destination.",66,{"inputs":[{"name":"self"},{"name":"screen"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_property_device_manager","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["devicemanager"],"name":"option"}}],[10,"get_property_input_mode","","",66,{"inputs":[{"name":"self"}],"output":{"name":"inputmode"}}],[10,"set_property_input_mode","","",66,{"inputs":[{"name":"self"},{"name":"inputmode"}],"output":null}],[10,"get_property_input_source","","",66,{"inputs":[{"name":"self"}],"output":{"name":"inputsource"}}],[10,"get_property_num_touches","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_seat","","`Seat` of this device.",66,{"inputs":[{"name":"self"},{"generics":["seat"],"name":"option"}],"output":null}],[10,"get_property_tool","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["devicetool"],"name":"option"}}],[10,"get_property_type","","Device role in the device manager.",66,{"inputs":[{"name":"self"}],"output":{"name":"devicetype"}}],[10,"connect_changed","","The ::changed signal is emitted either when the `Device` has changed the number of either axes or keys. For example In X this will normally happen when the slave device routing events through the master device changes (for example, user switches from the USB mouse to a tablet), in that case the master device will change to reflect the new slave device axes and keys.",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tool_changed","","The ::tool-changed signal is emitted on pen/eraser `GdkDevices` whenever tools enter or leave proximity.",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_associated_device_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_axes_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_device_manager_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_cursor_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_mode_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_source_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_axes_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_num_touches_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_product_id_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_seat_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tool_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vendor_id_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceManagerExt","","Trait containing all `DeviceManager` methods.",null,null],[10,"get_client_pointer","","Returns the client pointer, that is, the master pointer that acts as the core pointer for this application. In X11, window managers may change this depending on the interaction pattern under the presence of several pointers.",67,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_display","","Gets the `Display` associated to `self`.",67,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"list_devices","","Returns the list of devices of type `type_` currently attached to `self`.",67,{"inputs":[{"name":"self"},{"name":"devicetype"}],"output":{"generics":["device"],"name":"vec"}}],[10,"connect_device_added","","The ::device-added signal is emitted either when a new master pointer is created, or when a slave (Hardware) input device is plugged in. ## `device` the newly added `Device`.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_device_changed","","The ::device-changed signal is emitted whenever a device has changed in the hierarchy, either slave devices being disconnected from their master device or connected to another one, or master devices being added or removed a slave device.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_device_removed","","The ::device-removed signal is emitted either when a master pointer is removed, or when a slave (Hardware) input device is unplugged. ## `device` the just removed `Device`.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceToolExt","","Trait containing all `DeviceTool` methods.",null,null],[10,"get_hardware_id","","Gets the hardware ID of this tool, or 0 if it's not known. When non-zero, the identificator is unique for the given tool model, meaning that two identical tools will share the same `hardware_id`, but will have different serial numbers (see `DeviceToolExt::get_serial`).",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_serial","","Gets the serial of this tool, this value can be used to identify a physical tool (eg. a tablet pen) across program executions.",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_tool_type","","Gets the `DeviceToolType` of the tool.",68,{"inputs":[{"name":"self"}],"output":{"name":"devicetooltype"}}],[10,"get_property_axes","","",68,{"inputs":[{"name":"self"}],"output":{"name":"axisflags"}}],[10,"get_property_hardware_id","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_property_serial","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_property_tool_type","","",68,{"inputs":[{"name":"self"}],"output":{"name":"devicetooltype"}}],[10,"connect_property_axes_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hardware_id_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_serial_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tool_type_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DisplayExt","","Trait containing all `Display` methods.",null,null],[10,"beep","","Emits a short beep on `self`",69,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","Closes the connection to the windowing system for the given display, and cleans up associated resources.",69,{"inputs":[{"name":"self"}],"output":null}],[10,"device_is_grabbed","","Returns `true` if there is an ongoing grab on `device` for `self`. ## `device` a `Device`",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"flush","","Flushes any requests queued for the windowing system; this happens automatically when the main loop blocks waiting for new events, but if your application is drawing without returning control to the main loop, you may need to call this function explicitly. A common case where this function needs to be called is when an application is executing drawing commands from a thread other than the thread where the main loop is running.",69,{"inputs":[{"name":"self"}],"output":null}],[10,"get_app_launch_context","","Returns a `AppLaunchContext` suitable for launching applications on the given display.",69,{"inputs":[{"name":"self"}],"output":{"generics":["applaunchcontext"],"name":"option"}}],[10,"get_default_cursor_size","","Returns the default size to use for cursors on `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_default_group","","Returns the default group leader window for all toplevel windows on `self`. This window is implicitly created by GDK. See `WindowExt::set_group`.",69,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_default_screen","","Get the default `Screen` for `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[10,"get_default_seat","","Returns the default `Seat` for this display.",69,{"inputs":[{"name":"self"}],"output":{"generics":["seat"],"name":"option"}}],[10,"get_device_manager","","Returns the `DeviceManager` associated to `self`.",69,{"inputs":[{"name":"self"}],"output":{"generics":["devicemanager"],"name":"option"}}],[10,"get_event","","Gets the next `GdkEvent` to be processed for `self`, fetching events from the windowing system if necessary.",69,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[10,"get_maximal_cursor_size","","Gets the maximal size to use for cursors on `self`. ## `width` the return location for the maximal cursor width ## `height` the return location for the maximal cursor height",69,null],[10,"get_monitor","","Gets a monitor associated with this display.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_monitor_at_point","","Gets the monitor in which the point (`x`, `y`) is located, or a nearby monitor if the point is not in any monitor.",69,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_monitor_at_window","","Gets the monitor in which the largest area of `window` resides, or a monitor close to `window` if it is outside of all monitors.",69,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_n_monitors","","Gets the number of monitors that belong to `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_screens","","Gets the number of screen managed by the `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_name","","Gets the name of the display.",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_pointer","","Gets the current location of the pointer and the current modifier mask for a given display.",69,null],[10,"get_primary_monitor","","Gets the primary monitor for the display.",69,{"inputs":[{"name":"self"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_screen","","Returns a screen object for one of the screens of the display.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"screen"}}],[10,"get_window_at_pointer","","Obtains the window underneath the mouse pointer, returning the location of the pointer in that window in `win_x`, `win_y` for `screen`. Returns `None` if the window under the mouse pointer is not known to GDK (for example, belongs to another application).",69,null],[10,"has_pending","","Returns whether the display has events that are waiting to be processed.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","Finds out if the display has been closed.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"keyboard_ungrab","","Release any keyboard grab",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"list_devices","","Returns the list of available input devices attached to `self`. The list is statically allocated and should not be freed.",69,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"list_seats","","Returns the list of seats known to `self`.",69,{"inputs":[{"name":"self"}],"output":{"generics":["seat"],"name":"vec"}}],[10,"notify_startup_complete","","Indicates to the GUI environment that the application has finished loading, using a given identifier.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"peek_event","","Gets a copy of the first `GdkEvent` in the `self`’s event queue, without removing the event from the queue. (Note that this function will not get more events from the windowing system. It only checks the events that have already been moved to the GDK event queue.)",69,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[10,"pointer_is_grabbed","","Test if the pointer is grabbed.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pointer_ungrab","","Release any pointer grab.",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"put_event","","Appends a copy of the given event onto the front of the event queue for `self`. ## `event` a `GdkEvent`.",69,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[10,"request_selection_notification","","Request `EventOwnerChange` events for ownership changes of the selection named by the given atom. ## `selection` the `Atom` naming the selection for which  ownership change notification is requested",69,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[10,"set_double_click_distance","","Sets the double click distance (two clicks within this distance count as a double click and result in a `EventType::2buttonPress` event). See also `DisplayExt::set_double_click_time`. Applications should not set this, it is a global user-configured setting. ## `distance` distance in pixels",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_double_click_time","","Sets the double click time (two clicks within this time interval count as a double click and result in a `EventType::2buttonPress` event). Applications should not set this, it is a global user-configured setting. ## `msec` double click time in milliseconds (thousandths of a second)",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"store_clipboard","","Issues a request to the clipboard manager to store the clipboard data. On X11, this is a special program that works according to the FreeDesktop Clipboard Specification. ## `clipboard_window` a `Window` belonging to the clipboard owner ## `time_` a timestamp ## `targets` an array of targets  that should be saved, or `None`  if all available targets should be saved. ## `n_targets` length of the `targets` array",69,null],[10,"supports_clipboard_persistence","","Returns whether the speicifed display supports clipboard persistance; i.e. if it’s possible to store the clipboard data after an application has quit. On X11 this checks if a clipboard daemon is running.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_composite","","Returns `true` if `WindowExt::set_composited` can be used to redirect drawing on the window using compositing.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_cursor_alpha","","Returns `true` if cursors can use an 8bit alpha channel on `self`. Otherwise, cursors are restricted to bilevel alpha (i.e. a mask).",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_cursor_color","","Returns `true` if multicolored cursors are supported on `self`. Otherwise, cursors have only a forground and a background color.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_input_shapes","","Returns `true` if `gdk_window_input_shape_combine_mask` can be used to modify the input shape of windows on `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_selection_notification","","Returns whether `EventOwnerChange` events will be sent when the owner of a selection changes.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_shapes","","Returns `true` if `gdk_window_shape_combine_mask` can be used to create shaped windows on `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"sync","","Flushes any requests queued for the windowing system and waits until all requests have been handled. This is often used for making sure that the display is synchronized with the current state of the program. Calling `DisplayExt::sync` before `gdk_error_trap_pop` makes sure that any errors generated from earlier requests are handled before the error trap is removed.",69,{"inputs":[{"name":"self"}],"output":null}],[10,"warp_pointer","","Warps the pointer of `self` to the point `x`,`y` on the screen `screen`, unless the pointer is confined to a window by a grab, in which case it will be moved as far as allowed by the grab. Warping the pointer creates events as if the user had moved the mouse instantaneously to the destination.",69,{"inputs":[{"name":"self"},{"name":"screen"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"connect_closed","","The ::closed signal is emitted when the connection to the windowing system for `display` is closed. ## `is_error` `true` if the display was closed due to an error",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_monitor_added","","The ::monitor-added signal is emitted whenever a monitor is added.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_monitor_removed","","The ::monitor-removed signal is emitted whenever a monitor is removed.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_opened","","The ::opened signal is emitted when the connection to the windowing system for `display` is opened.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_seat_added","","The ::seat-added signal is emitted whenever a new seat is made known to the windowing system.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_seat_removed","","The ::seat-removed signal is emitted whenever a seat is removed by the windowing system.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DisplayManagerExt","","Trait containing all `DisplayManager` methods.",null,null],[10,"get_default_display","","Gets the default `Display`.",70,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"list_displays","","List all currently open displays.",70,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"vec"}}],[10,"open_display","","Opens a display. ## `name` the name of the display to open",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["display"],"name":"option"}}],[10,"set_default_display","","Sets `display` as the default display. ## `display` a `Display`",70,{"inputs":[{"name":"self"},{"name":"display"}],"output":null}],[10,"connect_display_opened","","The ::display-opened signal is emitted when a display is opened. ## `display` the opened display",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_display_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DragContextExt","","Trait containing all `DragContext` methods.",null,null],[10,"get_actions","","Determines the bitmask of actions proposed by the source if `DragContextExt::get_suggested_action` returns `DragAction::Ask`.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[10,"get_dest_window","","Returns the destination windw for the DND operation.",71,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_device","","Returns the `Device` associated to the drag context.",71,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[10,"get_drag_window","","Returns the window on which the drag icon should be rendered during the drag operation. Note that the window may not be available until the drag operation has begun. GDK will move the window in accordance with the ongoing drag operation. The window is owned by `self` and will be destroyed when the drag operation is over.",71,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_protocol","","Returns the drag protocol thats used by this context.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragprotocol"}}],[10,"get_selected_action","","Determines the action chosen by the drag destination.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[10,"get_source_window","","Returns the `Window` where the DND operation started.",71,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_suggested_action","","Determines the suggested drag action of the context.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[10,"list_targets","","Retrieves the list of targets of the context.",71,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"manage_dnd","","Requests the drag and drop operation to be managed by `self`. When a drag and drop operation becomes managed, the `DragContext` will internally handle all input and source-side `EventDND` events as required by the windowing system.",71,{"inputs":[{"name":"self"},{"name":"window"},{"name":"dragaction"}],"output":{"name":"bool"}}],[10,"set_device","","Associates a `Device` to `self`, so all Drag and Drop events for `self` are emitted as if they came from this device. ## `device` a `Device`",71,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_hotspot","","Sets the position of the drag window that will be kept under the cursor hotspot. Initially, the hotspot is at the top left corner of the drag window.",71,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"connect_action_changed","","A new action is being chosen for the drag and drop operation.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cancel","","The drag and drop operation was cancelled.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_dnd_finished","","The drag and drop operation was finished, the drag destination finished reading all data. The drag source can now free all miscellaneous data.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drop_performed","","The drag and drop operation was performed on an accepting client.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DrawingContextExt","","Trait containing all `DrawingContext` methods.",null,null],[10,"get_cairo_context","","Retrieves a Cairo context to be used to draw on the `Window` that created the `DrawingContext`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_clip","","Retrieves a copy of the clip region used when creating the `self`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_window","","Retrieves the window that created the drawing `self`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"is_valid","","Checks whether the given `DrawingContext` is valid.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_clip_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FrameClockExt","","Trait containing all `FrameClock` methods.",null,null],[10,"begin_updating","","Starts updates for an animation. Until a matching call to `FrameClockExt::end_updating` is made, the frame clock will continually request a new frame with the `FrameClockPhase::Update` phase. This function may be called multiple times and frames will be requested until `FrameClockExt::end_updating` is called the same number of times.",73,{"inputs":[{"name":"self"}],"output":null}],[10,"end_updating","","Stops updates for an animation. See the documentation for `FrameClockExt::begin_updating`.",73,{"inputs":[{"name":"self"}],"output":null}],[10,"get_current_timings","","Gets the frame timings for the current frame.",73,{"inputs":[{"name":"self"}],"output":{"generics":["frametimings"],"name":"option"}}],[10,"get_frame_counter","","A `FrameClock` maintains a 64-bit counter that increments for each frame drawn.",73,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_frame_time","","Gets the time that should currently be used for animations. Inside the processing of a frame, it’s the time used to compute the animation position of everything in a frame. Outside of a frame, it's the time of the conceptual “previous frame,” which may be either the actual previous frame time, or if that’s too old, an updated time.",73,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_history_start","","`FrameClock` internally keeps a history of `FrameTimings` objects for recent frames that can be retrieved with `FrameClockExt::get_timings`. The set of stored frames is the set from the counter values given by `FrameClockExt::get_history_start` and `FrameClockExt::get_frame_counter`, inclusive.",73,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_timings","","Retrieves a `FrameTimings` object holding timing information for the current frame or a recent frame. The `FrameTimings` object may not yet be complete: see `FrameTimings::get_complete`.",73,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["frametimings"],"name":"option"}}],[10,"request_phase","","Asks the frame clock to run a particular phase. The signal corresponding the requested phase will be emitted the next time the frame clock processes. Multiple calls to `FrameClockExt::request_phase` will be combined together and only one frame processed. If you are displaying animated content and want to continually request the `FrameClockPhase::Update` phase for a period of time, you should use `FrameClockExt::begin_updating` instead, since this allows GTK+ to adjust system parameters to get maximally smooth animations.",73,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[10,"connect_after_paint","","This signal ends processing of the frame. Applications should generally not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_before_paint","","This signal begins processing of the frame. Applications should generally not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_flush_events","","This signal is used to flush pending motion events that are being batched up and compressed together. Applications should not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_layout","","This signal is emitted as the second step of toolkit and application processing of the frame. Any work to update sizes and positions of application elements should be performed. GTK+ normally handles this internally.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_paint","","This signal is emitted as the third step of toolkit and application processing of the frame. The frame is repainted. GDK normally handles this internally and produces expose events, which are turned into GTK+ ``GtkWidget`::draw` signals.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_resume_events","","This signal is emitted after processing of the frame is finished, and is handled internally by GTK+ to resume normal event processing. Applications should not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_update","","This signal is emitted as the first step of toolkit and application processing of the frame. Animations should be updated using `FrameClockExt::get_frame_time`. Applications can connect directly to this signal, or use `gtk_widget_add_tick_callback` as a more convenient interface.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GLContextExt","","Trait containing all `GLContext` methods.",null,null],[10,"get_debug_enabled","","Retrieves the value set using `GLContextExt::set_debug_enabled`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_display","","Retrieves the `Display` the `self` is created for",74,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_forward_compatible","","Retrieves the value set using `GLContextExt::set_forward_compatible`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_required_version","","Retrieves the major and minor version requested by calling `GLContextExt::set_required_version`.",74,null],[10,"get_shared_context","","Retrieves the `GLContext` that this `self` share data with.",74,{"inputs":[{"name":"self"}],"output":{"generics":["glcontext"],"name":"option"}}],[10,"get_use_es","","Checks whether the `self` is using an OpenGL or OpenGL ES profile.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_version","","Retrieves the OpenGL version of the `self`.",74,null],[10,"get_window","","Retrieves the `Window` used by the `self`.",74,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"is_legacy","","Whether the `GLContext` is in legacy mode or not.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the `self` the current one.",74,{"inputs":[{"name":"self"}],"output":null}],[10,"realize","","Realizes the given `GLContext`.",74,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_debug_enabled","","Sets whether the `GLContext` should perform extra validations and run time checking. This is useful during development, but has additional overhead.",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_forward_compatible","","Sets whether the `GLContext` should be forward compatible.",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_required_version","","Sets the major and minor version of OpenGL to request.",74,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_use_es","","Requests that GDK create a OpenGL ES context instead of an OpenGL one, if the platform and windowing system allows it.",74,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_display_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shared_context_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MonitorExt","","Trait containing all `Monitor` methods.",null,null],[10,"get_display","","Gets the display that this monitor belongs to.",75,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_geometry","","Retrieves the size and position of an individual monitor within the display coordinate space. The returned geometry is in ”application pixels”, not in ”device pixels” (see `MonitorExt::get_scale_factor`).",75,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_height_mm","","Gets the height in millimeters of the monitor.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_manufacturer","","Gets the name of the monitor's manufacturer, if available.",75,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_model","","Gets the a string identifying the monitor model, if available.",75,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_refresh_rate","","Gets the refresh rate of the monitor, if available.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_scale_factor","","Gets the internal scale factor that maps from monitor coordinates to the actual device pixels. On traditional systems this is 1, but on very high density outputs this can be a higher value (often 2).",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_subpixel_layout","","Gets information about the layout of red, green and blue primaries for each pixel in this monitor, if available.",75,{"inputs":[{"name":"self"}],"output":{"name":"subpixellayout"}}],[10,"get_width_mm","","Gets the width in millimeters of the monitor.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_workarea","","Retrieves the size and position of the “work area” on a monitor within the display coordinate space. The returned geometry is in ”application pixels”, not in ”device pixels” (see `MonitorExt::get_scale_factor`).",75,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"is_primary","","Gets whether this monitor should be considered primary (see `DisplayExt::get_primary_monitor`).",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_display","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_property_geometry","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_property_height_mm","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_refresh_rate","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_scale_factor","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_width_mm","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_workarea","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"connect_invalidate","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_geometry_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_mm_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_manufacturer_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_refresh_rate_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_factor_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_subpixel_layout_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_mm_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_workarea_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScreenExt","","Trait containing all `Screen` methods.",null,null],[10,"get_active_window","","Returns the screen’s currently active window.",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_display","","Gets the display to which the `self` belongs.",76,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_height","","Gets the height of `self` in pixels. The returned size is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_height_mm","","Returns the height of `self` in millimeters.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_monitor_at_point","","Returns the monitor number in which the point (`x`,`y`) is located.",76,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_at_window","","Returns the number of the monitor in which the largest area of the bounding rectangle of `window` resides.",76,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"i32"}}],[10,"get_monitor_geometry","","Retrieves the `Rectangle` representing the size and position of the individual monitor within the entire screen area. The returned geometry is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangle"}}],[10,"get_monitor_height_mm","","Gets the height in millimeters of the specified monitor.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_plug_name","","Returns the output name of the specified monitor. Usually something like VGA, DVI, or TV, not the actual product name of the display device.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_monitor_scale_factor","","Returns the internal scale factor that maps from monitor coordinates to the actual device pixels. On traditional systems this is 1, but on very high density outputs this can be a higher value (often 2).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_width_mm","","Gets the width in millimeters of the specified monitor, if available.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_workarea","","Retrieves the `Rectangle` representing the size and position of the “work area” on a monitor within the entire screen area. The returned geometry is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangle"}}],[10,"get_n_monitors","","Returns the number of monitors which `self` consists of.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_number","","Gets the index of `self` among the screens in the display to which it belongs. (See `ScreenExt::get_display`)",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_primary_monitor","","Gets the primary monitor for `self`. The primary monitor is considered the monitor where the “main desktop” lives. While normal application windows typically allow the window manager to place the windows, specialized desktop applications such as panels should place themselves on the primary monitor.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_resolution","","Gets the resolution for font handling on the screen; see `ScreenExt::set_resolution` for full details.",76,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_rgba_visual","","Gets a visual to use for creating windows with an alpha channel. The windowing system on which GTK+ is running may not support this capability, in which case `None` will be returned. Even if a non-`None` value is returned, its possible that the window’s alpha channel won’t be honored when displaying the window on the screen: in particular, for X an appropriate windowing manager and compositing manager must be running to provide appropriate display.",76,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"option"}}],[10,"get_root_window","","Gets the root window of `self`.",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_system_visual","","Get the system’s default visual for `self`. This is the visual for the root window of the display. The return value should not be freed.",76,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"option"}}],[10,"get_toplevel_windows","","Obtains a list of all toplevel windows known to GDK on the screen `self`. A toplevel window is a child of the root window (see `gdk_get_default_root_window`).",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"get_width","","Gets the width of `self` in pixels. The returned size is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_width_mm","","Gets the width of `self` in millimeters.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_window_stack","","Returns a `glib::List` of `GdkWindows` representing the current window stack.",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"is_composited","","Returns whether windows with an RGBA visual can reasonably be expected to have their alpha channel drawn correctly on the screen.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_visuals","","Lists the available visuals for the specified `self`. A visual describes a hardware image data format. For example, a visual might support 24-bit color, or 8-bit color, and might expect pixels to be in a certain format.",76,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"vec"}}],[10,"make_display_name","","Determines the name to pass to `Display::open` to get a `Display` with this screen as the default screen.",76,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"set_font_options","","Sets the default font options for the screen. These options will be set on any `pango::Context`’s newly created with `gdk_pango_context_get_for_screen`. Changing the default set of font options does not affect contexts that have already been created. ## `options` a `cairo::FontOptions`, or `None` to unset any  previously set default font options.",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_resolution","","Sets the resolution for font handling on the screen. This is a scale factor between points specified in a `pango::FontDescription` and cairo units. The default value is 96, meaning that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3). ## `dpi` the resolution in “dots per inch”. (Physical inches aren’t actually  involved; the terminology is conventional.)",76,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_composited_changed","","The ::composited-changed signal is emitted when the composited status of the screen changes",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_monitors_changed","","The ::monitors-changed signal is emitted when the number, size or position of the monitors attached to the screen change.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_size_changed","","The ::size-changed signal is emitted when the pixel width or height of a screen changes.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_options_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resolution_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SeatExt","","Trait containing all `Seat` methods.",null,null],[10,"get_capabilities","","Returns the capabilities this `Seat` currently has.",77,{"inputs":[{"name":"self"}],"output":{"name":"seatcapabilities"}}],[10,"get_display","","Returns the `Display` this seat belongs to.",77,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_keyboard","","Returns the master device that routes keyboard events.",77,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_pointer","","Returns the master device that routes pointer events.",77,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_slaves","","Returns the slave devices that match the given capabilities.",77,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"generics":["device"],"name":"vec"}}],[10,"ungrab","","Releases a grab added through `SeatExt::grab`.",77,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_device_added","","The ::device-added signal is emitted when a new input device is related to this seat.",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_device_removed","","The ::device-removed signal is emitted when an input device is removed (e.g. unplugged).",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tool_added","","The ::tool-added signal is emitted whenever a new tool is made known to the seat. The tool may later be assigned to a device (i.e. on proximity with a tablet). The device will emit the `Device::tool-changed` signal accordingly.",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tool_removed","","This signal is emitted whenever a tool is no longer known to this `seat`.",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"VisualExt","","Trait containing all `Visual` methods.",null,null],[10,"get_bits_per_rgb","","Returns the number of significant bits per red, green and blue value.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_blue_pixel_details","","Obtains values that are needed to calculate blue pixel values in TrueColor and DirectColor. The “mask” is the significant bits within the pixel. The “shift” is the number of bits left we must shift a primary for it to be in position (according to the \"mask\"). Finally, \"precision\" refers to how much precision the pixel value contains for a particular primary. ## `mask` A pointer to a `guint32` to be filled in, or `None` ## `shift` A pointer to a `gint` to be filled in, or `None` ## `precision` A pointer to a `gint` to be filled in, or `None`",78,null],[10,"get_byte_order","","Returns the byte order of this visual.",78,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[10,"get_colormap_size","","Returns the size of a colormap for this visual.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_depth","","Returns the bit depth of this visual.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_green_pixel_details","","Obtains values that are needed to calculate green pixel values in TrueColor and DirectColor. The “mask” is the significant bits within the pixel. The “shift” is the number of bits left we must shift a primary for it to be in position (according to the \"mask\"). Finally, \"precision\" refers to how much precision the pixel value contains for a particular primary. ## `mask` A pointer to a `guint32` to be filled in, or `None` ## `shift` A pointer to a `gint` to be filled in, or `None` ## `precision` A pointer to a `gint` to be filled in, or `None`",78,null],[10,"get_red_pixel_details","","Obtains values that are needed to calculate red pixel values in TrueColor and DirectColor. The “mask” is the significant bits within the pixel. The “shift” is the number of bits left we must shift a primary for it to be in position (according to the \"mask\"). Finally, \"precision\" refers to how much precision the pixel value contains for a particular primary. ## `mask` A pointer to a `guint32` to be filled in, or `None` ## `shift` A pointer to a `gint` to be filled in, or `None` ## `precision` A pointer to a `gint` to be filled in, or `None`",78,null],[10,"get_screen","","Gets the screen to which this visual belongs",78,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[10,"get_visual_type","","Returns the type of visual this is (PseudoColor, TrueColor, etc).",78,{"inputs":[{"name":"self"}],"output":{"name":"visualtype"}}],[8,"WindowExt","","Trait containing all `Window` methods.",null,null],[10,"beep","","Emits a short beep associated to `self` in the appropriate display, if supported. Otherwise, emits a short beep on the display just as `DisplayExt::beep`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"begin_draw_frame","","Indicates that you are beginning the process of redrawing `region` on `self`, and provides you with a `DrawingContext`.",79,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"generics":["drawingcontext"],"name":"option"}}],[10,"begin_move_drag","","Begins a window move operation (for a toplevel window).",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_move_drag_for_device","","Begins a window move operation (for a toplevel window). You might use this function to implement a “window move grip,” for example. The function works best with window managers that support the Extended Window Manager Hints but has a fallback implementation for other window managers. ## `device` the device used for the operation ## `button` the button being used to drag, or 0 for a keyboard-initiated drag ## `root_x` root window X coordinate of mouse click that began the drag ## `root_y` root window Y coordinate of mouse click that began the drag ## `timestamp` timestamp of mouse click that began the drag",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_paint_rect","","A convenience wrapper around `WindowExt::begin_paint_region` which creates a rectangular region for you. See `WindowExt::begin_paint_region` for details.",79,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"begin_paint_region","","Indicates that you are beginning the process of redrawing `region`. A backing store (offscreen buffer) large enough to contain `region` will be created. The backing store will be initialized with the background color or background surface for `self`. Then, all drawing operations performed on `self` will be diverted to the backing store. When you call `WindowExt::end_paint`, the backing store will be copied to `self`, making it visible onscreen. Only the part of `self` contained in `region` will be modified; that is, drawing operations are clipped to `region`.",79,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[10,"begin_resize_drag","","Begins a window resize operation (for a toplevel window).",79,{"inputs":[{"name":"self"},{"name":"windowedge"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_resize_drag_for_device","","Begins a window resize operation (for a toplevel window). You might use this function to implement a “window resize grip,” for example; in fact `GtkStatusbar` uses it. The function works best with window managers that support the Extended Window Manager Hints but has a fallback implementation for other window managers. ## `edge` the edge or corner from which the drag is started ## `device` the device used for the operation ## `button` the button being used to drag, or 0 for a keyboard-initiated drag ## `root_x` root window X coordinate of mouse click that began the drag ## `root_y` root window Y coordinate of mouse click that began the drag ## `timestamp` timestamp of mouse click that began the drag (use `gdk_event_get_time`)",79,{"inputs":[{"name":"self"},{"name":"windowedge"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"configure_finished","","Does nothing, present only for compatiblity.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"coords_from_parent","","Transforms window coordinates from a parent window to a child window, where the parent window is the normal parent as returned by `WindowExt::get_parent` for normal windows, and the window's embedder as returned by `gdk_offscreen_window_get_embedder` for offscreen windows.",79,null],[10,"coords_to_parent","","Transforms window coordinates from a child window to its parent window, where the parent window is the normal parent as returned by `WindowExt::get_parent` for normal windows, and the window's embedder as returned by `gdk_offscreen_window_get_embedder` for offscreen windows.",79,null],[10,"create_gl_context","","Creates a new `GLContext` matching the framebuffer format to the visual of the `Window`. The context is disconnected from any particular window or surface.",79,{"inputs":[{"name":"self"}],"output":{"generics":["glcontext","error"],"name":"result"}}],[10,"create_similar_image_surface","","Create a new image surface that is efficient to draw on the given `self`.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["surface"],"name":"option"}}],[10,"deiconify","","Attempt to deiconify (unminimize) `self`. On X11 the window manager may choose to ignore the request to deiconify. When using GTK+, use `gtk_window_deiconify` instead of the `Window` variant. Or better yet, you probably want to use `gtk_window_present`, which raises the window, focuses it, unminimizes it, and puts it on the current desktop.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"destroy","","Destroys the window system resources associated with `self` and decrements `self`'s reference count. The window system resources for all children of `self` are also destroyed, but the children’s reference counts are not decremented.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"destroy_notify","","",79,{"inputs":[{"name":"self"}],"output":null}],[10,"enable_synchronized_configure","","Does nothing, present only for compatiblity.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"end_draw_frame","","Indicates that the drawing of the contents of `self` started with `gdk_window_begin_frame` has been completed.",79,{"inputs":[{"name":"self"},{"name":"drawingcontext"}],"output":null}],[10,"end_paint","","Indicates that the backing store created by the most recent call to `WindowExt::begin_paint_region` should be copied onscreen and deleted, leaving the next-most-recent backing store or no backing store at all as the active paint region. See `WindowExt::begin_paint_region` for full details.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"ensure_native","","Tries to ensure that there is a window-system native window for this `Window`. This may fail in some situations, returning `false`.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"flush","","This function does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"focus","","Sets keyboard focus to `self`. In most cases, `gtk_window_present` should be used on a `GtkWindow`, rather than calling this function. ## `timestamp` timestamp of the event triggering the window focus",79,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"freeze_toplevel_updates_libgtk_only","","Temporarily freezes a window and all its descendants such that it won't receive expose events. The window will begin receiving expose events again when `WindowExt::thaw_toplevel_updates_libgtk_only` is called. If `WindowExt::freeze_toplevel_updates_libgtk_only` has been called more than once, `WindowExt::thaw_toplevel_updates_libgtk_only` must be called an equal number of times to begin processing exposes.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"freeze_updates","","Temporarily freezes a window such that it won’t receive expose events. The window will begin receiving expose events again when `WindowExt::thaw_updates` is called. If `WindowExt::freeze_updates` has been called more than once, `WindowExt::thaw_updates` must be called an equal number of times to begin processing exposes.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen","","Moves the window into fullscreen mode. This means the window covers the entire screen and is above any panels or task bars.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen_on_monitor","","Moves the window into fullscreen mode on the given monitor. This means the window covers the entire screen and is above any panels or task bars.",79,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"geometry_changed","","This function informs GDK that the geometry of an embedded offscreen window has changed. This is necessary for GDK to keep track of which offscreen window the pointer is in.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"get_accept_focus","","Determines whether or not the desktop environment shuld be hinted that the window does not want to receive input focus.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_children","","Gets the list of children of `self` known to GDK. This function only returns children created via GDK, so for example it’s useless when used with the root window; it only returns windows an application created itself.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"get_clip_region","","Computes the region of a window that potentially can be written to by drawing primitives. This region may not take into account other factors such as if the window is obscured by other windows, but no area outside of this region will be affected by drawing primitives.",79,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_composited","","Determines whether `self` is composited.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_cursor","","Retrieves a `Cursor` pointer for the cursor currently set on the specified `Window`, or `None`. If the return value is `None` then there is no custom cursor set on the specified window, and it is using the cursor for its parent window.",79,{"inputs":[{"name":"self"}],"output":{"generics":["cursor"],"name":"option"}}],[10,"get_decorations","","Returns the decorations set on the `Window` with `WindowExt::set_decorations`. ## `decorations` The window decorations will be written here",79,{"inputs":[{"name":"self"}],"output":{"generics":["wmdecoration"],"name":"option"}}],[10,"get_device_cursor","","Retrieves a `Cursor` pointer for the `device` currently set on the specified `Window`, or `None`. If the return value is `None` then there is no custom cursor set on the specified window, and it is using the cursor for its parent window. ## `device` a master, pointer `Device`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["cursor"],"name":"option"}}],[10,"get_device_events","","Returns the event mask for `self` corresponding to an specific device. ## `device` a `Device`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"eventmask"}}],[10,"get_device_position","","Obtains the current device position and modifier state. The position is given in coordinates relative to the upper left corner of `self`.",79,null],[10,"get_device_position_double","","Obtains the current device position in doubles and modifier state. The position is given in coordinates relative to the upper left corner of `self`.",79,null],[10,"get_display","","Gets the `Display` associated with a `Window`.",79,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_drag_protocol","","Finds out the DND protocol supported by a window. ## `target` location of the window  where the drop should happen. This may be `self` or a proxy window,  or `None` if `self` does not support Drag and Drop.",79,null],[10,"get_effective_parent","","Obtains the parent of `self`, as known to GDK. Works like `WindowExt::get_parent` for normal windows, but returns the window’s embedder for offscreen windows.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_effective_toplevel","","Gets the toplevel window that’s an ancestor of `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_event_compression","","Get the current event compression setting for this window.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_events","","Gets the event mask for `self` for all master input devices. See `WindowExt::set_events`.",79,{"inputs":[{"name":"self"}],"output":{"name":"eventmask"}}],[10,"get_focus_on_map","","Determines whether or not the desktop environment should be hinted that the window does not want to receive input focus when it is mapped.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_frame_clock","","Gets the frame clock for the window. The frame clock for a window never changes unless the window is reparented to a new toplevel window.",79,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"get_frame_extents","","Obtains the bounding box of the window, including window manager titlebar/borders if any. The frame position is given in root window coordinates. To get the position of the window itself (rather than the frame) in root window coordinates, use `WindowExt::get_origin`. ## `rect` rectangle to fill with bounding box of the window frame",79,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_fullscreen_mode","","Obtains the `FullscreenMode` of the `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenmode"}}],[10,"get_geometry","","Any of the return location arguments to this function may be `None`, if you aren’t interested in getting the value of that field.",79,null],[10,"get_group","","Returns the group leader window for `self`. See `WindowExt::set_group`.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_height","","Returns the height of the given `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_modal_hint","","Determines whether or not the window manager is hinted that `self` has modal behaviour.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_origin","","Obtains the position of a window in root window coordinates. (Compare with `WindowExt::get_position` and `WindowExt::get_geometry` which return the position of a window relative to its parent window.) ## `x` return location for X coordinate ## `y` return location for Y coordinate",79,null],[10,"get_parent","","Obtains the parent of `self`, as known to GDK. Does not query the X server; thus this returns the parent as passed to `Window::new`, not the actual parent. This should never matter unless you’re using Xlib calls mixed with GDK calls on the X11 platform. It may also matter for toplevel windows, because the window manager may choose to reparent them.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_pass_through","","Returns whether input to the window is passed through to the window below.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pointer","","Obtains the current pointer position and modifier state. The position is given in coordinates relative to the upper left corner of `self`.",79,null],[10,"get_position","","Obtains the position of the window as reported in the most-recently-processed `EventConfigure`. Contrast with `WindowExt::get_geometry` which queries the X server for the current window position, regardless of which events have been received or processed.",79,null],[10,"get_root_coords","","Obtains the position of a window position in root window coordinates. This is similar to `WindowExt::get_origin` but allows you to pass in any position in the window, not just the origin. ## `x` X coordinate in window ## `y` Y coordinate in window ## `root_x` return location for X coordinate ## `root_y` return location for Y coordinate",79,null],[10,"get_root_origin","","Obtains the top-left corner of the window manager frame in root window coordinates. ## `x` return location for X position of window frame ## `y` return location for Y position of window frame",79,null],[10,"get_scale_factor","","Returns the internal scale factor that maps from window coordiantes to the actual device pixels. On traditional systems this is 1, but on very high density outputs this can be a higher value (often 2).",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_screen","","Gets the `Screen` associated with a `Window`.",79,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[10,"get_source_events","","Returns the event mask for `self` corresponding to the device class specified by `source`. ## `source` a `InputSource` to define the source class.",79,{"inputs":[{"name":"self"},{"name":"inputsource"}],"output":{"name":"eventmask"}}],[10,"get_state","","Gets the bitwise OR of the currently active window state flags, from the `WindowState` enumeration.",79,{"inputs":[{"name":"self"}],"output":{"name":"windowstate"}}],[10,"get_support_multidevice","","Returns `true` if the window is aware of the existence of multiple devices.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_toplevel","","Gets the toplevel window that’s an ancestor of `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_type_hint","","This function returns the type hint set for a window.",79,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[10,"get_update_area","","Transfers ownership of the update area from `self` to the caller of the function. That is, after calling this function, `self` will no longer have an invalid/dirty region; the update area is removed from `self` and handed to you. If a window has no update area, `WindowExt::get_update_area` returns `None`. You are responsible for calling `cairo_region_destroy` on the returned region if it’s non-`None`.",79,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_visible_region","","Computes the region of the `self` that is potentially visible. This does not necessarily take into account if the window is obscured by other windows, but no area outside of this region is visible.",79,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_visual","","Gets the `Visual` describing the pixel format of `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"visual"}}],[10,"get_width","","Returns the width of the given `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_window_type","","Gets the type of the window. See `WindowType`.",79,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[10,"has_native","","Checks whether the window has a native window or not. Note that you can use `WindowExt::ensure_native` if a native window is needed.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"hide","","For toplevel windows, withdraws them, so they will no longer be known to the window manager; for all windows, unmaps them, so they won’t be displayed. Normally done automatically as part of `gtk_widget_hide`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"iconify","","Asks to iconify (minimize) `self`. The window manager may choose to ignore the request, but normally will honor it. Using `gtk_window_iconify` is preferred, if you have a `GtkWindow` widget.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"input_shape_combine_region","","Like `WindowExt::shape_combine_region`, but the shape applies only to event handling. Mouse events which happen while the pointer position corresponds to an unset bit in the mask will be passed on the window below `self`.",79,{"inputs":[{"name":"self"},{"name":"region"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"invalidate_rect","","A convenience wrapper around `WindowExt::invalidate_region` which invalidates a rectangular region. See `WindowExt::invalidate_region` for details. ## `rect` rectangle to invalidate or `None` to invalidate the whole  window ## `invalidate_children` whether to also invalidate child windows",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"invalidate_region","","Adds `region` to the update area for `self`. The update area is the region that needs to be redrawn, or “dirty region.” The call `WindowExt::process_updates` sends one or more expose events to the window, which together cover the entire update area. An application would normally redraw the contents of `self` in response to those expose events.",79,{"inputs":[{"name":"self"},{"name":"region"},{"name":"bool"}],"output":null}],[10,"is_destroyed","","Check to see if a window is destroyed..",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_input_only","","Determines whether or not the window is an input only window.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_shaped","","Determines whether or not the window is shaped.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_viewable","","Check if the window and all ancestors of the window are mapped. (This is not necessarily \"viewable\" in the X sense, since we only check as far as we have GDK window parents, not to the root window.)",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_visible","","Checks whether the window has been mapped (with `WindowExt::show` or `WindowExt::show_unraised`).",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"lower","","Lowers `self` to the bottom of the Z-order (stacking order), so that other windows with the same parent window appear above `self`. This is true whether or not the other windows are visible.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"mark_paint_from_clip","","If you call this during a paint (e.g. between `WindowExt::begin_paint_region` and `WindowExt::end_paint` then GDK will mark the current clip region of the window as being drawn. This is required when mixing GL rendering via `gdk_cairo_draw_from_gl` and cairo rendering, as otherwise GDK has no way of knowing when something paints over the GL-drawn regions.",79,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[10,"maximize","","Maximizes the window. If the window was already maximized, then this function does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"merge_child_input_shapes","","Merges the input shape masks for any child windows into the input shape mask for `self`. i.e. the union of all input masks for `self` and its children will become the new input mask for `self`. See `WindowExt::input_shape_combine_region`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"merge_child_shapes","","Merges the shape masks for any child windows into the shape mask for `self`. i.e. the union of all masks for `self` and its children will become the new mask for `self`. See `WindowExt::shape_combine_region`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"move_","","",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"move_region","","Move the part of `self` indicated by `region` by `dy` pixels in the Y direction and `dx` pixels in the X direction. The portions of `region` that not covered by the new position of `region` are invalidated.",79,{"inputs":[{"name":"self"},{"name":"region"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"move_resize","","Equivalent to calling `WindowExt::move` and `WindowExt::resize`, except that both operations are performed at once, avoiding strange visual effects. (i.e. the user may be able to see the window first move, then resize, if you don’t use `WindowExt::move_resize`.) ## `x` new X position relative to window’s parent ## `y` new Y position relative to window’s parent ## `width` new width ## `height` new height",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"peek_children","","Like `WindowExt::get_children`, but does not copy the list of children, so the list does not need to be freed.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"process_updates","","Sends one or more expose events to `self`. The areas in each expose event will cover the entire update area for the window (see `WindowExt::invalidate_region` for details). Normally GDK calls `Window::process_all_updates` on your behalf, so there’s no need to call this function unless you want to force expose events to be delivered immediately and synchronously (vs. the usual case, where GDK delivers them in an idle handler). Occasionally this is useful to produce nicer scrolling behavior, for example.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"raise","","Raises `self` to the top of the Z-order (stacking order), so that other windows with the same parent window appear below `self`. This is true whether or not the windows are visible.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"register_dnd","","Registers a window as a potential drop destination.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"reparent","","Reparents `self` into the given `new_parent`. The window being reparented will be unmapped as a side effect. ## `new_parent` new parent to move `self` into ## `x` X location inside the new parent ## `y` Y location inside the new parent",79,{"inputs":[{"name":"self"},{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"resize","","Resizes `self`; for toplevel windows, asks the window manager to resize the window. The window manager may not allow the resize. When using GTK+, use `gtk_window_resize` instead of this low-level GDK function.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"restack","","Changes the position of `self` in the Z-order (stacking order), so that it is above `sibling` (if `above` is `true`) or below `sibling` (if `above` is `false`).",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"scroll","","Scroll the contents of `self`, both pixels and children, by the given amount. `self` itself does not move. Portions of the window that the scroll operation brings in from offscreen areas are invalidated. The invalidated region may be bigger than what would strictly be necessary.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_accept_focus","","Setting `accept_focus` to `false` hints the desktop environment that the window doesn’t want to receive input focus.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_background_rgba","","Sets the background color of `self`.",79,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_child_input_shapes","","Sets the input shape mask of `self` to the union of input shape masks for all children of `self`, ignoring the input shape mask of `self` itself. Contrast with `WindowExt::merge_child_input_shapes` which includes the input shape mask of `self` in the masks to be merged.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"set_child_shapes","","Sets the shape mask of `self` to the union of shape masks for all children of `self`, ignoring the shape mask of `self` itself. Contrast with `WindowExt::merge_child_shapes` which includes the shape mask of `self` in the masks to be merged.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"set_composited","","Sets a `Window` as composited, or unsets it. Composited windows do not automatically have their contents drawn to the screen. Drawing is redirected to an offscreen buffer and an expose event is emitted on the parent of the composited window. It is the responsibility of the parent’s expose handler to manually merge the off-screen content onto the screen in whatever way it sees fit.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_cursor","","Sets the default mouse pointer for a `Window`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_decorations","","“Decorations” are the features the window manager adds to a toplevel `Window`. This function sets the traditional Motif window manager hints that tell the window manager which decorations you would like your window to have. Usually you should use `gtk_window_set_decorated` on a `GtkWindow` instead of using the GDK function directly.",79,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[10,"set_device_cursor","","Sets a specific `Cursor` for a given device when it gets inside `self`. Use `Cursor::new_for_display` or `Cursor::new_from_pixbuf` to create the cursor. To make the cursor invisible, use `CursorType::BlankCursor`. Passing `None` for the `cursor` argument to `WindowExt::set_cursor` means that `self` will use the cursor of its parent window. Most windows should use this default. ## `device` a master, pointer `Device` ## `cursor` a `Cursor`",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"cursor"}],"output":null}],[10,"set_device_events","","Sets the event mask for a given device (Normally a floating device, not attached to any visible pointer) to `self`. For example, an event mask including `EventMask::ButtonPressMask` means the window should report button press events. The event mask is the bitwise OR of values from the `EventMask` enumeration.",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"eventmask"}],"output":null}],[10,"set_event_compression","","Determines whether or not extra unprocessed motion events in the event queue can be discarded. If `true` only the most recent event will be delivered.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_events","","The event mask for a window determines which events will be reported for that window from all master input devices. For example, an event mask including `EventMask::ButtonPressMask` means the window should report button press events. The event mask is the bitwise OR of values from the `EventMask` enumeration.",79,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[10,"set_focus_on_map","","Setting `focus_on_map` to `false` hints the desktop environment that the window doesn’t want to receive input focus when it is mapped. focus_on_map should be turned off for windows that aren’t triggered interactively (such as popups from network activity).",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_fullscreen_mode","","Specifies whether the `self` should span over all monitors (in a multi-head setup) or only the current monitor when in fullscreen mode.",79,{"inputs":[{"name":"self"},{"name":"fullscreenmode"}],"output":null}],[10,"set_functions","","Sets hints about the window management functions to make available via buttons on the window frame.",79,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[10,"set_geometry_hints","","Sets the geometry hints for `self`. Hints flagged in `geom_mask` are set, hints not flagged in `geom_mask` are unset. To unset all hints, use a `geom_mask` of 0 and a `geometry` of `None`.",79,{"inputs":[{"name":"self"},{"name":"geometry"},{"name":"windowhints"}],"output":null}],[10,"set_group","","Sets the group leader window for `self`. By default, GDK sets the group leader for all toplevel windows to a global window implicitly created by GDK. With this function you can override this default.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_list","","Sets a list of icons for the window. One of these will be used to represent the window when it has been iconified. The icon is usually shown in an icon box or some sort of task bar. Which icon size is shown depends on the window manager. The window manager can scale the icon but setting several size icons can give better image quality since the window manager may only need to scale the icon by a small amount or not at all.",79,null],[10,"set_icon_name","","Windows may have a name used while minimized, distinct from the name they display in their titlebar. Most of the time this is a bad idea from a user interface standpoint. But you can set such a name with this function, if you like.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_keep_above","","Set if `self` must be kept above other windows. If the window was already above, then this function does nothing.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_keep_below","","Set if `self` must be kept below other windows. If the window was already below, then this function does nothing.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_modal_hint","","The application can use this hint to tell the window manager that a certain window has modal behaviour. The window manager can use this information to handle modal windows in a special way.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_opacity","","Set `self` to render as partially transparent, with opacity 0 being fully transparent and 1 fully opaque. (Values of the opacity parameter are clamped to the [0,1] range.)",79,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_opaque_region","","For optimisation purposes, compositing window managers may like to not draw obscured regions of windows, or turn off blending during for these regions. With RGB windows with no transparency, this is just the shape of the window, but with ARGB32 windows, the compositor does not know what regions of the window are transparent or not.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_override_redirect","","An override redirect window is not under the control of the window manager. This means it won’t have a titlebar, won’t be minimizable, etc. - it will be entirely under the control of the application. The window manager can’t see the override redirect window at all.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pass_through","","Sets whether input to the window is passed through to the window below.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_role","","When using GTK+, typically you should use `gtk_window_set_role` instead of this low-level function.",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_shadow_width","","Newer GTK+ windows using client-side decorations use extra geometry around their frames for effects like shadows and invisible borders. Window managers that want to maximize windows or snap to edges need to know where the extents of the actual frame lie, so that users don’t feel like windows are snapping against random invisible edges.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_skip_pager_hint","","Toggles whether a window should appear in a pager (workspace switcher, or other desktop utility program that displays a small thumbnail representation of the windows on the desktop). If a window’s semantic type as specified with `WindowExt::set_type_hint` already fully describes the window, this function should not be called in addition, instead you should allow the window to be treated according to standard policy for its semantic type. ## `skips_pager` `true` to skip the pager",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_skip_taskbar_hint","","Toggles whether a window should appear in a task list or window list. If a window’s semantic type as specified with `WindowExt::set_type_hint` already fully describes the window, this function should not be called in addition, instead you should allow the window to be treated according to standard policy for its semantic type. ## `skips_taskbar` `true` to skip the taskbar",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_source_events","","Sets the event mask for any floating device (i.e. not attached to any visible pointer) that has the source defined as `source`. This event mask will be applied both to currently existing, newly added devices after this call, and devices being attached/detached. ## `source` a `InputSource` to define the source class. ## `event_mask` event mask for `self`",79,{"inputs":[{"name":"self"},{"name":"inputsource"},{"name":"eventmask"}],"output":null}],[10,"set_startup_id","","When using GTK+, typically you should use `gtk_window_set_startup_id` instead of this low-level function. ## `startup_id` a string with startup-notification identifier",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_static_gravities","","Used to set the bit gravity of the given window to static, and flag it so all children get static subwindow gravity. This is used if you are implementing scary features that involve deep knowledge of the windowing system. Don’t worry about it.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"set_support_multidevice","","This function will enable multidevice features in `self`.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Sets the title of a toplevel window, to be displayed in the titlebar. If you haven’t explicitly set the icon name for the window (using `WindowExt::set_icon_name`), the icon name will be set to `title` as well. `title` must be in UTF-8 encoding (as with all user-readable strings in GDK/GTK+). `title` may not be `None`. ## `title` title of `self`",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_transient_for","","Indicates to the window manager that `self` is a transient dialog associated with the application window `parent`. This allows the window manager to do things like center `self` on `parent` and keep `self` above `parent`.",79,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"set_type_hint","","The application can use this call to provide a hint to the window manager about the functionality of a window. The window manager can use this information when determining the decoration and behaviour of the window.",79,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":null}],[10,"set_urgency_hint","","Toggles whether a window needs the user's urgent attention. ## `urgent` `true` if the window is urgent",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"shape_combine_region","","Makes pixels in `self` outside `shape_region` be transparent, so that the window may be nonrectangular.",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"show","","Like `WindowExt::show_unraised`, but also raises the window to the top of the window stack (moves the window to the front of the Z-order).",79,{"inputs":[{"name":"self"}],"output":null}],[10,"show_unraised","","Shows a `Window` onscreen, but does not modify its stacking order. In contrast, `WindowExt::show` will raise the window to the top of the window stack.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"show_window_menu","","Asks the windowing system to show the window menu. The window menu is the menu shown when right-clicking the titlebar on traditional windows managed by the window manager. This is useful for windows using client-side decorations, activating it with a right-click on the window decorations.",79,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"stick","","“Pins” a window such that it’s on all workspaces and does not scroll with viewports, for window managers that have scrollable viewports. (When using `GtkWindow`, `gtk_window_stick` may be more useful.)",79,{"inputs":[{"name":"self"}],"output":null}],[10,"thaw_toplevel_updates_libgtk_only","","Thaws a window frozen with `WindowExt::freeze_toplevel_updates_libgtk_only`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"thaw_updates","","Thaws a window frozen with `WindowExt::freeze_updates`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"unfullscreen","","Moves the window out of fullscreen mode. If the window was not fullscreen, does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"unmaximize","","Unmaximizes the window. If the window wasn’t maximized, then this function does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"unstick","","Reverse operation for `WindowExt::stick`; see `WindowExt::stick`, and `gtk_window_unstick`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"withdraw","","Withdraws a window (unmaps it and asks the window manager to forget about it). This function is not really useful as `WindowExt::hide` automatically withdraws toplevel windows before hiding them.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_create_surface","","The ::create-surface signal is emitted when an offscreen window needs its surface (re)created, which happens either when the window is first drawn to, or when the window is being resized. The first signal handler that returns a non-`None` surface will stop any further signal emission, and its surface will be used.",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pick_embedded_child","","The ::pick-embedded-child signal is emitted to find an embedded child at the given position. ## `x` x coordinate in the window ## `y` y coordinate in the window",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_notify","","",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceExtManual","","",null,null],[10,"get_axis","","",80,null],[8,"DeviceManagerExtManual","","",null,null],[10,"disable_multidevice","","",81,{"inputs":[],"output":null}],[8,"DragContextExtManual","","",null,null],[10,"drag_get_selection","","",82,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[10,"drag_abort","","",82,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"drop_reply","","",82,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"drop","","",82,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"drag_find_window_for_screen","","",82,null],[10,"drag_motion","","",82,{"inputs":[{"name":"self"},{"name":"window"},{"name":"dragprotocol"},{"name":"i32"},{"name":"i32"},{"name":"dragaction"},{"name":"dragaction"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"drop_finish","","",82,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"drag_status","","",82,{"inputs":[{"name":"self"},{"name":"dragaction"},{"name":"u32"}],"output":null}],[10,"drag_drop_succeeded","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"drag_begin","","",82,null],[10,"drag_begin_for_device","","",82,null],[10,"drag_begin_from_point","","",82,null],[10,"drag_drop_done","","",82,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"VisualExtManual","","",null,null],[10,"query_depths","","",83,{"inputs":[],"output":{"generics":["i32"],"name":"vec"}}],[8,"WindowExtManual","","",null,null],[10,"set_user_data","","",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"get_user_data","","",84,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"set_geometry_hints","","",84,{"inputs":[{"name":"self"},{"name":"gdkgeometry"},{"name":"windowhints"}],"output":null}],[10,"get_default_root_window","","",84,{"inputs":[],"output":{"name":"window"}}],[10,"offscreen_window_set_embedder","","",84,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"offscreen_window_get_embedder","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"offscreen_window_get_surface","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["surface"],"name":"option"}}],[10,"get_pixbuf","","",84,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[0,"functions","gdk","",null,null],[5,"beep","gdk::functions","",null,{"inputs":[],"output":null}],[5,"error_trap_pop","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"error_trap_pop_ignored","","",null,{"inputs":[],"output":null}],[5,"error_trap_push","","",null,{"inputs":[],"output":null}],[5,"events_get_angle","","",null,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"generics":["f64"],"name":"option"}}],[5,"events_get_center","","",null,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"option"}}],[5,"events_get_distance","","",null,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"generics":["f64"],"name":"option"}}],[5,"events_pending","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"flush","","",null,{"inputs":[],"output":null}],[5,"get_display","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_display_arg_name","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_program_class","","",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[5,"get_show_events","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"keyboard_grab","","",null,{"inputs":[{"name":"window"},{"name":"bool"},{"name":"u32"}],"output":{"name":"grabstatus"}}],[5,"keyboard_ungrab","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"keyval_convert_case","","",null,null],[5,"keyval_from_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u32"}}],[5,"keyval_is_lower","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"keyval_is_upper","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"keyval_to_lower","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"keyval_to_upper","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"list_visuals","","",null,{"inputs":[],"output":{"generics":["visual"],"name":"vec"}}],[5,"notify_startup_complete","","",null,{"inputs":[],"output":null}],[5,"notify_startup_complete_with_id","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"pango_context_get","","",null,{"inputs":[],"output":{"generics":["context"],"name":"option"}}],[5,"pango_context_get_for_display","","",null,{"inputs":[{"name":"display"}],"output":{"generics":["context"],"name":"option"}}],[5,"pango_context_get_for_screen","","",null,{"inputs":[{"name":"screen"}],"output":{"generics":["context"],"name":"option"}}],[5,"pixbuf_get_from_surface","","",null,{"inputs":[{"name":"surface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[5,"pointer_grab","","",null,{"inputs":[{"name":"window"},{"name":"bool"},{"name":"eventmask"},{"name":"p"},{"name":"q"},{"name":"u32"}],"output":{"name":"grabstatus"}}],[5,"pointer_is_grabbed","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pointer_ungrab","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"pre_parse_libgtk_only","","",null,{"inputs":[],"output":null}],[5,"property_delete","","",null,{"inputs":[{"name":"window"},{"name":"atom"}],"output":null}],[5,"property_get","","",null,{"inputs":[{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"c_ulong"},{"name":"c_ulong"},{"name":"i32"}],"output":{"name":"option"}}],[5,"query_depths","","",null,{"inputs":[],"output":{"generics":["i32"],"name":"vec"}}],[5,"selection_convert","","",null,{"inputs":[{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"selection_owner_get","","",null,{"inputs":[{"name":"atom"}],"output":{"generics":["window"],"name":"option"}}],[5,"selection_owner_get_for_display","","",null,{"inputs":[{"name":"display"},{"name":"atom"}],"output":{"generics":["window"],"name":"option"}}],[5,"selection_owner_set","","",null,{"inputs":[{"name":"p"},{"name":"atom"},{"name":"u32"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"selection_owner_set_for_display","","",null,{"inputs":[{"name":"display"},{"name":"p"},{"name":"atom"},{"name":"u32"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"selection_send_notify","","",null,{"inputs":[{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"selection_send_notify_for_display","","",null,{"inputs":[{"name":"display"},{"name":"window"},{"name":"atom"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"set_allowed_backends","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"set_double_click_time","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"set_program_class","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"set_show_events","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"synthesize_window_state","","",null,{"inputs":[{"name":"window"},{"name":"windowstate"},{"name":"windowstate"}],"output":null}],[5,"test_render_sync","","",null,{"inputs":[{"name":"window"}],"output":null}],[5,"test_simulate_button","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"modifiertype"},{"name":"eventtype"}],"output":{"name":"bool"}}],[5,"test_simulate_key","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"modifiertype"},{"name":"eventtype"}],"output":{"name":"bool"}}],[5,"text_property_to_utf8_list_for_display","","",null,null],[5,"threads_enter","","",null,{"inputs":[],"output":null}],[5,"threads_init","","",null,{"inputs":[],"output":null}],[5,"threads_leave","","",null,{"inputs":[],"output":null}],[5,"unicode_to_keyval","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"utf8_to_string_target","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[0,"enums","gdk","",null,null],[0,"key","gdk::enums","",null,null],[6,"Key","gdk::enums::key","",null,null],[17,"VoidSymbol","","",null,null],[17,"BackSpace","","",null,null],[17,"Tab","","",null,null],[17,"Linefeed","","",null,null],[17,"Clear","","",null,null],[17,"Return","","",null,null],[17,"Pause","","",null,null],[17,"Scroll_Lock","","",null,null],[17,"Sys_Req","","",null,null],[17,"Escape","","",null,null],[17,"Delete","","",null,null],[17,"Multi_key","","",null,null],[17,"Codeinput","","",null,null],[17,"SingleCandidate","","",null,null],[17,"MultipleCandidate","","",null,null],[17,"PreviousCandidate","","",null,null],[17,"Kanji","","",null,null],[17,"Muhenkan","","",null,null],[17,"Henkan_Mode","","",null,null],[17,"Henkan","","",null,null],[17,"Romaji","","",null,null],[17,"Hiragana","","",null,null],[17,"Katakana","","",null,null],[17,"Hiragana_Katakana","","",null,null],[17,"Zenkaku","","",null,null],[17,"Hankaku","","",null,null],[17,"Zenkaku_Hankaku","","",null,null],[17,"Touroku","","",null,null],[17,"Massyo","","",null,null],[17,"Kana_Lock","","",null,null],[17,"Kana_Shift","","",null,null],[17,"Eisu_Shift","","",null,null],[17,"Eisu_toggle","","",null,null],[17,"Kanji_Bangou","","",null,null],[17,"Zen_Koho","","",null,null],[17,"Mae_Koho","","",null,null],[17,"Home","","",null,null],[17,"Left","","",null,null],[17,"Up","","",null,null],[17,"Right","","",null,null],[17,"Down","","",null,null],[17,"Prior","","",null,null],[17,"Page_Up","","",null,null],[17,"Next","","",null,null],[17,"Page_Down","","",null,null],[17,"End","","",null,null],[17,"Begin","","",null,null],[17,"Select","","",null,null],[17,"Print","","",null,null],[17,"Execute","","",null,null],[17,"Insert","","",null,null],[17,"Undo","","",null,null],[17,"Redo","","",null,null],[17,"Menu","","",null,null],[17,"Find","","",null,null],[17,"Cancel","","",null,null],[17,"Help","","",null,null],[17,"Break","","",null,null],[17,"Mode_switch","","",null,null],[17,"script_switch","","",null,null],[17,"Num_Lock","","",null,null],[17,"KP_Space","","",null,null],[17,"KP_Tab","","",null,null],[17,"KP_Enter","","",null,null],[17,"KP_F1","","",null,null],[17,"KP_F2","","",null,null],[17,"KP_F3","","",null,null],[17,"KP_F4","","",null,null],[17,"KP_Home","","",null,null],[17,"KP_Left","","",null,null],[17,"KP_Up","","",null,null],[17,"KP_Right","","",null,null],[17,"KP_Down","","",null,null],[17,"KP_Prior","","",null,null],[17,"KP_Page_Up","","",null,null],[17,"KP_Next","","",null,null],[17,"KP_Page_Down","","",null,null],[17,"KP_End","","",null,null],[17,"KP_Begin","","",null,null],[17,"KP_Insert","","",null,null],[17,"KP_Delete","","",null,null],[17,"KP_Equal","","",null,null],[17,"KP_Multiply","","",null,null],[17,"KP_Add","","",null,null],[17,"KP_Separator","","",null,null],[17,"KP_Subtract","","",null,null],[17,"KP_Decimal","","",null,null],[17,"KP_Divide","","",null,null],[17,"KP_0","","",null,null],[17,"KP_1","","",null,null],[17,"KP_2","","",null,null],[17,"KP_3","","",null,null],[17,"KP_4","","",null,null],[17,"KP_5","","",null,null],[17,"KP_6","","",null,null],[17,"KP_7","","",null,null],[17,"KP_8","","",null,null],[17,"KP_9","","",null,null],[17,"F1","","",null,null],[17,"F2","","",null,null],[17,"F3","","",null,null],[17,"F4","","",null,null],[17,"F5","","",null,null],[17,"F6","","",null,null],[17,"F7","","",null,null],[17,"F8","","",null,null],[17,"F9","","",null,null],[17,"F10","","",null,null],[17,"F11","","",null,null],[17,"L1","","",null,null],[17,"F12","","",null,null],[17,"L2","","",null,null],[17,"F13","","",null,null],[17,"L3","","",null,null],[17,"F14","","",null,null],[17,"L4","","",null,null],[17,"F15","","",null,null],[17,"L5","","",null,null],[17,"F16","","",null,null],[17,"L6","","",null,null],[17,"F17","","",null,null],[17,"L7","","",null,null],[17,"F18","","",null,null],[17,"L8","","",null,null],[17,"F19","","",null,null],[17,"L9","","",null,null],[17,"F20","","",null,null],[17,"L10","","",null,null],[17,"F21","","",null,null],[17,"R1","","",null,null],[17,"F22","","",null,null],[17,"R2","","",null,null],[17,"F23","","",null,null],[17,"R3","","",null,null],[17,"F24","","",null,null],[17,"R4","","",null,null],[17,"F25","","",null,null],[17,"R5","","",null,null],[17,"F26","","",null,null],[17,"R6","","",null,null],[17,"F27","","",null,null],[17,"R7","","",null,null],[17,"F28","","",null,null],[17,"R8","","",null,null],[17,"F29","","",null,null],[17,"R9","","",null,null],[17,"F30","","",null,null],[17,"R10","","",null,null],[17,"F31","","",null,null],[17,"R11","","",null,null],[17,"F32","","",null,null],[17,"R12","","",null,null],[17,"F33","","",null,null],[17,"R13","","",null,null],[17,"F34","","",null,null],[17,"R14","","",null,null],[17,"F35","","",null,null],[17,"R15","","",null,null],[17,"Shift_L","","",null,null],[17,"Shift_R","","",null,null],[17,"Control_L","","",null,null],[17,"Control_R","","",null,null],[17,"Caps_Lock","","",null,null],[17,"Shift_Lock","","",null,null],[17,"Meta_L","","",null,null],[17,"Meta_R","","",null,null],[17,"Alt_L","","",null,null],[17,"Alt_R","","",null,null],[17,"Super_L","","",null,null],[17,"Super_R","","",null,null],[17,"Hyper_L","","",null,null],[17,"Hyper_R","","",null,null],[17,"ISO_Lock","","",null,null],[17,"ISO_Level2_Latch","","",null,null],[17,"ISO_Level3_Shift","","",null,null],[17,"ISO_Level3_Latch","","",null,null],[17,"ISO_Level3_Lock","","",null,null],[17,"ISO_Level5_Shift","","",null,null],[17,"ISO_Level5_Latch","","",null,null],[17,"ISO_Level5_Lock","","",null,null],[17,"ISO_Group_Shift","","",null,null],[17,"ISO_Group_Latch","","",null,null],[17,"ISO_Group_Lock","","",null,null],[17,"ISO_Next_Group","","",null,null],[17,"ISO_Next_Group_Lock","","",null,null],[17,"ISO_Prev_Group","","",null,null],[17,"ISO_Prev_Group_Lock","","",null,null],[17,"ISO_First_Group","","",null,null],[17,"ISO_First_Group_Lock","","",null,null],[17,"ISO_Last_Group","","",null,null],[17,"ISO_Last_Group_Lock","","",null,null],[17,"ISO_Left_Tab","","",null,null],[17,"ISO_Move_Line_Up","","",null,null],[17,"ISO_Move_Line_Down","","",null,null],[17,"ISO_Partial_Line_Up","","",null,null],[17,"ISO_Partial_Line_Down","","",null,null],[17,"ISO_Partial_Space_Left","","",null,null],[17,"ISO_Partial_Space_Right","","",null,null],[17,"ISO_Set_Margin_Left","","",null,null],[17,"ISO_Set_Margin_Right","","",null,null],[17,"ISO_Release_Margin_Left","","",null,null],[17,"ISO_Release_Margin_Right","","",null,null],[17,"ISO_Release_Both_Margins","","",null,null],[17,"ISO_Fast_Cursor_Left","","",null,null],[17,"ISO_Fast_Cursor_Right","","",null,null],[17,"ISO_Fast_Cursor_Up","","",null,null],[17,"ISO_Fast_Cursor_Down","","",null,null],[17,"ISO_Continuous_Underline","","",null,null],[17,"ISO_Discontinuous_Underline","","",null,null],[17,"ISO_Emphasize","","",null,null],[17,"ISO_Center_Object","","",null,null],[17,"ISO_Enter","","",null,null],[17,"dead_grave","","",null,null],[17,"dead_acute","","",null,null],[17,"dead_circumflex","","",null,null],[17,"dead_tilde","","",null,null],[17,"dead_perispomeni","","",null,null],[17,"dead_macron","","",null,null],[17,"dead_breve","","",null,null],[17,"dead_abovedot","","",null,null],[17,"dead_diaeresis","","",null,null],[17,"dead_abovering","","",null,null],[17,"dead_doubleacute","","",null,null],[17,"dead_caron","","",null,null],[17,"dead_cedilla","","",null,null],[17,"dead_ogonek","","",null,null],[17,"dead_iota","","",null,null],[17,"dead_voiced_sound","","",null,null],[17,"dead_semivoiced_sound","","",null,null],[17,"dead_belowdot","","",null,null],[17,"dead_hook","","",null,null],[17,"dead_horn","","",null,null],[17,"dead_stroke","","",null,null],[17,"dead_abovecomma","","",null,null],[17,"dead_psili","","",null,null],[17,"dead_abovereversedcomma","","",null,null],[17,"dead_dasia","","",null,null],[17,"dead_doublegrave","","",null,null],[17,"dead_belowring","","",null,null],[17,"dead_belowmacron","","",null,null],[17,"dead_belowcircumflex","","",null,null],[17,"dead_belowtilde","","",null,null],[17,"dead_belowbreve","","",null,null],[17,"dead_belowdiaeresis","","",null,null],[17,"dead_invertedbreve","","",null,null],[17,"dead_belowcomma","","",null,null],[17,"dead_currency","","",null,null],[17,"dead_a","","",null,null],[17,"dead_A","","",null,null],[17,"dead_e","","",null,null],[17,"dead_E","","",null,null],[17,"dead_i","","",null,null],[17,"dead_I","","",null,null],[17,"dead_o","","",null,null],[17,"dead_O","","",null,null],[17,"dead_u","","",null,null],[17,"dead_U","","",null,null],[17,"dead_small_schwa","","",null,null],[17,"dead_capital_schwa","","",null,null],[17,"dead_greek","","",null,null],[17,"First_Virtual_Screen","","",null,null],[17,"Prev_Virtual_Screen","","",null,null],[17,"Next_Virtual_Screen","","",null,null],[17,"Last_Virtual_Screen","","",null,null],[17,"Terminate_Server","","",null,null],[17,"AccessX_Enable","","",null,null],[17,"AccessX_Feedback_Enable","","",null,null],[17,"RepeatKeys_Enable","","",null,null],[17,"SlowKeys_Enable","","",null,null],[17,"BounceKeys_Enable","","",null,null],[17,"StickyKeys_Enable","","",null,null],[17,"MouseKeys_Enable","","",null,null],[17,"MouseKeys_Accel_Enable","","",null,null],[17,"Overlay1_Enable","","",null,null],[17,"Overlay2_Enable","","",null,null],[17,"AudibleBell_Enable","","",null,null],[17,"Pointer_Left","","",null,null],[17,"Pointer_Right","","",null,null],[17,"Pointer_Up","","",null,null],[17,"Pointer_Down","","",null,null],[17,"Pointer_UpLeft","","",null,null],[17,"Pointer_UpRight","","",null,null],[17,"Pointer_DownLeft","","",null,null],[17,"Pointer_DownRight","","",null,null],[17,"Pointer_Button_Dflt","","",null,null],[17,"Pointer_Button1","","",null,null],[17,"Pointer_Button2","","",null,null],[17,"Pointer_Button3","","",null,null],[17,"Pointer_Button4","","",null,null],[17,"Pointer_Button5","","",null,null],[17,"Pointer_DblClick_Dflt","","",null,null],[17,"Pointer_DblClick1","","",null,null],[17,"Pointer_DblClick2","","",null,null],[17,"Pointer_DblClick3","","",null,null],[17,"Pointer_DblClick4","","",null,null],[17,"Pointer_DblClick5","","",null,null],[17,"Pointer_Drag_Dflt","","",null,null],[17,"Pointer_Drag1","","",null,null],[17,"Pointer_Drag2","","",null,null],[17,"Pointer_Drag3","","",null,null],[17,"Pointer_Drag4","","",null,null],[17,"Pointer_Drag5","","",null,null],[17,"Pointer_EnableKeys","","",null,null],[17,"Pointer_Accelerate","","",null,null],[17,"Pointer_DfltBtnNext","","",null,null],[17,"Pointer_DfltBtnPrev","","",null,null],[17,"ch","","",null,null],[17,"Ch","","",null,null],[17,"CH","","",null,null],[17,"c_h","","",null,null],[17,"C_h","","",null,null],[17,"C_H","","",null,null],[17,"_3270_Duplicate","","",null,null],[17,"_3270_FieldMark","","",null,null],[17,"_3270_Right2","","",null,null],[17,"_3270_Left2","","",null,null],[17,"_3270_BackTab","","",null,null],[17,"_3270_EraseEOF","","",null,null],[17,"_3270_EraseInput","","",null,null],[17,"_3270_Reset","","",null,null],[17,"_3270_Quit","","",null,null],[17,"_3270_PA1","","",null,null],[17,"_3270_PA2","","",null,null],[17,"_3270_PA3","","",null,null],[17,"_3270_Test","","",null,null],[17,"_3270_Attn","","",null,null],[17,"_3270_CursorBlink","","",null,null],[17,"_3270_AltCursor","","",null,null],[17,"_3270_KeyClick","","",null,null],[17,"_3270_Jump","","",null,null],[17,"_3270_Ident","","",null,null],[17,"_3270_Rule","","",null,null],[17,"_3270_Copy","","",null,null],[17,"_3270_Play","","",null,null],[17,"_3270_Setup","","",null,null],[17,"_3270_Record","","",null,null],[17,"_3270_ChangeScreen","","",null,null],[17,"_3270_DeleteWord","","",null,null],[17,"_3270_ExSelect","","",null,null],[17,"_3270_CursorSelect","","",null,null],[17,"_3270_PrintScreen","","",null,null],[17,"_3270_Enter","","",null,null],[17,"space","","",null,null],[17,"exclam","","",null,null],[17,"quotedbl","","",null,null],[17,"numbersign","","",null,null],[17,"dollar","","",null,null],[17,"percent","","",null,null],[17,"ampersand","","",null,null],[17,"apostrophe","","",null,null],[17,"quoteright","","",null,null],[17,"parenleft","","",null,null],[17,"parenright","","",null,null],[17,"asterisk","","",null,null],[17,"plus","","",null,null],[17,"comma","","",null,null],[17,"minus","","",null,null],[17,"period","","",null,null],[17,"slash","","",null,null],[17,"_0","","",null,null],[17,"_1","","",null,null],[17,"_2","","",null,null],[17,"_3","","",null,null],[17,"_4","","",null,null],[17,"_5","","",null,null],[17,"_6","","",null,null],[17,"_7","","",null,null],[17,"_8","","",null,null],[17,"_9","","",null,null],[17,"colon","","",null,null],[17,"semicolon","","",null,null],[17,"less","","",null,null],[17,"equal","","",null,null],[17,"greater","","",null,null],[17,"question","","",null,null],[17,"at","","",null,null],[17,"A","","",null,null],[17,"B","","",null,null],[17,"C","","",null,null],[17,"D","","",null,null],[17,"E","","",null,null],[17,"F","","",null,null],[17,"G","","",null,null],[17,"H","","",null,null],[17,"I","","",null,null],[17,"J","","",null,null],[17,"K","","",null,null],[17,"L","","",null,null],[17,"M","","",null,null],[17,"N","","",null,null],[17,"O","","",null,null],[17,"P","","",null,null],[17,"Q","","",null,null],[17,"R","","",null,null],[17,"S","","",null,null],[17,"T","","",null,null],[17,"U","","",null,null],[17,"V","","",null,null],[17,"W","","",null,null],[17,"X","","",null,null],[17,"Y","","",null,null],[17,"Z","","",null,null],[17,"bracketleft","","",null,null],[17,"backslash","","",null,null],[17,"bracketright","","",null,null],[17,"asciicircum","","",null,null],[17,"underscore","","",null,null],[17,"grave","","",null,null],[17,"quoteleft","","",null,null],[17,"a","","",null,null],[17,"b","","",null,null],[17,"c","","",null,null],[17,"d","","",null,null],[17,"e","","",null,null],[17,"f","","",null,null],[17,"g","","",null,null],[17,"h","","",null,null],[17,"i","","",null,null],[17,"j","","",null,null],[17,"k","","",null,null],[17,"l","","",null,null],[17,"m","","",null,null],[17,"n","","",null,null],[17,"o","","",null,null],[17,"p","","",null,null],[17,"q","","",null,null],[17,"r","","",null,null],[17,"s","","",null,null],[17,"t","","",null,null],[17,"u","","",null,null],[17,"v","","",null,null],[17,"w","","",null,null],[17,"x","","",null,null],[17,"y","","",null,null],[17,"z","","",null,null],[17,"braceleft","","",null,null],[17,"bar","","",null,null],[17,"braceright","","",null,null],[17,"asciitilde","","",null,null],[17,"nobreakspace","","",null,null],[17,"exclamdown","","",null,null],[17,"cent","","",null,null],[17,"sterling","","",null,null],[17,"currency","","",null,null],[17,"yen","","",null,null],[17,"brokenbar","","",null,null],[17,"section","","",null,null],[17,"diaeresis","","",null,null],[17,"copyright","","",null,null],[17,"ordfeminine","","",null,null],[17,"guillemotleft","","",null,null],[17,"notsign","","",null,null],[17,"hyphen","","",null,null],[17,"registered","","",null,null],[17,"macron","","",null,null],[17,"degree","","",null,null],[17,"plusminus","","",null,null],[17,"twosuperior","","",null,null],[17,"threesuperior","","",null,null],[17,"acute","","",null,null],[17,"mu","","",null,null],[17,"paragraph","","",null,null],[17,"periodcentered","","",null,null],[17,"cedilla","","",null,null],[17,"onesuperior","","",null,null],[17,"masculine","","",null,null],[17,"guillemotright","","",null,null],[17,"onequarter","","",null,null],[17,"onehalf","","",null,null],[17,"threequarters","","",null,null],[17,"questiondown","","",null,null],[17,"Agrave","","",null,null],[17,"Aacute","","",null,null],[17,"Acircumflex","","",null,null],[17,"Atilde","","",null,null],[17,"Adiaeresis","","",null,null],[17,"Aring","","",null,null],[17,"AE","","",null,null],[17,"Ccedilla","","",null,null],[17,"Egrave","","",null,null],[17,"Eacute","","",null,null],[17,"Ecircumflex","","",null,null],[17,"Ediaeresis","","",null,null],[17,"Igrave","","",null,null],[17,"Iacute","","",null,null],[17,"Icircumflex","","",null,null],[17,"Idiaeresis","","",null,null],[17,"ETH","","",null,null],[17,"Eth","","",null,null],[17,"Ntilde","","",null,null],[17,"Ograve","","",null,null],[17,"Oacute","","",null,null],[17,"Ocircumflex","","",null,null],[17,"Otilde","","",null,null],[17,"Odiaeresis","","",null,null],[17,"multiply","","",null,null],[17,"Oslash","","",null,null],[17,"Ooblique","","",null,null],[17,"Ugrave","","",null,null],[17,"Uacute","","",null,null],[17,"Ucircumflex","","",null,null],[17,"Udiaeresis","","",null,null],[17,"Yacute","","",null,null],[17,"THORN","","",null,null],[17,"Thorn","","",null,null],[17,"ssharp","","",null,null],[17,"agrave","","",null,null],[17,"aacute","","",null,null],[17,"acircumflex","","",null,null],[17,"atilde","","",null,null],[17,"adiaeresis","","",null,null],[17,"aring","","",null,null],[17,"ae","","",null,null],[17,"ccedilla","","",null,null],[17,"egrave","","",null,null],[17,"eacute","","",null,null],[17,"ecircumflex","","",null,null],[17,"ediaeresis","","",null,null],[17,"igrave","","",null,null],[17,"iacute","","",null,null],[17,"icircumflex","","",null,null],[17,"idiaeresis","","",null,null],[17,"eth","","",null,null],[17,"ntilde","","",null,null],[17,"ograve","","",null,null],[17,"oacute","","",null,null],[17,"ocircumflex","","",null,null],[17,"otilde","","",null,null],[17,"odiaeresis","","",null,null],[17,"division","","",null,null],[17,"oslash","","",null,null],[17,"ooblique","","",null,null],[17,"ugrave","","",null,null],[17,"uacute","","",null,null],[17,"ucircumflex","","",null,null],[17,"udiaeresis","","",null,null],[17,"yacute","","",null,null],[17,"thorn","","",null,null],[17,"ydiaeresis","","",null,null],[17,"Aogonek","","",null,null],[17,"breve","","",null,null],[17,"Lstroke","","",null,null],[17,"Lcaron","","",null,null],[17,"Sacute","","",null,null],[17,"Scaron","","",null,null],[17,"Scedilla","","",null,null],[17,"Tcaron","","",null,null],[17,"Zacute","","",null,null],[17,"Zcaron","","",null,null],[17,"Zabovedot","","",null,null],[17,"aogonek","","",null,null],[17,"ogonek","","",null,null],[17,"lstroke","","",null,null],[17,"lcaron","","",null,null],[17,"sacute","","",null,null],[17,"caron","","",null,null],[17,"scaron","","",null,null],[17,"scedilla","","",null,null],[17,"tcaron","","",null,null],[17,"zacute","","",null,null],[17,"doubleacute","","",null,null],[17,"zcaron","","",null,null],[17,"zabovedot","","",null,null],[17,"Racute","","",null,null],[17,"Abreve","","",null,null],[17,"Lacute","","",null,null],[17,"Cacute","","",null,null],[17,"Ccaron","","",null,null],[17,"Eogonek","","",null,null],[17,"Ecaron","","",null,null],[17,"Dcaron","","",null,null],[17,"Dstroke","","",null,null],[17,"Nacute","","",null,null],[17,"Ncaron","","",null,null],[17,"Odoubleacute","","",null,null],[17,"Rcaron","","",null,null],[17,"Uring","","",null,null],[17,"Udoubleacute","","",null,null],[17,"Tcedilla","","",null,null],[17,"racute","","",null,null],[17,"abreve","","",null,null],[17,"lacute","","",null,null],[17,"cacute","","",null,null],[17,"ccaron","","",null,null],[17,"eogonek","","",null,null],[17,"ecaron","","",null,null],[17,"dcaron","","",null,null],[17,"dstroke","","",null,null],[17,"nacute","","",null,null],[17,"ncaron","","",null,null],[17,"odoubleacute","","",null,null],[17,"rcaron","","",null,null],[17,"uring","","",null,null],[17,"udoubleacute","","",null,null],[17,"tcedilla","","",null,null],[17,"abovedot","","",null,null],[17,"Hstroke","","",null,null],[17,"Hcircumflex","","",null,null],[17,"Iabovedot","","",null,null],[17,"Gbreve","","",null,null],[17,"Jcircumflex","","",null,null],[17,"hstroke","","",null,null],[17,"hcircumflex","","",null,null],[17,"idotless","","",null,null],[17,"gbreve","","",null,null],[17,"jcircumflex","","",null,null],[17,"Cabovedot","","",null,null],[17,"Ccircumflex","","",null,null],[17,"Gabovedot","","",null,null],[17,"Gcircumflex","","",null,null],[17,"Ubreve","","",null,null],[17,"Scircumflex","","",null,null],[17,"cabovedot","","",null,null],[17,"ccircumflex","","",null,null],[17,"gabovedot","","",null,null],[17,"gcircumflex","","",null,null],[17,"ubreve","","",null,null],[17,"scircumflex","","",null,null],[17,"kra","","",null,null],[17,"kappa","","",null,null],[17,"Rcedilla","","",null,null],[17,"Itilde","","",null,null],[17,"Lcedilla","","",null,null],[17,"Emacron","","",null,null],[17,"Gcedilla","","",null,null],[17,"Tslash","","",null,null],[17,"rcedilla","","",null,null],[17,"itilde","","",null,null],[17,"lcedilla","","",null,null],[17,"emacron","","",null,null],[17,"gcedilla","","",null,null],[17,"tslash","","",null,null],[17,"ENG","","",null,null],[17,"eng","","",null,null],[17,"Amacron","","",null,null],[17,"Iogonek","","",null,null],[17,"Eabovedot","","",null,null],[17,"Imacron","","",null,null],[17,"Ncedilla","","",null,null],[17,"Omacron","","",null,null],[17,"Kcedilla","","",null,null],[17,"Uogonek","","",null,null],[17,"Utilde","","",null,null],[17,"Umacron","","",null,null],[17,"amacron","","",null,null],[17,"iogonek","","",null,null],[17,"eabovedot","","",null,null],[17,"imacron","","",null,null],[17,"ncedilla","","",null,null],[17,"omacron","","",null,null],[17,"kcedilla","","",null,null],[17,"uogonek","","",null,null],[17,"utilde","","",null,null],[17,"umacron","","",null,null],[17,"Wcircumflex","","",null,null],[17,"wcircumflex","","",null,null],[17,"Ycircumflex","","",null,null],[17,"ycircumflex","","",null,null],[17,"Babovedot","","",null,null],[17,"babovedot","","",null,null],[17,"Dabovedot","","",null,null],[17,"dabovedot","","",null,null],[17,"Fabovedot","","",null,null],[17,"fabovedot","","",null,null],[17,"Mabovedot","","",null,null],[17,"mabovedot","","",null,null],[17,"Pabovedot","","",null,null],[17,"pabovedot","","",null,null],[17,"Sabovedot","","",null,null],[17,"sabovedot","","",null,null],[17,"Tabovedot","","",null,null],[17,"tabovedot","","",null,null],[17,"Wgrave","","",null,null],[17,"wgrave","","",null,null],[17,"Wacute","","",null,null],[17,"wacute","","",null,null],[17,"Wdiaeresis","","",null,null],[17,"wdiaeresis","","",null,null],[17,"Ygrave","","",null,null],[17,"ygrave","","",null,null],[17,"OE","","",null,null],[17,"oe","","",null,null],[17,"Ydiaeresis","","",null,null],[17,"overline","","",null,null],[17,"kana_fullstop","","",null,null],[17,"kana_openingbracket","","",null,null],[17,"kana_closingbracket","","",null,null],[17,"kana_comma","","",null,null],[17,"kana_conjunctive","","",null,null],[17,"kana_middledot","","",null,null],[17,"kana_WO","","",null,null],[17,"kana_a","","",null,null],[17,"kana_i","","",null,null],[17,"kana_u","","",null,null],[17,"kana_e","","",null,null],[17,"kana_o","","",null,null],[17,"kana_ya","","",null,null],[17,"kana_yu","","",null,null],[17,"kana_yo","","",null,null],[17,"kana_tsu","","",null,null],[17,"kana_tu","","",null,null],[17,"prolongedsound","","",null,null],[17,"kana_A","","",null,null],[17,"kana_I","","",null,null],[17,"kana_U","","",null,null],[17,"kana_E","","",null,null],[17,"kana_O","","",null,null],[17,"kana_KA","","",null,null],[17,"kana_KI","","",null,null],[17,"kana_KU","","",null,null],[17,"kana_KE","","",null,null],[17,"kana_KO","","",null,null],[17,"kana_SA","","",null,null],[17,"kana_SHI","","",null,null],[17,"kana_SU","","",null,null],[17,"kana_SE","","",null,null],[17,"kana_SO","","",null,null],[17,"kana_TA","","",null,null],[17,"kana_CHI","","",null,null],[17,"kana_TI","","",null,null],[17,"kana_TSU","","",null,null],[17,"kana_TU","","",null,null],[17,"kana_TE","","",null,null],[17,"kana_TO","","",null,null],[17,"kana_NA","","",null,null],[17,"kana_NI","","",null,null],[17,"kana_NU","","",null,null],[17,"kana_NE","","",null,null],[17,"kana_NO","","",null,null],[17,"kana_HA","","",null,null],[17,"kana_HI","","",null,null],[17,"kana_FU","","",null,null],[17,"kana_HU","","",null,null],[17,"kana_HE","","",null,null],[17,"kana_HO","","",null,null],[17,"kana_MA","","",null,null],[17,"kana_MI","","",null,null],[17,"kana_MU","","",null,null],[17,"kana_ME","","",null,null],[17,"kana_MO","","",null,null],[17,"kana_YA","","",null,null],[17,"kana_YU","","",null,null],[17,"kana_YO","","",null,null],[17,"kana_RA","","",null,null],[17,"kana_RI","","",null,null],[17,"kana_RU","","",null,null],[17,"kana_RE","","",null,null],[17,"kana_RO","","",null,null],[17,"kana_WA","","",null,null],[17,"kana_N","","",null,null],[17,"voicedsound","","",null,null],[17,"semivoicedsound","","",null,null],[17,"kana_switch","","",null,null],[17,"Farsi_0","","",null,null],[17,"Farsi_1","","",null,null],[17,"Farsi_2","","",null,null],[17,"Farsi_3","","",null,null],[17,"Farsi_4","","",null,null],[17,"Farsi_5","","",null,null],[17,"Farsi_6","","",null,null],[17,"Farsi_7","","",null,null],[17,"Farsi_8","","",null,null],[17,"Farsi_9","","",null,null],[17,"Arabic_percent","","",null,null],[17,"Arabic_superscript_alef","","",null,null],[17,"Arabic_tteh","","",null,null],[17,"Arabic_peh","","",null,null],[17,"Arabic_tcheh","","",null,null],[17,"Arabic_ddal","","",null,null],[17,"Arabic_rreh","","",null,null],[17,"Arabic_comma","","",null,null],[17,"Arabic_fullstop","","",null,null],[17,"Arabic_0","","",null,null],[17,"Arabic_1","","",null,null],[17,"Arabic_2","","",null,null],[17,"Arabic_3","","",null,null],[17,"Arabic_4","","",null,null],[17,"Arabic_5","","",null,null],[17,"Arabic_6","","",null,null],[17,"Arabic_7","","",null,null],[17,"Arabic_8","","",null,null],[17,"Arabic_9","","",null,null],[17,"Arabic_semicolon","","",null,null],[17,"Arabic_question_mark","","",null,null],[17,"Arabic_hamza","","",null,null],[17,"Arabic_maddaonalef","","",null,null],[17,"Arabic_hamzaonalef","","",null,null],[17,"Arabic_hamzaonwaw","","",null,null],[17,"Arabic_hamzaunderalef","","",null,null],[17,"Arabic_hamzaonyeh","","",null,null],[17,"Arabic_alef","","",null,null],[17,"Arabic_beh","","",null,null],[17,"Arabic_tehmarbuta","","",null,null],[17,"Arabic_teh","","",null,null],[17,"Arabic_theh","","",null,null],[17,"Arabic_jeem","","",null,null],[17,"Arabic_hah","","",null,null],[17,"Arabic_khah","","",null,null],[17,"Arabic_dal","","",null,null],[17,"Arabic_thal","","",null,null],[17,"Arabic_ra","","",null,null],[17,"Arabic_zain","","",null,null],[17,"Arabic_seen","","",null,null],[17,"Arabic_sheen","","",null,null],[17,"Arabic_sad","","",null,null],[17,"Arabic_dad","","",null,null],[17,"Arabic_tah","","",null,null],[17,"Arabic_zah","","",null,null],[17,"Arabic_ain","","",null,null],[17,"Arabic_ghain","","",null,null],[17,"Arabic_tatweel","","",null,null],[17,"Arabic_feh","","",null,null],[17,"Arabic_qaf","","",null,null],[17,"Arabic_kaf","","",null,null],[17,"Arabic_lam","","",null,null],[17,"Arabic_meem","","",null,null],[17,"Arabic_noon","","",null,null],[17,"Arabic_ha","","",null,null],[17,"Arabic_heh","","",null,null],[17,"Arabic_waw","","",null,null],[17,"Arabic_alefmaksura","","",null,null],[17,"Arabic_yeh","","",null,null],[17,"Arabic_fathatan","","",null,null],[17,"Arabic_dammatan","","",null,null],[17,"Arabic_kasratan","","",null,null],[17,"Arabic_fatha","","",null,null],[17,"Arabic_damma","","",null,null],[17,"Arabic_kasra","","",null,null],[17,"Arabic_shadda","","",null,null],[17,"Arabic_sukun","","",null,null],[17,"Arabic_madda_above","","",null,null],[17,"Arabic_hamza_above","","",null,null],[17,"Arabic_hamza_below","","",null,null],[17,"Arabic_jeh","","",null,null],[17,"Arabic_veh","","",null,null],[17,"Arabic_keheh","","",null,null],[17,"Arabic_gaf","","",null,null],[17,"Arabic_noon_ghunna","","",null,null],[17,"Arabic_heh_doachashmee","","",null,null],[17,"Farsi_yeh","","",null,null],[17,"Arabic_farsi_yeh","","",null,null],[17,"Arabic_yeh_baree","","",null,null],[17,"Arabic_heh_goal","","",null,null],[17,"Arabic_switch","","",null,null],[17,"Cyrillic_GHE_bar","","",null,null],[17,"Cyrillic_ghe_bar","","",null,null],[17,"Cyrillic_ZHE_descender","","",null,null],[17,"Cyrillic_zhe_descender","","",null,null],[17,"Cyrillic_KA_descender","","",null,null],[17,"Cyrillic_ka_descender","","",null,null],[17,"Cyrillic_KA_vertstroke","","",null,null],[17,"Cyrillic_ka_vertstroke","","",null,null],[17,"Cyrillic_EN_descender","","",null,null],[17,"Cyrillic_en_descender","","",null,null],[17,"Cyrillic_U_straight","","",null,null],[17,"Cyrillic_u_straight","","",null,null],[17,"Cyrillic_U_straight_bar","","",null,null],[17,"Cyrillic_u_straight_bar","","",null,null],[17,"Cyrillic_HA_descender","","",null,null],[17,"Cyrillic_ha_descender","","",null,null],[17,"Cyrillic_CHE_descender","","",null,null],[17,"Cyrillic_che_descender","","",null,null],[17,"Cyrillic_CHE_vertstroke","","",null,null],[17,"Cyrillic_che_vertstroke","","",null,null],[17,"Cyrillic_SHHA","","",null,null],[17,"Cyrillic_shha","","",null,null],[17,"Cyrillic_SCHWA","","",null,null],[17,"Cyrillic_schwa","","",null,null],[17,"Cyrillic_I_macron","","",null,null],[17,"Cyrillic_i_macron","","",null,null],[17,"Cyrillic_O_bar","","",null,null],[17,"Cyrillic_o_bar","","",null,null],[17,"Cyrillic_U_macron","","",null,null],[17,"Cyrillic_u_macron","","",null,null],[17,"Serbian_dje","","",null,null],[17,"Macedonia_gje","","",null,null],[17,"Cyrillic_io","","",null,null],[17,"Ukrainian_ie","","",null,null],[17,"Ukranian_je","","",null,null],[17,"Macedonia_dse","","",null,null],[17,"Ukrainian_i","","",null,null],[17,"Ukranian_i","","",null,null],[17,"Ukrainian_yi","","",null,null],[17,"Ukranian_yi","","",null,null],[17,"Cyrillic_je","","",null,null],[17,"Serbian_je","","",null,null],[17,"Cyrillic_lje","","",null,null],[17,"Serbian_lje","","",null,null],[17,"Cyrillic_nje","","",null,null],[17,"Serbian_nje","","",null,null],[17,"Serbian_tshe","","",null,null],[17,"Macedonia_kje","","",null,null],[17,"Ukrainian_ghe_with_upturn","","",null,null],[17,"Byelorussian_shortu","","",null,null],[17,"Cyrillic_dzhe","","",null,null],[17,"Serbian_dze","","",null,null],[17,"numerosign","","",null,null],[17,"Serbian_DJE","","",null,null],[17,"Macedonia_GJE","","",null,null],[17,"Cyrillic_IO","","",null,null],[17,"Ukrainian_IE","","",null,null],[17,"Ukranian_JE","","",null,null],[17,"Macedonia_DSE","","",null,null],[17,"Ukrainian_I","","",null,null],[17,"Ukranian_I","","",null,null],[17,"Ukrainian_YI","","",null,null],[17,"Ukranian_YI","","",null,null],[17,"Cyrillic_JE","","",null,null],[17,"Serbian_JE","","",null,null],[17,"Cyrillic_LJE","","",null,null],[17,"Serbian_LJE","","",null,null],[17,"Cyrillic_NJE","","",null,null],[17,"Serbian_NJE","","",null,null],[17,"Serbian_TSHE","","",null,null],[17,"Macedonia_KJE","","",null,null],[17,"Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"Byelorussian_SHORTU","","",null,null],[17,"Cyrillic_DZHE","","",null,null],[17,"Serbian_DZE","","",null,null],[17,"Cyrillic_yu","","",null,null],[17,"Cyrillic_a","","",null,null],[17,"Cyrillic_be","","",null,null],[17,"Cyrillic_tse","","",null,null],[17,"Cyrillic_de","","",null,null],[17,"Cyrillic_ie","","",null,null],[17,"Cyrillic_ef","","",null,null],[17,"Cyrillic_ghe","","",null,null],[17,"Cyrillic_ha","","",null,null],[17,"Cyrillic_i","","",null,null],[17,"Cyrillic_shorti","","",null,null],[17,"Cyrillic_ka","","",null,null],[17,"Cyrillic_el","","",null,null],[17,"Cyrillic_em","","",null,null],[17,"Cyrillic_en","","",null,null],[17,"Cyrillic_o","","",null,null],[17,"Cyrillic_pe","","",null,null],[17,"Cyrillic_ya","","",null,null],[17,"Cyrillic_er","","",null,null],[17,"Cyrillic_es","","",null,null],[17,"Cyrillic_te","","",null,null],[17,"Cyrillic_u","","",null,null],[17,"Cyrillic_zhe","","",null,null],[17,"Cyrillic_ve","","",null,null],[17,"Cyrillic_softsign","","",null,null],[17,"Cyrillic_yeru","","",null,null],[17,"Cyrillic_ze","","",null,null],[17,"Cyrillic_sha","","",null,null],[17,"Cyrillic_e","","",null,null],[17,"Cyrillic_shcha","","",null,null],[17,"Cyrillic_che","","",null,null],[17,"Cyrillic_hardsign","","",null,null],[17,"Cyrillic_YU","","",null,null],[17,"Cyrillic_A","","",null,null],[17,"Cyrillic_BE","","",null,null],[17,"Cyrillic_TSE","","",null,null],[17,"Cyrillic_DE","","",null,null],[17,"Cyrillic_IE","","",null,null],[17,"Cyrillic_EF","","",null,null],[17,"Cyrillic_GHE","","",null,null],[17,"Cyrillic_HA","","",null,null],[17,"Cyrillic_I","","",null,null],[17,"Cyrillic_SHORTI","","",null,null],[17,"Cyrillic_KA","","",null,null],[17,"Cyrillic_EL","","",null,null],[17,"Cyrillic_EM","","",null,null],[17,"Cyrillic_EN","","",null,null],[17,"Cyrillic_O","","",null,null],[17,"Cyrillic_PE","","",null,null],[17,"Cyrillic_YA","","",null,null],[17,"Cyrillic_ER","","",null,null],[17,"Cyrillic_ES","","",null,null],[17,"Cyrillic_TE","","",null,null],[17,"Cyrillic_U","","",null,null],[17,"Cyrillic_ZHE","","",null,null],[17,"Cyrillic_VE","","",null,null],[17,"Cyrillic_SOFTSIGN","","",null,null],[17,"Cyrillic_YERU","","",null,null],[17,"Cyrillic_ZE","","",null,null],[17,"Cyrillic_SHA","","",null,null],[17,"Cyrillic_E","","",null,null],[17,"Cyrillic_SHCHA","","",null,null],[17,"Cyrillic_CHE","","",null,null],[17,"Cyrillic_HARDSIGN","","",null,null],[17,"Greek_ALPHAaccent","","",null,null],[17,"Greek_EPSILONaccent","","",null,null],[17,"Greek_ETAaccent","","",null,null],[17,"Greek_IOTAaccent","","",null,null],[17,"Greek_IOTAdieresis","","",null,null],[17,"Greek_IOTAdiaeresis","","",null,null],[17,"Greek_OMICRONaccent","","",null,null],[17,"Greek_UPSILONaccent","","",null,null],[17,"Greek_UPSILONdieresis","","",null,null],[17,"Greek_OMEGAaccent","","",null,null],[17,"Greek_accentdieresis","","",null,null],[17,"Greek_horizbar","","",null,null],[17,"Greek_alphaaccent","","",null,null],[17,"Greek_epsilonaccent","","",null,null],[17,"Greek_etaaccent","","",null,null],[17,"Greek_iotaaccent","","",null,null],[17,"Greek_iotadieresis","","",null,null],[17,"Greek_iotaaccentdieresis","","",null,null],[17,"Greek_omicronaccent","","",null,null],[17,"Greek_upsilonaccent","","",null,null],[17,"Greek_upsilondieresis","","",null,null],[17,"Greek_upsilonaccentdieresis","","",null,null],[17,"Greek_omegaaccent","","",null,null],[17,"Greek_ALPHA","","",null,null],[17,"Greek_BETA","","",null,null],[17,"Greek_GAMMA","","",null,null],[17,"Greek_DELTA","","",null,null],[17,"Greek_EPSILON","","",null,null],[17,"Greek_ZETA","","",null,null],[17,"Greek_ETA","","",null,null],[17,"Greek_THETA","","",null,null],[17,"Greek_IOTA","","",null,null],[17,"Greek_KAPPA","","",null,null],[17,"Greek_LAMDA","","",null,null],[17,"Greek_LAMBDA","","",null,null],[17,"Greek_MU","","",null,null],[17,"Greek_NU","","",null,null],[17,"Greek_XI","","",null,null],[17,"Greek_OMICRON","","",null,null],[17,"Greek_PI","","",null,null],[17,"Greek_RHO","","",null,null],[17,"Greek_SIGMA","","",null,null],[17,"Greek_TAU","","",null,null],[17,"Greek_UPSILON","","",null,null],[17,"Greek_PHI","","",null,null],[17,"Greek_CHI","","",null,null],[17,"Greek_PSI","","",null,null],[17,"Greek_OMEGA","","",null,null],[17,"Greek_alpha","","",null,null],[17,"Greek_beta","","",null,null],[17,"Greek_gamma","","",null,null],[17,"Greek_delta","","",null,null],[17,"Greek_epsilon","","",null,null],[17,"Greek_zeta","","",null,null],[17,"Greek_eta","","",null,null],[17,"Greek_theta","","",null,null],[17,"Greek_iota","","",null,null],[17,"Greek_kappa","","",null,null],[17,"Greek_lamda","","",null,null],[17,"Greek_lambda","","",null,null],[17,"Greek_mu","","",null,null],[17,"Greek_nu","","",null,null],[17,"Greek_xi","","",null,null],[17,"Greek_omicron","","",null,null],[17,"Greek_pi","","",null,null],[17,"Greek_rho","","",null,null],[17,"Greek_sigma","","",null,null],[17,"Greek_finalsmallsigma","","",null,null],[17,"Greek_tau","","",null,null],[17,"Greek_upsilon","","",null,null],[17,"Greek_phi","","",null,null],[17,"Greek_chi","","",null,null],[17,"Greek_psi","","",null,null],[17,"Greek_omega","","",null,null],[17,"Greek_switch","","",null,null],[17,"leftradical","","",null,null],[17,"topleftradical","","",null,null],[17,"horizconnector","","",null,null],[17,"topintegral","","",null,null],[17,"botintegral","","",null,null],[17,"vertconnector","","",null,null],[17,"topleftsqbracket","","",null,null],[17,"botleftsqbracket","","",null,null],[17,"toprightsqbracket","","",null,null],[17,"botrightsqbracket","","",null,null],[17,"topleftparens","","",null,null],[17,"botleftparens","","",null,null],[17,"toprightparens","","",null,null],[17,"botrightparens","","",null,null],[17,"leftmiddlecurlybrace","","",null,null],[17,"rightmiddlecurlybrace","","",null,null],[17,"topleftsummation","","",null,null],[17,"botleftsummation","","",null,null],[17,"topvertsummationconnector","","",null,null],[17,"botvertsummationconnector","","",null,null],[17,"toprightsummation","","",null,null],[17,"botrightsummation","","",null,null],[17,"rightmiddlesummation","","",null,null],[17,"lessthanequal","","",null,null],[17,"notequal","","",null,null],[17,"greaterthanequal","","",null,null],[17,"integral","","",null,null],[17,"therefore","","",null,null],[17,"variation","","",null,null],[17,"infinity","","",null,null],[17,"nabla","","",null,null],[17,"approximate","","",null,null],[17,"similarequal","","",null,null],[17,"ifonlyif","","",null,null],[17,"implies","","",null,null],[17,"identical","","",null,null],[17,"radical","","",null,null],[17,"includedin","","",null,null],[17,"includes","","",null,null],[17,"intersection","","",null,null],[17,"union","","",null,null],[17,"logicaland","","",null,null],[17,"logicalor","","",null,null],[17,"partialderivative","","",null,null],[17,"function","","",null,null],[17,"leftarrow","","",null,null],[17,"uparrow","","",null,null],[17,"rightarrow","","",null,null],[17,"downarrow","","",null,null],[17,"blank","","",null,null],[17,"soliddiamond","","",null,null],[17,"checkerboard","","",null,null],[17,"ht","","",null,null],[17,"ff","","",null,null],[17,"cr","","",null,null],[17,"lf","","",null,null],[17,"nl","","",null,null],[17,"vt","","",null,null],[17,"lowrightcorner","","",null,null],[17,"uprightcorner","","",null,null],[17,"upleftcorner","","",null,null],[17,"lowleftcorner","","",null,null],[17,"crossinglines","","",null,null],[17,"horizlinescan1","","",null,null],[17,"horizlinescan3","","",null,null],[17,"horizlinescan5","","",null,null],[17,"horizlinescan7","","",null,null],[17,"horizlinescan9","","",null,null],[17,"leftt","","",null,null],[17,"rightt","","",null,null],[17,"bott","","",null,null],[17,"topt","","",null,null],[17,"vertbar","","",null,null],[17,"emspace","","",null,null],[17,"enspace","","",null,null],[17,"em3space","","",null,null],[17,"em4space","","",null,null],[17,"digitspace","","",null,null],[17,"punctspace","","",null,null],[17,"thinspace","","",null,null],[17,"hairspace","","",null,null],[17,"emdash","","",null,null],[17,"endash","","",null,null],[17,"signifblank","","",null,null],[17,"ellipsis","","",null,null],[17,"doubbaselinedot","","",null,null],[17,"onethird","","",null,null],[17,"twothirds","","",null,null],[17,"onefifth","","",null,null],[17,"twofifths","","",null,null],[17,"threefifths","","",null,null],[17,"fourfifths","","",null,null],[17,"onesixth","","",null,null],[17,"fivesixths","","",null,null],[17,"careof","","",null,null],[17,"figdash","","",null,null],[17,"leftanglebracket","","",null,null],[17,"decimalpoint","","",null,null],[17,"rightanglebracket","","",null,null],[17,"marker","","",null,null],[17,"oneeighth","","",null,null],[17,"threeeighths","","",null,null],[17,"fiveeighths","","",null,null],[17,"seveneighths","","",null,null],[17,"trademark","","",null,null],[17,"signaturemark","","",null,null],[17,"trademarkincircle","","",null,null],[17,"leftopentriangle","","",null,null],[17,"rightopentriangle","","",null,null],[17,"emopencircle","","",null,null],[17,"emopenrectangle","","",null,null],[17,"leftsinglequotemark","","",null,null],[17,"rightsinglequotemark","","",null,null],[17,"leftdoublequotemark","","",null,null],[17,"rightdoublequotemark","","",null,null],[17,"prescription","","",null,null],[17,"permille","","",null,null],[17,"minutes","","",null,null],[17,"seconds","","",null,null],[17,"latincross","","",null,null],[17,"hexagram","","",null,null],[17,"filledrectbullet","","",null,null],[17,"filledlefttribullet","","",null,null],[17,"filledrighttribullet","","",null,null],[17,"emfilledcircle","","",null,null],[17,"emfilledrect","","",null,null],[17,"enopencircbullet","","",null,null],[17,"enopensquarebullet","","",null,null],[17,"openrectbullet","","",null,null],[17,"opentribulletup","","",null,null],[17,"opentribulletdown","","",null,null],[17,"openstar","","",null,null],[17,"enfilledcircbullet","","",null,null],[17,"enfilledsqbullet","","",null,null],[17,"filledtribulletup","","",null,null],[17,"filledtribulletdown","","",null,null],[17,"leftpointer","","",null,null],[17,"rightpointer","","",null,null],[17,"club","","",null,null],[17,"diamond","","",null,null],[17,"heart","","",null,null],[17,"maltesecross","","",null,null],[17,"dagger","","",null,null],[17,"doubledagger","","",null,null],[17,"checkmark","","",null,null],[17,"ballotcross","","",null,null],[17,"musicalsharp","","",null,null],[17,"musicalflat","","",null,null],[17,"malesymbol","","",null,null],[17,"femalesymbol","","",null,null],[17,"telephone","","",null,null],[17,"telephonerecorder","","",null,null],[17,"phonographcopyright","","",null,null],[17,"caret","","",null,null],[17,"singlelowquotemark","","",null,null],[17,"doublelowquotemark","","",null,null],[17,"cursor","","",null,null],[17,"leftcaret","","",null,null],[17,"rightcaret","","",null,null],[17,"downcaret","","",null,null],[17,"upcaret","","",null,null],[17,"overbar","","",null,null],[17,"downtack","","",null,null],[17,"upshoe","","",null,null],[17,"downstile","","",null,null],[17,"underbar","","",null,null],[17,"jot","","",null,null],[17,"quad","","",null,null],[17,"uptack","","",null,null],[17,"circle","","",null,null],[17,"upstile","","",null,null],[17,"downshoe","","",null,null],[17,"rightshoe","","",null,null],[17,"leftshoe","","",null,null],[17,"lefttack","","",null,null],[17,"righttack","","",null,null],[17,"hebrew_doublelowline","","",null,null],[17,"hebrew_aleph","","",null,null],[17,"hebrew_bet","","",null,null],[17,"hebrew_beth","","",null,null],[17,"hebrew_gimel","","",null,null],[17,"hebrew_gimmel","","",null,null],[17,"hebrew_dalet","","",null,null],[17,"hebrew_daleth","","",null,null],[17,"hebrew_he","","",null,null],[17,"hebrew_waw","","",null,null],[17,"hebrew_zain","","",null,null],[17,"hebrew_zayin","","",null,null],[17,"hebrew_chet","","",null,null],[17,"hebrew_het","","",null,null],[17,"hebrew_tet","","",null,null],[17,"hebrew_teth","","",null,null],[17,"hebrew_yod","","",null,null],[17,"hebrew_finalkaph","","",null,null],[17,"hebrew_kaph","","",null,null],[17,"hebrew_lamed","","",null,null],[17,"hebrew_finalmem","","",null,null],[17,"hebrew_mem","","",null,null],[17,"hebrew_finalnun","","",null,null],[17,"hebrew_nun","","",null,null],[17,"hebrew_samech","","",null,null],[17,"hebrew_samekh","","",null,null],[17,"hebrew_ayin","","",null,null],[17,"hebrew_finalpe","","",null,null],[17,"hebrew_pe","","",null,null],[17,"hebrew_finalzade","","",null,null],[17,"hebrew_finalzadi","","",null,null],[17,"hebrew_zade","","",null,null],[17,"hebrew_zadi","","",null,null],[17,"hebrew_qoph","","",null,null],[17,"hebrew_kuf","","",null,null],[17,"hebrew_resh","","",null,null],[17,"hebrew_shin","","",null,null],[17,"hebrew_taw","","",null,null],[17,"hebrew_taf","","",null,null],[17,"Hebrew_switch","","",null,null],[17,"Thai_kokai","","",null,null],[17,"Thai_khokhai","","",null,null],[17,"Thai_khokhuat","","",null,null],[17,"Thai_khokhwai","","",null,null],[17,"Thai_khokhon","","",null,null],[17,"Thai_khorakhang","","",null,null],[17,"Thai_ngongu","","",null,null],[17,"Thai_chochan","","",null,null],[17,"Thai_choching","","",null,null],[17,"Thai_chochang","","",null,null],[17,"Thai_soso","","",null,null],[17,"Thai_chochoe","","",null,null],[17,"Thai_yoying","","",null,null],[17,"Thai_dochada","","",null,null],[17,"Thai_topatak","","",null,null],[17,"Thai_thothan","","",null,null],[17,"Thai_thonangmontho","","",null,null],[17,"Thai_thophuthao","","",null,null],[17,"Thai_nonen","","",null,null],[17,"Thai_dodek","","",null,null],[17,"Thai_totao","","",null,null],[17,"Thai_thothung","","",null,null],[17,"Thai_thothahan","","",null,null],[17,"Thai_thothong","","",null,null],[17,"Thai_nonu","","",null,null],[17,"Thai_bobaimai","","",null,null],[17,"Thai_popla","","",null,null],[17,"Thai_phophung","","",null,null],[17,"Thai_fofa","","",null,null],[17,"Thai_phophan","","",null,null],[17,"Thai_fofan","","",null,null],[17,"Thai_phosamphao","","",null,null],[17,"Thai_moma","","",null,null],[17,"Thai_yoyak","","",null,null],[17,"Thai_rorua","","",null,null],[17,"Thai_ru","","",null,null],[17,"Thai_loling","","",null,null],[17,"Thai_lu","","",null,null],[17,"Thai_wowaen","","",null,null],[17,"Thai_sosala","","",null,null],[17,"Thai_sorusi","","",null,null],[17,"Thai_sosua","","",null,null],[17,"Thai_hohip","","",null,null],[17,"Thai_lochula","","",null,null],[17,"Thai_oang","","",null,null],[17,"Thai_honokhuk","","",null,null],[17,"Thai_paiyannoi","","",null,null],[17,"Thai_saraa","","",null,null],[17,"Thai_maihanakat","","",null,null],[17,"Thai_saraaa","","",null,null],[17,"Thai_saraam","","",null,null],[17,"Thai_sarai","","",null,null],[17,"Thai_saraii","","",null,null],[17,"Thai_saraue","","",null,null],[17,"Thai_sarauee","","",null,null],[17,"Thai_sarau","","",null,null],[17,"Thai_sarauu","","",null,null],[17,"Thai_phinthu","","",null,null],[17,"Thai_maihanakat_maitho","","",null,null],[17,"Thai_baht","","",null,null],[17,"Thai_sarae","","",null,null],[17,"Thai_saraae","","",null,null],[17,"Thai_sarao","","",null,null],[17,"Thai_saraaimaimuan","","",null,null],[17,"Thai_saraaimaimalai","","",null,null],[17,"Thai_lakkhangyao","","",null,null],[17,"Thai_maiyamok","","",null,null],[17,"Thai_maitaikhu","","",null,null],[17,"Thai_maiek","","",null,null],[17,"Thai_maitho","","",null,null],[17,"Thai_maitri","","",null,null],[17,"Thai_maichattawa","","",null,null],[17,"Thai_thanthakhat","","",null,null],[17,"Thai_nikhahit","","",null,null],[17,"Thai_leksun","","",null,null],[17,"Thai_leknung","","",null,null],[17,"Thai_leksong","","",null,null],[17,"Thai_leksam","","",null,null],[17,"Thai_leksi","","",null,null],[17,"Thai_lekha","","",null,null],[17,"Thai_lekhok","","",null,null],[17,"Thai_lekchet","","",null,null],[17,"Thai_lekpaet","","",null,null],[17,"Thai_lekkao","","",null,null],[17,"Hangul","","",null,null],[17,"Hangul_Start","","",null,null],[17,"Hangul_End","","",null,null],[17,"Hangul_Hanja","","",null,null],[17,"Hangul_Jamo","","",null,null],[17,"Hangul_Romaja","","",null,null],[17,"Hangul_Codeinput","","",null,null],[17,"Hangul_Jeonja","","",null,null],[17,"Hangul_Banja","","",null,null],[17,"Hangul_PreHanja","","",null,null],[17,"Hangul_PostHanja","","",null,null],[17,"Hangul_SingleCandidate","","",null,null],[17,"Hangul_MultipleCandidate","","",null,null],[17,"Hangul_PreviousCandidate","","",null,null],[17,"Hangul_Special","","",null,null],[17,"Hangul_switch","","",null,null],[17,"Hangul_Kiyeog","","",null,null],[17,"Hangul_SsangKiyeog","","",null,null],[17,"Hangul_KiyeogSios","","",null,null],[17,"Hangul_Nieun","","",null,null],[17,"Hangul_NieunJieuj","","",null,null],[17,"Hangul_NieunHieuh","","",null,null],[17,"Hangul_Dikeud","","",null,null],[17,"Hangul_SsangDikeud","","",null,null],[17,"Hangul_Rieul","","",null,null],[17,"Hangul_RieulKiyeog","","",null,null],[17,"Hangul_RieulMieum","","",null,null],[17,"Hangul_RieulPieub","","",null,null],[17,"Hangul_RieulSios","","",null,null],[17,"Hangul_RieulTieut","","",null,null],[17,"Hangul_RieulPhieuf","","",null,null],[17,"Hangul_RieulHieuh","","",null,null],[17,"Hangul_Mieum","","",null,null],[17,"Hangul_Pieub","","",null,null],[17,"Hangul_SsangPieub","","",null,null],[17,"Hangul_PieubSios","","",null,null],[17,"Hangul_Sios","","",null,null],[17,"Hangul_SsangSios","","",null,null],[17,"Hangul_Ieung","","",null,null],[17,"Hangul_Jieuj","","",null,null],[17,"Hangul_SsangJieuj","","",null,null],[17,"Hangul_Cieuc","","",null,null],[17,"Hangul_Khieuq","","",null,null],[17,"Hangul_Tieut","","",null,null],[17,"Hangul_Phieuf","","",null,null],[17,"Hangul_Hieuh","","",null,null],[17,"Hangul_A","","",null,null],[17,"Hangul_AE","","",null,null],[17,"Hangul_YA","","",null,null],[17,"Hangul_YAE","","",null,null],[17,"Hangul_EO","","",null,null],[17,"Hangul_E","","",null,null],[17,"Hangul_YEO","","",null,null],[17,"Hangul_YE","","",null,null],[17,"Hangul_O","","",null,null],[17,"Hangul_WA","","",null,null],[17,"Hangul_WAE","","",null,null],[17,"Hangul_OE","","",null,null],[17,"Hangul_YO","","",null,null],[17,"Hangul_U","","",null,null],[17,"Hangul_WEO","","",null,null],[17,"Hangul_WE","","",null,null],[17,"Hangul_WI","","",null,null],[17,"Hangul_YU","","",null,null],[17,"Hangul_EU","","",null,null],[17,"Hangul_YI","","",null,null],[17,"Hangul_I","","",null,null],[17,"Hangul_J_Kiyeog","","",null,null],[17,"Hangul_J_SsangKiyeog","","",null,null],[17,"Hangul_J_KiyeogSios","","",null,null],[17,"Hangul_J_Nieun","","",null,null],[17,"Hangul_J_NieunJieuj","","",null,null],[17,"Hangul_J_NieunHieuh","","",null,null],[17,"Hangul_J_Dikeud","","",null,null],[17,"Hangul_J_Rieul","","",null,null],[17,"Hangul_J_RieulKiyeog","","",null,null],[17,"Hangul_J_RieulMieum","","",null,null],[17,"Hangul_J_RieulPieub","","",null,null],[17,"Hangul_J_RieulSios","","",null,null],[17,"Hangul_J_RieulTieut","","",null,null],[17,"Hangul_J_RieulPhieuf","","",null,null],[17,"Hangul_J_RieulHieuh","","",null,null],[17,"Hangul_J_Mieum","","",null,null],[17,"Hangul_J_Pieub","","",null,null],[17,"Hangul_J_PieubSios","","",null,null],[17,"Hangul_J_Sios","","",null,null],[17,"Hangul_J_SsangSios","","",null,null],[17,"Hangul_J_Ieung","","",null,null],[17,"Hangul_J_Jieuj","","",null,null],[17,"Hangul_J_Cieuc","","",null,null],[17,"Hangul_J_Khieuq","","",null,null],[17,"Hangul_J_Tieut","","",null,null],[17,"Hangul_J_Phieuf","","",null,null],[17,"Hangul_J_Hieuh","","",null,null],[17,"Hangul_RieulYeorinHieuh","","",null,null],[17,"Hangul_SunkyeongeumMieum","","",null,null],[17,"Hangul_SunkyeongeumPieub","","",null,null],[17,"Hangul_PanSios","","",null,null],[17,"Hangul_KkogjiDalrinIeung","","",null,null],[17,"Hangul_SunkyeongeumPhieuf","","",null,null],[17,"Hangul_YeorinHieuh","","",null,null],[17,"Hangul_AraeA","","",null,null],[17,"Hangul_AraeAE","","",null,null],[17,"Hangul_J_PanSios","","",null,null],[17,"Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"Hangul_J_YeorinHieuh","","",null,null],[17,"Korean_Won","","",null,null],[17,"Armenian_ligature_ew","","",null,null],[17,"Armenian_full_stop","","",null,null],[17,"Armenian_verjaket","","",null,null],[17,"Armenian_separation_mark","","",null,null],[17,"Armenian_but","","",null,null],[17,"Armenian_hyphen","","",null,null],[17,"Armenian_yentamna","","",null,null],[17,"Armenian_exclam","","",null,null],[17,"Armenian_amanak","","",null,null],[17,"Armenian_accent","","",null,null],[17,"Armenian_shesht","","",null,null],[17,"Armenian_question","","",null,null],[17,"Armenian_paruyk","","",null,null],[17,"Armenian_AYB","","",null,null],[17,"Armenian_ayb","","",null,null],[17,"Armenian_BEN","","",null,null],[17,"Armenian_ben","","",null,null],[17,"Armenian_GIM","","",null,null],[17,"Armenian_gim","","",null,null],[17,"Armenian_DA","","",null,null],[17,"Armenian_da","","",null,null],[17,"Armenian_YECH","","",null,null],[17,"Armenian_yech","","",null,null],[17,"Armenian_ZA","","",null,null],[17,"Armenian_za","","",null,null],[17,"Armenian_E","","",null,null],[17,"Armenian_e","","",null,null],[17,"Armenian_AT","","",null,null],[17,"Armenian_at","","",null,null],[17,"Armenian_TO","","",null,null],[17,"Armenian_to","","",null,null],[17,"Armenian_ZHE","","",null,null],[17,"Armenian_zhe","","",null,null],[17,"Armenian_INI","","",null,null],[17,"Armenian_ini","","",null,null],[17,"Armenian_LYUN","","",null,null],[17,"Armenian_lyun","","",null,null],[17,"Armenian_KHE","","",null,null],[17,"Armenian_khe","","",null,null],[17,"Armenian_TSA","","",null,null],[17,"Armenian_tsa","","",null,null],[17,"Armenian_KEN","","",null,null],[17,"Armenian_ken","","",null,null],[17,"Armenian_HO","","",null,null],[17,"Armenian_ho","","",null,null],[17,"Armenian_DZA","","",null,null],[17,"Armenian_dza","","",null,null],[17,"Armenian_GHAT","","",null,null],[17,"Armenian_ghat","","",null,null],[17,"Armenian_TCHE","","",null,null],[17,"Armenian_tche","","",null,null],[17,"Armenian_MEN","","",null,null],[17,"Armenian_men","","",null,null],[17,"Armenian_HI","","",null,null],[17,"Armenian_hi","","",null,null],[17,"Armenian_NU","","",null,null],[17,"Armenian_nu","","",null,null],[17,"Armenian_SHA","","",null,null],[17,"Armenian_sha","","",null,null],[17,"Armenian_VO","","",null,null],[17,"Armenian_vo","","",null,null],[17,"Armenian_CHA","","",null,null],[17,"Armenian_cha","","",null,null],[17,"Armenian_PE","","",null,null],[17,"Armenian_pe","","",null,null],[17,"Armenian_JE","","",null,null],[17,"Armenian_je","","",null,null],[17,"Armenian_RA","","",null,null],[17,"Armenian_ra","","",null,null],[17,"Armenian_SE","","",null,null],[17,"Armenian_se","","",null,null],[17,"Armenian_VEV","","",null,null],[17,"Armenian_vev","","",null,null],[17,"Armenian_TYUN","","",null,null],[17,"Armenian_tyun","","",null,null],[17,"Armenian_RE","","",null,null],[17,"Armenian_re","","",null,null],[17,"Armenian_TSO","","",null,null],[17,"Armenian_tso","","",null,null],[17,"Armenian_VYUN","","",null,null],[17,"Armenian_vyun","","",null,null],[17,"Armenian_PYUR","","",null,null],[17,"Armenian_pyur","","",null,null],[17,"Armenian_KE","","",null,null],[17,"Armenian_ke","","",null,null],[17,"Armenian_O","","",null,null],[17,"Armenian_o","","",null,null],[17,"Armenian_FE","","",null,null],[17,"Armenian_fe","","",null,null],[17,"Armenian_apostrophe","","",null,null],[17,"Georgian_an","","",null,null],[17,"Georgian_ban","","",null,null],[17,"Georgian_gan","","",null,null],[17,"Georgian_don","","",null,null],[17,"Georgian_en","","",null,null],[17,"Georgian_vin","","",null,null],[17,"Georgian_zen","","",null,null],[17,"Georgian_tan","","",null,null],[17,"Georgian_in","","",null,null],[17,"Georgian_kan","","",null,null],[17,"Georgian_las","","",null,null],[17,"Georgian_man","","",null,null],[17,"Georgian_nar","","",null,null],[17,"Georgian_on","","",null,null],[17,"Georgian_par","","",null,null],[17,"Georgian_zhar","","",null,null],[17,"Georgian_rae","","",null,null],[17,"Georgian_san","","",null,null],[17,"Georgian_tar","","",null,null],[17,"Georgian_un","","",null,null],[17,"Georgian_phar","","",null,null],[17,"Georgian_khar","","",null,null],[17,"Georgian_ghan","","",null,null],[17,"Georgian_qar","","",null,null],[17,"Georgian_shin","","",null,null],[17,"Georgian_chin","","",null,null],[17,"Georgian_can","","",null,null],[17,"Georgian_jil","","",null,null],[17,"Georgian_cil","","",null,null],[17,"Georgian_char","","",null,null],[17,"Georgian_xan","","",null,null],[17,"Georgian_jhan","","",null,null],[17,"Georgian_hae","","",null,null],[17,"Georgian_he","","",null,null],[17,"Georgian_hie","","",null,null],[17,"Georgian_we","","",null,null],[17,"Georgian_har","","",null,null],[17,"Georgian_hoe","","",null,null],[17,"Georgian_fi","","",null,null],[17,"Xabovedot","","",null,null],[17,"Ibreve","","",null,null],[17,"Zstroke","","",null,null],[17,"Gcaron","","",null,null],[17,"Ocaron","","",null,null],[17,"Obarred","","",null,null],[17,"xabovedot","","",null,null],[17,"ibreve","","",null,null],[17,"zstroke","","",null,null],[17,"gcaron","","",null,null],[17,"ocaron","","",null,null],[17,"obarred","","",null,null],[17,"SCHWA","","",null,null],[17,"schwa","","",null,null],[17,"EZH","","",null,null],[17,"ezh","","",null,null],[17,"Lbelowdot","","",null,null],[17,"lbelowdot","","",null,null],[17,"Abelowdot","","",null,null],[17,"abelowdot","","",null,null],[17,"Ahook","","",null,null],[17,"ahook","","",null,null],[17,"Acircumflexacute","","",null,null],[17,"acircumflexacute","","",null,null],[17,"Acircumflexgrave","","",null,null],[17,"acircumflexgrave","","",null,null],[17,"Acircumflexhook","","",null,null],[17,"acircumflexhook","","",null,null],[17,"Acircumflextilde","","",null,null],[17,"acircumflextilde","","",null,null],[17,"Acircumflexbelowdot","","",null,null],[17,"acircumflexbelowdot","","",null,null],[17,"Abreveacute","","",null,null],[17,"abreveacute","","",null,null],[17,"Abrevegrave","","",null,null],[17,"abrevegrave","","",null,null],[17,"Abrevehook","","",null,null],[17,"abrevehook","","",null,null],[17,"Abrevetilde","","",null,null],[17,"abrevetilde","","",null,null],[17,"Abrevebelowdot","","",null,null],[17,"abrevebelowdot","","",null,null],[17,"Ebelowdot","","",null,null],[17,"ebelowdot","","",null,null],[17,"Ehook","","",null,null],[17,"ehook","","",null,null],[17,"Etilde","","",null,null],[17,"etilde","","",null,null],[17,"Ecircumflexacute","","",null,null],[17,"ecircumflexacute","","",null,null],[17,"Ecircumflexgrave","","",null,null],[17,"ecircumflexgrave","","",null,null],[17,"Ecircumflexhook","","",null,null],[17,"ecircumflexhook","","",null,null],[17,"Ecircumflextilde","","",null,null],[17,"ecircumflextilde","","",null,null],[17,"Ecircumflexbelowdot","","",null,null],[17,"ecircumflexbelowdot","","",null,null],[17,"Ihook","","",null,null],[17,"ihook","","",null,null],[17,"Ibelowdot","","",null,null],[17,"ibelowdot","","",null,null],[17,"Obelowdot","","",null,null],[17,"obelowdot","","",null,null],[17,"Ohook","","",null,null],[17,"ohook","","",null,null],[17,"Ocircumflexacute","","",null,null],[17,"ocircumflexacute","","",null,null],[17,"Ocircumflexgrave","","",null,null],[17,"ocircumflexgrave","","",null,null],[17,"Ocircumflexhook","","",null,null],[17,"ocircumflexhook","","",null,null],[17,"Ocircumflextilde","","",null,null],[17,"ocircumflextilde","","",null,null],[17,"Ocircumflexbelowdot","","",null,null],[17,"ocircumflexbelowdot","","",null,null],[17,"Ohornacute","","",null,null],[17,"ohornacute","","",null,null],[17,"Ohorngrave","","",null,null],[17,"ohorngrave","","",null,null],[17,"Ohornhook","","",null,null],[17,"ohornhook","","",null,null],[17,"Ohorntilde","","",null,null],[17,"ohorntilde","","",null,null],[17,"Ohornbelowdot","","",null,null],[17,"ohornbelowdot","","",null,null],[17,"Ubelowdot","","",null,null],[17,"ubelowdot","","",null,null],[17,"Uhook","","",null,null],[17,"uhook","","",null,null],[17,"Uhornacute","","",null,null],[17,"uhornacute","","",null,null],[17,"Uhorngrave","","",null,null],[17,"uhorngrave","","",null,null],[17,"Uhornhook","","",null,null],[17,"uhornhook","","",null,null],[17,"Uhorntilde","","",null,null],[17,"uhorntilde","","",null,null],[17,"Uhornbelowdot","","",null,null],[17,"uhornbelowdot","","",null,null],[17,"Ybelowdot","","",null,null],[17,"ybelowdot","","",null,null],[17,"Yhook","","",null,null],[17,"yhook","","",null,null],[17,"Ytilde","","",null,null],[17,"ytilde","","",null,null],[17,"Ohorn","","",null,null],[17,"ohorn","","",null,null],[17,"Uhorn","","",null,null],[17,"uhorn","","",null,null],[17,"EcuSign","","",null,null],[17,"ColonSign","","",null,null],[17,"CruzeiroSign","","",null,null],[17,"FFrancSign","","",null,null],[17,"LiraSign","","",null,null],[17,"MillSign","","",null,null],[17,"NairaSign","","",null,null],[17,"PesetaSign","","",null,null],[17,"RupeeSign","","",null,null],[17,"WonSign","","",null,null],[17,"NewSheqelSign","","",null,null],[17,"DongSign","","",null,null],[17,"EuroSign","","",null,null],[17,"zerosuperior","","",null,null],[17,"foursuperior","","",null,null],[17,"fivesuperior","","",null,null],[17,"sixsuperior","","",null,null],[17,"sevensuperior","","",null,null],[17,"eightsuperior","","",null,null],[17,"ninesuperior","","",null,null],[17,"zerosubscript","","",null,null],[17,"onesubscript","","",null,null],[17,"twosubscript","","",null,null],[17,"threesubscript","","",null,null],[17,"foursubscript","","",null,null],[17,"fivesubscript","","",null,null],[17,"sixsubscript","","",null,null],[17,"sevensubscript","","",null,null],[17,"eightsubscript","","",null,null],[17,"ninesubscript","","",null,null],[17,"partdifferential","","",null,null],[17,"emptyset","","",null,null],[17,"elementof","","",null,null],[17,"notelementof","","",null,null],[17,"containsas","","",null,null],[17,"squareroot","","",null,null],[17,"cuberoot","","",null,null],[17,"fourthroot","","",null,null],[17,"dintegral","","",null,null],[17,"tintegral","","",null,null],[17,"because","","",null,null],[17,"approxeq","","",null,null],[17,"notapproxeq","","",null,null],[17,"notidentical","","",null,null],[17,"stricteq","","",null,null],[17,"braille_dot_1","","",null,null],[17,"braille_dot_2","","",null,null],[17,"braille_dot_3","","",null,null],[17,"braille_dot_4","","",null,null],[17,"braille_dot_5","","",null,null],[17,"braille_dot_6","","",null,null],[17,"braille_dot_7","","",null,null],[17,"braille_dot_8","","",null,null],[17,"braille_dot_9","","",null,null],[17,"braille_dot_10","","",null,null],[17,"braille_blank","","",null,null],[17,"braille_dots_1","","",null,null],[17,"braille_dots_2","","",null,null],[17,"braille_dots_12","","",null,null],[17,"braille_dots_3","","",null,null],[17,"braille_dots_13","","",null,null],[17,"braille_dots_23","","",null,null],[17,"braille_dots_123","","",null,null],[17,"braille_dots_4","","",null,null],[17,"braille_dots_14","","",null,null],[17,"braille_dots_24","","",null,null],[17,"braille_dots_124","","",null,null],[17,"braille_dots_34","","",null,null],[17,"braille_dots_134","","",null,null],[17,"braille_dots_234","","",null,null],[17,"braille_dots_1234","","",null,null],[17,"braille_dots_5","","",null,null],[17,"braille_dots_15","","",null,null],[17,"braille_dots_25","","",null,null],[17,"braille_dots_125","","",null,null],[17,"braille_dots_35","","",null,null],[17,"braille_dots_135","","",null,null],[17,"braille_dots_235","","",null,null],[17,"braille_dots_1235","","",null,null],[17,"braille_dots_45","","",null,null],[17,"braille_dots_145","","",null,null],[17,"braille_dots_245","","",null,null],[17,"braille_dots_1245","","",null,null],[17,"braille_dots_345","","",null,null],[17,"braille_dots_1345","","",null,null],[17,"braille_dots_2345","","",null,null],[17,"braille_dots_12345","","",null,null],[17,"braille_dots_6","","",null,null],[17,"braille_dots_16","","",null,null],[17,"braille_dots_26","","",null,null],[17,"braille_dots_126","","",null,null],[17,"braille_dots_36","","",null,null],[17,"braille_dots_136","","",null,null],[17,"braille_dots_236","","",null,null],[17,"braille_dots_1236","","",null,null],[17,"braille_dots_46","","",null,null],[17,"braille_dots_146","","",null,null],[17,"braille_dots_246","","",null,null],[17,"braille_dots_1246","","",null,null],[17,"braille_dots_346","","",null,null],[17,"braille_dots_1346","","",null,null],[17,"braille_dots_2346","","",null,null],[17,"braille_dots_12346","","",null,null],[17,"braille_dots_56","","",null,null],[17,"braille_dots_156","","",null,null],[17,"braille_dots_256","","",null,null],[17,"braille_dots_1256","","",null,null],[17,"braille_dots_356","","",null,null],[17,"braille_dots_1356","","",null,null],[17,"braille_dots_2356","","",null,null],[17,"braille_dots_12356","","",null,null],[17,"braille_dots_456","","",null,null],[17,"braille_dots_1456","","",null,null],[17,"braille_dots_2456","","",null,null],[17,"braille_dots_12456","","",null,null],[17,"braille_dots_3456","","",null,null],[17,"braille_dots_13456","","",null,null],[17,"braille_dots_23456","","",null,null],[17,"braille_dots_123456","","",null,null],[17,"braille_dots_7","","",null,null],[17,"braille_dots_17","","",null,null],[17,"braille_dots_27","","",null,null],[17,"braille_dots_127","","",null,null],[17,"braille_dots_37","","",null,null],[17,"braille_dots_137","","",null,null],[17,"braille_dots_237","","",null,null],[17,"braille_dots_1237","","",null,null],[17,"braille_dots_47","","",null,null],[17,"braille_dots_147","","",null,null],[17,"braille_dots_247","","",null,null],[17,"braille_dots_1247","","",null,null],[17,"braille_dots_347","","",null,null],[17,"braille_dots_1347","","",null,null],[17,"braille_dots_2347","","",null,null],[17,"braille_dots_12347","","",null,null],[17,"braille_dots_57","","",null,null],[17,"braille_dots_157","","",null,null],[17,"braille_dots_257","","",null,null],[17,"braille_dots_1257","","",null,null],[17,"braille_dots_357","","",null,null],[17,"braille_dots_1357","","",null,null],[17,"braille_dots_2357","","",null,null],[17,"braille_dots_12357","","",null,null],[17,"braille_dots_457","","",null,null],[17,"braille_dots_1457","","",null,null],[17,"braille_dots_2457","","",null,null],[17,"braille_dots_12457","","",null,null],[17,"braille_dots_3457","","",null,null],[17,"braille_dots_13457","","",null,null],[17,"braille_dots_23457","","",null,null],[17,"braille_dots_123457","","",null,null],[17,"braille_dots_67","","",null,null],[17,"braille_dots_167","","",null,null],[17,"braille_dots_267","","",null,null],[17,"braille_dots_1267","","",null,null],[17,"braille_dots_367","","",null,null],[17,"braille_dots_1367","","",null,null],[17,"braille_dots_2367","","",null,null],[17,"braille_dots_12367","","",null,null],[17,"braille_dots_467","","",null,null],[17,"braille_dots_1467","","",null,null],[17,"braille_dots_2467","","",null,null],[17,"braille_dots_12467","","",null,null],[17,"braille_dots_3467","","",null,null],[17,"braille_dots_13467","","",null,null],[17,"braille_dots_23467","","",null,null],[17,"braille_dots_123467","","",null,null],[17,"braille_dots_567","","",null,null],[17,"braille_dots_1567","","",null,null],[17,"braille_dots_2567","","",null,null],[17,"braille_dots_12567","","",null,null],[17,"braille_dots_3567","","",null,null],[17,"braille_dots_13567","","",null,null],[17,"braille_dots_23567","","",null,null],[17,"braille_dots_123567","","",null,null],[17,"braille_dots_4567","","",null,null],[17,"braille_dots_14567","","",null,null],[17,"braille_dots_24567","","",null,null],[17,"braille_dots_124567","","",null,null],[17,"braille_dots_34567","","",null,null],[17,"braille_dots_134567","","",null,null],[17,"braille_dots_234567","","",null,null],[17,"braille_dots_1234567","","",null,null],[17,"braille_dots_8","","",null,null],[17,"braille_dots_18","","",null,null],[17,"braille_dots_28","","",null,null],[17,"braille_dots_128","","",null,null],[17,"braille_dots_38","","",null,null],[17,"braille_dots_138","","",null,null],[17,"braille_dots_238","","",null,null],[17,"braille_dots_1238","","",null,null],[17,"braille_dots_48","","",null,null],[17,"braille_dots_148","","",null,null],[17,"braille_dots_248","","",null,null],[17,"braille_dots_1248","","",null,null],[17,"braille_dots_348","","",null,null],[17,"braille_dots_1348","","",null,null],[17,"braille_dots_2348","","",null,null],[17,"braille_dots_12348","","",null,null],[17,"braille_dots_58","","",null,null],[17,"braille_dots_158","","",null,null],[17,"braille_dots_258","","",null,null],[17,"braille_dots_1258","","",null,null],[17,"braille_dots_358","","",null,null],[17,"braille_dots_1358","","",null,null],[17,"braille_dots_2358","","",null,null],[17,"braille_dots_12358","","",null,null],[17,"braille_dots_458","","",null,null],[17,"braille_dots_1458","","",null,null],[17,"braille_dots_2458","","",null,null],[17,"braille_dots_12458","","",null,null],[17,"braille_dots_3458","","",null,null],[17,"braille_dots_13458","","",null,null],[17,"braille_dots_23458","","",null,null],[17,"braille_dots_123458","","",null,null],[17,"braille_dots_68","","",null,null],[17,"braille_dots_168","","",null,null],[17,"braille_dots_268","","",null,null],[17,"braille_dots_1268","","",null,null],[17,"braille_dots_368","","",null,null],[17,"braille_dots_1368","","",null,null],[17,"braille_dots_2368","","",null,null],[17,"braille_dots_12368","","",null,null],[17,"braille_dots_468","","",null,null],[17,"braille_dots_1468","","",null,null],[17,"braille_dots_2468","","",null,null],[17,"braille_dots_12468","","",null,null],[17,"braille_dots_3468","","",null,null],[17,"braille_dots_13468","","",null,null],[17,"braille_dots_23468","","",null,null],[17,"braille_dots_123468","","",null,null],[17,"braille_dots_568","","",null,null],[17,"braille_dots_1568","","",null,null],[17,"braille_dots_2568","","",null,null],[17,"braille_dots_12568","","",null,null],[17,"braille_dots_3568","","",null,null],[17,"braille_dots_13568","","",null,null],[17,"braille_dots_23568","","",null,null],[17,"braille_dots_123568","","",null,null],[17,"braille_dots_4568","","",null,null],[17,"braille_dots_14568","","",null,null],[17,"braille_dots_24568","","",null,null],[17,"braille_dots_124568","","",null,null],[17,"braille_dots_34568","","",null,null],[17,"braille_dots_134568","","",null,null],[17,"braille_dots_234568","","",null,null],[17,"braille_dots_1234568","","",null,null],[17,"braille_dots_78","","",null,null],[17,"braille_dots_178","","",null,null],[17,"braille_dots_278","","",null,null],[17,"braille_dots_1278","","",null,null],[17,"braille_dots_378","","",null,null],[17,"braille_dots_1378","","",null,null],[17,"braille_dots_2378","","",null,null],[17,"braille_dots_12378","","",null,null],[17,"braille_dots_478","","",null,null],[17,"braille_dots_1478","","",null,null],[17,"braille_dots_2478","","",null,null],[17,"braille_dots_12478","","",null,null],[17,"braille_dots_3478","","",null,null],[17,"braille_dots_13478","","",null,null],[17,"braille_dots_23478","","",null,null],[17,"braille_dots_123478","","",null,null],[17,"braille_dots_578","","",null,null],[17,"braille_dots_1578","","",null,null],[17,"braille_dots_2578","","",null,null],[17,"braille_dots_12578","","",null,null],[17,"braille_dots_3578","","",null,null],[17,"braille_dots_13578","","",null,null],[17,"braille_dots_23578","","",null,null],[17,"braille_dots_123578","","",null,null],[17,"braille_dots_4578","","",null,null],[17,"braille_dots_14578","","",null,null],[17,"braille_dots_24578","","",null,null],[17,"braille_dots_124578","","",null,null],[17,"braille_dots_34578","","",null,null],[17,"braille_dots_134578","","",null,null],[17,"braille_dots_234578","","",null,null],[17,"braille_dots_1234578","","",null,null],[17,"braille_dots_678","","",null,null],[17,"braille_dots_1678","","",null,null],[17,"braille_dots_2678","","",null,null],[17,"braille_dots_12678","","",null,null],[17,"braille_dots_3678","","",null,null],[17,"braille_dots_13678","","",null,null],[17,"braille_dots_23678","","",null,null],[17,"braille_dots_123678","","",null,null],[17,"braille_dots_4678","","",null,null],[17,"braille_dots_14678","","",null,null],[17,"braille_dots_24678","","",null,null],[17,"braille_dots_124678","","",null,null],[17,"braille_dots_34678","","",null,null],[17,"braille_dots_134678","","",null,null],[17,"braille_dots_234678","","",null,null],[17,"braille_dots_1234678","","",null,null],[17,"braille_dots_5678","","",null,null],[17,"braille_dots_15678","","",null,null],[17,"braille_dots_25678","","",null,null],[17,"braille_dots_125678","","",null,null],[17,"braille_dots_35678","","",null,null],[17,"braille_dots_135678","","",null,null],[17,"braille_dots_235678","","",null,null],[17,"braille_dots_1235678","","",null,null],[17,"braille_dots_45678","","",null,null],[17,"braille_dots_145678","","",null,null],[17,"braille_dots_245678","","",null,null],[17,"braille_dots_1245678","","",null,null],[17,"braille_dots_345678","","",null,null],[17,"braille_dots_1345678","","",null,null],[17,"braille_dots_2345678","","",null,null],[17,"braille_dots_12345678","","",null,null],[17,"Sinh_ng","","",null,null],[17,"Sinh_h2","","",null,null],[17,"Sinh_a","","",null,null],[17,"Sinh_aa","","",null,null],[17,"Sinh_ae","","",null,null],[17,"Sinh_aee","","",null,null],[17,"Sinh_i","","",null,null],[17,"Sinh_ii","","",null,null],[17,"Sinh_u","","",null,null],[17,"Sinh_uu","","",null,null],[17,"Sinh_ri","","",null,null],[17,"Sinh_rii","","",null,null],[17,"Sinh_lu","","",null,null],[17,"Sinh_luu","","",null,null],[17,"Sinh_e","","",null,null],[17,"Sinh_ee","","",null,null],[17,"Sinh_ai","","",null,null],[17,"Sinh_o","","",null,null],[17,"Sinh_oo","","",null,null],[17,"Sinh_au","","",null,null],[17,"Sinh_ka","","",null,null],[17,"Sinh_kha","","",null,null],[17,"Sinh_ga","","",null,null],[17,"Sinh_gha","","",null,null],[17,"Sinh_ng2","","",null,null],[17,"Sinh_nga","","",null,null],[17,"Sinh_ca","","",null,null],[17,"Sinh_cha","","",null,null],[17,"Sinh_ja","","",null,null],[17,"Sinh_jha","","",null,null],[17,"Sinh_nya","","",null,null],[17,"Sinh_jnya","","",null,null],[17,"Sinh_nja","","",null,null],[17,"Sinh_tta","","",null,null],[17,"Sinh_ttha","","",null,null],[17,"Sinh_dda","","",null,null],[17,"Sinh_ddha","","",null,null],[17,"Sinh_nna","","",null,null],[17,"Sinh_ndda","","",null,null],[17,"Sinh_tha","","",null,null],[17,"Sinh_thha","","",null,null],[17,"Sinh_dha","","",null,null],[17,"Sinh_dhha","","",null,null],[17,"Sinh_na","","",null,null],[17,"Sinh_ndha","","",null,null],[17,"Sinh_pa","","",null,null],[17,"Sinh_pha","","",null,null],[17,"Sinh_ba","","",null,null],[17,"Sinh_bha","","",null,null],[17,"Sinh_ma","","",null,null],[17,"Sinh_mba","","",null,null],[17,"Sinh_ya","","",null,null],[17,"Sinh_ra","","",null,null],[17,"Sinh_la","","",null,null],[17,"Sinh_va","","",null,null],[17,"Sinh_sha","","",null,null],[17,"Sinh_ssha","","",null,null],[17,"Sinh_sa","","",null,null],[17,"Sinh_ha","","",null,null],[17,"Sinh_lla","","",null,null],[17,"Sinh_fa","","",null,null],[17,"Sinh_al","","",null,null],[17,"Sinh_aa2","","",null,null],[17,"Sinh_ae2","","",null,null],[17,"Sinh_aee2","","",null,null],[17,"Sinh_i2","","",null,null],[17,"Sinh_ii2","","",null,null],[17,"Sinh_u2","","",null,null],[17,"Sinh_uu2","","",null,null],[17,"Sinh_ru2","","",null,null],[17,"Sinh_e2","","",null,null],[17,"Sinh_ee2","","",null,null],[17,"Sinh_ai2","","",null,null],[17,"Sinh_o2","","",null,null],[17,"Sinh_oo2","","",null,null],[17,"Sinh_au2","","",null,null],[17,"Sinh_lu2","","",null,null],[17,"Sinh_ruu2","","",null,null],[17,"Sinh_luu2","","",null,null],[17,"Sinh_kunddaliya","","",null,null],[17,"ModeLock","","",null,null],[17,"MonBrightnessUp","","",null,null],[17,"MonBrightnessDown","","",null,null],[17,"KbdLightOnOff","","",null,null],[17,"KbdBrightnessUp","","",null,null],[17,"KbdBrightnessDown","","",null,null],[17,"Standby","","",null,null],[17,"AudioLowerVolume","","",null,null],[17,"AudioMute","","",null,null],[17,"AudioRaiseVolume","","",null,null],[17,"AudioPlay","","",null,null],[17,"AudioStop","","",null,null],[17,"AudioPrev","","",null,null],[17,"AudioNext","","",null,null],[17,"HomePage","","",null,null],[17,"Mail","","",null,null],[17,"Start","","",null,null],[17,"Search","","",null,null],[17,"AudioRecord","","",null,null],[17,"Calculator","","",null,null],[17,"Memo","","",null,null],[17,"ToDoList","","",null,null],[17,"Calendar","","",null,null],[17,"PowerDown","","",null,null],[17,"ContrastAdjust","","",null,null],[17,"RockerUp","","",null,null],[17,"RockerDown","","",null,null],[17,"RockerEnter","","",null,null],[17,"Back","","",null,null],[17,"Forward","","",null,null],[17,"Stop","","",null,null],[17,"Refresh","","",null,null],[17,"PowerOff","","",null,null],[17,"WakeUp","","",null,null],[17,"Eject","","",null,null],[17,"ScreenSaver","","",null,null],[17,"WWW","","",null,null],[17,"Sleep","","",null,null],[17,"Favorites","","",null,null],[17,"AudioPause","","",null,null],[17,"AudioMedia","","",null,null],[17,"MyComputer","","",null,null],[17,"VendorHome","","",null,null],[17,"LightBulb","","",null,null],[17,"Shop","","",null,null],[17,"History","","",null,null],[17,"OpenURL","","",null,null],[17,"AddFavorite","","",null,null],[17,"HotLinks","","",null,null],[17,"BrightnessAdjust","","",null,null],[17,"Finance","","",null,null],[17,"Community","","",null,null],[17,"AudioRewind","","",null,null],[17,"BackForward","","",null,null],[17,"Launch0","","",null,null],[17,"Launch1","","",null,null],[17,"Launch2","","",null,null],[17,"Launch3","","",null,null],[17,"Launch4","","",null,null],[17,"Launch5","","",null,null],[17,"Launch6","","",null,null],[17,"Launch7","","",null,null],[17,"Launch8","","",null,null],[17,"Launch9","","",null,null],[17,"LaunchA","","",null,null],[17,"LaunchB","","",null,null],[17,"LaunchC","","",null,null],[17,"LaunchD","","",null,null],[17,"LaunchE","","",null,null],[17,"LaunchF","","",null,null],[17,"ApplicationLeft","","",null,null],[17,"ApplicationRight","","",null,null],[17,"Book","","",null,null],[17,"CD","","",null,null],[17,"WindowClear","","",null,null],[17,"Close","","",null,null],[17,"Copy","","",null,null],[17,"Cut","","",null,null],[17,"Display","","",null,null],[17,"DOS","","",null,null],[17,"Documents","","",null,null],[17,"Excel","","",null,null],[17,"Explorer","","",null,null],[17,"Game","","",null,null],[17,"Go","","",null,null],[17,"iTouch","","",null,null],[17,"LogOff","","",null,null],[17,"Market","","",null,null],[17,"Meeting","","",null,null],[17,"MenuKB","","",null,null],[17,"MenuPB","","",null,null],[17,"MySites","","",null,null],[17,"New","","",null,null],[17,"News","","",null,null],[17,"OfficeHome","","",null,null],[17,"Open","","",null,null],[17,"Option","","",null,null],[17,"Paste","","",null,null],[17,"Phone","","",null,null],[17,"Reply","","",null,null],[17,"Reload","","",null,null],[17,"RotateWindows","","",null,null],[17,"RotationPB","","",null,null],[17,"RotationKB","","",null,null],[17,"Save","","",null,null],[17,"ScrollUp","","",null,null],[17,"ScrollDown","","",null,null],[17,"ScrollClick","","",null,null],[17,"Send","","",null,null],[17,"Spell","","",null,null],[17,"SplitScreen","","",null,null],[17,"Support","","",null,null],[17,"TaskPane","","",null,null],[17,"Terminal","","",null,null],[17,"Tools","","",null,null],[17,"Travel","","",null,null],[17,"UserPB","","",null,null],[17,"User1KB","","",null,null],[17,"User2KB","","",null,null],[17,"Video","","",null,null],[17,"WheelButton","","",null,null],[17,"Word","","",null,null],[17,"Xfer","","",null,null],[17,"ZoomIn","","",null,null],[17,"ZoomOut","","",null,null],[17,"Away","","",null,null],[17,"Messenger","","",null,null],[17,"WebCam","","",null,null],[17,"MailForward","","",null,null],[17,"Pictures","","",null,null],[17,"Music","","",null,null],[17,"Battery","","",null,null],[17,"Bluetooth","","",null,null],[17,"WLAN","","",null,null],[17,"UWB","","",null,null],[17,"AudioForward","","",null,null],[17,"AudioRepeat","","",null,null],[17,"AudioRandomPlay","","",null,null],[17,"Subtitle","","",null,null],[17,"AudioCycleTrack","","",null,null],[17,"CycleAngle","","",null,null],[17,"FrameBack","","",null,null],[17,"FrameForward","","",null,null],[17,"Time","","",null,null],[17,"SelectButton","","",null,null],[17,"View","","",null,null],[17,"TopMenu","","",null,null],[17,"Red","","",null,null],[17,"Green","","",null,null],[17,"Yellow","","",null,null],[17,"Blue","","",null,null],[17,"Suspend","","",null,null],[17,"Hibernate","","",null,null],[17,"TouchpadToggle","","",null,null],[17,"TouchpadOn","","",null,null],[17,"TouchpadOff","","",null,null],[17,"AudioMicMute","","",null,null],[17,"Switch_VT_1","","",null,null],[17,"Switch_VT_2","","",null,null],[17,"Switch_VT_3","","",null,null],[17,"Switch_VT_4","","",null,null],[17,"Switch_VT_5","","",null,null],[17,"Switch_VT_6","","",null,null],[17,"Switch_VT_7","","",null,null],[17,"Switch_VT_8","","",null,null],[17,"Switch_VT_9","","",null,null],[17,"Switch_VT_10","","",null,null],[17,"Switch_VT_11","","",null,null],[17,"Switch_VT_12","","",null,null],[17,"Ungrab","","",null,null],[17,"ClearGrab","","",null,null],[17,"Next_VMode","","",null,null],[17,"Prev_VMode","","",null,null],[17,"LogWindowTree","","",null,null],[17,"LogGrabInfo","","",null,null],[11,"clone","gdk","",85,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"intern","","",85,{"inputs":[{"name":"str"}],"output":{"name":"atom"}}],[11,"name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"value","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib_none","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["gdkatom","atom"],"name":"stash"}}],[11,"to_glib_none_mut","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"stashmut"}}],[11,"from_glib_none","","",85,{"inputs":[{"name":"gdkatom"}],"output":{"name":"atom"}}],[11,"from_glib_full","","",85,{"inputs":[{"name":"gdkatom"}],"output":{"name":"atom"}}],[11,"from_glib_none_num_as_vec","","",85,null],[11,"from_glib_container_num_as_vec","","",85,null],[11,"from_glib_full_num_as_vec","","",85,null],[11,"from_glib_none_as_vec","","",85,null],[11,"from_glib_container_as_vec","","",85,null],[11,"from_glib_full_as_vec","","",85,null],[11,"from","","",85,{"inputs":[{"name":"str"}],"output":{"name":"atom"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"eventbutton"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",86,null],[11,"from_glib_borrow","","",86,null],[11,"from_glib_full","","",86,null],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventbutton"}}],[11,"as_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventbutton"}}],[11,"deref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_position","","",86,null],[11,"get_state","","",86,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"get_time","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_button","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"eventconfigure"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",87,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",87,null],[11,"from_glib_borrow","","",87,null],[11,"from_glib_full","","",87,null],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventconfigure"}}],[11,"as_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventconfigure"}}],[11,"deref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_position","","",87,null],[11,"get_size","","",87,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"eventcrossing"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",88,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",88,null],[11,"from_glib_borrow","","",88,null],[11,"from_glib_full","","",88,null],[11,"as_ref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventcrossing"}}],[11,"as_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventcrossing"}}],[11,"deref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_position","","",88,null],[11,"get_subwindow","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[11,"get_mode","","",88,{"inputs":[{"name":"self"}],"output":{"name":"crossingmode"}}],[11,"get_detail","","",88,{"inputs":[{"name":"self"}],"output":{"name":"notifytype"}}],[11,"get_state","","",88,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"get_time","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"eventdnd"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",89,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",89,null],[11,"from_glib_borrow","","",89,null],[11,"from_glib_full","","",89,null],[11,"as_ref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventdnd"}}],[11,"as_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventdnd"}}],[11,"deref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_context","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["dragcontext"],"name":"option"}}],[11,"get_time","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"eventexpose"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",90,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",90,null],[11,"from_glib_borrow","","",90,null],[11,"from_glib_full","","",90,null],[11,"as_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventexpose"}}],[11,"as_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventexpose"}}],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_region","","",90,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"get_count","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"eventfocus"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",91,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",91,null],[11,"from_glib_borrow","","",91,null],[11,"from_glib_full","","",91,null],[11,"as_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventfocus"}}],[11,"as_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventfocus"}}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"eventgrabbroken"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",92,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",92,null],[11,"from_glib_borrow","","",92,null],[11,"from_glib_full","","",92,null],[11,"as_ref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventgrabbroken"}}],[11,"as_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventgrabbroken"}}],[11,"deref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"is_keyboard","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_implicit","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_grab_window","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"eventkey"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",93,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",93,null],[11,"from_glib_borrow","","",93,null],[11,"from_glib_full","","",93,null],[11,"as_ref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventkey"}}],[11,"as_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventkey"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_time","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_state","","",93,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"get_keyval","","",93,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"get_length","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_hardware_keycode","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_group","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"eventmotion"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",94,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",94,null],[11,"from_glib_borrow","","",94,null],[11,"from_glib_full","","",94,null],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventmotion"}}],[11,"as_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventmotion"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_position","","",94,null],[11,"get_state","","",94,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"get_time","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"eventownerchange"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",95,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",95,null],[11,"from_glib_borrow","","",95,null],[11,"from_glib_full","","",95,null],[11,"as_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventownerchange"}}],[11,"as_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventownerchange"}}],[11,"deref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_owner","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[11,"get_reason","","",95,{"inputs":[{"name":"self"}],"output":{"name":"ownerchange"}}],[11,"get_selection","","",95,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_time","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_selection_time","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"eventproperty"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",96,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",96,null],[11,"from_glib_borrow","","",96,null],[11,"from_glib_full","","",96,null],[11,"as_ref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventproperty"}}],[11,"as_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventproperty"}}],[11,"deref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"eventproximity"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",97,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",97,null],[11,"from_glib_borrow","","",97,null],[11,"from_glib_full","","",97,null],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventproximity"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventproximity"}}],[11,"deref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_time","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_device","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"eventscroll"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",98,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",98,null],[11,"from_glib_borrow","","",98,null],[11,"from_glib_full","","",98,null],[11,"as_ref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventscroll"}}],[11,"as_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventscroll"}}],[11,"deref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_time","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_position","","",98,null],[11,"get_state","","",98,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"get_device","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[11,"get_direction","","",98,{"inputs":[{"name":"self"}],"output":{"name":"scrolldirection"}}],[11,"get_root","","",98,null],[11,"get_delta","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"eventselection"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",99,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",99,null],[11,"from_glib_borrow","","",99,null],[11,"from_glib_full","","",99,null],[11,"as_ref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventselection"}}],[11,"as_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventselection"}}],[11,"deref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_selection","","",99,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_target","","",99,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_property","","",99,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_time","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_requestor","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"eventsetting"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",100,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",100,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",100,null],[11,"from_glib_borrow","","",100,null],[11,"from_glib_full","","",100,null],[11,"as_ref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventsetting"}}],[11,"as_mut","","",100,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventsetting"}}],[11,"deref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",100,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"eventtouch"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",101,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",101,null],[11,"from_glib_borrow","","",101,null],[11,"from_glib_full","","",101,null],[11,"as_ref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventtouch"}}],[11,"as_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventtouch"}}],[11,"deref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_time","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_position","","",101,null],[11,"get_state","","",101,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[11,"is_emulating_pointer","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_device","","",101,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"eventvisibility"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",102,null],[11,"from_glib_borrow","","",102,null],[11,"from_glib_full","","",102,null],[11,"as_ref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventvisibility"}}],[11,"as_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventvisibility"}}],[11,"deref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_state","","",102,{"inputs":[{"name":"self"}],"output":{"name":"visibilitystate"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"eventwindowstate"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glib_none","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"to_glib_none_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stashmut"}}],[11,"from_glib_none","","",103,null],[11,"from_glib_borrow","","",103,null],[11,"from_glib_full","","",103,null],[11,"as_ref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventwindowstate"}}],[11,"as_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"gdkeventwindowstate"}}],[11,"deref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"get_changed_mask","","",103,{"inputs":[{"name":"self"}],"output":{"name":"windowstate"}}],[11,"get_new_window_state","","",103,{"inputs":[{"name":"self"}],"output":{"name":"windowstate"}}],[11,"get_refresh_info","","",44,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"get_font_options","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["fontoptions"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"intersect","","Calculates the intersection of two rectangles. It is allowed for `dest` to be the same as either `self` or `src2`. If the rectangles do not intersect, `dest`’s width and height is set to 0 and its x and y values are undefined. If you are only interested in whether the rectangles intersect, but not in the intersecting area itself, pass `None` for `dest`. ## `src2` a `Rectangle` ## `dest` return location for the intersection of `self` and `src2`, or `None`",2,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"generics":["rectangle"],"name":"option"}}],[11,"union","","Calculates the union of two rectangles. The union of rectangles `self` and `src2` is the smallest rectangle which includes both `self` and `src2` within it. It is allowed for `dest` to be the same as either `self` or `src2`.",2,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rectangleint"}}],[11,"from","","",2,{"inputs":[{"name":"rectangleint"}],"output":{"name":"rectangle"}}],[11,"static_type","","",2,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",2,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",2,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"set_value_optional","","",2,{"inputs":[{"name":"value"},{"name":"option"}],"output":null}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"black","","",3,{"inputs":[],"output":{"name":"rgba"}}],[11,"blue","","",3,{"inputs":[],"output":{"name":"rgba"}}],[11,"green","","",3,{"inputs":[],"output":{"name":"rgba"}}],[11,"red","","",3,{"inputs":[],"output":{"name":"rgba"}}],[11,"white","","",3,{"inputs":[],"output":{"name":"rgba"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"static_type","","",3,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",3,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_value","","",3,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"set_value_optional","","",3,{"inputs":[{"name":"value"},{"name":"option"}],"output":null}],[11,"default","","",4,{"inputs":[],"output":{"name":"windowattr"}}],[11,"to_glib_none","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stash"}}],[11,"new","","Creates a new `Window` using the attributes from `attributes`. See `WindowAttr` and `WindowAttributesType` for more details. Note: to use this on displays other than the default display, `parent` must be specified. ## `parent` a `Window`, or `None` to create the window as a child of  the default root window for the default display. ## `attributes` attributes of the new window ## `attributes_mask` mask indicating which  fields in `attributes` are valid",50,{"inputs":[{"generics":["window"],"name":"option"},{"name":"windowattr"}],"output":{"name":"window"}}],[11,"create_similar_surface","","",50,{"inputs":[{"name":"self"},{"name":"content"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["surface"],"name":"option"}}],[6,"key","","",null,null],[17,"ATOM_NONE","","",null,null],[17,"SELECTION_PRIMARY","","",null,null],[17,"SELECTION_SECONDARY","","",null,null],[17,"SELECTION_CLIPBOARD","","",null,null],[17,"TARGET_BITMAP","","",null,null],[17,"TARGET_COLORMAP","","",null,null],[17,"TARGET_DRAWABLE","","",null,null],[17,"TARGET_PIXMAP","","",null,null],[17,"TARGET_STRING","","",null,null],[17,"SELECTION_TYPE_ATOM","","",null,null],[17,"SELECTION_TYPE_BITMAP","","",null,null],[17,"SELECTION_TYPE_COLORMAP","","",null,null],[17,"SELECTION_TYPE_DRAWABLE","","",null,null],[17,"SELECTION_TYPE_INTEGER","","",null,null],[17,"SELECTION_TYPE_PIXMAP","","",null,null],[17,"SELECTION_TYPE_WINDOW","","",null,null],[17,"SELECTION_TYPE_STRING","","",null,null],[8,"AppLaunchContextExt","","Trait containing all `AppLaunchContext` methods.",null,null],[10,"set_desktop","","Sets the workspace on which applications will be launched when using this context when running under a window manager that supports multiple workspaces, as described in the Extended Window Manager Hints.",64,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_display","","Sets the display on which applications will be launched when using this context. See also `AppLaunchContextExt::set_screen`.",64,{"inputs":[{"name":"self"},{"name":"display"}],"output":null}],[10,"set_icon","","Sets the icon for applications that are launched with this context.",64,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon_name","","Sets the icon for applications that are launched with this context. The `icon_name` will be interpreted in the same way as the Icon field in desktop files. See also `AppLaunchContextExt::set_icon`.",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_screen","","Sets the screen on which applications will be launched when using this context. See also `AppLaunchContextExt::set_display`.",64,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_timestamp","","Sets the timestamp of `self`. The timestamp should ideally be taken from the event that triggered the launch.",64,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_display","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"connect_property_display_notify","","",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CursorExt","","Trait containing all `Cursor` methods.",null,null],[10,"get_cursor_type","","Returns the cursor type for this cursor.",65,{"inputs":[{"name":"self"}],"output":{"name":"cursortype"}}],[10,"get_display","","Returns the display on which the `Cursor` is defined.",65,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_image","","Returns a `gdk_pixbuf::Pixbuf` with the image used to display the cursor.",65,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_surface","","Returns a cairo image surface with the image used to display the cursor.",65,null],[10,"connect_property_cursor_type_notify","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceExt","","Trait containing all `Device` methods.",null,null],[10,"get_associated_device","","Returns the associated device to `self`, if `self` is of type `DeviceType::Master`, it will return the paired pointer or keyboard.",66,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_axes","","Returns the axes currently available on the device.",66,{"inputs":[{"name":"self"}],"output":{"name":"axisflags"}}],[10,"get_axis_use","","Returns the axis use for `index_`. ## `index_` the index of the axis.",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"axisuse"}}],[10,"get_device_type","","Returns the device type for `self`.",66,{"inputs":[{"name":"self"}],"output":{"name":"devicetype"}}],[10,"get_display","","Returns the `Display` to which `self` pertains.",66,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_has_cursor","","Determines whether the pointer follows device motion. This is not meaningful for keyboard devices, which don't have a pointer.",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_key","","If `index_` has a valid keyval, this function will return `true` and fill in `keyval` and `modifiers` with the keyval settings. ## `index_` the index of the macro button to get. ## `keyval` return value for the keyval. ## `modifiers` return value for modifiers.",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"get_last_event_window","","Gets information about which window the given pointer device is in, based on events that have been received so far from the display server. If another application has a pointer grab, or this application has a grab with owner_events = `false`, `None` may be returned even if the pointer is physically over one of this application's windows.",66,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_mode","","Determines the mode of the device.",66,{"inputs":[{"name":"self"}],"output":{"name":"inputmode"}}],[10,"get_n_axes","","Returns the number of axes the device currently has.",66,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_keys","","Returns the number of keys the device currently has.",66,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_name","","Determines the name of the device.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_position","","Gets the current location of `self`. As a slave device coordinates are those of its master pointer, This function may not be called on devices of type `DeviceType::Slave`, unless there is an ongoing grab on them, see `DeviceExt::grab`. ## `screen` location to store the `Screen`  the `self` is on, or `None`. ## `x` location to store root window X coordinate of `self`, or `None`. ## `y` location to store root window Y coordinate of `self`, or `None`.",66,null],[10,"get_position_double","","Gets the current location of `self` in double precision. As a slave device's coordinates are those of its master pointer, this function may not be called on devices of type `DeviceType::Slave`, unless there is an ongoing grab on them. See `DeviceExt::grab`.",66,null],[10,"get_product_id","","Returns the product ID of this device, or `None` if this information couldn't be obtained. This ID is retrieved from the device, and is thus constant for it. See `DeviceExt::get_vendor_id` for more information.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_seat","","Returns the `Seat` the device belongs to.",66,{"inputs":[{"name":"self"}],"output":{"generics":["seat"],"name":"option"}}],[10,"get_source","","Determines the type of the device.",66,{"inputs":[{"name":"self"}],"output":{"name":"inputsource"}}],[10,"get_vendor_id","","Returns the vendor ID of this device, or `None` if this information couldn't be obtained. This ID is retrieved from the device, and is thus constant for it.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_window_at_position","","Obtains the window underneath `self`, returning the location of the device in `win_x` and `win_y`. Returns `None` if the window tree under `self` is not known to GDK (for example, belongs to another application).",66,null],[10,"get_window_at_position_double","","Obtains the window underneath `self`, returning the location of the device in `win_x` and `win_y` in double precision. Returns `None` if the window tree under `self` is not known to GDK (for example, belongs to another application).",66,null],[10,"grab","","Grabs the device so that all events coming from this device are passed to this application until the device is ungrabbed with `DeviceExt::ungrab`, or the window becomes unviewable. This overrides any previous grab on the device by this client.",66,{"inputs":[{"name":"self"},{"name":"window"},{"name":"grabownership"},{"name":"bool"},{"name":"eventmask"},{"name":"p"},{"name":"u32"}],"output":{"name":"grabstatus"}}],[10,"list_axes","","Returns a `glib::List` of `GdkAtoms`, containing the labels for the axes that `self` currently has.",66,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"list_slave_devices","","If the device if of type `DeviceType::Master`, it will return the list of slave devices attached to it, otherwise it will return `None`",66,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"set_axis_use","","Specifies how an axis of a device is used. ## `index_` the index of the axis ## `use_` specifies how the axis is used",66,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"axisuse"}],"output":null}],[10,"set_key","","Specifies the X key event to generate when a macro button of a device is pressed. ## `index_` the index of the macro button to set ## `keyval` the keyval to generate ## `modifiers` the modifiers to set",66,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"modifiertype"}],"output":null}],[10,"set_mode","","Sets a the mode of an input device. The mode controls if the device is active and whether the device’s range is mapped to the entire screen or to a single window.",66,{"inputs":[{"name":"self"},{"name":"inputmode"}],"output":{"name":"bool"}}],[10,"ungrab","","Release any grab on `self`.",66,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"warp","","Warps `self` in `display` to the point `x`,`y` on the screen `screen`, unless the device is confined to a window by a grab, in which case it will be moved as far as allowed by the grab. Warping the pointer creates events as if the user had moved the mouse instantaneously to the destination.",66,{"inputs":[{"name":"self"},{"name":"screen"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_property_device_manager","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["devicemanager"],"name":"option"}}],[10,"get_property_input_mode","","",66,{"inputs":[{"name":"self"}],"output":{"name":"inputmode"}}],[10,"set_property_input_mode","","",66,{"inputs":[{"name":"self"},{"name":"inputmode"}],"output":null}],[10,"get_property_input_source","","",66,{"inputs":[{"name":"self"}],"output":{"name":"inputsource"}}],[10,"get_property_num_touches","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_seat","","`Seat` of this device.",66,{"inputs":[{"name":"self"},{"generics":["seat"],"name":"option"}],"output":null}],[10,"get_property_tool","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["devicetool"],"name":"option"}}],[10,"get_property_type","","Device role in the device manager.",66,{"inputs":[{"name":"self"}],"output":{"name":"devicetype"}}],[10,"connect_changed","","The ::changed signal is emitted either when the `Device` has changed the number of either axes or keys. For example In X this will normally happen when the slave device routing events through the master device changes (for example, user switches from the USB mouse to a tablet), in that case the master device will change to reflect the new slave device axes and keys.",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tool_changed","","The ::tool-changed signal is emitted on pen/eraser `GdkDevices` whenever tools enter or leave proximity.",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_associated_device_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_axes_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_device_manager_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_cursor_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_mode_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_source_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_axes_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_num_touches_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_product_id_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_seat_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tool_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vendor_id_notify","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceManagerExt","","Trait containing all `DeviceManager` methods.",null,null],[10,"get_client_pointer","","Returns the client pointer, that is, the master pointer that acts as the core pointer for this application. In X11, window managers may change this depending on the interaction pattern under the presence of several pointers.",67,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_display","","Gets the `Display` associated to `self`.",67,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"list_devices","","Returns the list of devices of type `type_` currently attached to `self`.",67,{"inputs":[{"name":"self"},{"name":"devicetype"}],"output":{"generics":["device"],"name":"vec"}}],[10,"connect_device_added","","The ::device-added signal is emitted either when a new master pointer is created, or when a slave (Hardware) input device is plugged in. ## `device` the newly added `Device`.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_device_changed","","The ::device-changed signal is emitted whenever a device has changed in the hierarchy, either slave devices being disconnected from their master device or connected to another one, or master devices being added or removed a slave device.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_device_removed","","The ::device-removed signal is emitted either when a master pointer is removed, or when a slave (Hardware) input device is unplugged. ## `device` the just removed `Device`.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DeviceToolExt","","Trait containing all `DeviceTool` methods.",null,null],[10,"get_hardware_id","","Gets the hardware ID of this tool, or 0 if it's not known. When non-zero, the identificator is unique for the given tool model, meaning that two identical tools will share the same `hardware_id`, but will have different serial numbers (see `DeviceToolExt::get_serial`).",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_serial","","Gets the serial of this tool, this value can be used to identify a physical tool (eg. a tablet pen) across program executions.",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_tool_type","","Gets the `DeviceToolType` of the tool.",68,{"inputs":[{"name":"self"}],"output":{"name":"devicetooltype"}}],[10,"get_property_axes","","",68,{"inputs":[{"name":"self"}],"output":{"name":"axisflags"}}],[10,"get_property_hardware_id","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_property_serial","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"get_property_tool_type","","",68,{"inputs":[{"name":"self"}],"output":{"name":"devicetooltype"}}],[10,"connect_property_axes_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hardware_id_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_serial_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tool_type_notify","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DisplayExt","","Trait containing all `Display` methods.",null,null],[10,"beep","","Emits a short beep on `self`",69,{"inputs":[{"name":"self"}],"output":null}],[10,"close","","Closes the connection to the windowing system for the given display, and cleans up associated resources.",69,{"inputs":[{"name":"self"}],"output":null}],[10,"device_is_grabbed","","Returns `true` if there is an ongoing grab on `device` for `self`. ## `device` a `Device`",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"flush","","Flushes any requests queued for the windowing system; this happens automatically when the main loop blocks waiting for new events, but if your application is drawing without returning control to the main loop, you may need to call this function explicitly. A common case where this function needs to be called is when an application is executing drawing commands from a thread other than the thread where the main loop is running.",69,{"inputs":[{"name":"self"}],"output":null}],[10,"get_app_launch_context","","Returns a `AppLaunchContext` suitable for launching applications on the given display.",69,{"inputs":[{"name":"self"}],"output":{"generics":["applaunchcontext"],"name":"option"}}],[10,"get_default_cursor_size","","Returns the default size to use for cursors on `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_default_group","","Returns the default group leader window for all toplevel windows on `self`. This window is implicitly created by GDK. See `WindowExt::set_group`.",69,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_default_screen","","Get the default `Screen` for `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[10,"get_default_seat","","Returns the default `Seat` for this display.",69,{"inputs":[{"name":"self"}],"output":{"generics":["seat"],"name":"option"}}],[10,"get_device_manager","","Returns the `DeviceManager` associated to `self`.",69,{"inputs":[{"name":"self"}],"output":{"generics":["devicemanager"],"name":"option"}}],[10,"get_event","","Gets the next `GdkEvent` to be processed for `self`, fetching events from the windowing system if necessary.",69,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[10,"get_maximal_cursor_size","","Gets the maximal size to use for cursors on `self`. ## `width` the return location for the maximal cursor width ## `height` the return location for the maximal cursor height",69,null],[10,"get_monitor","","Gets a monitor associated with this display.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_monitor_at_point","","Gets the monitor in which the point (`x`, `y`) is located, or a nearby monitor if the point is not in any monitor.",69,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_monitor_at_window","","Gets the monitor in which the largest area of `window` resides, or a monitor close to `window` if it is outside of all monitors.",69,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_n_monitors","","Gets the number of monitors that belong to `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_screens","","Gets the number of screen managed by the `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_name","","Gets the name of the display.",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_pointer","","Gets the current location of the pointer and the current modifier mask for a given display.",69,null],[10,"get_primary_monitor","","Gets the primary monitor for the display.",69,{"inputs":[{"name":"self"}],"output":{"generics":["monitor"],"name":"option"}}],[10,"get_screen","","Returns a screen object for one of the screens of the display.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"screen"}}],[10,"get_window_at_pointer","","Obtains the window underneath the mouse pointer, returning the location of the pointer in that window in `win_x`, `win_y` for `screen`. Returns `None` if the window under the mouse pointer is not known to GDK (for example, belongs to another application).",69,null],[10,"has_pending","","Returns whether the display has events that are waiting to be processed.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_closed","","Finds out if the display has been closed.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"keyboard_ungrab","","Release any keyboard grab",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"list_devices","","Returns the list of available input devices attached to `self`. The list is statically allocated and should not be freed.",69,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"vec"}}],[10,"list_seats","","Returns the list of seats known to `self`.",69,{"inputs":[{"name":"self"}],"output":{"generics":["seat"],"name":"vec"}}],[10,"notify_startup_complete","","Indicates to the GUI environment that the application has finished loading, using a given identifier.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"peek_event","","Gets a copy of the first `GdkEvent` in the `self`’s event queue, without removing the event from the queue. (Note that this function will not get more events from the windowing system. It only checks the events that have already been moved to the GDK event queue.)",69,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[10,"pointer_is_grabbed","","Test if the pointer is grabbed.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pointer_ungrab","","Release any pointer grab.",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"put_event","","Appends a copy of the given event onto the front of the event queue for `self`. ## `event` a `GdkEvent`.",69,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[10,"request_selection_notification","","Request `EventOwnerChange` events for ownership changes of the selection named by the given atom. ## `selection` the `Atom` naming the selection for which  ownership change notification is requested",69,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[10,"set_double_click_distance","","Sets the double click distance (two clicks within this distance count as a double click and result in a `EventType::2buttonPress` event). See also `DisplayExt::set_double_click_time`. Applications should not set this, it is a global user-configured setting. ## `distance` distance in pixels",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_double_click_time","","Sets the double click time (two clicks within this time interval count as a double click and result in a `EventType::2buttonPress` event). Applications should not set this, it is a global user-configured setting. ## `msec` double click time in milliseconds (thousandths of a second)",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"store_clipboard","","Issues a request to the clipboard manager to store the clipboard data. On X11, this is a special program that works according to the FreeDesktop Clipboard Specification. ## `clipboard_window` a `Window` belonging to the clipboard owner ## `time_` a timestamp ## `targets` an array of targets  that should be saved, or `None`  if all available targets should be saved. ## `n_targets` length of the `targets` array",69,null],[10,"supports_clipboard_persistence","","Returns whether the speicifed display supports clipboard persistance; i.e. if it’s possible to store the clipboard data after an application has quit. On X11 this checks if a clipboard daemon is running.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_composite","","Returns `true` if `WindowExt::set_composited` can be used to redirect drawing on the window using compositing.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_cursor_alpha","","Returns `true` if cursors can use an 8bit alpha channel on `self`. Otherwise, cursors are restricted to bilevel alpha (i.e. a mask).",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_cursor_color","","Returns `true` if multicolored cursors are supported on `self`. Otherwise, cursors have only a forground and a background color.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_input_shapes","","Returns `true` if `gdk_window_input_shape_combine_mask` can be used to modify the input shape of windows on `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_selection_notification","","Returns whether `EventOwnerChange` events will be sent when the owner of a selection changes.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_shapes","","Returns `true` if `gdk_window_shape_combine_mask` can be used to create shaped windows on `self`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"sync","","Flushes any requests queued for the windowing system and waits until all requests have been handled. This is often used for making sure that the display is synchronized with the current state of the program. Calling `DisplayExt::sync` before `gdk_error_trap_pop` makes sure that any errors generated from earlier requests are handled before the error trap is removed.",69,{"inputs":[{"name":"self"}],"output":null}],[10,"warp_pointer","","Warps the pointer of `self` to the point `x`,`y` on the screen `screen`, unless the pointer is confined to a window by a grab, in which case it will be moved as far as allowed by the grab. Warping the pointer creates events as if the user had moved the mouse instantaneously to the destination.",69,{"inputs":[{"name":"self"},{"name":"screen"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"connect_closed","","The ::closed signal is emitted when the connection to the windowing system for `display` is closed. ## `is_error` `true` if the display was closed due to an error",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_monitor_added","","The ::monitor-added signal is emitted whenever a monitor is added.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_monitor_removed","","The ::monitor-removed signal is emitted whenever a monitor is removed.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_opened","","The ::opened signal is emitted when the connection to the windowing system for `display` is opened.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_seat_added","","The ::seat-added signal is emitted whenever a new seat is made known to the windowing system.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_seat_removed","","The ::seat-removed signal is emitted whenever a seat is removed by the windowing system.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DisplayManagerExt","","Trait containing all `DisplayManager` methods.",null,null],[10,"get_default_display","","Gets the default `Display`.",70,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"list_displays","","List all currently open displays.",70,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"vec"}}],[10,"open_display","","Opens a display. ## `name` the name of the display to open",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["display"],"name":"option"}}],[10,"set_default_display","","Sets `display` as the default display. ## `display` a `Display`",70,{"inputs":[{"name":"self"},{"name":"display"}],"output":null}],[10,"connect_display_opened","","The ::display-opened signal is emitted when a display is opened. ## `display` the opened display",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_display_notify","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DragContextExt","","Trait containing all `DragContext` methods.",null,null],[10,"get_actions","","Determines the bitmask of actions proposed by the source if `DragContextExt::get_suggested_action` returns `DragAction::Ask`.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[10,"get_dest_window","","Returns the destination windw for the DND operation.",71,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_device","","Returns the `Device` associated to the drag context.",71,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[10,"get_drag_window","","Returns the window on which the drag icon should be rendered during the drag operation. Note that the window may not be available until the drag operation has begun. GDK will move the window in accordance with the ongoing drag operation. The window is owned by `self` and will be destroyed when the drag operation is over.",71,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_protocol","","Returns the drag protocol thats used by this context.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragprotocol"}}],[10,"get_selected_action","","Determines the action chosen by the drag destination.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[10,"get_source_window","","Returns the `Window` where the DND operation started.",71,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_suggested_action","","Determines the suggested drag action of the context.",71,{"inputs":[{"name":"self"}],"output":{"name":"dragaction"}}],[10,"list_targets","","Retrieves the list of targets of the context.",71,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"manage_dnd","","Requests the drag and drop operation to be managed by `self`. When a drag and drop operation becomes managed, the `DragContext` will internally handle all input and source-side `EventDND` events as required by the windowing system.",71,{"inputs":[{"name":"self"},{"name":"window"},{"name":"dragaction"}],"output":{"name":"bool"}}],[10,"set_device","","Associates a `Device` to `self`, so all Drag and Drop events for `self` are emitted as if they came from this device. ## `device` a `Device`",71,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_hotspot","","Sets the position of the drag window that will be kept under the cursor hotspot. Initially, the hotspot is at the top left corner of the drag window.",71,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"connect_action_changed","","A new action is being chosen for the drag and drop operation.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cancel","","The drag and drop operation was cancelled.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_dnd_finished","","The drag and drop operation was finished, the drag destination finished reading all data. The drag source can now free all miscellaneous data.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drop_performed","","The drag and drop operation was performed on an accepting client.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DrawingContextExt","","Trait containing all `DrawingContext` methods.",null,null],[10,"get_cairo_context","","Retrieves a Cairo context to be used to draw on the `Window` that created the `DrawingContext`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_clip","","Retrieves a copy of the clip region used when creating the `self`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_window","","Retrieves the window that created the drawing `self`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"is_valid","","Checks whether the given `DrawingContext` is valid.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_clip_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FrameClockExt","","Trait containing all `FrameClock` methods.",null,null],[10,"begin_updating","","Starts updates for an animation. Until a matching call to `FrameClockExt::end_updating` is made, the frame clock will continually request a new frame with the `FrameClockPhase::Update` phase. This function may be called multiple times and frames will be requested until `FrameClockExt::end_updating` is called the same number of times.",73,{"inputs":[{"name":"self"}],"output":null}],[10,"end_updating","","Stops updates for an animation. See the documentation for `FrameClockExt::begin_updating`.",73,{"inputs":[{"name":"self"}],"output":null}],[10,"get_current_timings","","Gets the frame timings for the current frame.",73,{"inputs":[{"name":"self"}],"output":{"generics":["frametimings"],"name":"option"}}],[10,"get_frame_counter","","A `FrameClock` maintains a 64-bit counter that increments for each frame drawn.",73,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_frame_time","","Gets the time that should currently be used for animations. Inside the processing of a frame, it’s the time used to compute the animation position of everything in a frame. Outside of a frame, it's the time of the conceptual “previous frame,” which may be either the actual previous frame time, or if that’s too old, an updated time.",73,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_history_start","","`FrameClock` internally keeps a history of `FrameTimings` objects for recent frames that can be retrieved with `FrameClockExt::get_timings`. The set of stored frames is the set from the counter values given by `FrameClockExt::get_history_start` and `FrameClockExt::get_frame_counter`, inclusive.",73,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_timings","","Retrieves a `FrameTimings` object holding timing information for the current frame or a recent frame. The `FrameTimings` object may not yet be complete: see `FrameTimings::get_complete`.",73,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["frametimings"],"name":"option"}}],[10,"request_phase","","Asks the frame clock to run a particular phase. The signal corresponding the requested phase will be emitted the next time the frame clock processes. Multiple calls to `FrameClockExt::request_phase` will be combined together and only one frame processed. If you are displaying animated content and want to continually request the `FrameClockPhase::Update` phase for a period of time, you should use `FrameClockExt::begin_updating` instead, since this allows GTK+ to adjust system parameters to get maximally smooth animations.",73,{"inputs":[{"name":"self"},{"name":"frameclockphase"}],"output":null}],[10,"connect_after_paint","","This signal ends processing of the frame. Applications should generally not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_before_paint","","This signal begins processing of the frame. Applications should generally not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_flush_events","","This signal is used to flush pending motion events that are being batched up and compressed together. Applications should not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_layout","","This signal is emitted as the second step of toolkit and application processing of the frame. Any work to update sizes and positions of application elements should be performed. GTK+ normally handles this internally.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_paint","","This signal is emitted as the third step of toolkit and application processing of the frame. The frame is repainted. GDK normally handles this internally and produces expose events, which are turned into GTK+ ``GtkWidget`::draw` signals.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_resume_events","","This signal is emitted after processing of the frame is finished, and is handled internally by GTK+ to resume normal event processing. Applications should not handle this signal.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_update","","This signal is emitted as the first step of toolkit and application processing of the frame. Animations should be updated using `FrameClockExt::get_frame_time`. Applications can connect directly to this signal, or use `gtk_widget_add_tick_callback` as a more convenient interface.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GLContextExt","","Trait containing all `GLContext` methods.",null,null],[10,"get_debug_enabled","","Retrieves the value set using `GLContextExt::set_debug_enabled`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_display","","Retrieves the `Display` the `self` is created for",74,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_forward_compatible","","Retrieves the value set using `GLContextExt::set_forward_compatible`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_required_version","","Retrieves the major and minor version requested by calling `GLContextExt::set_required_version`.",74,null],[10,"get_shared_context","","Retrieves the `GLContext` that this `self` share data with.",74,{"inputs":[{"name":"self"}],"output":{"generics":["glcontext"],"name":"option"}}],[10,"get_use_es","","Checks whether the `self` is using an OpenGL or OpenGL ES profile.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_version","","Retrieves the OpenGL version of the `self`.",74,null],[10,"get_window","","Retrieves the `Window` used by the `self`.",74,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"is_legacy","","Whether the `GLContext` is in legacy mode or not.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the `self` the current one.",74,{"inputs":[{"name":"self"}],"output":null}],[10,"realize","","Realizes the given `GLContext`.",74,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_debug_enabled","","Sets whether the `GLContext` should perform extra validations and run time checking. This is useful during development, but has additional overhead.",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_forward_compatible","","Sets whether the `GLContext` should be forward compatible.",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_required_version","","Sets the major and minor version of OpenGL to request.",74,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_use_es","","Requests that GDK create a OpenGL ES context instead of an OpenGL one, if the platform and windowing system allows it.",74,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_display_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shared_context_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MonitorExt","","Trait containing all `Monitor` methods.",null,null],[10,"get_display","","Gets the display that this monitor belongs to.",75,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_geometry","","Retrieves the size and position of an individual monitor within the display coordinate space. The returned geometry is in ”application pixels”, not in ”device pixels” (see `MonitorExt::get_scale_factor`).",75,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_height_mm","","Gets the height in millimeters of the monitor.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_manufacturer","","Gets the name of the monitor's manufacturer, if available.",75,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_model","","Gets the a string identifying the monitor model, if available.",75,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_refresh_rate","","Gets the refresh rate of the monitor, if available.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_scale_factor","","Gets the internal scale factor that maps from monitor coordinates to the actual device pixels. On traditional systems this is 1, but on very high density outputs this can be a higher value (often 2).",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_subpixel_layout","","Gets information about the layout of red, green and blue primaries for each pixel in this monitor, if available.",75,{"inputs":[{"name":"self"}],"output":{"name":"subpixellayout"}}],[10,"get_width_mm","","Gets the width in millimeters of the monitor.",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_workarea","","Retrieves the size and position of the “work area” on a monitor within the display coordinate space. The returned geometry is in ”application pixels”, not in ”device pixels” (see `MonitorExt::get_scale_factor`).",75,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"is_primary","","Gets whether this monitor should be considered primary (see `DisplayExt::get_primary_monitor`).",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_display","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_property_geometry","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_property_height_mm","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_refresh_rate","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_scale_factor","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_width_mm","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_workarea","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"connect_invalidate","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_geometry_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_mm_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_manufacturer_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_refresh_rate_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_factor_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_subpixel_layout_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_mm_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_workarea_notify","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScreenExt","","Trait containing all `Screen` methods.",null,null],[10,"get_active_window","","Returns the screen’s currently active window.",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_display","","Gets the display to which the `self` belongs.",76,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_height","","Gets the height of `self` in pixels. The returned size is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_height_mm","","Returns the height of `self` in millimeters.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_monitor_at_point","","Returns the monitor number in which the point (`x`,`y`) is located.",76,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_at_window","","Returns the number of the monitor in which the largest area of the bounding rectangle of `window` resides.",76,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"i32"}}],[10,"get_monitor_geometry","","Retrieves the `Rectangle` representing the size and position of the individual monitor within the entire screen area. The returned geometry is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangle"}}],[10,"get_monitor_height_mm","","Gets the height in millimeters of the specified monitor.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_plug_name","","Returns the output name of the specified monitor. Usually something like VGA, DVI, or TV, not the actual product name of the display device.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_monitor_scale_factor","","Returns the internal scale factor that maps from monitor coordinates to the actual device pixels. On traditional systems this is 1, but on very high density outputs this can be a higher value (often 2).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_width_mm","","Gets the width in millimeters of the specified monitor, if available.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_monitor_workarea","","Retrieves the `Rectangle` representing the size and position of the “work area” on a monitor within the entire screen area. The returned geometry is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rectangle"}}],[10,"get_n_monitors","","Returns the number of monitors which `self` consists of.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_number","","Gets the index of `self` among the screens in the display to which it belongs. (See `ScreenExt::get_display`)",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_primary_monitor","","Gets the primary monitor for `self`. The primary monitor is considered the monitor where the “main desktop” lives. While normal application windows typically allow the window manager to place the windows, specialized desktop applications such as panels should place themselves on the primary monitor.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_resolution","","Gets the resolution for font handling on the screen; see `ScreenExt::set_resolution` for full details.",76,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_rgba_visual","","Gets a visual to use for creating windows with an alpha channel. The windowing system on which GTK+ is running may not support this capability, in which case `None` will be returned. Even if a non-`None` value is returned, its possible that the window’s alpha channel won’t be honored when displaying the window on the screen: in particular, for X an appropriate windowing manager and compositing manager must be running to provide appropriate display.",76,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"option"}}],[10,"get_root_window","","Gets the root window of `self`.",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_system_visual","","Get the system’s default visual for `self`. This is the visual for the root window of the display. The return value should not be freed.",76,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"option"}}],[10,"get_toplevel_windows","","Obtains a list of all toplevel windows known to GDK on the screen `self`. A toplevel window is a child of the root window (see `gdk_get_default_root_window`).",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"get_width","","Gets the width of `self` in pixels. The returned size is in ”application pixels”, not in ”device pixels” (see `ScreenExt::get_monitor_scale_factor`).",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_width_mm","","Gets the width of `self` in millimeters.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_window_stack","","Returns a `glib::List` of `GdkWindows` representing the current window stack.",76,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"is_composited","","Returns whether windows with an RGBA visual can reasonably be expected to have their alpha channel drawn correctly on the screen.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_visuals","","Lists the available visuals for the specified `self`. A visual describes a hardware image data format. For example, a visual might support 24-bit color, or 8-bit color, and might expect pixels to be in a certain format.",76,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"vec"}}],[10,"make_display_name","","Determines the name to pass to `Display::open` to get a `Display` with this screen as the default screen.",76,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"set_font_options","","Sets the default font options for the screen. These options will be set on any `pango::Context`’s newly created with `gdk_pango_context_get_for_screen`. Changing the default set of font options does not affect contexts that have already been created. ## `options` a `cairo::FontOptions`, or `None` to unset any  previously set default font options.",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_resolution","","Sets the resolution for font handling on the screen. This is a scale factor between points specified in a `pango::FontDescription` and cairo units. The default value is 96, meaning that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3). ## `dpi` the resolution in “dots per inch”. (Physical inches aren’t actually  involved; the terminology is conventional.)",76,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_composited_changed","","The ::composited-changed signal is emitted when the composited status of the screen changes",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_monitors_changed","","The ::monitors-changed signal is emitted when the number, size or position of the monitors attached to the screen change.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_size_changed","","The ::size-changed signal is emitted when the pixel width or height of a screen changes.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_options_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resolution_notify","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SeatExt","","Trait containing all `Seat` methods.",null,null],[10,"get_capabilities","","Returns the capabilities this `Seat` currently has.",77,{"inputs":[{"name":"self"}],"output":{"name":"seatcapabilities"}}],[10,"get_display","","Returns the `Display` this seat belongs to.",77,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_keyboard","","Returns the master device that routes keyboard events.",77,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_pointer","","Returns the master device that routes pointer events.",77,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_slaves","","Returns the slave devices that match the given capabilities.",77,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"generics":["device"],"name":"vec"}}],[10,"ungrab","","Releases a grab added through `SeatExt::grab`.",77,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_device_added","","The ::device-added signal is emitted when a new input device is related to this seat.",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_device_removed","","The ::device-removed signal is emitted when an input device is removed (e.g. unplugged).",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tool_added","","The ::tool-added signal is emitted whenever a new tool is made known to the seat. The tool may later be assigned to a device (i.e. on proximity with a tablet). The device will emit the `Device::tool-changed` signal accordingly.",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tool_removed","","This signal is emitted whenever a tool is no longer known to this `seat`.",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_display_notify","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"VisualExt","","Trait containing all `Visual` methods.",null,null],[10,"get_bits_per_rgb","","Returns the number of significant bits per red, green and blue value.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_blue_pixel_details","","Obtains values that are needed to calculate blue pixel values in TrueColor and DirectColor. The “mask” is the significant bits within the pixel. The “shift” is the number of bits left we must shift a primary for it to be in position (according to the \"mask\"). Finally, \"precision\" refers to how much precision the pixel value contains for a particular primary. ## `mask` A pointer to a `guint32` to be filled in, or `None` ## `shift` A pointer to a `gint` to be filled in, or `None` ## `precision` A pointer to a `gint` to be filled in, or `None`",78,null],[10,"get_byte_order","","Returns the byte order of this visual.",78,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[10,"get_colormap_size","","Returns the size of a colormap for this visual.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_depth","","Returns the bit depth of this visual.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_green_pixel_details","","Obtains values that are needed to calculate green pixel values in TrueColor and DirectColor. The “mask” is the significant bits within the pixel. The “shift” is the number of bits left we must shift a primary for it to be in position (according to the \"mask\"). Finally, \"precision\" refers to how much precision the pixel value contains for a particular primary. ## `mask` A pointer to a `guint32` to be filled in, or `None` ## `shift` A pointer to a `gint` to be filled in, or `None` ## `precision` A pointer to a `gint` to be filled in, or `None`",78,null],[10,"get_red_pixel_details","","Obtains values that are needed to calculate red pixel values in TrueColor and DirectColor. The “mask” is the significant bits within the pixel. The “shift” is the number of bits left we must shift a primary for it to be in position (according to the \"mask\"). Finally, \"precision\" refers to how much precision the pixel value contains for a particular primary. ## `mask` A pointer to a `guint32` to be filled in, or `None` ## `shift` A pointer to a `gint` to be filled in, or `None` ## `precision` A pointer to a `gint` to be filled in, or `None`",78,null],[10,"get_screen","","Gets the screen to which this visual belongs",78,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[10,"get_visual_type","","Returns the type of visual this is (PseudoColor, TrueColor, etc).",78,{"inputs":[{"name":"self"}],"output":{"name":"visualtype"}}],[8,"WindowExt","","Trait containing all `Window` methods.",null,null],[10,"beep","","Emits a short beep associated to `self` in the appropriate display, if supported. Otherwise, emits a short beep on the display just as `DisplayExt::beep`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"begin_draw_frame","","Indicates that you are beginning the process of redrawing `region` on `self`, and provides you with a `DrawingContext`.",79,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"generics":["drawingcontext"],"name":"option"}}],[10,"begin_move_drag","","Begins a window move operation (for a toplevel window).",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_move_drag_for_device","","Begins a window move operation (for a toplevel window). You might use this function to implement a “window move grip,” for example. The function works best with window managers that support the Extended Window Manager Hints but has a fallback implementation for other window managers. ## `device` the device used for the operation ## `button` the button being used to drag, or 0 for a keyboard-initiated drag ## `root_x` root window X coordinate of mouse click that began the drag ## `root_y` root window Y coordinate of mouse click that began the drag ## `timestamp` timestamp of mouse click that began the drag",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_paint_rect","","A convenience wrapper around `WindowExt::begin_paint_region` which creates a rectangular region for you. See `WindowExt::begin_paint_region` for details.",79,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"begin_paint_region","","Indicates that you are beginning the process of redrawing `region`. A backing store (offscreen buffer) large enough to contain `region` will be created. The backing store will be initialized with the background color or background surface for `self`. Then, all drawing operations performed on `self` will be diverted to the backing store. When you call `WindowExt::end_paint`, the backing store will be copied to `self`, making it visible onscreen. Only the part of `self` contained in `region` will be modified; that is, drawing operations are clipped to `region`.",79,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[10,"begin_resize_drag","","Begins a window resize operation (for a toplevel window).",79,{"inputs":[{"name":"self"},{"name":"windowedge"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_resize_drag_for_device","","Begins a window resize operation (for a toplevel window). You might use this function to implement a “window resize grip,” for example; in fact `GtkStatusbar` uses it. The function works best with window managers that support the Extended Window Manager Hints but has a fallback implementation for other window managers. ## `edge` the edge or corner from which the drag is started ## `device` the device used for the operation ## `button` the button being used to drag, or 0 for a keyboard-initiated drag ## `root_x` root window X coordinate of mouse click that began the drag ## `root_y` root window Y coordinate of mouse click that began the drag ## `timestamp` timestamp of mouse click that began the drag (use `gdk_event_get_time`)",79,{"inputs":[{"name":"self"},{"name":"windowedge"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"configure_finished","","Does nothing, present only for compatiblity.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"coords_from_parent","","Transforms window coordinates from a parent window to a child window, where the parent window is the normal parent as returned by `WindowExt::get_parent` for normal windows, and the window's embedder as returned by `gdk_offscreen_window_get_embedder` for offscreen windows.",79,null],[10,"coords_to_parent","","Transforms window coordinates from a child window to its parent window, where the parent window is the normal parent as returned by `WindowExt::get_parent` for normal windows, and the window's embedder as returned by `gdk_offscreen_window_get_embedder` for offscreen windows.",79,null],[10,"create_gl_context","","Creates a new `GLContext` matching the framebuffer format to the visual of the `Window`. The context is disconnected from any particular window or surface.",79,{"inputs":[{"name":"self"}],"output":{"generics":["glcontext","error"],"name":"result"}}],[10,"create_similar_image_surface","","Create a new image surface that is efficient to draw on the given `self`.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["surface"],"name":"option"}}],[10,"deiconify","","Attempt to deiconify (unminimize) `self`. On X11 the window manager may choose to ignore the request to deiconify. When using GTK+, use `gtk_window_deiconify` instead of the `Window` variant. Or better yet, you probably want to use `gtk_window_present`, which raises the window, focuses it, unminimizes it, and puts it on the current desktop.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"destroy","","Destroys the window system resources associated with `self` and decrements `self`'s reference count. The window system resources for all children of `self` are also destroyed, but the children’s reference counts are not decremented.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"destroy_notify","","",79,{"inputs":[{"name":"self"}],"output":null}],[10,"enable_synchronized_configure","","Does nothing, present only for compatiblity.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"end_draw_frame","","Indicates that the drawing of the contents of `self` started with `gdk_window_begin_frame` has been completed.",79,{"inputs":[{"name":"self"},{"name":"drawingcontext"}],"output":null}],[10,"end_paint","","Indicates that the backing store created by the most recent call to `WindowExt::begin_paint_region` should be copied onscreen and deleted, leaving the next-most-recent backing store or no backing store at all as the active paint region. See `WindowExt::begin_paint_region` for full details.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"ensure_native","","Tries to ensure that there is a window-system native window for this `Window`. This may fail in some situations, returning `false`.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"flush","","This function does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"focus","","Sets keyboard focus to `self`. In most cases, `gtk_window_present` should be used on a `GtkWindow`, rather than calling this function. ## `timestamp` timestamp of the event triggering the window focus",79,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"freeze_toplevel_updates_libgtk_only","","Temporarily freezes a window and all its descendants such that it won't receive expose events. The window will begin receiving expose events again when `WindowExt::thaw_toplevel_updates_libgtk_only` is called. If `WindowExt::freeze_toplevel_updates_libgtk_only` has been called more than once, `WindowExt::thaw_toplevel_updates_libgtk_only` must be called an equal number of times to begin processing exposes.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"freeze_updates","","Temporarily freezes a window such that it won’t receive expose events. The window will begin receiving expose events again when `WindowExt::thaw_updates` is called. If `WindowExt::freeze_updates` has been called more than once, `WindowExt::thaw_updates` must be called an equal number of times to begin processing exposes.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen","","Moves the window into fullscreen mode. This means the window covers the entire screen and is above any panels or task bars.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen_on_monitor","","Moves the window into fullscreen mode on the given monitor. This means the window covers the entire screen and is above any panels or task bars.",79,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"geometry_changed","","This function informs GDK that the geometry of an embedded offscreen window has changed. This is necessary for GDK to keep track of which offscreen window the pointer is in.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"get_accept_focus","","Determines whether or not the desktop environment shuld be hinted that the window does not want to receive input focus.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_children","","Gets the list of children of `self` known to GDK. This function only returns children created via GDK, so for example it’s useless when used with the root window; it only returns windows an application created itself.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"get_clip_region","","Computes the region of a window that potentially can be written to by drawing primitives. This region may not take into account other factors such as if the window is obscured by other windows, but no area outside of this region will be affected by drawing primitives.",79,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_composited","","Determines whether `self` is composited.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_cursor","","Retrieves a `Cursor` pointer for the cursor currently set on the specified `Window`, or `None`. If the return value is `None` then there is no custom cursor set on the specified window, and it is using the cursor for its parent window.",79,{"inputs":[{"name":"self"}],"output":{"generics":["cursor"],"name":"option"}}],[10,"get_decorations","","Returns the decorations set on the `Window` with `WindowExt::set_decorations`. ## `decorations` The window decorations will be written here",79,{"inputs":[{"name":"self"}],"output":{"generics":["wmdecoration"],"name":"option"}}],[10,"get_device_cursor","","Retrieves a `Cursor` pointer for the `device` currently set on the specified `Window`, or `None`. If the return value is `None` then there is no custom cursor set on the specified window, and it is using the cursor for its parent window. ## `device` a master, pointer `Device`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["cursor"],"name":"option"}}],[10,"get_device_events","","Returns the event mask for `self` corresponding to an specific device. ## `device` a `Device`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"eventmask"}}],[10,"get_device_position","","Obtains the current device position and modifier state. The position is given in coordinates relative to the upper left corner of `self`.",79,null],[10,"get_device_position_double","","Obtains the current device position in doubles and modifier state. The position is given in coordinates relative to the upper left corner of `self`.",79,null],[10,"get_display","","Gets the `Display` associated with a `Window`.",79,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[10,"get_drag_protocol","","Finds out the DND protocol supported by a window. ## `target` location of the window  where the drop should happen. This may be `self` or a proxy window,  or `None` if `self` does not support Drag and Drop.",79,null],[10,"get_effective_parent","","Obtains the parent of `self`, as known to GDK. Works like `WindowExt::get_parent` for normal windows, but returns the window’s embedder for offscreen windows.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_effective_toplevel","","Gets the toplevel window that’s an ancestor of `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_event_compression","","Get the current event compression setting for this window.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_events","","Gets the event mask for `self` for all master input devices. See `WindowExt::set_events`.",79,{"inputs":[{"name":"self"}],"output":{"name":"eventmask"}}],[10,"get_focus_on_map","","Determines whether or not the desktop environment should be hinted that the window does not want to receive input focus when it is mapped.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_frame_clock","","Gets the frame clock for the window. The frame clock for a window never changes unless the window is reparented to a new toplevel window.",79,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"get_frame_extents","","Obtains the bounding box of the window, including window manager titlebar/borders if any. The frame position is given in root window coordinates. To get the position of the window itself (rather than the frame) in root window coordinates, use `WindowExt::get_origin`. ## `rect` rectangle to fill with bounding box of the window frame",79,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_fullscreen_mode","","Obtains the `FullscreenMode` of the `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenmode"}}],[10,"get_geometry","","Any of the return location arguments to this function may be `None`, if you aren’t interested in getting the value of that field.",79,null],[10,"get_group","","Returns the group leader window for `self`. See `WindowExt::set_group`.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_height","","Returns the height of the given `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_modal_hint","","Determines whether or not the window manager is hinted that `self` has modal behaviour.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_origin","","Obtains the position of a window in root window coordinates. (Compare with `WindowExt::get_position` and `WindowExt::get_geometry` which return the position of a window relative to its parent window.) ## `x` return location for X coordinate ## `y` return location for Y coordinate",79,null],[10,"get_parent","","Obtains the parent of `self`, as known to GDK. Does not query the X server; thus this returns the parent as passed to `Window::new`, not the actual parent. This should never matter unless you’re using Xlib calls mixed with GDK calls on the X11 platform. It may also matter for toplevel windows, because the window manager may choose to reparent them.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_pass_through","","Returns whether input to the window is passed through to the window below.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pointer","","Obtains the current pointer position and modifier state. The position is given in coordinates relative to the upper left corner of `self`.",79,null],[10,"get_position","","Obtains the position of the window as reported in the most-recently-processed `EventConfigure`. Contrast with `WindowExt::get_geometry` which queries the X server for the current window position, regardless of which events have been received or processed.",79,null],[10,"get_root_coords","","Obtains the position of a window position in root window coordinates. This is similar to `WindowExt::get_origin` but allows you to pass in any position in the window, not just the origin. ## `x` X coordinate in window ## `y` Y coordinate in window ## `root_x` return location for X coordinate ## `root_y` return location for Y coordinate",79,null],[10,"get_root_origin","","Obtains the top-left corner of the window manager frame in root window coordinates. ## `x` return location for X position of window frame ## `y` return location for Y position of window frame",79,null],[10,"get_scale_factor","","Returns the internal scale factor that maps from window coordiantes to the actual device pixels. On traditional systems this is 1, but on very high density outputs this can be a higher value (often 2).",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_screen","","Gets the `Screen` associated with a `Window`.",79,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[10,"get_source_events","","Returns the event mask for `self` corresponding to the device class specified by `source`. ## `source` a `InputSource` to define the source class.",79,{"inputs":[{"name":"self"},{"name":"inputsource"}],"output":{"name":"eventmask"}}],[10,"get_state","","Gets the bitwise OR of the currently active window state flags, from the `WindowState` enumeration.",79,{"inputs":[{"name":"self"}],"output":{"name":"windowstate"}}],[10,"get_support_multidevice","","Returns `true` if the window is aware of the existence of multiple devices.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_toplevel","","Gets the toplevel window that’s an ancestor of `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_type_hint","","This function returns the type hint set for a window.",79,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[10,"get_update_area","","Transfers ownership of the update area from `self` to the caller of the function. That is, after calling this function, `self` will no longer have an invalid/dirty region; the update area is removed from `self` and handed to you. If a window has no update area, `WindowExt::get_update_area` returns `None`. You are responsible for calling `cairo_region_destroy` on the returned region if it’s non-`None`.",79,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_visible_region","","Computes the region of the `self` that is potentially visible. This does not necessarily take into account if the window is obscured by other windows, but no area outside of this region is visible.",79,{"inputs":[{"name":"self"}],"output":{"generics":["region"],"name":"option"}}],[10,"get_visual","","Gets the `Visual` describing the pixel format of `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"visual"}}],[10,"get_width","","Returns the width of the given `self`.",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_window_type","","Gets the type of the window. See `WindowType`.",79,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[10,"has_native","","Checks whether the window has a native window or not. Note that you can use `WindowExt::ensure_native` if a native window is needed.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"hide","","For toplevel windows, withdraws them, so they will no longer be known to the window manager; for all windows, unmaps them, so they won’t be displayed. Normally done automatically as part of `gtk_widget_hide`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"iconify","","Asks to iconify (minimize) `self`. The window manager may choose to ignore the request, but normally will honor it. Using `gtk_window_iconify` is preferred, if you have a `GtkWindow` widget.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"input_shape_combine_region","","Like `WindowExt::shape_combine_region`, but the shape applies only to event handling. Mouse events which happen while the pointer position corresponds to an unset bit in the mask will be passed on the window below `self`.",79,{"inputs":[{"name":"self"},{"name":"region"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"invalidate_rect","","A convenience wrapper around `WindowExt::invalidate_region` which invalidates a rectangular region. See `WindowExt::invalidate_region` for details. ## `rect` rectangle to invalidate or `None` to invalidate the whole  window ## `invalidate_children` whether to also invalidate child windows",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"invalidate_region","","Adds `region` to the update area for `self`. The update area is the region that needs to be redrawn, or “dirty region.” The call `WindowExt::process_updates` sends one or more expose events to the window, which together cover the entire update area. An application would normally redraw the contents of `self` in response to those expose events.",79,{"inputs":[{"name":"self"},{"name":"region"},{"name":"bool"}],"output":null}],[10,"is_destroyed","","Check to see if a window is destroyed..",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_input_only","","Determines whether or not the window is an input only window.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_shaped","","Determines whether or not the window is shaped.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_viewable","","Check if the window and all ancestors of the window are mapped. (This is not necessarily \"viewable\" in the X sense, since we only check as far as we have GDK window parents, not to the root window.)",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_visible","","Checks whether the window has been mapped (with `WindowExt::show` or `WindowExt::show_unraised`).",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"lower","","Lowers `self` to the bottom of the Z-order (stacking order), so that other windows with the same parent window appear above `self`. This is true whether or not the other windows are visible.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"mark_paint_from_clip","","If you call this during a paint (e.g. between `WindowExt::begin_paint_region` and `WindowExt::end_paint` then GDK will mark the current clip region of the window as being drawn. This is required when mixing GL rendering via `gdk_cairo_draw_from_gl` and cairo rendering, as otherwise GDK has no way of knowing when something paints over the GL-drawn regions.",79,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[10,"maximize","","Maximizes the window. If the window was already maximized, then this function does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"merge_child_input_shapes","","Merges the input shape masks for any child windows into the input shape mask for `self`. i.e. the union of all input masks for `self` and its children will become the new input mask for `self`. See `WindowExt::input_shape_combine_region`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"merge_child_shapes","","Merges the shape masks for any child windows into the shape mask for `self`. i.e. the union of all masks for `self` and its children will become the new mask for `self`. See `WindowExt::shape_combine_region`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"move_","","",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"move_region","","Move the part of `self` indicated by `region` by `dy` pixels in the Y direction and `dx` pixels in the X direction. The portions of `region` that not covered by the new position of `region` are invalidated.",79,{"inputs":[{"name":"self"},{"name":"region"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"move_resize","","Equivalent to calling `WindowExt::move` and `WindowExt::resize`, except that both operations are performed at once, avoiding strange visual effects. (i.e. the user may be able to see the window first move, then resize, if you don’t use `WindowExt::move_resize`.) ## `x` new X position relative to window’s parent ## `y` new Y position relative to window’s parent ## `width` new width ## `height` new height",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"peek_children","","Like `WindowExt::get_children`, but does not copy the list of children, so the list does not need to be freed.",79,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"process_updates","","Sends one or more expose events to `self`. The areas in each expose event will cover the entire update area for the window (see `WindowExt::invalidate_region` for details). Normally GDK calls `Window::process_all_updates` on your behalf, so there’s no need to call this function unless you want to force expose events to be delivered immediately and synchronously (vs. the usual case, where GDK delivers them in an idle handler). Occasionally this is useful to produce nicer scrolling behavior, for example.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"raise","","Raises `self` to the top of the Z-order (stacking order), so that other windows with the same parent window appear below `self`. This is true whether or not the windows are visible.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"register_dnd","","Registers a window as a potential drop destination.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"reparent","","Reparents `self` into the given `new_parent`. The window being reparented will be unmapped as a side effect. ## `new_parent` new parent to move `self` into ## `x` X location inside the new parent ## `y` Y location inside the new parent",79,{"inputs":[{"name":"self"},{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"resize","","Resizes `self`; for toplevel windows, asks the window manager to resize the window. The window manager may not allow the resize. When using GTK+, use `gtk_window_resize` instead of this low-level GDK function.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"restack","","Changes the position of `self` in the Z-order (stacking order), so that it is above `sibling` (if `above` is `true`) or below `sibling` (if `above` is `false`).",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"scroll","","Scroll the contents of `self`, both pixels and children, by the given amount. `self` itself does not move. Portions of the window that the scroll operation brings in from offscreen areas are invalidated. The invalidated region may be bigger than what would strictly be necessary.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_accept_focus","","Setting `accept_focus` to `false` hints the desktop environment that the window doesn’t want to receive input focus.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_background_rgba","","Sets the background color of `self`.",79,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_child_input_shapes","","Sets the input shape mask of `self` to the union of input shape masks for all children of `self`, ignoring the input shape mask of `self` itself. Contrast with `WindowExt::merge_child_input_shapes` which includes the input shape mask of `self` in the masks to be merged.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"set_child_shapes","","Sets the shape mask of `self` to the union of shape masks for all children of `self`, ignoring the shape mask of `self` itself. Contrast with `WindowExt::merge_child_shapes` which includes the shape mask of `self` in the masks to be merged.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"set_composited","","Sets a `Window` as composited, or unsets it. Composited windows do not automatically have their contents drawn to the screen. Drawing is redirected to an offscreen buffer and an expose event is emitted on the parent of the composited window. It is the responsibility of the parent’s expose handler to manually merge the off-screen content onto the screen in whatever way it sees fit.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_cursor","","Sets the default mouse pointer for a `Window`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_decorations","","“Decorations” are the features the window manager adds to a toplevel `Window`. This function sets the traditional Motif window manager hints that tell the window manager which decorations you would like your window to have. Usually you should use `gtk_window_set_decorated` on a `GtkWindow` instead of using the GDK function directly.",79,{"inputs":[{"name":"self"},{"name":"wmdecoration"}],"output":null}],[10,"set_device_cursor","","Sets a specific `Cursor` for a given device when it gets inside `self`. Use `Cursor::new_for_display` or `Cursor::new_from_pixbuf` to create the cursor. To make the cursor invisible, use `CursorType::BlankCursor`. Passing `None` for the `cursor` argument to `WindowExt::set_cursor` means that `self` will use the cursor of its parent window. Most windows should use this default. ## `device` a master, pointer `Device` ## `cursor` a `Cursor`",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"cursor"}],"output":null}],[10,"set_device_events","","Sets the event mask for a given device (Normally a floating device, not attached to any visible pointer) to `self`. For example, an event mask including `EventMask::ButtonPressMask` means the window should report button press events. The event mask is the bitwise OR of values from the `EventMask` enumeration.",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"eventmask"}],"output":null}],[10,"set_event_compression","","Determines whether or not extra unprocessed motion events in the event queue can be discarded. If `true` only the most recent event will be delivered.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_events","","The event mask for a window determines which events will be reported for that window from all master input devices. For example, an event mask including `EventMask::ButtonPressMask` means the window should report button press events. The event mask is the bitwise OR of values from the `EventMask` enumeration.",79,{"inputs":[{"name":"self"},{"name":"eventmask"}],"output":null}],[10,"set_focus_on_map","","Setting `focus_on_map` to `false` hints the desktop environment that the window doesn’t want to receive input focus when it is mapped. focus_on_map should be turned off for windows that aren’t triggered interactively (such as popups from network activity).",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_fullscreen_mode","","Specifies whether the `self` should span over all monitors (in a multi-head setup) or only the current monitor when in fullscreen mode.",79,{"inputs":[{"name":"self"},{"name":"fullscreenmode"}],"output":null}],[10,"set_functions","","Sets hints about the window management functions to make available via buttons on the window frame.",79,{"inputs":[{"name":"self"},{"name":"wmfunction"}],"output":null}],[10,"set_geometry_hints","","Sets the geometry hints for `self`. Hints flagged in `geom_mask` are set, hints not flagged in `geom_mask` are unset. To unset all hints, use a `geom_mask` of 0 and a `geometry` of `None`.",79,{"inputs":[{"name":"self"},{"name":"geometry"},{"name":"windowhints"}],"output":null}],[10,"set_group","","Sets the group leader window for `self`. By default, GDK sets the group leader for all toplevel windows to a global window implicitly created by GDK. With this function you can override this default.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_list","","Sets a list of icons for the window. One of these will be used to represent the window when it has been iconified. The icon is usually shown in an icon box or some sort of task bar. Which icon size is shown depends on the window manager. The window manager can scale the icon but setting several size icons can give better image quality since the window manager may only need to scale the icon by a small amount or not at all.",79,null],[10,"set_icon_name","","Windows may have a name used while minimized, distinct from the name they display in their titlebar. Most of the time this is a bad idea from a user interface standpoint. But you can set such a name with this function, if you like.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_keep_above","","Set if `self` must be kept above other windows. If the window was already above, then this function does nothing.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_keep_below","","Set if `self` must be kept below other windows. If the window was already below, then this function does nothing.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_modal_hint","","The application can use this hint to tell the window manager that a certain window has modal behaviour. The window manager can use this information to handle modal windows in a special way.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_opacity","","Set `self` to render as partially transparent, with opacity 0 being fully transparent and 1 fully opaque. (Values of the opacity parameter are clamped to the [0,1] range.)",79,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_opaque_region","","For optimisation purposes, compositing window managers may like to not draw obscured regions of windows, or turn off blending during for these regions. With RGB windows with no transparency, this is just the shape of the window, but with ARGB32 windows, the compositor does not know what regions of the window are transparent or not.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_override_redirect","","An override redirect window is not under the control of the window manager. This means it won’t have a titlebar, won’t be minimizable, etc. - it will be entirely under the control of the application. The window manager can’t see the override redirect window at all.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pass_through","","Sets whether input to the window is passed through to the window below.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_role","","When using GTK+, typically you should use `gtk_window_set_role` instead of this low-level function.",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_shadow_width","","Newer GTK+ windows using client-side decorations use extra geometry around their frames for effects like shadows and invisible borders. Window managers that want to maximize windows or snap to edges need to know where the extents of the actual frame lie, so that users don’t feel like windows are snapping against random invisible edges.",79,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_skip_pager_hint","","Toggles whether a window should appear in a pager (workspace switcher, or other desktop utility program that displays a small thumbnail representation of the windows on the desktop). If a window’s semantic type as specified with `WindowExt::set_type_hint` already fully describes the window, this function should not be called in addition, instead you should allow the window to be treated according to standard policy for its semantic type. ## `skips_pager` `true` to skip the pager",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_skip_taskbar_hint","","Toggles whether a window should appear in a task list or window list. If a window’s semantic type as specified with `WindowExt::set_type_hint` already fully describes the window, this function should not be called in addition, instead you should allow the window to be treated according to standard policy for its semantic type. ## `skips_taskbar` `true` to skip the taskbar",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_source_events","","Sets the event mask for any floating device (i.e. not attached to any visible pointer) that has the source defined as `source`. This event mask will be applied both to currently existing, newly added devices after this call, and devices being attached/detached. ## `source` a `InputSource` to define the source class. ## `event_mask` event mask for `self`",79,{"inputs":[{"name":"self"},{"name":"inputsource"},{"name":"eventmask"}],"output":null}],[10,"set_startup_id","","When using GTK+, typically you should use `gtk_window_set_startup_id` instead of this low-level function. ## `startup_id` a string with startup-notification identifier",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_static_gravities","","Used to set the bit gravity of the given window to static, and flag it so all children get static subwindow gravity. This is used if you are implementing scary features that involve deep knowledge of the windowing system. Don’t worry about it.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"set_support_multidevice","","This function will enable multidevice features in `self`.",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Sets the title of a toplevel window, to be displayed in the titlebar. If you haven’t explicitly set the icon name for the window (using `WindowExt::set_icon_name`), the icon name will be set to `title` as well. `title` must be in UTF-8 encoding (as with all user-readable strings in GDK/GTK+). `title` may not be `None`. ## `title` title of `self`",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_transient_for","","Indicates to the window manager that `self` is a transient dialog associated with the application window `parent`. This allows the window manager to do things like center `self` on `parent` and keep `self` above `parent`.",79,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"set_type_hint","","The application can use this call to provide a hint to the window manager about the functionality of a window. The window manager can use this information when determining the decoration and behaviour of the window.",79,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":null}],[10,"set_urgency_hint","","Toggles whether a window needs the user's urgent attention. ## `urgent` `true` if the window is urgent",79,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"shape_combine_region","","Makes pixels in `self` outside `shape_region` be transparent, so that the window may be nonrectangular.",79,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"show","","Like `WindowExt::show_unraised`, but also raises the window to the top of the window stack (moves the window to the front of the Z-order).",79,{"inputs":[{"name":"self"}],"output":null}],[10,"show_unraised","","Shows a `Window` onscreen, but does not modify its stacking order. In contrast, `WindowExt::show` will raise the window to the top of the window stack.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"show_window_menu","","Asks the windowing system to show the window menu. The window menu is the menu shown when right-clicking the titlebar on traditional windows managed by the window manager. This is useful for windows using client-side decorations, activating it with a right-click on the window decorations.",79,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"stick","","“Pins” a window such that it’s on all workspaces and does not scroll with viewports, for window managers that have scrollable viewports. (When using `GtkWindow`, `gtk_window_stick` may be more useful.)",79,{"inputs":[{"name":"self"}],"output":null}],[10,"thaw_toplevel_updates_libgtk_only","","Thaws a window frozen with `WindowExt::freeze_toplevel_updates_libgtk_only`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"thaw_updates","","Thaws a window frozen with `WindowExt::freeze_updates`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"unfullscreen","","Moves the window out of fullscreen mode. If the window was not fullscreen, does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"unmaximize","","Unmaximizes the window. If the window wasn’t maximized, then this function does nothing.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"unstick","","Reverse operation for `WindowExt::stick`; see `WindowExt::stick`, and `gtk_window_unstick`.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"withdraw","","Withdraws a window (unmaps it and asks the window manager to forget about it). This function is not really useful as `WindowExt::hide` automatically withdraws toplevel windows before hiding them.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_create_surface","","The ::create-surface signal is emitted when an offscreen window needs its surface (re)created, which happens either when the window is first drawn to, or when the window is being resized. The first signal handler that returns a non-`None` surface will stop any further signal emission, and its surface will be used.",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pick_embedded_child","","The ::pick-embedded-child signal is emitted to find an embedded child at the given position. ## `x` x coordinate in the window ## `y` y coordinate in the window",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_notify","","",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gdkcolor"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"static_type","","",105,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates an error with supplied error enum variant and message.",105,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",105,null]],"paths":[[3,"Color"],[3,"Geometry"],[3,"Rectangle"],[3,"RGBA"],[3,"WindowAttr"],[4,"AxisUse"],[4,"ByteOrder"],[4,"CrossingMode"],[4,"CursorType"],[4,"DeviceToolType"],[4,"DeviceType"],[4,"DragCancelReason"],[4,"DragProtocol"],[4,"EventType"],[4,"FullscreenMode"],[4,"GLError"],[4,"GrabOwnership"],[4,"GrabStatus"],[4,"Gravity"],[4,"InputMode"],[4,"InputSource"],[4,"ModifierIntent"],[4,"NotifyType"],[4,"OwnerChange"],[4,"PropertyState"],[4,"ScrollDirection"],[4,"SettingAction"],[4,"SubpixelLayout"],[4,"VisibilityState"],[4,"VisualType"],[4,"WindowEdge"],[4,"WindowType"],[4,"WindowTypeHint"],[4,"WindowWindowClass"],[3,"Event"],[3,"AppLaunchContext"],[3,"Cursor"],[3,"Device"],[3,"DeviceManager"],[3,"DeviceTool"],[3,"Display"],[3,"DisplayManager"],[3,"DragContext"],[3,"DrawingContext"],[3,"FrameClock"],[3,"GLContext"],[3,"Monitor"],[3,"Screen"],[3,"Seat"],[3,"Visual"],[3,"Window"],[3,"FrameTimings"],[3,"AnchorHints"],[3,"AxisFlags"],[3,"DragAction"],[3,"EventMask"],[3,"FrameClockPhase"],[3,"ModifierType"],[3,"SeatCapabilities"],[3,"WMDecoration"],[3,"WMFunction"],[3,"WindowHints"],[3,"WindowState"],[8,"ContextExt"],[8,"AppLaunchContextExt"],[8,"CursorExt"],[8,"DeviceExt"],[8,"DeviceManagerExt"],[8,"DeviceToolExt"],[8,"DisplayExt"],[8,"DisplayManagerExt"],[8,"DragContextExt"],[8,"DrawingContextExt"],[8,"FrameClockExt"],[8,"GLContextExt"],[8,"MonitorExt"],[8,"ScreenExt"],[8,"SeatExt"],[8,"VisualExt"],[8,"WindowExt"],[8,"DeviceExtManual"],[8,"DeviceManagerExtManual"],[8,"DragContextExtManual"],[8,"VisualExtManual"],[8,"WindowExtManual"],[3,"Atom"],[3,"EventButton"],[3,"EventConfigure"],[3,"EventCrossing"],[3,"EventDND"],[3,"EventExpose"],[3,"EventFocus"],[3,"EventGrabBroken"],[3,"EventKey"],[3,"EventMotion"],[3,"EventOwnerChange"],[3,"EventProperty"],[3,"EventProximity"],[3,"EventScroll"],[3,"EventSelection"],[3,"EventSetting"],[3,"EventTouch"],[3,"EventVisibility"],[3,"EventWindowState"],[3,"RgbaParseError"],[3,"Error"]]};
searchIndex["gtk"] = {"doc":"GTK+ 3 bindings","items":[[8,"Cast","gtk","Upcasting and downcasting support.",null,null],[11,"upcast","","Upcasts an object to a superclass or interface `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Tries to downcast to a subclass or interface implementor `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the object is an instance of (can be cast to) `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dynamic_cast","","Tries to cast to an object of type `T`. This handles upcasting, downcasting and casting between interface and interface implementors. All checks are performed at runtime, while `downcast` and `upcast` will do many checks at compile-time already.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Continue","","Continue calling the closure in the future iterations or drop it.",null,null],[12,"0","","",1,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[8,"IsA","","Declares the \"is a\" relationship.",null,null],[3,"Object","","The base class in the object hierarchy.",null,null],[8,"StaticType","","Types that are supported by GLib dynamic typing.",null,null],[10,"static_type","","Returns the type identifier of `Self`.",2,{"inputs":[],"output":{"name":"type"}}],[8,"ToValue","","Converts to `Value`.",null,null],[10,"to_value","","Returns a `Value` clone of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"to_value_type","","Returns the type identifer of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[4,"Type","","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",4,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",4,null],[13,"I8","","The fundamental type corresponding to `i8`",4,null],[13,"U8","","The fundamental type corresponding to `u8`",4,null],[13,"Bool","","The fundamental type corresponding to `bool`",4,null],[13,"I32","","The fundamental type corresponding to `i32`",4,null],[13,"U32","","The fundamental type corresponding to `u32`",4,null],[13,"ILong","","The fundamental type corresponding to C `long`",4,null],[13,"ULong","","The fundamental type corresponding to C `unsigned long`",4,null],[13,"I64","","The fundamental type corresponding to `i64`",4,null],[13,"U64","","The fundamental type corresponding to `u64`",4,null],[13,"F32","","The fundamental type corresponding to `f32`",4,null],[13,"F64","","The fundamental type corresponding to `f64`",4,null],[13,"String","","The fundamental type corresponding to `String`",4,null],[13,"Pointer","","The fundamental type corresponding to a pointer",4,null],[13,"Variant","","The fundamental type of GVariant",4,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",4,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",4,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",4,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",4,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",4,null],[13,"BaseObject","","The fundamental type from which all objects are derived",4,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",4,null],[3,"TypedValue","","A statically typed `Value`.",null,null],[3,"Value","","A generic value capable of carrying various types.",null,null],[3,"Inhibit","","Whether to propagate the signal to the default handler.",null,null],[12,"0","","",5,null],[3,"Allocation","","Defines the position and size of a rectangle. It is identical to `cairo::RectangleInt`.",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"width","","",6,null],[12,"height","","",6,null],[3,"Rectangle","","Defines the position and size of a rectangle. It is identical to `cairo::RectangleInt`.",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"width","","",6,null],[12,"height","","",6,null],[3,"AboutDialog","","The `AboutDialog` offers a simple way to display information about a program like its logo, name, copyright, website and license. It is also possible to give credits to the authors, documenters, translators and artists who have worked on the program. An about dialog is typically opened when the user selects the `About` option from the `Help` menu. All parts of the dialog are optional.",null,null],[3,"AccelGroup","","A `AccelGroup` represents a group of keyboard accelerators, typically attached to a toplevel `Window` (with `GtkWindowExt::add_accel_group`). Usually you won’t need to create a `AccelGroup` directly; instead, when using `UIManager`, GTK+ automatically sets up the accelerators for your menus in the ui manager’s `AccelGroup`.",null,null],[3,"ActionBar","","`ActionBar` is designed to present contextual actions. It is expected to be displayed below the content and expand horizontally to fill the area.",null,null],[3,"Actionable","","This interface provides a convenient way of associating widgets with actions on a `ApplicationWindow` or `Application`.",null,null],[3,"Adjustment","","The `Adjustment` object represents a value which has an associated lower and upper bound, together with step and page increments, and a page size. It is used within several GTK+ widgets, including `SpinButton`, `Viewport`, and `Range` (which is a base class for `Scrollbar` and `Scale`).",null,null],[3,"Alignment","","`[Deprecated since 3.14]` The `Alignment` widget controls the alignment and size of its child widget. It has four settings: xscale, yscale, xalign, and yalign.",null,null],[3,"AppChooserButton","","",null,null],[3,"AppChooserDialog","","`AppChooserDialog` shows a `AppChooserWidget` inside a `Dialog`.",null,null],[3,"AppChooserWidget","","`AppChooserWidget` is a widget for selecting applications. It is the main building block for `AppChooserDialog`. Most applications only need to use the latter; but you can use this widget as part of a larger widget if you have special needs.",null,null],[3,"Application","","`Application` is a class that handles many important aspects of a GTK+ application in a convenient fashion, without enforcing a one-size-fits-all application model.",null,null],[3,"ApplicationWindow","","`ApplicationWindow` is a `Window` subclass that offers some extra functionality for better integration with `Application` features. Notably, it can handle both the application menu as well as the menubar. See `GtkApplicationExt::set_app_menu` and `GtkApplicationExt::set_menubar`.",null,null],[3,"Arrow","","`[Deprecated since 3.14]` `Arrow` should be used to draw simple arrows that need to point in one of the four cardinal directions (up, down, left, or right). The style of the arrow can be one of shadow in, shadow out, etched in, or etched out. Note that these directions and style types may be amended in versions of GTK+ to come.",null,null],[3,"AspectFrame","","The `AspectFrame` is useful when you want pack a widget so that it can resize but always retains the same aspect ratio. For instance, one might be drawing a small preview of a larger image. `AspectFrame` derives from `Frame`, so it can draw a label and a frame around the child. The frame will be “shrink-wrapped” to the size of the child.",null,null],[3,"Assistant","","A `Assistant` is a widget used to represent a generally complex operation splitted in several steps, guiding the user through its pages and controlling the page flow to collect the necessary data.",null,null],[3,"Bin","","The `Bin` widget is a container with just one child. It is not very useful itself, but it is useful for deriving subclasses, since it provides common code needed for handling a single child widget.",null,null],[3,"Box","","The `Box` widget organizes child widgets into a rectangular area.",null,null],[3,"Buildable","","`Buildable` allows objects to extend and customize their deserialization from [`Builder` UI descriptions][BUILDER-UI]. The interface includes methods for setting names and properties of objects, parsing custom tags and constructing child objects.",null,null],[3,"Builder","","A `Builder` is an auxiliary object that reads textual descriptions of a user interface and instantiates the described objects. To create a `Builder` from a user interface description, call `Builder::new_from_file`, `Builder::new_from_resource` or `Builder::new_from_string`.",null,null],[3,"Button","","The `Button` widget is generally used to trigger a callback function that is called when the button is pressed. The various signals and how to use them are outlined below.",null,null],[3,"ButtonBox","","Implements",null,null],[3,"Calendar","","`Calendar` is a widget that displays a Gregorian calendar, one month at a time. It can be created with `Calendar::new`.",null,null],[3,"CellArea","","The `CellArea` is an abstract class for `CellLayout` widgets (also referred to as \"layouting widgets\") to interface with an arbitrary number of `GtkCellRenderers` and interact with the user for a given `TreeModel` row.",null,null],[3,"CellAreaBox","","The `CellAreaBox` renders cell renderers into a row or a column depending on its `Orientation`.",null,null],[3,"CellAreaContext","","The `CellAreaContext` object is created by a given `CellArea` implementation via its `CellAreaClass.create_context`() virtual method and is used to store cell sizes and alignments for a series of `TreeModel` rows that are requested and rendered in the same context.",null,null],[3,"CellEditable","","The `CellEditable` interface must be implemented for widgets to be usable when editing the contents of a `TreeView` cell.",null,null],[3,"CellLayout","","`CellLayout` is an interface to be implemented by all objects which want to provide a `TreeViewColumn` like API for packing cells, setting attributes and data funcs.",null,null],[3,"CellRenderer","","The `CellRenderer` is a base class of a set of objects used for rendering a cell to a `cairo::Context`. These objects are used primarily by the `TreeView` widget, though they aren’t tied to them in any specific way. It is worth noting that `CellRenderer` is not a `Widget` and cannot be treated as such.",null,null],[3,"CellRendererAccel","","`CellRendererAccel` displays a keyboard accelerator (i.e. a key combination like `Control + a`). If the cell renderer is editable, the accelerator can be changed by simply typing the new combination.",null,null],[3,"CellRendererCombo","","`CellRendererCombo` renders text in a cell like `CellRendererText` from which it is derived. But while `CellRendererText` offers a simple entry to edit the text, `CellRendererCombo` offers a `ComboBox` widget to edit the text. The values to display in the combo box are taken from the tree model specified in the `CellRendererCombo:model` property.",null,null],[3,"CellRendererPixbuf","","A `CellRendererPixbuf` can be used to render an image in a cell. It allows to render either a given `gdk_pixbuf::Pixbuf` (set via the `CellRendererPixbuf:pixbuf` property) or a named icon (set via the `CellRendererPixbuf:icon-name` property).",null,null],[3,"CellRendererProgress","","`CellRendererProgress` renders a numeric value as a progress par in a cell. Additionally, it can display a text on top of the progress bar.",null,null],[3,"CellRendererSpin","","`CellRendererSpin` renders text in a cell like `CellRendererText` from which it is derived. But while `CellRendererText` offers a simple entry to edit the text, `CellRendererSpin` offers a `SpinButton` widget. Of course, that means that the text has to be parseable as a floating point number.",null,null],[3,"CellRendererSpinner","","`CellRendererSpinner` renders a spinning animation in a cell, very similar to `Spinner`. It can often be used as an alternative to a `CellRendererProgress` for displaying indefinite activity, instead of actual progress.",null,null],[3,"CellRendererText","","A `CellRendererText` renders a given text in its cell, using the font, color and style information provided by its properties. The text will be ellipsized if it is too long and the `CellRendererText:ellipsize` property allows it.",null,null],[3,"CellRendererToggle","","`CellRendererToggle` renders a toggle button in a cell. The button is drawn as a radio or a checkbutton, depending on the `CellRendererToggle:radio` property. When activated, it emits the `CellRendererToggle::toggled` signal.",null,null],[3,"CellView","","",null,null],[3,"CheckButton","","A `CheckButton` places a discrete `ToggleButton` next to a widget, (usually a `Label`). See the section on `ToggleButton` widgets for more information about toggle/check buttons.",null,null],[3,"CheckMenuItem","","A `CheckMenuItem` is a menu item that maintains the state of a boolean value in addition to a `MenuItem` usual role in activating application code.",null,null],[3,"Clipboard","","The `Clipboard` object represents a clipboard of data shared between different processes or between different widgets in the same process. Each clipboard is identified by a name encoded as a `gdk::Atom`. (Conversion to and from strings can be done with `gdk::Atom_::intern` and `gdk::Atom_::name`.) The default clipboard corresponds to the “CLIPBOARD” atom; another commonly used clipboard is the “PRIMARY” clipboard, which, in X, traditionally contains the currently selected text.",null,null],[3,"ColorButton","","The `ColorButton` is a button which displays the currently selected color and allows to open a color selection dialog to change the color. It is suitable widget for selecting a color in a preference dialog.",null,null],[3,"ColorChooser","","`ColorChooser` is an interface that is implemented by widgets for choosing colors. Depending on the situation, colors may be allowed to have alpha (translucency).",null,null],[3,"ColorChooserDialog","","The `ColorChooserDialog` widget is a dialog for choosing a color. It implements the `ColorChooser` interface.",null,null],[3,"ColorChooserWidget","","The `ColorChooserWidget` widget lets the user select a color. By default, the chooser presents a predefined palette of colors, plus a small number of settable custom colors. It is also possible to select a different color with the single-color editor. To enter the single-color editing mode, use the context menu of any color of the palette, or use the '+' button to add a new custom color.",null,null],[3,"ComboBox","","A `ComboBox` is a widget that allows the user to choose from a list of valid choices. The `ComboBox` displays the selected choice. When activated, the `ComboBox` displays a popup which allows the user to make a new choice. The style in which the selected value is displayed, and the style of the popup is determined by the current theme. It may be similar to a Windows-style combo box.",null,null],[3,"ComboBoxText","","A `ComboBoxText` is a simple variant of `ComboBox` that hides the model-view complexity for simple text-only use cases.",null,null],[3,"Container","","A GTK+ user interface is constructed by nesting widgets inside widgets. Container widgets are the inner nodes in the resulting tree of widgets: they contain other widgets. So, for example, you might have a `Window` containing a `Frame` containing a `Label`. If you wanted an image instead of a textual label inside the frame, you might replace the `Label` widget with a `Image` widget.",null,null],[3,"CssProvider","","`CssProvider` is an object implementing the `StyleProvider` interface. It is able to parse [CSS-like][css-overview] input in order to style widgets.",null,null],[3,"Dialog","","Dialog boxes are a convenient way to prompt the user for a small amount of input, e.g. to display a message, ask a question, or anything else that does not require extensive effort on the user’s part.",null,null],[3,"DrawingArea","","The `DrawingArea` widget is used for creating custom user interface elements. It’s essentially a blank widget; you can draw on it. After creating a drawing area, the application may want to connect to:",null,null],[3,"Editable","","The `Editable` interface is an interface which should be implemented by text editing widgets, such as `Entry` and `SpinButton`. It contains functions for generically manipulating an editable widget, a large number of action signals used for key bindings, and several signals that an application can connect to to modify the behavior of a widget.",null,null],[3,"Entry","","The `Entry` widget is a single line text entry widget. A fairly large set of key bindings are supported by default. If the entered text is longer than the allocation of the widget, the widget will scroll so that the cursor position is visible.",null,null],[3,"EntryCompletion","","`EntryCompletion` is an auxiliary object to be used in conjunction with `Entry` to provide the completion functionality. It implements the `CellLayout` interface, to allow the user to add extra cells to the `TreeView` with completion matches.",null,null],[3,"EventBox","","The `EventBox` widget is a subclass of `Bin` which also has its own window. It is useful since it allows you to catch events for widgets which do not have their own window.",null,null],[3,"EventController","","`EventController` is a base, low-level implementation for event controllers. Those react to a series of `GdkEvents`, and possibly trigger actions as a consequence of those.",null,null],[3,"Expander","","A `Expander` allows the user to hide or show its child by clicking on an expander triangle similar to the triangles used in a `TreeView`.",null,null],[3,"FileChooser","","`FileChooser` is an interface that can be implemented by file selection widgets. In GTK+, the main objects that implement this interface are `FileChooserWidget`, `FileChooserDialog`, and `FileChooserButton`. You do not need to write an object that implements the `FileChooser` interface unless you are trying to adapt an existing file selector to expose a standard programming interface.",null,null],[3,"FileChooserButton","","The `FileChooserButton` is a widget that lets the user select a file. It implements the `FileChooser` interface. Visually, it is a file name with a button to bring up a `FileChooserDialog`. The user can then use that dialog to change the file associated with that button. This widget does not support setting the `FileChooser:select-multiple` property to `true`.",null,null],[3,"FileChooserDialog","","`FileChooserDialog` is a dialog box suitable for use with “File/Open” or “File/Save as” commands. This widget works by putting a `FileChooserWidget` inside a `Dialog`. It exposes the `FileChooser` interface, so you can use all of the `FileChooser` functions on the file chooser dialog as well as those for `Dialog`.",null,null],[3,"FileChooserNative","","",null,null],[3,"FileChooserWidget","","`FileChooserWidget` is a widget for choosing files. It exposes the `FileChooser` interface, and you should use the methods of this interface to interact with the widget.",null,null],[3,"FileFilter","","A `FileFilter` can be used to restrict the files being shown in a `FileChooser`. Files can be filtered based on their name (with `FileFilterExt::add_pattern`), on their mime type (with `FileFilterExt::add_mime_type`), or by a custom filter function (with `FileFilterExt::add_custom`).",null,null],[3,"Fixed","","The `Fixed` widget is a container which can place child widgets at fixed positions and with fixed sizes, given in pixels. `Fixed` performs no automatic layout management.",null,null],[3,"FlowBox","","A `FlowBox` positions child widgets in sequence according to its orientation.",null,null],[3,"FlowBoxChild","","Feature: `v3_12`",null,null],[3,"FontButton","","The `FontButton` is a button which displays the currently selected font an allows to open a font chooser dialog to change the font. It is suitable widget for selecting a font in a preference dialog.",null,null],[3,"FontChooser","","`FontChooser` is an interface that can be implemented by widgets displaying the list of fonts. In GTK+, the main objects that implement this interface are `FontChooserWidget`, `FontChooserDialog` and `FontButton`. The `FontChooser` interface has been introducted in GTK+ 3.2.",null,null],[3,"FontChooserDialog","","The `FontChooserDialog` widget is a dialog for selecting a font. It implements the `FontChooser` interface.",null,null],[3,"FontChooserWidget","","The `FontChooserWidget` widget lists the available fonts, styles and sizes, allowing the user to select a font. It is used in the `FontChooserDialog` widget to provide a dialog box for selecting fonts.",null,null],[3,"Frame","","The frame widget is a bin that surrounds its child with a decorative frame and an optional label. If present, the label is drawn in a gap in the top side of the frame. The position of the label can be controlled with `FrameExt::set_label_align`.",null,null],[3,"GLArea","","`GLArea` is a widget that allows drawing with OpenGL.",null,null],[3,"Gesture","","`Gesture` is the base object for gesture recognition, although this object is quite generalized to serve as a base for multi-touch gestures, it is suitable to implement single-touch and pointer-based gestures (using the special `None` `gdk::EventSequence` value for these).",null,null],[3,"GestureDrag","","`GestureDrag` is a `Gesture` implementation that recognizes drag operations. The drag operation itself can be tracked throught the `GestureDrag::drag-begin`, `GestureDrag::drag-update` and `GestureDrag::drag-end` signals, or the relevant coordinates be extracted through `GestureDragExt::get_offset` and `GestureDragExt::get_start_point`.",null,null],[3,"GestureLongPress","","`GestureLongPress` is a `Gesture` implementation able to recognize long presses, triggering the `GestureLongPress::pressed` after the timeout is exceeded.",null,null],[3,"GestureMultiPress","","`GestureMultiPress` is a `Gesture` implementation able to recognize multiple clicks on a nearby zone, which can be listened for through the `GestureMultiPress::pressed` signal. Whenever time or distance between clicks exceed the GTK+ defaults, `GestureMultiPress::stopped` is emitted, and the click counter is reset.",null,null],[3,"GesturePan","","`GesturePan` is a `Gesture` implementation able to recognize pan gestures, those are drags that are locked to happen along one axis. The axis that a `GesturePan` handles is defined at construct time, and can be changed through `GesturePanExt::set_orientation`.",null,null],[3,"GestureRotate","","`GestureRotate` is a `Gesture` implementation able to recognize 2-finger rotations, whenever the angle between both handled sequences changes, the `GestureRotate::angle-changed` signal is emitted.",null,null],[3,"GestureSingle","","`GestureSingle` is a subclass of `Gesture`, optimized (although not restricted) for dealing with mouse and single-touch gestures. Under interaction, these gestures stick to the first interacting sequence, which is accessible through `GestureSingleExt::get_current_sequence` while the gesture is being interacted with.",null,null],[3,"GestureSwipe","","`GestureSwipe` is a `Gesture` implementation able to recognize swipes, after a press/move/.../move/release sequence happens, the `GestureSwipe::swipe` signal will be emitted, providing the velocity and directionality of the sequence at the time it was lifted.",null,null],[3,"GestureZoom","","`GestureZoom` is a `Gesture` implementation able to recognize pinch/zoom gestures, whenever the distance between both tracked sequences changes, the `GestureZoom::scale-changed` signal is emitted to report the scale factor.",null,null],[3,"Grid","","`Grid` is a container which arranges its child widgets in rows and columns. It is a very similar to `Table` and `Box`, but it consistently uses `Widget`’s `Widget:margin` and `Widget:expand` properties instead of custom child properties, and it fully supports [height-for-width geometry management][geometry-management].",null,null],[3,"HeaderBar","","`HeaderBar` is similar to a horizontal `Box`. It allows children to be placed at the start or the end. In addition, it allows a title and subtitle to be displayed. The title will be centered with respect to the width of the box, even if the children at either side take up different amounts of space. The height of the titlebar will be set to provide sufficient space for the subtitle, even if none is currently set. If a subtitle is not needed, the space reservation can be turned off with `HeaderBarExt::set_has_subtitle`.",null,null],[3,"IMContext","","`IMContext` defines the interface for GTK+ input methods. An input method is used by GTK+ text input widgets like `Entry` to map from key events to Unicode character strings.",null,null],[3,"IMMulticontext","","Implements",null,null],[3,"IconFactory","","`[Deprecated since 3.10]` An icon factory manages a collection of `IconSet`; a `IconSet` manages a set of variants of a particular icon (i.e. a `IconSet` contains variants for different sizes and widget states). Icons in an icon factory are named by a stock ID, which is a simple string identifying the icon. Each `Style` has a list of `IconFactory` derived from the current theme; those icon factories are consulted first when searching for an icon. If the theme doesn’t set a particular icon, GTK+ looks for the icon in a list of default icon factories, maintained by `IconFactoryExt::add_default` and `IconFactoryExt::remove_default`. Applications with icons should add a default icon factory with their icons, which will allow themes to override the icons for the application.",null,null],[3,"IconInfo","","Contains information found when looking up an icon in an icon theme.",null,null],[3,"IconTheme","","`IconTheme` provides a facility for looking up icons by name and size. The main reason for using a name rather than simply providing a filename is to allow different icons to be used depending on what “icon theme” is selected by the user. The operation of icon themes on Linux and Unix follows the Icon Theme Specification There is a fallback icon theme, named `hicolor`, where applications should install their icons, but additional icon themes can be installed as operating system vendors and users choose.",null,null],[3,"IconView","","`IconView` provides an alternative view on a `TreeModel`. It displays the model as a grid of icons with labels. Like `TreeView`, it allows to select one or multiple items (depending on the selection mode, see `IconViewExt::set_selection_mode`). In addition to selection with the arrow keys, `IconView` supports rubberband selection, which is controlled by dragging the pointer.",null,null],[3,"Image","","The `Image` widget displays an image. Various kinds of object can be displayed as an image; most typically, you would load a `gdk_pixbuf::Pixbuf` (\"pixel buffer\") from a file, and then display that. There’s a convenience function to do this, `Image::new_from_file`, used as follows:",null,null],[3,"ImageMenuItem","","`[Deprecated since 3.10]` A `ImageMenuItem` is a menu item which has an icon next to the text label.",null,null],[3,"InfoBar","","`InfoBar` is a widget that can be used to show messages to the user without showing a dialog. It is often temporarily shown at the top or bottom of a document. In contrast to `Dialog`, which has a action area at the bottom, `InfoBar` has an action area at the side.",null,null],[3,"Invisible","","",null,null],[3,"Label","","The `Label` widget displays a small amount of text. As the name implies, most labels are used to label another widget such as a `Button`, a `MenuItem`, or a `ComboBox`.",null,null],[3,"Layout","","`Layout` is similar to `DrawingArea` in that it’s a “blank slate” and doesn’t do anything except paint a blank background by default. It’s different in that it supports scrolling natively due to implementing `Scrollable`, and can contain child widgets since it’s a `Container`.",null,null],[3,"LevelBar","","The `LevelBar` is a bar widget that can be used as a level indicator. Typical use cases are displaying the strength of a password, or showing the charge level of a battery.",null,null],[3,"LinkButton","","A `LinkButton` is a `Button` with a hyperlink, similar to the one used by web browsers, which triggers an action when clicked. It is useful to show quick links to resources.",null,null],[3,"ListBox","","A `ListBox` is a vertical container that contains `ListBoxRow` children. These rows can by dynamically sorted and filtered, and headers can be added dynamically depending on the row content. It also allows keyboard and mouse navigation and selection like a typical list.",null,null],[3,"ListBoxRow","","Feature: `v3_10`",null,null],[3,"ListStore","","The `ListStore` object is a list model for use with a `TreeView` widget. It implements the `TreeModel` interface, and consequentialy, can use all of the methods available there. It also implements the `TreeSortable` interface so it can be sorted by the view. Finally, it also implements the tree [drag and drop][gtk3-`TreeView`-drag-and-drop] interfaces.",null,null],[3,"LockButton","","",null,null],[3,"Menu","","A `Menu` is a `MenuShell` that implements a drop down menu consisting of a list of `MenuItem` objects which can be navigated and activated by the user to perform application functions.",null,null],[3,"MenuBar","","The `MenuBar` is a subclass of `MenuShell` which contains one or more `GtkMenuItems`. The result is a standard menu bar which can hold many menu items.",null,null],[3,"MenuButton","","The `MenuButton` widget is used to display a popup when clicked on. This popup can be provided either as a `Menu`, a `Popover` or an abstract `gio::MenuModel`.",null,null],[3,"MenuItem","","The `MenuItem` widget and the derived widgets are the only valid children for menus. Their function is to correctly handle highlighting, alignment, events and submenus.",null,null],[3,"MenuShell","","A `MenuShell` is the abstract base class used to derive the `Menu` and `MenuBar` subclasses.",null,null],[3,"MenuToolButton","","A `MenuToolButton` is a `ToolItem` that contains a button and a small additional button with an arrow. When clicked, the arrow button pops up a dropdown menu.",null,null],[3,"MessageDialog","","`MessageDialog` presents a dialog with some message text. It’s simply a convenience widget; you could construct the equivalent of `MessageDialog` from `Dialog` without too much effort, but `MessageDialog` saves typing.",null,null],[3,"Misc","","`[Deprecated since 3.14]` The `Misc` widget is an abstract widget which is not useful itself, but is used to derive subclasses which have alignment and padding attributes.",null,null],[3,"ModelButton","","`ModelButton` is a button class that can use a `gio::Action` as its model. In contrast to `ToggleButton` or `RadioButton`, which can also be backed by a `gio::Action` via the `Actionable:action-name` property, `ModelButton` will adapt its appearance according to the kind of action it is backed by, and appear either as a plain, check or radio button.",null,null],[3,"MountOperation","","",null,null],[3,"NativeDialog","","",null,null],[3,"Notebook","","The `Notebook` widget is a `Container` whose children are pages that can be switched between using tab labels along one edge.",null,null],[3,"OffscreenWindow","","",null,null],[3,"Orientable","","The `Orientable` interface is implemented by all widgets that can be oriented horizontally or vertically. Historically, such widgets have been realized as subclasses of a common base class (e.g `Box`/`HBox`/`VBox` or `Scale`/`HScale`/`VScale`). `Orientable` is more flexible in that it allows the orientation to be changed at runtime, allowing the widgets to “flip”.",null,null],[3,"Overlay","","`Overlay` is a container which contains a single main child, on top of which it can place “overlay” widgets. The position of each overlay widget is determined by its `Widget:halign` and `Widget:valign` properties. E.g. a widget with both alignments set to `Align::Start` will be placed at the top left corner of the `Overlay` container, whereas an overlay with halign set to `Align::Center` and valign set to `Align::End` will be placed a the bottom edge of the `Overlay`, horizontally centered. The position can be adjusted by setting the margin properties of the child to non-zero values.",null,null],[3,"PadController","","",null,null],[3,"PageSetup","","A `PageSetup` object stores the page size, orientation and margins. The idea is that you can get one of these from the page setup dialog and then pass it to the `PrintOperation` when printing. The benefit of splitting this out of the `PrintSettings` is that these affect the actual layout of the page, and thus need to be set long before user prints.",null,null],[3,"Paned","","`Paned` has two panes, arranged either horizontally or vertically. The division between the two panes is adjustable by the user by dragging a handle.",null,null],[3,"PlacesSidebar","","`PlacesSidebar` is a widget that displays a list of frequently-used places in the file system: the user’s home directory, the user’s bookmarks, and volumes and drives. This widget is used as a sidebar in `FileChooser` and may be used by file managers and similar programs.",null,null],[3,"Plug","","",null,null],[3,"Popover","","`Popover` is a bubble-like context window, primarily meant to provide context-dependent information or options. Popovers are attached to a widget, passed at construction time on `Popover::new`, or updated afterwards through `PopoverExt::set_relative_to`, by default they will point to the whole widget area, although this behavior can be changed through `PopoverExt::set_pointing_to`.",null,null],[3,"PopoverMenu","","`PopoverMenu` is a subclass of `Popover` that treats its children like menus and allows switching between them. It is meant to be used primarily together with `ModelButton`, but any widget can be used, such as `SpinButton` or `Scale`. In this respect, `PopoverMenu` is more flexible than popovers that are created from a `gio::MenuModel` with `Popover::new_from_model`.",null,null],[3,"PrintContext","","A `PrintContext` encapsulates context information that is required when drawing pages for printing, such as the cairo context and important parameters like page size and resolution. It also lets you easily create `pango::Layout` and `pango::Context` objects that match the font metrics of the cairo surface.",null,null],[3,"PrintOperation","","`PrintOperation` is the high-level, portable printing API. It looks a bit different than other GTK+ dialogs such as the `FileChooser`, since some platforms don’t expose enough infrastructure to implement a good print dialog. On such platforms, `PrintOperation` uses the native print dialog. On platforms which do not provide a native print dialog, GTK+ uses its own, see `GtkPrintUnixDialog`.",null,null],[3,"PrintOperationPreview","","Implements",null,null],[3,"PrintSettings","","A `PrintSettings` object represents the settings of a print dialog in a system-independent way. The main use for this object is that once you’ve printed you can get a settings object that represents the settings the user chose, and the next time you print you can pass that object in so that the user doesn’t have to re-set all his settings.",null,null],[3,"ProgressBar","","The `ProgressBar` is typically used to display the progress of a long running operation. It provides a visual clue that processing is underway. The `ProgressBar` can be used in two different modes: percentage mode and activity mode.",null,null],[3,"RadioButton","","A single radio button performs the same basic function as a `CheckButton`, as its position in the object hierarchy reflects. It is only when multiple radio buttons are grouped together that they become a different user interface component in their own right.",null,null],[3,"RadioMenuItem","","A radio menu item is a check menu item that belongs to a group. At each instant exactly one of the radio menu items from a group is selected.",null,null],[3,"RadioToolButton","","A `RadioToolButton` is a `ToolItem` that contains a radio button, that is, a button that is part of a group of toggle buttons where only one button can be active at a time.",null,null],[3,"Range","","`Range` is the common base class for widgets which visualize an adjustment, e.g `Scale` or `Scrollbar`.",null,null],[3,"RecentChooser","","`RecentChooser` is an interface that can be implemented by widgets displaying the list of recently used files. In GTK+, the main objects that implement this interface are `RecentChooserWidget`, `RecentChooserDialog` and `RecentChooserMenu`.",null,null],[3,"RecentChooserDialog","","`RecentChooserDialog` is a dialog box suitable for displaying the recently used documents. This widgets works by putting a `RecentChooserWidget` inside a `Dialog`. It exposes the `RecentChooserIface` interface, so you can use all the `RecentChooser` functions on the recent chooser dialog as well as those for `Dialog`.",null,null],[3,"RecentChooserWidget","","`RecentChooserWidget` is a widget suitable for selecting recently used files. It is the main building block of a `RecentChooserDialog`. Most applications will only need to use the latter; you can use `RecentChooserWidget` as part of a larger window if you have special needs.",null,null],[3,"RecentFilter","","A `RecentFilter` can be used to restrict the files being shown in a `RecentChooser`. Files can be filtered based on their name (with `RecentFilterExt::add_pattern`), on their mime type (with `FileFilterExt::add_mime_type`), on the application that has registered them (with `RecentFilterExt::add_application`), or by a custom filter function (with `RecentFilterExt::add_custom`).",null,null],[3,"RecentManager","","`RecentManager` provides a facility for adding, removing and looking up recently used files. Each recently used file is identified by its URI, and has meta-data associated to it, like the names and command lines of the applications that have registered it, the number of time each application has registered the same file, the mime type of the file and whether the file should be displayed only by the applications that have registered it.",null,null],[3,"Revealer","","The `Revealer` widget is a container which animates the transition of its child from invisible to visible.",null,null],[3,"Scale","","A `Scale` is a slider control used to select a numeric value. To use it, you’ll probably want to investigate the methods on its base class, `Range`, in addition to the methods for `Scale` itself. To set the value of a scale, you would normally use `RangeExt::set_value`. To detect changes to the value, you would normally use the `Range::value-changed` signal.",null,null],[3,"ScaleButton","","`ScaleButton` provides a button which pops up a scale widget. This kind of widget is commonly used for volume controls in multimedia applications, and GTK+ provides a `VolumeButton` subclass that is tailored for this use case.",null,null],[3,"Scrollable","","`Scrollable` is an interface that is implemented by widgets with native scrolling ability.",null,null],[3,"Scrollbar","","The `Scrollbar` widget is a horizontal or vertical scrollbar, depending on the value of the `Orientable:orientation` property.",null,null],[3,"ScrolledWindow","","`ScrolledWindow` is a container that accepts a single child widget, makes that child scrollable using either internally added scrollbars or externally associated adjustments, and optionally draws a frame around the child.",null,null],[3,"SearchBar","","`SearchBar` is a container made to have a search entry (possibly with additional connex widgets, such as drop-down menus, or buttons) built-in. The search bar would appear when a search is started through typing on the keyboard, or the application’s search mode is toggled on.",null,null],[3,"SearchEntry","","`SearchEntry` is a subclass of `Entry` that has been tailored for use as a search entry.",null,null],[3,"Separator","","`Separator` is a horizontal or vertical separator widget, depending on the value of the `Orientable:orientation` property, used to group the widgets within a window. It displays a line with a shadow to make it appear sunken into the interface.",null,null],[3,"SeparatorMenuItem","","The `SeparatorMenuItem` is a separator used to group items within a menu. It displays a horizontal line with a shadow to make it appear sunken into the interface.",null,null],[3,"SeparatorToolItem","","A `SeparatorToolItem` is a `ToolItem` that separates groups of other `GtkToolItems`. Depending on the theme, a `SeparatorToolItem` will often look like a vertical line on horizontally docked toolbars.",null,null],[3,"Settings","","`Settings` provide a mechanism to share global settings between applications.",null,null],[3,"ShortcutsWindow","","A `ShortcutsWindow` shows brief information about the keyboard shortcuts and gestures of an application. The shortcuts can be grouped, and you can have multiple sections in this window, corresponding to the major modes of your application.",null,null],[3,"SizeGroup","","`SizeGroup` provides a mechanism for grouping a number of widgets together so they all request the same amount of space. This is typically useful when you want a column of widgets to have the same size, but you can’t use a `Grid` widget.",null,null],[3,"SpinButton","","A `SpinButton` is an ideal way to allow the user to set the value of some attribute. Rather than having to directly type a number into a `Entry`, `SpinButton` allows the user to click on one of two arrows to increment or decrement the displayed value. A value can still be typed in, with the bonus that it can be checked to ensure it is in a given range.",null,null],[3,"Spinner","","A `Spinner` widget displays an icon-size spinning animation. It is often used as an alternative to a `ProgressBar` for displaying indefinite activity, instead of actual progress.",null,null],[3,"Stack","","The `Stack` widget is a container which only shows one of its children at a time. In contrast to `Notebook`, `Stack` does not provide a means for users to change the visible child. Instead, the `StackSwitcher` widget can be used with `Stack` to provide this functionality.",null,null],[3,"StackSidebar","","A `StackSidebar` enables you to quickly and easily provide a consistent \"sidebar\" object for your user interface.",null,null],[3,"StackSwitcher","","The `StackSwitcher` widget acts as a controller for a `Stack`; it shows a row of buttons to switch between the various pages of the associated stack widget.",null,null],[3,"StatusIcon","","`[Deprecated since 3.14]` The “system tray” or notification area is normally used for transient icons that indicate some special state. For example, a system tray icon might appear to tell the user that they have new mail, or have an incoming instant message, or something along those lines. The basic idea is that creating an icon in the notification area is less annoying than popping up a dialog.",null,null],[3,"Statusbar","","A `Statusbar` is usually placed along the bottom of an application's main `Window`. It may provide a regular commentary of the application's status (as is usually the case in a web browser, for example), or may be used to simply output a message when the status changes, (when an upload is complete in an FTP client, for example).",null,null],[3,"StyleContext","","`StyleContext` is an object that stores styling information affecting a widget defined by `WidgetPath`.",null,null],[3,"StyleProperties","","`[Deprecated since 3.16]` `StyleProperties` provides the storage for style information that is used by `StyleContext` and other `StyleProvider` implementations.",null,null],[3,"StyleProvider","","`StyleProvider` is an interface used to provide style information to a `StyleContext`. See `StyleContextExt::add_provider` and `StyleContext::add_provider_for_screen`.",null,null],[3,"Switch","","`Switch` is a widget that has two states: on or off. The user can control which state should be active by clicking the empty area, or by dragging the handle.",null,null],[3,"TextBuffer","","You may wish to begin by reading the text widget conceptual overview which gives an overview of all the objects and data types related to the text widget and how they work together.",null,null],[3,"TextChildAnchor","","A `TextChildAnchor` is a spot in the buffer where child widgets can be “anchored” (inserted inline, as if they were characters). The anchor can have multiple widgets anchored, to allow for multiple views.",null,null],[3,"TextMark","","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together.",null,null],[3,"TextTag","","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together.",null,null],[3,"TextTagTable","","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together.",null,null],[3,"TextView","","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together.",null,null],[3,"ToggleButton","","A `ToggleButton` is a `Button` which will remain “pressed-in” when clicked. Clicking again will cause the toggle button to return to its normal state.",null,null],[3,"ToggleToolButton","","A `ToggleToolButton` is a `ToolItem` that contains a toggle button.",null,null],[3,"ToolButton","","`GtkToolButtons` are `GtkToolItems` containing buttons.",null,null],[3,"ToolItem","","`GtkToolItems` are widgets that can appear on a toolbar. To create a toolbar item that contain something else than a button, use `ToolItem::new`. Use `ContainerExt::add` to add a child widget to the tool item.",null,null],[3,"ToolItemGroup","","A `ToolItemGroup` is used together with `ToolPalette` to add `GtkToolItems` to a palette like container with different categories and drag and drop support.",null,null],[3,"ToolPalette","","A `ToolPalette` allows you to add `GtkToolItems` to a palette-like container with different categories and drag and drop support.",null,null],[3,"ToolShell","","The `ToolShell` interface allows container widgets to provide additional information when embedding `ToolItem` widgets.",null,null],[3,"Toolbar","","A toolbar is created with a call to `Toolbar::new`.",null,null],[3,"Tooltip","","Basic tooltips can be realized simply by using `WidgetExt::set_tooltip_text` or `WidgetExt::set_tooltip_markup` without any explicit tooltip object.",null,null],[3,"TreeModel","","The `TreeModel` interface defines a generic tree interface for use by the `TreeView` widget. It is an abstract interface, and is designed to be usable with any appropriate data structure. The programmer just has to implement this interface on their own data type for it to be viewable by a `TreeView` widget.",null,null],[3,"TreeModelFilter","","A `TreeModelFilter` is a tree model which wraps another tree model, and can do the following things:",null,null],[3,"TreeSelection","","The `TreeSelection` object is a helper object to manage the selection for a `TreeView` widget. The `TreeSelection` object is automatically created when a new `TreeView` widget is created, and cannot exist independently of this widget. The primary reason the `TreeSelection` objects exists is for cleanliness of code and API. That is, there is no conceptual reason all these functions could not be methods on the `TreeView` widget instead of a separate function.",null,null],[3,"TreeSortable","","`TreeSortable` is an interface to be implemented by tree models which support sorting. The `TreeView` uses the methods provided by this interface to sort the model.",null,null],[3,"TreeStore","","The `TreeStore` object is a list model for use with a `TreeView` widget. It implements the `TreeModel` interface, and consequentially, can use all of the methods available there. It also implements the `TreeSortable` interface so it can be sorted by the view. Finally, it also implements the tree [drag and drop][gtk3-`TreeView`-drag-and-drop] interfaces.",null,null],[3,"TreeView","","Widget that displays any object that implements the `TreeModel` interface.",null,null],[3,"TreeViewColumn","","The `TreeViewColumn` object represents a visible column in a `TreeView` widget. It allows to set properties of the column header, and functions as a holding pen for the cell renderers which determine how the data in the column is displayed.",null,null],[3,"Viewport","","The `Viewport` widget acts as an adaptor class, implementing scrollability for child widgets that lack their own scrolling capabilities. Use `Viewport` to scroll child widgets such as `Grid`, `Box`, and so on.",null,null],[3,"VolumeButton","","`VolumeButton` is a subclass of `ScaleButton` that has been tailored for use as a volume control widget with suitable icons, tooltips and accessible labels.",null,null],[3,"Widget","","`Widget` is the base class all widgets in GTK+ derive from. It manages the widget lifecycle, states and style.",null,null],[3,"Window","","A `Window` is a toplevel window which can contain other widgets. Windows normally have decorations that are under the control of the windowing system and allow the user to manipulate the window (resize it, move it, close it,...).",null,null],[3,"WindowGroup","","A `WindowGroup` restricts the effect of grabs to windows in the same group, thereby making window groups almost behave like separate applications.",null,null],[3,"CssSection","","Defines a part of a CSS document. Because sections are nested into one another, you can use `CssSection::get_parent` to get the containing region.",null,null],[3,"IconSet","","Deprecated since 3.10",null,null],[3,"IconSource","","Deprecated since 3.10",null,null],[3,"PaperSize","","`PaperSize` handles paper sizes. It uses the standard called PWG 5101.1-2002 PWG: Standard for Media Standardized Names to name the paper sizes (and to get the data for the page sizes). In addition to standard paper sizes, `PaperSize` allows to construct custom paper sizes with arbitrary dimensions.",null,null],[3,"RecentInfo","","`RecentInfo`-struct contains private data only, and should be accessed using the provided API.",null,null],[3,"SelectionData","","",null,null],[3,"SymbolicColor","","`[Deprecated since 3.8]` `SymbolicColor` is a boxed type that represents a symbolic color. It is the result of parsing a [color expression][gtkcssprovider-symbolic-colors]. To obtain the color represented by a `SymbolicColor`, it has to be resolved with `SymbolicColor::resolve`, which replaces all symbolic color references by the colors they refer to (in a given context) and evaluates mix, shade and other expressions, resulting in a `gdk::RGBA` value.",null,null],[3,"TargetList","","A `TargetList`-struct is a reference counted list of `TargetPair` and should be treated as opaque.",null,null],[3,"TextAttributes","","Using `TextAttributes` directly should rarely be necessary. It’s primarily useful with `TextIter::get_attributes`. As with most GTK+ structs, the fields in this struct should only be read, never modified directly.",null,null],[3,"TextIter","","You may wish to begin by reading the text widget conceptual overview which gives an overview of all the objects and data types related to the text widget and how they work together.",null,null],[3,"TreeIter","","The `TreeIter` is the primary structure for accessing a `TreeModel`. Models are expected to put a unique integer in the `stamp` member, and put model-specific data in the three `user_data` members.",null,null],[3,"TreePath","","",null,null],[3,"TreeRowReference","","A `TreeRowReference` tracks model changes so that it always refers to the same row (a `TreePath` refers to a position, not a fixed row). Create a new `TreeRowReference` with `TreeRowReference::new`.",null,null],[3,"WidgetPath","","",null,null],[3,"AccelFlags","","",null,null],[3,"ApplicationInhibitFlags","","",null,null],[3,"CalendarDisplayOptions","","",null,null],[3,"CellRendererState","","",null,null],[3,"DestDefaults","","",null,null],[3,"DialogFlags","","",null,null],[3,"FileFilterFlags","","",null,null],[3,"IconLookupFlags","","",null,null],[3,"InputHints","","",null,null],[3,"JunctionSides","","",null,null],[3,"PlacesOpenFlags","","",null,null],[3,"RecentFilterFlags","","",null,null],[3,"RegionFlags","","",null,null],[3,"StateFlags","","",null,null],[3,"StyleContextPrintFlags","","",null,null],[3,"TargetFlags","","",null,null],[3,"TextSearchFlags","","",null,null],[3,"ToolPaletteDragTargets","","",null,null],[3,"TreeModelFlags","","",null,null],[3,"LEVEL_BAR_OFFSET_FULL","","",null,null],[3,"LEVEL_BAR_OFFSET_HIGH","","",null,null],[3,"LEVEL_BAR_OFFSET_LOW","","",null,null],[3,"PAPER_NAME_A3","","",null,null],[3,"PAPER_NAME_A4","","",null,null],[3,"PAPER_NAME_A5","","",null,null],[3,"PAPER_NAME_B5","","",null,null],[3,"PAPER_NAME_EXECUTIVE","","",null,null],[3,"PAPER_NAME_LEGAL","","",null,null],[3,"PAPER_NAME_LETTER","","",null,null],[3,"PRINT_SETTINGS_COLLATE","","",null,null],[3,"PRINT_SETTINGS_DEFAULT_SOURCE","","",null,null],[3,"PRINT_SETTINGS_DITHER","","",null,null],[3,"PRINT_SETTINGS_DUPLEX","","",null,null],[3,"PRINT_SETTINGS_FINISHINGS","","",null,null],[3,"PRINT_SETTINGS_MEDIA_TYPE","","",null,null],[3,"PRINT_SETTINGS_NUMBER_UP","","",null,null],[3,"PRINT_SETTINGS_NUMBER_UP_LAYOUT","","",null,null],[3,"PRINT_SETTINGS_N_COPIES","","",null,null],[3,"PRINT_SETTINGS_ORIENTATION","","",null,null],[3,"PRINT_SETTINGS_OUTPUT_BASENAME","","",null,null],[3,"PRINT_SETTINGS_OUTPUT_BIN","","",null,null],[3,"PRINT_SETTINGS_OUTPUT_DIR","","",null,null],[3,"PRINT_SETTINGS_OUTPUT_FILE_FORMAT","","",null,null],[3,"PRINT_SETTINGS_OUTPUT_URI","","",null,null],[3,"PRINT_SETTINGS_PAGE_RANGES","","",null,null],[3,"PRINT_SETTINGS_PAGE_SET","","",null,null],[3,"PRINT_SETTINGS_PAPER_FORMAT","","",null,null],[3,"PRINT_SETTINGS_PAPER_HEIGHT","","",null,null],[3,"PRINT_SETTINGS_PAPER_WIDTH","","",null,null],[3,"PRINT_SETTINGS_PRINTER","","",null,null],[3,"PRINT_SETTINGS_PRINTER_LPI","","",null,null],[3,"PRINT_SETTINGS_PRINT_PAGES","","",null,null],[3,"PRINT_SETTINGS_QUALITY","","",null,null],[3,"PRINT_SETTINGS_RESOLUTION","","",null,null],[3,"PRINT_SETTINGS_RESOLUTION_X","","",null,null],[3,"PRINT_SETTINGS_RESOLUTION_Y","","",null,null],[3,"PRINT_SETTINGS_REVERSE","","",null,null],[3,"PRINT_SETTINGS_SCALE","","",null,null],[3,"PRINT_SETTINGS_USE_COLOR","","",null,null],[3,"PRINT_SETTINGS_WIN32_DRIVER_EXTRA","","",null,null],[3,"PRINT_SETTINGS_WIN32_DRIVER_VERSION","","",null,null],[3,"STOCK_ABOUT","","",null,null],[3,"STOCK_ADD","","",null,null],[3,"STOCK_APPLY","","",null,null],[3,"STOCK_BOLD","","",null,null],[3,"STOCK_CANCEL","","",null,null],[3,"STOCK_CAPS_LOCK_WARNING","","",null,null],[3,"STOCK_CDROM","","",null,null],[3,"STOCK_CLEAR","","",null,null],[3,"STOCK_CLOSE","","",null,null],[3,"STOCK_COLOR_PICKER","","",null,null],[3,"STOCK_CONNECT","","",null,null],[3,"STOCK_CONVERT","","",null,null],[3,"STOCK_COPY","","",null,null],[3,"STOCK_CUT","","",null,null],[3,"STOCK_DELETE","","",null,null],[3,"STOCK_DIALOG_AUTHENTICATION","","",null,null],[3,"STOCK_DIALOG_ERROR","","",null,null],[3,"STOCK_DIALOG_INFO","","",null,null],[3,"STOCK_DIALOG_QUESTION","","",null,null],[3,"STOCK_DIALOG_WARNING","","",null,null],[3,"STOCK_DIRECTORY","","",null,null],[3,"STOCK_DISCARD","","",null,null],[3,"STOCK_DISCONNECT","","",null,null],[3,"STOCK_DND","","",null,null],[3,"STOCK_DND_MULTIPLE","","",null,null],[3,"STOCK_EDIT","","",null,null],[3,"STOCK_EXECUTE","","",null,null],[3,"STOCK_FILE","","",null,null],[3,"STOCK_FIND","","",null,null],[3,"STOCK_FIND_AND_REPLACE","","",null,null],[3,"STOCK_FLOPPY","","",null,null],[3,"STOCK_FULLSCREEN","","",null,null],[3,"STOCK_GOTO_BOTTOM","","",null,null],[3,"STOCK_GOTO_FIRST","","",null,null],[3,"STOCK_GOTO_LAST","","",null,null],[3,"STOCK_GOTO_TOP","","",null,null],[3,"STOCK_GO_BACK","","",null,null],[3,"STOCK_GO_DOWN","","",null,null],[3,"STOCK_GO_FORWARD","","",null,null],[3,"STOCK_GO_UP","","",null,null],[3,"STOCK_HARDDISK","","",null,null],[3,"STOCK_HELP","","",null,null],[3,"STOCK_HOME","","",null,null],[3,"STOCK_INDENT","","",null,null],[3,"STOCK_INDEX","","",null,null],[3,"STOCK_INFO","","",null,null],[3,"STOCK_ITALIC","","",null,null],[3,"STOCK_JUMP_TO","","",null,null],[3,"STOCK_JUSTIFY_CENTER","","",null,null],[3,"STOCK_JUSTIFY_FILL","","",null,null],[3,"STOCK_JUSTIFY_LEFT","","",null,null],[3,"STOCK_JUSTIFY_RIGHT","","",null,null],[3,"STOCK_LEAVE_FULLSCREEN","","",null,null],[3,"STOCK_MEDIA_FORWARD","","",null,null],[3,"STOCK_MEDIA_NEXT","","",null,null],[3,"STOCK_MEDIA_PAUSE","","",null,null],[3,"STOCK_MEDIA_PLAY","","",null,null],[3,"STOCK_MEDIA_PREVIOUS","","",null,null],[3,"STOCK_MEDIA_RECORD","","",null,null],[3,"STOCK_MEDIA_REWIND","","",null,null],[3,"STOCK_MEDIA_STOP","","",null,null],[3,"STOCK_MISSING_IMAGE","","",null,null],[3,"STOCK_NETWORK","","",null,null],[3,"STOCK_NEW","","",null,null],[3,"STOCK_NO","","",null,null],[3,"STOCK_OK","","",null,null],[3,"STOCK_OPEN","","",null,null],[3,"STOCK_ORIENTATION_LANDSCAPE","","",null,null],[3,"STOCK_ORIENTATION_PORTRAIT","","",null,null],[3,"STOCK_ORIENTATION_REVERSE_LANDSCAPE","","",null,null],[3,"STOCK_ORIENTATION_REVERSE_PORTRAIT","","",null,null],[3,"STOCK_PAGE_SETUP","","",null,null],[3,"STOCK_PASTE","","",null,null],[3,"STOCK_PREFERENCES","","",null,null],[3,"STOCK_PRINT","","",null,null],[3,"STOCK_PRINT_ERROR","","",null,null],[3,"STOCK_PRINT_PAUSED","","",null,null],[3,"STOCK_PRINT_PREVIEW","","",null,null],[3,"STOCK_PRINT_REPORT","","",null,null],[3,"STOCK_PRINT_WARNING","","",null,null],[3,"STOCK_PROPERTIES","","",null,null],[3,"STOCK_QUIT","","",null,null],[3,"STOCK_REDO","","",null,null],[3,"STOCK_REFRESH","","",null,null],[3,"STOCK_REMOVE","","",null,null],[3,"STOCK_REVERT_TO_SAVED","","",null,null],[3,"STOCK_SAVE","","",null,null],[3,"STOCK_SAVE_AS","","",null,null],[3,"STOCK_SELECT_ALL","","",null,null],[3,"STOCK_SELECT_COLOR","","",null,null],[3,"STOCK_SELECT_FONT","","",null,null],[3,"STOCK_SORT_ASCENDING","","",null,null],[3,"STOCK_SORT_DESCENDING","","",null,null],[3,"STOCK_SPELL_CHECK","","",null,null],[3,"STOCK_STOP","","",null,null],[3,"STOCK_STRIKETHROUGH","","",null,null],[3,"STOCK_UNDELETE","","",null,null],[3,"STOCK_UNDERLINE","","",null,null],[3,"STOCK_UNDO","","",null,null],[3,"STOCK_UNINDENT","","",null,null],[3,"STOCK_YES","","",null,null],[3,"STOCK_ZOOM_100","","",null,null],[3,"STOCK_ZOOM_FIT","","",null,null],[3,"STOCK_ZOOM_IN","","",null,null],[3,"STOCK_ZOOM_OUT","","",null,null],[3,"STYLE_CLASS_ACCELERATOR","","",null,null],[3,"STYLE_CLASS_ARROW","","",null,null],[3,"STYLE_CLASS_BACKGROUND","","",null,null],[3,"STYLE_CLASS_BOTTOM","","",null,null],[3,"STYLE_CLASS_BUTTON","","",null,null],[3,"STYLE_CLASS_CALENDAR","","",null,null],[3,"STYLE_CLASS_CELL","","",null,null],[3,"STYLE_CLASS_CHECK","","",null,null],[3,"STYLE_CLASS_COMBOBOX_ENTRY","","",null,null],[3,"STYLE_CLASS_CONTEXT_MENU","","",null,null],[3,"STYLE_CLASS_CSD","","",null,null],[3,"STYLE_CLASS_CURSOR_HANDLE","","",null,null],[3,"STYLE_CLASS_DEFAULT","","",null,null],[3,"STYLE_CLASS_DESTRUCTIVE_ACTION","","",null,null],[3,"STYLE_CLASS_DIM_LABEL","","",null,null],[3,"STYLE_CLASS_DND","","",null,null],[3,"STYLE_CLASS_DOCK","","",null,null],[3,"STYLE_CLASS_ENTRY","","",null,null],[3,"STYLE_CLASS_ERROR","","",null,null],[3,"STYLE_CLASS_EXPANDER","","",null,null],[3,"STYLE_CLASS_FLAT","","",null,null],[3,"STYLE_CLASS_FRAME","","",null,null],[3,"STYLE_CLASS_GRIP","","",null,null],[3,"STYLE_CLASS_HEADER","","",null,null],[3,"STYLE_CLASS_HIGHLIGHT","","",null,null],[3,"STYLE_CLASS_HORIZONTAL","","",null,null],[3,"STYLE_CLASS_IMAGE","","",null,null],[3,"STYLE_CLASS_INFO","","",null,null],[3,"STYLE_CLASS_INLINE_TOOLBAR","","",null,null],[3,"STYLE_CLASS_INSERTION_CURSOR","","",null,null],[3,"STYLE_CLASS_LABEL","","",null,null],[3,"STYLE_CLASS_LEFT","","",null,null],[3,"STYLE_CLASS_LEVEL_BAR","","",null,null],[3,"STYLE_CLASS_LINKED","","",null,null],[3,"STYLE_CLASS_LIST","","",null,null],[3,"STYLE_CLASS_LIST_ROW","","",null,null],[3,"STYLE_CLASS_MARK","","",null,null],[3,"STYLE_CLASS_MENU","","",null,null],[3,"STYLE_CLASS_MENUBAR","","",null,null],[3,"STYLE_CLASS_MENUITEM","","",null,null],[3,"STYLE_CLASS_MESSAGE_DIALOG","","",null,null],[3,"STYLE_CLASS_MONOSPACE","","",null,null],[3,"STYLE_CLASS_NEEDS_ATTENTION","","",null,null],[3,"STYLE_CLASS_NOTEBOOK","","",null,null],[3,"STYLE_CLASS_OSD","","",null,null],[3,"STYLE_CLASS_OVERSHOOT","","",null,null],[3,"STYLE_CLASS_PANE_SEPARATOR","","",null,null],[3,"STYLE_CLASS_PAPER","","",null,null],[3,"STYLE_CLASS_POPOVER","","",null,null],[3,"STYLE_CLASS_POPUP","","",null,null],[3,"STYLE_CLASS_PRIMARY_TOOLBAR","","",null,null],[3,"STYLE_CLASS_PROGRESSBAR","","",null,null],[3,"STYLE_CLASS_PULSE","","",null,null],[3,"STYLE_CLASS_QUESTION","","",null,null],[3,"STYLE_CLASS_RADIO","","",null,null],[3,"STYLE_CLASS_RAISED","","",null,null],[3,"STYLE_CLASS_READ_ONLY","","",null,null],[3,"STYLE_CLASS_RIGHT","","",null,null],[3,"STYLE_CLASS_RUBBERBAND","","",null,null],[3,"STYLE_CLASS_SCALE","","",null,null],[3,"STYLE_CLASS_SCALE_HAS_MARKS_ABOVE","","",null,null],[3,"STYLE_CLASS_SCALE_HAS_MARKS_BELOW","","",null,null],[3,"STYLE_CLASS_SCROLLBAR","","",null,null],[3,"STYLE_CLASS_SCROLLBARS_JUNCTION","","",null,null],[3,"STYLE_CLASS_SEPARATOR","","",null,null],[3,"STYLE_CLASS_SIDEBAR","","",null,null],[3,"STYLE_CLASS_SLIDER","","",null,null],[3,"STYLE_CLASS_SPINBUTTON","","",null,null],[3,"STYLE_CLASS_SPINNER","","",null,null],[3,"STYLE_CLASS_STATUSBAR","","",null,null],[3,"STYLE_CLASS_SUBTITLE","","",null,null],[3,"STYLE_CLASS_SUGGESTED_ACTION","","",null,null],[3,"STYLE_CLASS_TITLE","","",null,null],[3,"STYLE_CLASS_TITLEBAR","","",null,null],[3,"STYLE_CLASS_TOOLBAR","","",null,null],[3,"STYLE_CLASS_TOOLTIP","","",null,null],[3,"STYLE_CLASS_TOP","","",null,null],[3,"STYLE_CLASS_TOUCH_SELECTION","","",null,null],[3,"STYLE_CLASS_TROUGH","","",null,null],[3,"STYLE_CLASS_UNDERSHOOT","","",null,null],[3,"STYLE_CLASS_VERTICAL","","",null,null],[3,"STYLE_CLASS_VIEW","","",null,null],[3,"STYLE_CLASS_WARNING","","",null,null],[3,"STYLE_CLASS_WIDE","","",null,null],[3,"STYLE_PROPERTY_BACKGROUND_COLOR","","",null,null],[3,"STYLE_PROPERTY_BACKGROUND_IMAGE","","",null,null],[3,"STYLE_PROPERTY_BORDER_COLOR","","",null,null],[3,"STYLE_PROPERTY_BORDER_RADIUS","","",null,null],[3,"STYLE_PROPERTY_BORDER_STYLE","","",null,null],[3,"STYLE_PROPERTY_BORDER_WIDTH","","",null,null],[3,"STYLE_PROPERTY_COLOR","","",null,null],[3,"STYLE_PROPERTY_FONT","","",null,null],[3,"STYLE_PROPERTY_MARGIN","","",null,null],[3,"STYLE_PROPERTY_PADDING","","",null,null],[3,"STYLE_REGION_COLUMN","","",null,null],[3,"STYLE_REGION_COLUMN_HEADER","","",null,null],[3,"STYLE_REGION_ROW","","",null,null],[3,"STYLE_REGION_TAB","","",null,null],[3,"AppChooser","","`AppChooser` is an interface that can be implemented by widgets which allow the user to choose an application (typically for the purpose of opening a file). The main objects that implement this interface are `AppChooserWidget`, `AppChooserDialog` and `AppChooserButton`.",null,null],[3,"Border","","",null,null],[3,"EntryBuffer","","The `EntryBuffer` class contains the actual text displayed in a `Entry` widget.",null,null],[3,"RecentData","","Meta-data to be passed to `RecentManagerExt::add_full` when registering a recently used resource.",null,null],[12,"display_name","","",7,null],[12,"description","","",7,null],[12,"mime_type","","",7,null],[12,"app_name","","",7,null],[12,"app_exec","","",7,null],[12,"groups","","",7,null],[12,"is_private","","",7,null],[3,"Requisition","","A `Requisition`-struct represents the desired size of a widget. See [`Widget`’s geometry management section][geometry-management] for more information.",null,null],[12,"width","","",8,null],[12,"height","","",8,null],[3,"Socket","","",null,null],[3,"TargetEntry","","A `TargetEntry` represents a single type of data than can be supplied for by a widget for a selection or for supplied or received during drag-and-drop.",null,null],[4,"Align","","Controls how a widget deals with extra space in a single (x or y) dimension.",null,null],[13,"Fill","","",9,null],[13,"Start","","",9,null],[13,"End","","",9,null],[13,"Center","","",9,null],[13,"Baseline","","",9,null],[4,"ArrowType","","Used to indicate the direction in which an arrow should point.",null,null],[13,"Up","","",10,null],[13,"Down","","",10,null],[13,"Left","","",10,null],[13,"Right","","",10,null],[13,"None","","",10,null],[4,"AssistantPageType","","An enum for determining the page role inside the `Assistant`. It's used to handle buttons sensitivity and visibility.",null,null],[13,"Content","","",11,null],[13,"Intro","","",11,null],[13,"Confirm","","",11,null],[13,"Summary","","",11,null],[13,"Progress","","",11,null],[13,"Custom","","",11,null],[4,"BaselinePosition","","Whenever a container has some form of natural row it may align children in that row along a common typographical baseline. If the amount of verical space in the row is taller than the total requested height of the baseline-aligned children then it can use a `BaselinePosition` to select where to put the baseline inside the extra availible space.",null,null],[13,"Top","","",12,null],[13,"Center","","",12,null],[13,"Bottom","","",12,null],[4,"BorderStyle","","",null,null],[13,"None","","",13,null],[13,"Solid","","",13,null],[13,"Inset","","",13,null],[13,"Outset","","",13,null],[13,"Hidden","","",13,null],[13,"Dotted","","",13,null],[13,"Dashed","","",13,null],[13,"Double","","",13,null],[13,"Groove","","",13,null],[13,"Ridge","","",13,null],[4,"BuilderError","","Error codes that identify various errors that can occur while using `Builder`.",null,null],[13,"InvalidTypeFunction","","",14,null],[13,"UnhandledTag","","",14,null],[13,"MissingAttribute","","",14,null],[13,"InvalidAttribute","","",14,null],[13,"InvalidTag","","",14,null],[13,"MissingPropertyValue","","",14,null],[13,"InvalidValue","","",14,null],[13,"VersionMismatch","","",14,null],[13,"DuplicateId","","",14,null],[13,"ObjectTypeRefused","","",14,null],[13,"TemplateMismatch","","",14,null],[13,"InvalidProperty","","",14,null],[13,"InvalidSignal","","",14,null],[13,"InvalidId","","",14,null],[4,"ButtonBoxStyle","","Used to dictate the style that a `ButtonBox` uses to layout the buttons it contains.",null,null],[13,"Spread","","",15,null],[13,"Edge","","",15,null],[13,"Start","","",15,null],[13,"End","","",15,null],[13,"Center","","",15,null],[13,"Expand","","",15,null],[4,"ButtonRole","","The role specifies the desired appearance of a `ModelButton`.",null,null],[13,"Normal","","",16,null],[13,"Check","","",16,null],[13,"Radio","","",16,null],[4,"ButtonsType","","Prebuilt sets of buttons for the dialog. If none of these choices are appropriate, simply use `ButtonsType::None` then call `DialogExt::add_buttons`.",null,null],[13,"None","","",17,null],[13,"Ok","","",17,null],[13,"Close","","",17,null],[13,"Cancel","","",17,null],[13,"YesNo","","",17,null],[13,"OkCancel","","",17,null],[4,"CellRendererAccelMode","","Determines if the edited accelerators are GTK+ accelerators. If they are, consumed modifiers are suppressed, only accelerators accepted by GTK+ are allowed, and the accelerators are rendered in the same way as they are in menus.",null,null],[13,"Gtk","","",18,null],[13,"Other","","",18,null],[13,"ModifierTap","","",18,null],[4,"CellRendererMode","","Identifies how the user can interact with a particular cell.",null,null],[13,"Inert","","",19,null],[13,"Activatable","","",19,null],[13,"Editable","","",19,null],[4,"CornerType","","Specifies which corner a child widget should be placed in when packed into a `ScrolledWindow`. This is effectively the opposite of where the scroll bars are placed.",null,null],[13,"TopLeft","","",20,null],[13,"BottomLeft","","",20,null],[13,"TopRight","","",20,null],[13,"BottomRight","","",20,null],[4,"CssProviderError","","Error codes for `GTK_CSS_PROVIDER_ERROR`.",null,null],[13,"Failed","","",21,null],[13,"Syntax","","",21,null],[13,"Import","","",21,null],[13,"Name","","",21,null],[13,"Deprecated","","",21,null],[13,"UnknownValue","","",21,null],[4,"CssSectionType","","The different types of sections indicate parts of a CSS document as parsed by GTK’s CSS parser. They are oriented towards the CSS Grammar, but may contain extensions.",null,null],[13,"Document","","",22,null],[13,"Import","","",22,null],[13,"ColorDefinition","","",22,null],[13,"BindingSet","","",22,null],[13,"Ruleset","","",22,null],[13,"Selector","","",22,null],[13,"Declaration","","",22,null],[13,"Value","","",22,null],[13,"Keyframes","","",22,null],[4,"DeleteType","","See also: `Entry::delete-from-cursor`.",null,null],[13,"Chars","","",23,null],[13,"WordEnds","","",23,null],[13,"Words","","",23,null],[13,"DisplayLines","","",23,null],[13,"DisplayLineEnds","","",23,null],[13,"ParagraphEnds","","",23,null],[13,"Paragraphs","","",23,null],[13,"Whitespace","","",23,null],[4,"DirectionType","","Focus movement types.",null,null],[13,"TabForward","","",24,null],[13,"TabBackward","","",24,null],[13,"Up","","",24,null],[13,"Down","","",24,null],[13,"Left","","",24,null],[13,"Right","","",24,null],[4,"DragResult","","Gives an indication why a drag operation failed. The value can by obtained by connecting to the `Widget::drag-failed` signal.",null,null],[13,"Success","","",25,null],[13,"NoTarget","","",25,null],[13,"UserCancelled","","",25,null],[13,"TimeoutExpired","","",25,null],[13,"GrabBroken","","",25,null],[13,"Error","","",25,null],[4,"EntryIconPosition","","Specifies the side of the entry at which an icon is placed.",null,null],[13,"Primary","","",26,null],[13,"Secondary","","",26,null],[4,"EventSequenceState","","Describes the state of a `gdk::EventSequence` in a `Gesture`.",null,null],[13,"None","","",27,null],[13,"Claimed","","",27,null],[13,"Denied","","",27,null],[4,"FileChooserAction","","Describes whether a `FileChooser` is being used to open existing files or to save to a possibly new file.",null,null],[13,"Open","","",28,null],[13,"Save","","",28,null],[13,"SelectFolder","","",28,null],[13,"CreateFolder","","",28,null],[4,"FileChooserConfirmation","","Used as a return value of handlers for the `FileChooser::confirm-overwrite` signal of a `FileChooser`. This value determines whether the file chooser will present the stock confirmation dialog, accept the user’s choice of a filename, or let the user choose another filename.",null,null],[13,"Confirm","","",29,null],[13,"AcceptFilename","","",29,null],[13,"SelectAgain","","",29,null],[4,"FileChooserError","","These identify the various errors that can occur while calling `FileChooser` functions.",null,null],[13,"Nonexistent","","",30,null],[13,"BadFilename","","",30,null],[13,"AlreadyExists","","",30,null],[13,"IncompleteHostname","","",30,null],[4,"IMPreeditStyle","","Style for input method preedit. See also `Settings:gtk-im-preedit-style`",null,null],[13,"Nothing","","",31,null],[13,"Callback","","",31,null],[13,"None","","",31,null],[4,"IMStatusStyle","","Style for input method status. See also `Settings:gtk-im-status-style`",null,null],[13,"Nothing","","",32,null],[13,"Callback","","",32,null],[13,"None","","",32,null],[4,"IconSize","","Built-in stock icon sizes.",null,null],[13,"Invalid","","",33,null],[13,"Menu","","",33,null],[13,"SmallToolbar","","",33,null],[13,"LargeToolbar","","",33,null],[13,"Button","","",33,null],[13,"Dnd","","",33,null],[13,"Dialog","","",33,null],[4,"IconThemeError","","Error codes for `IconTheme` operations.",null,null],[13,"NotFound","","",34,null],[13,"Failed","","",34,null],[4,"IconViewDropPosition","","An enum for determining where a dropped item goes.",null,null],[13,"NoDrop","","",35,null],[13,"DropInto","","",35,null],[13,"DropLeft","","",35,null],[13,"DropRight","","",35,null],[13,"DropAbove","","",35,null],[13,"DropBelow","","",35,null],[4,"ImageType","","Describes the image data representation used by a `Image`. If you want to get the image from the widget, you can only get the currently-stored representation. e.g. if the `ImageExt::get_storage_type` returns `ImageType::Pixbuf`, then you can call `ImageExt::get_pixbuf` but not `Image::get_stock`. For empty images, you can request any storage type (call any of the \"get\" functions), but they will all return `None` values.",null,null],[13,"Empty","","",36,null],[13,"Pixbuf","","",36,null],[13,"Stock","","",36,null],[13,"IconSet","","",36,null],[13,"Animation","","",36,null],[13,"IconName","","",36,null],[13,"Gicon","","",36,null],[13,"Surface","","",36,null],[4,"InputPurpose","","Describes primary purpose of the input widget. This information is useful for on-screen keyboards and similar input methods to decide which keys should be presented to the user.",null,null],[13,"FreeForm","","",37,null],[13,"Alpha","","",37,null],[13,"Digits","","",37,null],[13,"Number","","",37,null],[13,"Phone","","",37,null],[13,"Url","","",37,null],[13,"Email","","",37,null],[13,"Name","","",37,null],[13,"Password","","",37,null],[13,"Pin","","",37,null],[4,"Justification","","Used for justifying the text inside a `Label` widget. (See also `Alignment`).",null,null],[13,"Left","","",38,null],[13,"Right","","",38,null],[13,"Center","","",38,null],[13,"Fill","","",38,null],[4,"LevelBarMode","","Describes how `LevelBar` contents should be rendered. Note that this enumeration could be extended with additional modes in the future.",null,null],[13,"Continuous","","",39,null],[13,"Discrete","","",39,null],[4,"License","","The type of license for an application.",null,null],[13,"Unknown","","",40,null],[13,"Custom","","",40,null],[13,"Gpl20","","",40,null],[13,"Gpl30","","",40,null],[13,"Lgpl21","","",40,null],[13,"Lgpl30","","",40,null],[13,"Bsd","","",40,null],[13,"MitX11","","",40,null],[13,"Artistic","","",40,null],[13,"Gpl20Only","","",40,null],[13,"Gpl30Only","","",40,null],[13,"Lgpl21Only","","",40,null],[13,"Lgpl30Only","","",40,null],[13,"Agpl30","","",40,null],[4,"MenuDirectionType","","An enumeration representing directional movements within a menu.",null,null],[13,"Parent","","",41,null],[13,"Child","","",41,null],[13,"Next","","",41,null],[13,"Prev","","",41,null],[4,"MessageType","","The type of message being displayed in the dialog.",null,null],[13,"Info","","",42,null],[13,"Warning","","",42,null],[13,"Question","","",42,null],[13,"Error","","",42,null],[13,"Other","","",42,null],[4,"MovementStep","","",null,null],[13,"LogicalPositions","","",43,null],[13,"VisualPositions","","",43,null],[13,"Words","","",43,null],[13,"DisplayLines","","",43,null],[13,"DisplayLineEnds","","",43,null],[13,"Paragraphs","","",43,null],[13,"ParagraphEnds","","",43,null],[13,"Pages","","",43,null],[13,"BufferEnds","","",43,null],[13,"HorizontalPages","","",43,null],[4,"NotebookTab","","",null,null],[13,"First","","",44,null],[13,"Last","","",44,null],[4,"NumberUpLayout","","Used to determine the layout of pages on a sheet when printing multiple pages per sheet.",null,null],[13,"Lrtb","","",45,null],[13,"Lrbt","","",45,null],[13,"Rltb","","",45,null],[13,"Rlbt","","",45,null],[13,"Tblr","","",45,null],[13,"Tbrl","","",45,null],[13,"Btlr","","",45,null],[13,"Btrl","","",45,null],[4,"Orientation","","Represents the orientation of widgets and other objects which can be switched between horizontal and vertical orientation on the fly, like `Toolbar` or `GesturePan`.",null,null],[13,"Horizontal","","",46,null],[13,"Vertical","","",46,null],[4,"PackDirection","","Determines how widgets should be packed inside menubars and menuitems contained in menubars.",null,null],[13,"Ltr","","",47,null],[13,"Rtl","","",47,null],[13,"Ttb","","",47,null],[13,"Btt","","",47,null],[4,"PackType","","Represents the packing location `Box` children. (See: `VBox`, `HBox`, and `ButtonBox`).",null,null],[13,"Start","","",48,null],[13,"End","","",48,null],[4,"PadActionType","","",null,null],[13,"Button","","",49,null],[13,"Ring","","",49,null],[13,"Strip","","",49,null],[4,"PageOrientation","","See also `PrintSettingsExt::set_orientation`.",null,null],[13,"Portrait","","",50,null],[13,"Landscape","","",50,null],[13,"ReversePortrait","","",50,null],[13,"ReverseLandscape","","",50,null],[4,"PageSet","","See also `gtk_print_job_set_page_set`.",null,null],[13,"All","","",51,null],[13,"Even","","",51,null],[13,"Odd","","",51,null],[4,"PanDirection","","Describes the panning direction of a `GesturePan`",null,null],[13,"Left","","",52,null],[13,"Right","","",52,null],[13,"Up","","",52,null],[13,"Down","","",52,null],[4,"PolicyType","","Determines how the size should be computed to achieve the one of the visibility mode for the scrollbars.",null,null],[13,"Always","","",53,null],[13,"Automatic","","",53,null],[13,"Never","","",53,null],[13,"External","","",53,null],[4,"PopoverConstraint","","Describes constraints to positioning of popovers. More values may be added to this enumeration in the future.",null,null],[13,"None","","",54,null],[13,"Window","","",54,null],[4,"PositionType","","Describes which edge of a widget a certain feature is positioned at, e.g. the tabs of a `Notebook`, the handle of a `HandleBox` or the label of a `Scale`.",null,null],[13,"Left","","",55,null],[13,"Right","","",55,null],[13,"Top","","",55,null],[13,"Bottom","","",55,null],[4,"PrintDuplex","","See also `PrintSettingsExt::set_duplex`.",null,null],[13,"Simplex","","",56,null],[13,"Horizontal","","",56,null],[13,"Vertical","","",56,null],[4,"PrintError","","Error codes that identify various errors that can occur while using the GTK+ printing support.",null,null],[13,"General","","",57,null],[13,"InternalError","","",57,null],[13,"Nomem","","",57,null],[13,"InvalidFile","","",57,null],[4,"PrintOperationAction","","The `action` parameter to `PrintOperationExt::run` determines what action the print operation should perform.",null,null],[13,"PrintDialog","","",58,null],[13,"Print","","",58,null],[13,"Preview","","",58,null],[13,"Export","","",58,null],[4,"PrintOperationResult","","A value of this type is returned by `PrintOperationExt::run`.",null,null],[13,"Error","","",59,null],[13,"Apply","","",59,null],[13,"Cancel","","",59,null],[13,"InProgress","","",59,null],[4,"PrintPages","","See also `gtk_print_job_set_pages`",null,null],[13,"All","","",60,null],[13,"Current","","",60,null],[13,"Ranges","","",60,null],[13,"Selection","","",60,null],[4,"PrintQuality","","See also `PrintSettingsExt::set_quality`.",null,null],[13,"Low","","",61,null],[13,"Normal","","",61,null],[13,"High","","",61,null],[13,"Draft","","",61,null],[4,"PrintStatus","","The status gives a rough indication of the completion of a running print operation.",null,null],[13,"Initial","","",62,null],[13,"Preparing","","",62,null],[13,"GeneratingData","","",62,null],[13,"SendingData","","",62,null],[13,"Pending","","",62,null],[13,"PendingIssue","","",62,null],[13,"Printing","","",62,null],[13,"Finished","","",62,null],[13,"FinishedAborted","","",62,null],[4,"PropagationPhase","","Describes the stage at which events are fed into a `EventController`.",null,null],[13,"None","","",63,null],[13,"Capture","","",63,null],[13,"Bubble","","",63,null],[13,"Target","","",63,null],[4,"RecentChooserError","","These identify the various errors that can occur while calling `RecentChooser` functions.",null,null],[13,"NotFound","","",64,null],[13,"InvalidUri","","",64,null],[4,"RecentManagerError","","Error codes for `RecentManager` operations",null,null],[13,"NotFound","","",65,null],[13,"InvalidUri","","",65,null],[13,"InvalidEncoding","","",65,null],[13,"NotRegistered","","",65,null],[13,"Read","","",65,null],[13,"Write","","",65,null],[13,"Unknown","","",65,null],[4,"RecentSortType","","Used to specify the sorting method to be applyed to the recently used resource list.",null,null],[13,"None","","",66,null],[13,"Mru","","",66,null],[13,"Lru","","",66,null],[13,"Custom","","",66,null],[4,"ReliefStyle","","Indicated the relief to be drawn around a `Button`.",null,null],[13,"Normal","","",67,null],[13,"Half","","",67,null],[13,"None","","",67,null],[4,"ResizeMode","","",null,null],[13,"Parent","","",68,null],[13,"Queue","","",68,null],[13,"Immediate","","",68,null],[4,"ResponseType","","Predefined values for use as response ids in `DialogExt::add_button`. All predefined values are negative, GTK+ leaves positive values for application-defined response ids.",null,null],[13,"None","","",69,null],[13,"Reject","","",69,null],[13,"Accept","","",69,null],[13,"DeleteEvent","","",69,null],[13,"Ok","","",69,null],[13,"Cancel","","",69,null],[13,"Close","","",69,null],[13,"Yes","","",69,null],[13,"No","","",69,null],[13,"Apply","","",69,null],[13,"Help","","",69,null],[4,"RevealerTransitionType","","These enumeration values describe the possible transitions when the child of a `Revealer` widget is shown or hidden.",null,null],[13,"None","","",70,null],[13,"Crossfade","","",70,null],[13,"SlideRight","","",70,null],[13,"SlideLeft","","",70,null],[13,"SlideUp","","",70,null],[13,"SlideDown","","",70,null],[4,"ScrollStep","","",null,null],[13,"Steps","","",71,null],[13,"Pages","","",71,null],[13,"Ends","","",71,null],[13,"HorizontalSteps","","",71,null],[13,"HorizontalPages","","",71,null],[13,"HorizontalEnds","","",71,null],[4,"ScrollType","","Scrolling types.",null,null],[13,"None","","",72,null],[13,"Jump","","",72,null],[13,"StepBackward","","",72,null],[13,"StepForward","","",72,null],[13,"PageBackward","","",72,null],[13,"PageForward","","",72,null],[13,"StepUp","","",72,null],[13,"StepDown","","",72,null],[13,"PageUp","","",72,null],[13,"PageDown","","",72,null],[13,"StepLeft","","",72,null],[13,"StepRight","","",72,null],[13,"PageLeft","","",72,null],[13,"PageRight","","",72,null],[13,"Start","","",72,null],[13,"End","","",72,null],[4,"ScrollablePolicy","","Defines the policy to be used in a scrollable widget when updating the scrolled window adjustments in a given orientation.",null,null],[13,"Minimum","","",73,null],[13,"Natural","","",73,null],[4,"SelectionMode","","Used to control what selections users are allowed to make.",null,null],[13,"None","","",74,null],[13,"Single","","",74,null],[13,"Browse","","",74,null],[13,"Multiple","","",74,null],[4,"SensitivityType","","Determines how GTK+ handles the sensitivity of stepper arrows at the end of range widgets.",null,null],[13,"Auto","","",75,null],[13,"On","","",75,null],[13,"Off","","",75,null],[4,"ShadowType","","Used to change the appearance of an outline typically provided by a `Frame`.",null,null],[13,"None","","",76,null],[13,"In","","",76,null],[13,"Out","","",76,null],[13,"EtchedIn","","",76,null],[13,"EtchedOut","","",76,null],[4,"SizeGroupMode","","The mode of the size group determines the directions in which the size group affects the requested sizes of its component widgets.",null,null],[13,"None","","",77,null],[13,"Horizontal","","",77,null],[13,"Vertical","","",77,null],[13,"Both","","",77,null],[4,"SizeRequestMode","","Specifies a preference for height-for-width or width-for-height geometry management.",null,null],[13,"HeightForWidth","","",78,null],[13,"WidthForHeight","","",78,null],[13,"ConstantSize","","",78,null],[4,"SortType","","Determines the direction of a sort.",null,null],[13,"Ascending","","",79,null],[13,"Descending","","",79,null],[4,"SpinButtonUpdatePolicy","","The spin button update policy determines whether the spin button displays values even if they are outside the bounds of its adjustment. See `SpinButtonExt::set_update_policy`.",null,null],[13,"Always","","",80,null],[13,"IfValid","","",80,null],[4,"SpinType","","The values of the `SpinType` enumeration are used to specify the change to make in `SpinButtonExt::spin`.",null,null],[13,"StepForward","","",81,null],[13,"StepBackward","","",81,null],[13,"PageForward","","",81,null],[13,"PageBackward","","",81,null],[13,"Home","","",81,null],[13,"End","","",81,null],[13,"UserDefined","","",81,null],[4,"StackTransitionType","","These enumeration values describe the possible transitions between pages in a `Stack` widget.",null,null],[13,"None","","",82,null],[13,"Crossfade","","",82,null],[13,"SlideRight","","",82,null],[13,"SlideLeft","","",82,null],[13,"SlideUp","","",82,null],[13,"SlideDown","","",82,null],[13,"SlideLeftRight","","",82,null],[13,"SlideUpDown","","",82,null],[13,"OverUp","","",82,null],[13,"OverDown","","",82,null],[13,"OverLeft","","",82,null],[13,"OverRight","","",82,null],[13,"UnderUp","","",82,null],[13,"UnderDown","","",82,null],[13,"UnderLeft","","",82,null],[13,"UnderRight","","",82,null],[13,"OverUpDown","","",82,null],[13,"OverDownUp","","",82,null],[13,"OverLeftRight","","",82,null],[13,"OverRightLeft","","",82,null],[4,"StateType","","This type indicates the current state of a widget; the state determines how the widget is drawn. The `StateType` enumeration is also used to identify different colors in a `Style` for drawing, so states can be used for subparts of a widget as well as entire widgets.",null,null],[13,"Normal","","",83,null],[13,"Active","","",83,null],[13,"Prelight","","",83,null],[13,"Selected","","",83,null],[13,"Insensitive","","",83,null],[13,"Inconsistent","","",83,null],[13,"Focused","","",83,null],[4,"TextDirection","","Reading directions for text.",null,null],[13,"None","","",84,null],[13,"Ltr","","",84,null],[13,"Rtl","","",84,null],[4,"TextExtendSelection","","Granularity types that extend the text selection. Use the `TextView::extend-selection` signal to customize the selection.",null,null],[13,"Word","","",85,null],[13,"Line","","",85,null],[4,"TextViewLayer","","",null,null],[13,"Below","","",86,null],[13,"Above","","",86,null],[13,"BelowText","","",86,null],[13,"AboveText","","",86,null],[4,"TextWindowType","","Used to reference the parts of `TextView`.",null,null],[13,"Private","","",87,null],[13,"Widget","","",87,null],[13,"Text","","",87,null],[13,"Left","","",87,null],[13,"Right","","",87,null],[13,"Top","","",87,null],[13,"Bottom","","",87,null],[4,"ToolbarStyle","","Used to customize the appearance of a `Toolbar`. Note that setting the toolbar style overrides the user’s preferences for the default toolbar style. Note that if the button has only a label set and GTK_TOOLBAR_ICONS is used, the label will be visible, and vice versa.",null,null],[13,"Icons","","",88,null],[13,"Text","","",88,null],[13,"Both","","",88,null],[13,"BothHoriz","","",88,null],[4,"TreeViewColumnSizing","","The sizing method the column uses to determine its width. Please note that `TreeViewColumnSizing::Autosize` are inefficient for large views, and can make columns appear choppy.",null,null],[13,"GrowOnly","","",89,null],[13,"Autosize","","",89,null],[13,"Fixed","","",89,null],[4,"TreeViewDropPosition","","An enum for determining where a dropped row goes.",null,null],[13,"Before","","",90,null],[13,"After","","",90,null],[13,"IntoOrBefore","","",90,null],[13,"IntoOrAfter","","",90,null],[4,"TreeViewGridLines","","Used to indicate which grid lines to draw in a tree view.",null,null],[13,"None","","",91,null],[13,"Horizontal","","",91,null],[13,"Vertical","","",91,null],[13,"Both","","",91,null],[4,"Unit","","See also `PrintSettingsExt::set_paper_width`.",null,null],[13,"None","","",92,null],[13,"Points","","",92,null],[13,"Inch","","",92,null],[13,"Mm","","",92,null],[4,"WidgetHelpType","","Kinds of widget-specific help. Used by the ::show-help signal.",null,null],[13,"Tooltip","","",93,null],[13,"WhatsThis","","",93,null],[4,"WindowPosition","","Window placement can be influenced using this enumeration. Note that using `WindowPosition::CenterAlways` is almost always a bad idea. It won’t necessarily work well with all window managers or on all windowing systems.",null,null],[13,"None","","",94,null],[13,"Center","","",94,null],[13,"Mouse","","",94,null],[13,"CenterAlways","","",94,null],[13,"CenterOnParent","","",94,null],[4,"WindowType","","A `Window` can be one of these types. Most things you’d consider a “window” should have type `WindowType::Toplevel`; windows with this type are managed by the window manager and have a frame by default (call `GtkWindowExt::set_decorated` to toggle the frame). Windows with type `WindowType::Popup` are ignored by the window manager; window manager keybindings won’t work on them, the window manager won’t decorate the window with a frame, many GTK+ features that rely on the window manager will not work (e.g. resize grips and maximization/minimization). `WindowType::Popup` is used to implement widgets such as `Menu` or tooltips that you normally don’t think of as windows per se. Nearly all windows should be `WindowType::Toplevel`. In particular, do not use `WindowType::Popup` just to turn off the window borders; use `GtkWindowExt::set_decorated` for that.",null,null],[13,"Toplevel","","",95,null],[13,"Popup","","",95,null],[4,"WrapMode","","Describes a type of line wrapping.",null,null],[13,"None","","",96,null],[13,"Char","","",96,null],[13,"Word","","",96,null],[13,"WordChar","","",96,null],[4,"SortColumn","","",null,null],[13,"Default","","",97,null],[13,"Index","","",97,null],[5,"accel_groups_activate","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"accel_groups_from_object","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["accelgroup"],"name":"vec"}}],[5,"accelerator_get_default_mod_mask","","",null,{"inputs":[],"output":{"name":"modifiertype"}}],[5,"accelerator_get_label","","",null,{"inputs":[{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_get_label_with_keycode","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_name","","",null,{"inputs":[{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_name_with_keycode","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_parse","","",null,null],[5,"accelerator_set_default_mod_mask","","",null,{"inputs":[{"name":"modifiertype"}],"output":null}],[5,"accelerator_valid","","",null,{"inputs":[{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"alternative_dialog_button_order","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"bindings_activate","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"bindings_activate_event","","",null,{"inputs":[{"name":"p"},{"name":"eventkey"}],"output":{"name":"bool"}}],[5,"cairo_should_draw_window","","",null,{"inputs":[{"name":"context"},{"name":"window"}],"output":{"name":"bool"}}],[5,"cairo_transform_to_window","","",null,{"inputs":[{"name":"context"},{"name":"p"},{"name":"window"}],"output":null}],[5,"device_grab_add","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"bool"}],"output":null}],[5,"device_grab_remove","","",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":null}],[5,"disable_setlocale","","",null,{"inputs":[],"output":null}],[5,"events_pending","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"false_","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"get_current_event","","",null,{"inputs":[],"output":{"generics":["event"],"name":"option"}}],[5,"get_current_event_device","","",null,{"inputs":[],"output":{"generics":["device"],"name":"option"}}],[5,"get_current_event_state","","",null,{"inputs":[],"output":{"generics":["modifiertype"],"name":"option"}}],[5,"get_current_event_time","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_debug_flags","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_default_language","","",null,{"inputs":[],"output":{"generics":["language"],"name":"option"}}],[5,"get_event_widget","","",null,{"inputs":[{"name":"event"}],"output":{"generics":["widget"],"name":"option"}}],[5,"get_locale_direction","","",null,{"inputs":[],"output":{"name":"textdirection"}}],[5,"grab_get_current","","",null,{"inputs":[],"output":{"generics":["widget"],"name":"option"}}],[5,"main","","",null,{"inputs":[],"output":null}],[5,"main_do_event","","",null,{"inputs":[{"name":"event"}],"output":null}],[5,"main_iteration","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"main_iteration_do","","",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"main_level","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"print_run_page_setup_dialog","","",null,{"inputs":[{"name":"q"},{"name":"r"},{"name":"printsettings"}],"output":{"generics":["pagesetup"],"name":"option"}}],[5,"propagate_event","","",null,{"inputs":[{"name":"p"},{"name":"event"}],"output":null}],[5,"render_activity","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_arrow","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_background","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_background_get_clip","","",null,{"inputs":[{"name":"stylecontext"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"rectangle"}}],[5,"render_check","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_expander","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_extension","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"positiontype"}],"output":null}],[5,"render_focus","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_frame","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_frame_gap","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"positiontype"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_handle","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_icon","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"pixbuf"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_icon_pixbuf","","",null,{"inputs":[{"name":"stylecontext"},{"name":"iconsource"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[5,"render_icon_surface","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"surface"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_insertion_cursor","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"layout"},{"name":"i32"},{"name":"direction"}],"output":null}],[5,"render_layout","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"layout"}],"output":null}],[5,"render_line","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_option","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_slider","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"orientation"}],"output":null}],[5,"rgb_to_hsv","","",null,null],[5,"selection_add_target","","",null,{"inputs":[{"name":"p"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"selection_clear_targets","","",null,{"inputs":[{"name":"p"},{"name":"atom"}],"output":null}],[5,"selection_convert","","",null,{"inputs":[{"name":"p"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"selection_owner_set","","",null,{"inputs":[{"name":"q"},{"name":"atom"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"selection_owner_set_for_display","","",null,{"inputs":[{"name":"display"},{"name":"q"},{"name":"atom"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"selection_remove_all","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"set_debug_flags","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"show_uri","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[5,"show_uri_on_window","","",null,{"inputs":[{"name":"q"},{"name":"str"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[5,"stock_list_ids","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"targets_include_image","","",null,null],[5,"targets_include_rich_text","","",null,null],[5,"targets_include_text","","",null,null],[5,"targets_include_uri","","",null,null],[5,"test_create_simple_window","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_find_label","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_find_sibling","","",null,{"inputs":[{"name":"p"},{"name":"type"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_find_widget","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"type"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_register_all_types","","",null,{"inputs":[],"output":null}],[5,"test_slider_get_value","","",null,{"inputs":[{"name":"p"}],"output":{"name":"f64"}}],[5,"test_slider_set_perc","","",null,{"inputs":[{"name":"p"},{"name":"f64"}],"output":null}],[5,"test_spin_button_click","","",null,{"inputs":[{"name":"spinbutton"},{"name":"u32"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"test_text_get","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"test_text_set","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":null}],[5,"test_widget_click","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"test_widget_send_key","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"test_widget_wait_for_draw","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"tree_get_row_drag_data","","",null,{"inputs":[{"name":"selectiondata"}],"output":{"name":"option"}}],[5,"tree_set_row_drag_data","","",null,{"inputs":[{"name":"selectiondata"},{"name":"p"},{"name":"treepath"}],"output":{"name":"bool"}}],[5,"true_","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"is_initialized","","Returns `true` if GTK has been initialized.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"is_initialized_main_thread","","Returns `true` if GTK has been initialized and this is the main thread.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"set_initialized","","Informs this crate that GTK has been initialized and the current thread is the main one.",null,{"inputs":[],"output":null}],[5,"init","","Tries to initialize GTK+.",null,{"inputs":[],"output":{"generics":["boolerror"],"name":"result"}}],[5,"main_quit","","",null,{"inputs":[],"output":null}],[5,"get_major_version","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_minor_version","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_micro_version","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_binary_age","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_interface_age","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"check_version","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"idle_add","","Adds a closure to be called by the default main loop when it's idle.",null,{"inputs":[{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add","","Adds a closure to be called by the default main loop at regular intervals with millisecond granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add_seconds","","Adds a closure to be called by the default main loop at regular intervals with second granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[0,"xlib","","",null,null],[6,"Window","gtk::xlib","",null,null],[11,"clone","gtk","",98,{"inputs":[{"name":"self"}],"output":{"name":"aboutdialog"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"static_type","","",98,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AboutDialog`.",98,{"inputs":[],"output":{"name":"aboutdialog"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"accelgroup"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"static_type","","",99,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AccelGroup`.",99,{"inputs":[],"output":{"name":"accelgroup"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"actionbar"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"static_type","","",100,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ActionBar` widget.",100,{"inputs":[],"output":{"name":"actionbar"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"actionable"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"static_type","","",101,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"static_type","","",102,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Adjustment`. ## `value` the initial value ## `lower` the minimum value ## `upper` the maximum value ## `step_increment` the step increment ## `page_increment` the page increment ## `page_size` the page size",102,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"adjustment"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"static_type","","",103,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Alignment`.",103,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"alignment"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"appchooserbutton"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"static_type","","",104,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",104,{"inputs":[{"name":"str"}],"output":{"name":"appchooserbutton"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"appchooserdialog"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"static_type","","",105,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AppChooserDialog` for the provided `gio::File`, to allow the user to select an application for it. ## `parent` a `Window`, or `None` ## `flags` flags for this dialog ## `file` a `gio::File`",105,{"inputs":[{"name":"q"},{"name":"dialogflags"},{"name":"r"}],"output":{"name":"appchooserdialog"}}],[11,"new_for_content_type","","Creates a new `AppChooserDialog` for the provided content type, to allow the user to select an application for it. ## `parent` a `Window`, or `None` ## `flags` flags for this dialog ## `content_type` a content type string",105,{"inputs":[{"name":"q"},{"name":"dialogflags"},{"name":"str"}],"output":{"name":"appchooserdialog"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"appchooserwidget"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"static_type","","",106,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AppChooserWidget` for applications that can handle content of the given type. ## `content_type` the content type to show applications for",106,{"inputs":[{"name":"str"}],"output":{"name":"appchooserwidget"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"application"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"static_type","","",107,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"applicationwindow"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"static_type","","",108,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ApplicationWindow`. ## `application` a `Application`",108,{"inputs":[{"name":"application"}],"output":{"name":"applicationwindow"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"arrow"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"static_type","","",109,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Arrow` widget.",109,{"inputs":[{"name":"arrowtype"},{"name":"shadowtype"}],"output":{"name":"arrow"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"aspectframe"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"static_type","","",110,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `AspectFrame`. ## `label` Label text. ## `xalign` Horizontal alignment of the child within the allocation of  the `AspectFrame`. This ranges from 0.0 (left aligned)  to 1.0 (right aligned) ## `yalign` Vertical alignment of the child within the allocation of  the `AspectFrame`. This ranges from 0.0 (top aligned)  to 1.0 (bottom aligned) ## `ratio` The desired aspect ratio. ## `obey_child` If `true`, `ratio` is ignored, and the aspect  ratio is taken from the requistion of the child.",110,{"inputs":[{"name":"p"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"bool"}],"output":{"name":"aspectframe"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"assistant"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"static_type","","",111,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Assistant`.",111,{"inputs":[],"output":{"name":"assistant"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bin"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"static_type","","",112,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"static_type","","",113,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Box`. ## `orientation` the box’s orientation. ## `spacing` the number of pixels to place by default between children.",113,{"inputs":[{"name":"orientation"},{"name":"i32"}],"output":{"name":"box"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"buildable"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"static_type","","",114,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"static_type","","",115,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty builder object.",115,{"inputs":[],"output":{"name":"builder"}}],[11,"new_from_resource","","Builds the [`Builder` UI definition][BUILDER-UI] at `resource_path`.",115,{"inputs":[{"name":"str"}],"output":{"name":"builder"}}],[11,"new_from_string","","Builds the user interface described by `string` (in the [`Builder` UI definition][BUILDER-UI] format).",115,{"inputs":[{"name":"str"}],"output":{"name":"builder"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"static_type","","",116,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Button` widget. To add a child widget to the button, use `ContainerExt::add`.",116,{"inputs":[],"output":{"name":"button"}}],[11,"new_from_icon_name","","Creates a new button containing an icon from the current icon theme.",116,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"button"}}],[11,"new_from_stock","","Creates a new `Button` containing the image and text from a stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK` and `GTK_STOCK_APPLY`.",116,{"inputs":[{"name":"str"}],"output":{"name":"button"}}],[11,"new_with_label","","Creates a `Button` widget with a `Label` child containing the given text. ## `label` The text you want the `Label` to hold.",116,{"inputs":[{"name":"str"}],"output":{"name":"button"}}],[11,"new_with_mnemonic","","Creates a new `Button` containing a label. If characters in `label` are preceded by an underscore, they are underlined. If you need a literal underscore character in a label, use “__” (two underscores). The first underlined character represents a keyboard accelerator called a mnemonic. Pressing Alt and that key activates the button. ## `label` The text of the button, with an underscore in front of the  mnemonic character",116,{"inputs":[{"name":"str"}],"output":{"name":"button"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"buttonbox"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"static_type","","",117,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ButtonBox`. ## `orientation` the box's orientation.",117,{"inputs":[{"name":"orientation"}],"output":{"name":"buttonbox"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"calendar"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"static_type","","",118,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new calendar, with the current date being selected.",118,{"inputs":[],"output":{"name":"calendar"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"cellarea"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"static_type","","",119,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cellareabox"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"static_type","","",120,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellAreaBox`.",120,{"inputs":[],"output":{"name":"cellareabox"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cellareacontext"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"static_type","","",121,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"celleditable"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"static_type","","",122,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"celllayout"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"static_type","","",123,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderer"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"static_type","","",124,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"cellrendereraccel"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"static_type","","",125,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererAccel`.",125,{"inputs":[],"output":{"name":"cellrendereraccel"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderercombo"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"static_type","","",126,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererCombo`. Adjust how text is drawn using object properties. Object properties can be set globally (with `gobject::ObjectExt::set`). Also, with `TreeViewColumn`, you can bind a property to a value in a `TreeModel`. For example, you can bind the “text” property on the cell renderer to a string value in the model, thus rendering a different string in each row of the `TreeView`.",126,{"inputs":[],"output":{"name":"cellrenderercombo"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"cellrendererpixbuf"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"static_type","","",127,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererPixbuf`. Adjust rendering parameters using object properties. Object properties can be set globally (with `gobject::ObjectExt::set`). Also, with `TreeViewColumn`, you can bind a property to a value in a `TreeModel`. For example, you can bind the “pixbuf” property on the cell renderer to a pixbuf value in the model, thus rendering a different image in each row of the `TreeView`.",127,{"inputs":[],"output":{"name":"cellrendererpixbuf"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"cellrendererprogress"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"static_type","","",128,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererProgress`.",128,{"inputs":[],"output":{"name":"cellrendererprogress"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"cellrendererspin"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"static_type","","",129,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererSpin`.",129,{"inputs":[],"output":{"name":"cellrendererspin"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"cellrendererspinner"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"static_type","","",130,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a new cell renderer which will show a spinner to indicate activity.",130,{"inputs":[],"output":{"name":"cellrendererspinner"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderertext"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"static_type","","",131,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererText`. Adjust how text is drawn using object properties. Object properties can be set globally (with `gobject::ObjectExt::set`). Also, with `TreeViewColumn`, you can bind a property to a value in a `TreeModel`. For example, you can bind the “text” property on the cell renderer to a string value in the model, thus rendering a different string in each row of the `TreeView`",131,{"inputs":[],"output":{"name":"cellrenderertext"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderertoggle"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"static_type","","",132,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CellRendererToggle`. Adjust rendering parameters using object properties. Object properties can be set globally (with `gobject::ObjectExt::set`). Also, with `TreeViewColumn`, you can bind a property to a value in a `TreeModel`. For example, you can bind the “active” property on the cell renderer to a boolean value in the model, thus causing the check button to reflect the state of the model.",132,{"inputs":[],"output":{"name":"cellrenderertoggle"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"cellview"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"static_type","","",133,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",133,{"inputs":[],"output":{"name":"cellview"}}],[11,"new_with_context","","",133,{"inputs":[{"name":"p"},{"name":"cellareacontext"}],"output":{"name":"cellview"}}],[11,"new_with_markup","","",133,{"inputs":[{"name":"str"}],"output":{"name":"cellview"}}],[11,"new_with_pixbuf","","",133,{"inputs":[{"name":"pixbuf"}],"output":{"name":"cellview"}}],[11,"new_with_text","","",133,{"inputs":[{"name":"str"}],"output":{"name":"cellview"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"checkbutton"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"static_type","","",134,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CheckButton`.",134,{"inputs":[],"output":{"name":"checkbutton"}}],[11,"new_with_label","","Creates a new `CheckButton` with a `Label` to the right of it. ## `label` the text for the check button.",134,{"inputs":[{"name":"str"}],"output":{"name":"checkbutton"}}],[11,"new_with_mnemonic","","Creates a new `CheckButton` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the check button. ## `label` The text of the button, with an underscore in front of the  mnemonic character",134,{"inputs":[{"name":"str"}],"output":{"name":"checkbutton"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"checkmenuitem"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"static_type","","",135,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CheckMenuItem`.",135,{"inputs":[],"output":{"name":"checkmenuitem"}}],[11,"new_with_label","","Creates a new `CheckMenuItem` with a label. ## `label` the string to use for the label.",135,{"inputs":[{"name":"str"}],"output":{"name":"checkmenuitem"}}],[11,"new_with_mnemonic","","Creates a new `CheckMenuItem` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the menu item. ## `label` The text of the button, with an underscore in front of the  character",135,{"inputs":[{"name":"str"}],"output":{"name":"checkmenuitem"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"clipboard"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"static_type","","",136,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns the clipboard object for the given selection. See `Clipboard::get_for_display` for complete details. ## `selection` a `gdk::Atom` which identifies the clipboard to use",136,{"inputs":[{"name":"atom"}],"output":{"name":"clipboard"}}],[11,"get_default","","Returns the default clipboard object for use with cut/copy/paste menu items and keyboard shortcuts.",136,{"inputs":[{"name":"display"}],"output":{"generics":["clipboard"],"name":"option"}}],[11,"get_for_display","","Returns the clipboard object for the given selection. Cut/copy/paste menu items and keyboard shortcuts should use the default clipboard, returned by passing `GDK_SELECTION_CLIPBOARD` for `selection`. (`GDK_NONE` is supported as a synonym for GDK_SELECTION_CLIPBOARD for backwards compatibility reasons.) The currently-selected object or text should be provided on the clipboard identified by `GDK_SELECTION_PRIMARY`. Cut/copy/paste menu items conceptually copy the contents of the `GDK_SELECTION_PRIMARY` clipboard to the default clipboard, i.e. they copy the selection to what the user sees as the clipboard.",136,{"inputs":[{"name":"display"},{"name":"atom"}],"output":{"name":"clipboard"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"colorbutton"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"static_type","","",137,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new color button.",137,{"inputs":[],"output":{"name":"colorbutton"}}],[11,"new_with_rgba","","Creates a new color button. ## `rgba` A `gdk::RGBA` to set the current color with",137,{"inputs":[{"name":"rgba"}],"output":{"name":"colorbutton"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"colorchooser"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"static_type","","",138,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"colorchooserdialog"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"static_type","","",139,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ColorChooserDialog`. ## `title` Title of the dialog, or `None` ## `parent` Transient parent of the dialog, or `None`",139,{"inputs":[{"name":"p"},{"name":"r"}],"output":{"name":"colorchooserdialog"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"colorchooserwidget"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"static_type","","",140,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ColorChooserWidget`.",140,{"inputs":[],"output":{"name":"colorchooserwidget"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"combobox"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",141,null],[11,"static_type","","",141,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `ComboBox`.",141,{"inputs":[],"output":{"name":"combobox"}}],[11,"new_with_area","","Creates a new empty `ComboBox` using `area` to layout cells. ## `area` the `CellArea` to use to layout cell renderers",141,{"inputs":[{"name":"p"}],"output":{"name":"combobox"}}],[11,"new_with_area_and_entry","","Creates a new empty `ComboBox` with an entry.",141,{"inputs":[{"name":"p"}],"output":{"name":"combobox"}}],[11,"new_with_entry","","Creates a new empty `ComboBox` with an entry.",141,{"inputs":[],"output":{"name":"combobox"}}],[11,"new_with_model","","Creates a new `ComboBox` with the model initialized to `model`. ## `model` A `TreeModel`.",141,{"inputs":[{"name":"p"}],"output":{"name":"combobox"}}],[11,"new_with_model_and_entry","","Creates a new empty `ComboBox` with an entry and with the model initialized to `model`. ## `model` A `TreeModel`",141,{"inputs":[{"name":"p"}],"output":{"name":"combobox"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"comboboxtext"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",142,null],[11,"static_type","","",142,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ComboBoxText`, which is a `ComboBox` just displaying strings.",142,{"inputs":[],"output":{"name":"comboboxtext"}}],[11,"new_with_entry","","Creates a new `ComboBoxText`, which is a `ComboBox` just displaying strings. The combo box created by this function has an entry.",142,{"inputs":[],"output":{"name":"comboboxtext"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"container"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"static_type","","",143,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"cssprovider"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"static_type","","",144,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `CssProvider`.",144,{"inputs":[],"output":{"name":"cssprovider"}}],[11,"get_default","","Returns the provider containing the style settings used as a fallback for all widgets.",144,{"inputs":[],"output":{"generics":["cssprovider"],"name":"option"}}],[11,"get_named","","Loads a theme from the usual theme paths ## `name` A theme name ## `variant` variant to load, for example, \"dark\", or  `None` for the default",144,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["cssprovider"],"name":"option"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"dialog"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",145,null],[11,"static_type","","",145,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new dialog box.",145,{"inputs":[],"output":{"name":"dialog"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"drawingarea"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"static_type","","",146,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new drawing area.",146,{"inputs":[],"output":{"name":"drawingarea"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"editable"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"static_type","","",147,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",148,null],[11,"static_type","","",148,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new entry.",148,{"inputs":[],"output":{"name":"entry"}}],[11,"new_with_buffer","","Creates a new entry with the specified text buffer. ## `buffer` The buffer to use for the new `Entry`.",148,{"inputs":[{"name":"entrybuffer"}],"output":{"name":"entry"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"entrycompletion"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"static_type","","",149,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `EntryCompletion` object.",149,{"inputs":[],"output":{"name":"entrycompletion"}}],[11,"new_with_area","","Creates a new `EntryCompletion` object using the specified `area` to layout cells in the underlying `TreeViewColumn` for the drop-down menu. ## `area` the `CellArea` used to layout cells",149,{"inputs":[{"name":"p"}],"output":{"name":"entrycompletion"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"eventbox"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"static_type","","",150,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `EventBox`.",150,{"inputs":[],"output":{"name":"eventbox"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"eventcontroller"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"static_type","","",151,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"expander"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"static_type","","",152,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new expander using `label` as the text of the label. ## `label` the text of the label",152,{"inputs":[{"name":"p"}],"output":{"name":"expander"}}],[11,"new_with_mnemonic","","Creates a new expander using `label` as the text of the label. If characters in `label` are preceded by an underscore, they are underlined. If you need a literal underscore character in a label, use “__” (two underscores). The first underlined character represents a keyboard accelerator called a mnemonic. Pressing Alt and that key activates the button. ## `label` the text of the label with an underscore  in front of the mnemonic character",152,{"inputs":[{"name":"str"}],"output":{"name":"expander"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"filechooser"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"static_type","","",153,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"filechooserbutton"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"static_type","","",154,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new file-selecting button widget. ## `title` the title of the browse dialog. ## `action` the open mode for the widget.",154,{"inputs":[{"name":"str"},{"name":"filechooseraction"}],"output":{"name":"filechooserbutton"}}],[11,"new_with_dialog","","Creates a `FileChooserButton` widget which uses `dialog` as its file-picking window.",154,{"inputs":[{"name":"p"}],"output":{"name":"filechooserbutton"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"filechooserdialog"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"static_type","","",155,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"filechoosernative"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"static_type","","",156,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",156,{"inputs":[{"name":"p"},{"name":"r"},{"name":"filechooseraction"},{"name":"s"},{"name":"t"}],"output":{"name":"filechoosernative"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"filechooserwidget"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"static_type","","",157,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FileChooserWidget`. This is a file chooser widget that can be embedded in custom windows, and it is the same widget that is used by `FileChooserDialog`. ## `action` Open or save mode for the widget",157,{"inputs":[{"name":"filechooseraction"}],"output":{"name":"filechooserwidget"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"filefilter"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"static_type","","",158,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FileFilter` with no rules added to it. Such a filter doesn’t accept any files, so is not particularly useful until you add rules with `FileFilterExt::add_mime_type`, `FileFilterExt::add_pattern`, or `FileFilterExt::add_custom`. To create a filter that accepts any file, use:",158,{"inputs":[],"output":{"name":"filefilter"}}],[11,"new_from_gvariant","","Deserialize a file filter from an a{sv} variant in the format produced by `FileFilterExt::to_gvariant`.",158,{"inputs":[{"name":"variant"}],"output":{"name":"filefilter"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"static_type","","",159,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Fixed`.",159,{"inputs":[],"output":{"name":"fixed"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"flowbox"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"static_type","","",160,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `FlowBox`.",160,{"inputs":[],"output":{"name":"flowbox"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"flowboxchild"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"static_type","","",161,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FlowBoxChild`, to be used as a child of a `FlowBox`.",161,{"inputs":[],"output":{"name":"flowboxchild"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"fontbutton"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"static_type","","",162,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new font picker widget.",162,{"inputs":[],"output":{"name":"fontbutton"}}],[11,"new_with_font","","Creates a new font picker widget. ## `fontname` Name of font to display in font chooser dialog",162,{"inputs":[{"name":"str"}],"output":{"name":"fontbutton"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"fontchooser"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"static_type","","",163,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"fontchooserdialog"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"static_type","","",164,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FontChooserDialog`. ## `title` Title of the dialog, or `None` ## `parent` Transient parent of the dialog, or `None`",164,{"inputs":[{"name":"p"},{"name":"r"}],"output":{"name":"fontchooserdialog"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"fontchooserwidget"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"static_type","","",165,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FontChooserWidget`.",165,{"inputs":[],"output":{"name":"fontchooserwidget"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"static_type","","",166,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Frame`, with optional label `label`. If `label` is `None`, the label is omitted. ## `label` the text to use as the label of the frame",166,{"inputs":[{"name":"p"}],"output":{"name":"frame"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"glarea"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",167,null],[11,"static_type","","",167,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `GLArea` widget.",167,{"inputs":[],"output":{"name":"glarea"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"gesture"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",168,null],[11,"static_type","","",168,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"gesturedrag"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",169,null],[11,"static_type","","",169,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes drags.",169,{"inputs":[{"name":"p"}],"output":{"name":"gesturedrag"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"gesturelongpress"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",170,null],[11,"static_type","","",170,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes long presses.",170,{"inputs":[{"name":"p"}],"output":{"name":"gesturelongpress"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"gesturemultipress"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"static_type","","",171,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes single and multiple presses.",171,{"inputs":[{"name":"p"}],"output":{"name":"gesturemultipress"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"gesturepan"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"static_type","","",172,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes pan gestures.",172,{"inputs":[{"name":"p"},{"name":"orientation"}],"output":{"name":"gesturepan"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"gesturerotate"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"static_type","","",173,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes 2-touch rotation gestures.",173,{"inputs":[{"name":"p"}],"output":{"name":"gesturerotate"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"gesturesingle"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",174,null],[11,"static_type","","",174,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"gestureswipe"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",175,null],[11,"static_type","","",175,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes swipes.",175,{"inputs":[{"name":"p"}],"output":{"name":"gestureswipe"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"gesturezoom"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",176,null],[11,"static_type","","",176,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `Gesture` that recognizes zoom in/out gestures (usually known as pinch/zoom).",176,{"inputs":[{"name":"p"}],"output":{"name":"gesturezoom"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"grid"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",177,null],[11,"static_type","","",177,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new grid widget.",177,{"inputs":[],"output":{"name":"grid"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"headerbar"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",178,null],[11,"static_type","","",178,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `HeaderBar` widget.",178,{"inputs":[],"output":{"name":"headerbar"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"imcontext"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",179,null],[11,"static_type","","",179,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"immulticontext"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",180,null],[11,"static_type","","",180,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `IMMulticontext`.",180,{"inputs":[],"output":{"name":"immulticontext"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"iconfactory"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",181,null],[11,"static_type","","",181,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `IconFactory`. An icon factory manages a collection of `GtkIconSets`; a `IconSet` manages a set of variants of a particular icon (i.e. a `IconSet` contains variants for different sizes and widget states). Icons in an icon factory are named by a stock ID, which is a simple string identifying the icon. Each `Style` has a list of `GtkIconFactorys` derived from the current theme; those icon factories are consulted first when searching for an icon. If the theme doesn’t set a particular icon, GTK+ looks for the icon in a list of default icon factories, maintained by `IconFactoryExt::add_default` and `IconFactoryExt::remove_default`. Applications with icons should add a default icon factory with their icons, which will allow themes to override the icons for the application.",181,{"inputs":[],"output":{"name":"iconfactory"}}],[11,"lookup_default","","Looks for an icon in the list of default icon factories. For display to the user, you should use `Style::lookup_icon_set` on the `Style` for the widget that will display the icon, instead of using this function directly, so that themes are taken into account.",181,{"inputs":[{"name":"str"}],"output":{"generics":["iconset"],"name":"option"}}],[11,"default","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"iconinfo"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",182,null],[11,"static_type","","",182,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_for_pixbuf","","Creates a `IconInfo` for a `gdk_pixbuf::Pixbuf`. ## `icon_theme` a `IconTheme` ## `pixbuf` the pixbuf to wrap in a `IconInfo`",182,{"inputs":[{"name":"icontheme"},{"name":"pixbuf"}],"output":{"name":"iconinfo"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"icontheme"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",183,null],[11,"static_type","","",183,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new icon theme object. Icon theme objects are used to lookup up an icon by name in a particular icon theme. Usually, you’ll want to use `IconTheme::get_default` or `IconTheme::get_for_screen` rather than creating a new icon theme object for scratch.",183,{"inputs":[],"output":{"name":"icontheme"}}],[11,"add_builtin_icon","","Registers a built-in icon for icon theme lookups. The idea of built-in icons is to allow an application or library that uses themed icons to function requiring files to be present in the file system. For instance, the default images for all of GTK+’s stock icons are registered as built-icons.",183,{"inputs":[{"name":"str"},{"name":"i32"},{"name":"pixbuf"}],"output":null}],[11,"get_default","","Gets the icon theme for the default screen. See `IconTheme::get_for_screen`.",183,{"inputs":[],"output":{"generics":["icontheme"],"name":"option"}}],[11,"get_for_screen","","Gets the icon theme object associated with `screen`; if this function has not previously been called for the given screen, a new icon theme object will be created and associated with the screen. Icon theme objects are fairly expensive to create, so using this function is usually a better choice than calling than `IconTheme::new` and setting the screen yourself; by using this function a single icon theme object will be shared between users. ## `screen` a `gdk::Screen`",183,{"inputs":[{"name":"screen"}],"output":{"generics":["icontheme"],"name":"option"}}],[11,"default","","",183,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"iconview"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",184,null],[11,"static_type","","",184,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `IconView` widget",184,{"inputs":[],"output":{"name":"iconview"}}],[11,"new_with_area","","Creates a new `IconView` widget using the specified `area` to layout cells inside the icons. ## `area` the `CellArea` to use to layout cells",184,{"inputs":[{"name":"p"}],"output":{"name":"iconview"}}],[11,"new_with_model","","Creates a new `IconView` widget with the model `model`. ## `model` The model.",184,{"inputs":[{"name":"p"}],"output":{"name":"iconview"}}],[11,"default","","",184,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",185,null],[11,"static_type","","",185,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `Image` widget.",185,{"inputs":[],"output":{"name":"image"}}],[11,"new_from_animation","","Creates a `Image` displaying the given animation. The `Image` does not assume a reference to the animation; you still need to unref it if you own references. `Image` will add its own reference rather than adopting yours.",185,{"inputs":[{"name":"p"}],"output":{"name":"image"}}],[11,"new_from_file","","Creates a new `Image` displaying the file `filename`. If the file isn’t found or can’t be loaded, the resulting `Image` will display a “broken image” icon. This function never returns `None`, it always returns a valid `Image` widget.",185,{"inputs":[{"name":"p"}],"output":{"name":"image"}}],[11,"new_from_gicon","","Creates a `Image` displaying an icon from the current icon theme. If the icon name isn’t known, a “broken image” icon will be displayed instead. If the current icon theme is changed, the icon will be updated appropriately. ## `icon` an icon ## `size` a stock icon size (`IconSize`)",185,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"image"}}],[11,"new_from_icon_name","","Creates a `Image` displaying an icon from the current icon theme. If the icon name isn’t known, a “broken image” icon will be displayed instead. If the current icon theme is changed, the icon will be updated appropriately. ## `icon_name` an icon name or `None` ## `size` a stock icon size (`IconSize`)",185,{"inputs":[{"name":"p"},{"name":"i32"}],"output":{"name":"image"}}],[11,"new_from_icon_set","","Creates a `Image` displaying an icon set. Sample stock sizes are `IconSize::Menu`, `IconSize::SmallToolbar`. Instead of using this function, usually it’s better to create a `IconFactory`, put your icon sets in the icon factory, add the icon factory to the list of default factories with `IconFactoryExt::add_default`, and then use `Image::new_from_stock`. This will allow themes to override the icon you ship with your application.",185,{"inputs":[{"name":"iconset"},{"name":"i32"}],"output":{"name":"image"}}],[11,"new_from_pixbuf","","Creates a new `Image` displaying `pixbuf`. The `Image` does not assume a reference to the pixbuf; you still need to unref it if you own references. `Image` will add its own reference rather than adopting yours.",185,{"inputs":[{"name":"p"}],"output":{"name":"image"}}],[11,"new_from_resource","","Creates a new `Image` displaying the resource file `resource_path`. If the file isn’t found or can’t be loaded, the resulting `Image` will display a “broken image” icon. This function never returns `None`, it always returns a valid `Image` widget.",185,{"inputs":[{"name":"str"}],"output":{"name":"image"}}],[11,"new_from_stock","","Creates a `Image` displaying a stock icon. Sample stock icon names are `GTK_STOCK_OPEN`, `GTK_STOCK_QUIT`. Sample stock sizes are `IconSize::Menu`, `IconSize::SmallToolbar`. If the stock icon name isn’t known, the image will be empty. You can register your own stock icon names, see `IconFactoryExt::add_default` and `IconFactoryExt::add`.",185,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"name":"image"}}],[11,"new_from_surface","","Creates a new `Image` displaying `surface`. The `Image` does not assume a reference to the surface; you still need to unref it if you own references. `Image` will add its own reference rather than adopting yours.",185,{"inputs":[{"name":"p"}],"output":{"name":"image"}}],[11,"default","","",185,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"imagemenuitem"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",186,null],[11,"static_type","","",186,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ImageMenuItem` with an empty label.",186,{"inputs":[],"output":{"name":"imagemenuitem"}}],[11,"new_from_stock","","Creates a new `ImageMenuItem` containing the image and text from a stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK` and `GTK_STOCK_APPLY`.",186,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"imagemenuitem"}}],[11,"new_with_label","","Creates a new `ImageMenuItem` containing a label.",186,{"inputs":[{"name":"str"}],"output":{"name":"imagemenuitem"}}],[11,"new_with_mnemonic","","Creates a new `ImageMenuItem` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the menu item.",186,{"inputs":[{"name":"str"}],"output":{"name":"imagemenuitem"}}],[11,"default","","",186,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"infobar"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",187,null],[11,"static_type","","",187,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `InfoBar` object.",187,{"inputs":[],"output":{"name":"infobar"}}],[11,"default","","",187,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"invisible"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",188,null],[11,"static_type","","",188,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",188,{"inputs":[],"output":{"name":"invisible"}}],[11,"new_for_screen","","",188,{"inputs":[{"name":"screen"}],"output":{"name":"invisible"}}],[11,"default","","",188,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",189,null],[11,"static_type","","",189,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new label with the given text inside it. You can pass `None` to get an empty label widget. ## `str` The text of the label",189,{"inputs":[{"name":"p"}],"output":{"name":"label"}}],[11,"new_with_mnemonic","","Creates a new `Label`, containing the text in `str`.",189,{"inputs":[{"name":"p"}],"output":{"name":"label"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",190,null],[11,"static_type","","",190,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Layout`. Unless you have a specific adjustment you’d like the layout to use for scrolling, pass `None` for `hadjustment` and `vadjustment`. ## `hadjustment` horizontal scroll adjustment, or `None` ## `vadjustment` vertical scroll adjustment, or `None`",190,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"layout"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"levelbar"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",191,null],[11,"static_type","","",191,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `LevelBar`.",191,{"inputs":[],"output":{"name":"levelbar"}}],[11,"new_for_interval","","Utility constructor that creates a new `LevelBar` for the specified interval.",191,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"levelbar"}}],[11,"default","","",191,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"linkbutton"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",192,null],[11,"static_type","","",192,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `LinkButton` with the URI as its text. ## `uri` a valid URI",192,{"inputs":[{"name":"str"}],"output":{"name":"linkbutton"}}],[11,"new_with_label","","Creates a new `LinkButton` containing a label. ## `uri` a valid URI ## `label` the text of the button",192,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"linkbutton"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"listbox"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",193,null],[11,"static_type","","",193,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ListBox` container.",193,{"inputs":[],"output":{"name":"listbox"}}],[11,"default","","",193,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"listboxrow"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",194,null],[11,"static_type","","",194,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ListBoxRow`, to be used as a child of a `ListBox`.",194,{"inputs":[],"output":{"name":"listboxrow"}}],[11,"default","","",194,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"liststore"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",195,null],[11,"static_type","","",195,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"lockbutton"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",196,null],[11,"static_type","","",196,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",196,{"inputs":[{"name":"q"}],"output":{"name":"lockbutton"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"menu"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",197,null],[11,"static_type","","",197,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Menu`",197,{"inputs":[],"output":{"name":"menu"}}],[11,"new_from_model","","Creates a `Menu` and populates it with menu items and submenus according to `model`.",197,{"inputs":[{"name":"p"}],"output":{"name":"menu"}}],[11,"get_for_attach_widget","","Returns a list of the menus which are attached to this widget. This list is owned by GTK+ and must not be modified. ## `widget` a `Widget`",197,{"inputs":[{"name":"p"}],"output":{"generics":["widget"],"name":"vec"}}],[11,"default","","",197,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"menubar"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",198,null],[11,"static_type","","",198,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MenuBar`",198,{"inputs":[],"output":{"name":"menubar"}}],[11,"new_from_model","","Creates a new `MenuBar` and populates it with menu items and submenus according to `model`.",198,{"inputs":[{"name":"p"}],"output":{"name":"menubar"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"menubutton"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",199,null],[11,"static_type","","",199,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MenuButton` widget with downwards-pointing arrow as the only child. You can replace the child widget with another `Widget` should you wish to.",199,{"inputs":[],"output":{"name":"menubutton"}}],[11,"default","","",199,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"menuitem"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",200,null],[11,"static_type","","",200,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MenuItem`.",200,{"inputs":[],"output":{"name":"menuitem"}}],[11,"new_with_label","","Creates a new `MenuItem` whose child is a `Label`. ## `label` the text for the label",200,{"inputs":[{"name":"str"}],"output":{"name":"menuitem"}}],[11,"new_with_mnemonic","","Creates a new `MenuItem` containing a label.",200,{"inputs":[{"name":"str"}],"output":{"name":"menuitem"}}],[11,"default","","",200,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"menushell"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",201,null],[11,"static_type","","",201,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"menutoolbutton"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",202,null],[11,"static_type","","",202,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MenuToolButton` using `icon_widget` as icon and `label` as label. ## `icon_widget` a widget that will be used as icon widget, or `None` ## `label` a string that will be used as label, or `None`",202,{"inputs":[{"name":"q"},{"name":"r"}],"output":{"name":"menutoolbutton"}}],[11,"new_from_stock","","Creates a new `MenuToolButton`. The new `MenuToolButton` will contain an icon and label from the stock item indicated by `stock_id`.",202,{"inputs":[{"name":"str"}],"output":{"name":"menutoolbutton"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"messagedialog"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",203,null],[11,"static_type","","",203,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"misc"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",204,null],[11,"static_type","","",204,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"modelbutton"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",205,null],[11,"static_type","","",205,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ModelButton`.",205,{"inputs":[],"output":{"name":"modelbutton"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"mountoperation"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",206,null],[11,"static_type","","",206,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",206,{"inputs":[{"name":"q"}],"output":{"name":"mountoperation"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"nativedialog"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",207,null],[11,"static_type","","",207,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"notebook"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",208,null],[11,"static_type","","",208,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Notebook` widget with no pages.",208,{"inputs":[],"output":{"name":"notebook"}}],[11,"default","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"offscreenwindow"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",209,null],[11,"static_type","","",209,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",209,{"inputs":[],"output":{"name":"offscreenwindow"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"orientable"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",210,null],[11,"static_type","","",210,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"overlay"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",211,null],[11,"static_type","","",211,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Overlay`.",211,{"inputs":[],"output":{"name":"overlay"}}],[11,"default","","",211,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"padcontroller"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",212,null],[11,"static_type","","",212,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",212,{"inputs":[{"name":"p"},{"name":"q"},{"name":"s"}],"output":{"name":"padcontroller"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"pagesetup"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",213,null],[11,"static_type","","",213,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PageSetup`.",213,{"inputs":[],"output":{"name":"pagesetup"}}],[11,"new_from_file","","Reads the page setup from the file `file_name`. Returns a new `PageSetup` object with the restored page setup, or `None` if an error occurred. See `PageSetupExt::to_file`. ## `file_name` the filename to read the page setup from",213,{"inputs":[{"name":"p"}],"output":{"generics":["pagesetup","error"],"name":"result"}}],[11,"new_from_gvariant","","",213,{"inputs":[{"name":"variant"}],"output":{"name":"pagesetup"}}],[11,"new_from_key_file","","",213,{"inputs":[{"name":"keyfile"},{"name":"p"}],"output":{"generics":["pagesetup","error"],"name":"result"}}],[11,"default","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"paned"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",214,null],[11,"static_type","","",214,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Paned` widget. ## `orientation` the paned’s orientation.",214,{"inputs":[{"name":"orientation"}],"output":{"name":"paned"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"placessidebar"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",215,null],[11,"static_type","","",215,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PlacesSidebar` widget.",215,{"inputs":[],"output":{"name":"placessidebar"}}],[11,"default","","",215,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"plug"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",216,null],[11,"static_type","","",216,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",216,{"inputs":[{"name":"window"}],"output":{"name":"plug"}}],[11,"new_for_display","","",216,{"inputs":[{"name":"display"},{"name":"window"}],"output":{"name":"plug"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"popover"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",217,null],[11,"static_type","","",217,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new popover to point to `relative_to`",217,{"inputs":[{"name":"q"}],"output":{"name":"popover"}}],[11,"new_from_model","","Creates a `Popover` and populates it according to `model`. The popover is pointed to the `relative_to` widget.",217,{"inputs":[{"name":"q"},{"name":"r"}],"output":{"name":"popover"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"popovermenu"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",218,null],[11,"static_type","","",218,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new popover menu.",218,{"inputs":[],"output":{"name":"popovermenu"}}],[11,"default","","",218,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"printcontext"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",219,null],[11,"static_type","","",219,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"printoperation"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",220,null],[11,"static_type","","",220,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PrintOperation`.",220,{"inputs":[],"output":{"name":"printoperation"}}],[11,"default","","",220,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"printoperationpreview"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",221,null],[11,"static_type","","",221,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"printsettings"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",222,null],[11,"static_type","","",222,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PrintSettings` object.",222,{"inputs":[],"output":{"name":"printsettings"}}],[11,"new_from_file","","Reads the print settings from `file_name`. Returns a new `PrintSettings` object with the restored settings, or `None` if an error occurred. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. See `PrintSettingsExt::to_file`. ## `file_name` the filename to read the settings from",222,{"inputs":[{"name":"p"}],"output":{"generics":["printsettings","error"],"name":"result"}}],[11,"new_from_gvariant","","",222,{"inputs":[{"name":"variant"}],"output":{"name":"printsettings"}}],[11,"new_from_key_file","","",222,{"inputs":[{"name":"keyfile"},{"name":"p"}],"output":{"generics":["printsettings","error"],"name":"result"}}],[11,"default","","",222,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"progressbar"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",223,null],[11,"static_type","","",223,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ProgressBar`.",223,{"inputs":[],"output":{"name":"progressbar"}}],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"radiobutton"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",224,null],[11,"static_type","","",224,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_from_widget","","Creates a new `RadioButton`, adding it to the same group as `radio_group_member`. As with `RadioButton::new`, a widget should be packed into the radio button. ## `radio_group_member` an existing `RadioButton`.",224,{"inputs":[{"name":"radiobutton"}],"output":{"name":"radiobutton"}}],[11,"new_with_label_from_widget","","Creates a new `RadioButton` with a text label, adding it to the same group as `radio_group_member`. ## `radio_group_member` widget to get radio group from or `None` ## `label` a text string to display next to the radio button.",224,{"inputs":[{"name":"radiobutton"},{"name":"str"}],"output":{"name":"radiobutton"}}],[11,"new_with_mnemonic_from_widget","","Creates a new `RadioButton` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the button. ## `radio_group_member` widget to get radio group from or `None` ## `label` the text of the button, with an underscore in front of the  mnemonic character",224,{"inputs":[{"name":"radiobutton"},{"name":"str"}],"output":{"name":"radiobutton"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"radiomenuitem"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",225,null],[11,"static_type","","",225,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_from_widget","","Creates a new `RadioMenuItem` adding it to the same group as `group`. ## `group` An existing `RadioMenuItem`",225,{"inputs":[{"name":"radiomenuitem"}],"output":{"name":"radiomenuitem"}}],[11,"new_with_label_from_widget","","Creates a new `RadioMenuItem` whose child is a simple `Label`. The new `RadioMenuItem` is added to the same group as `group`. ## `group` an existing `RadioMenuItem` ## `label` the text for the label",225,{"inputs":[{"name":"radiomenuitem"},{"name":"p"}],"output":{"name":"radiomenuitem"}}],[11,"new_with_mnemonic_from_widget","","Creates a new `RadioMenuItem` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in label indicate the mnemonic for the menu item.",225,{"inputs":[{"name":"radiomenuitem"},{"name":"p"}],"output":{"name":"radiomenuitem"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"radiotoolbutton"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",226,null],[11,"static_type","","",226,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new_from_widget","","Creates a new `RadioToolButton` adding it to the same group as `gruup` ## `group` An existing `RadioToolButton`, or `None`",226,{"inputs":[{"name":"radiotoolbutton"}],"output":{"name":"radiotoolbutton"}}],[11,"new_with_stock_from_widget","","Creates a new `RadioToolButton` adding it to the same group as `group`. The new `RadioToolButton` will contain an icon and label from the stock item indicated by `stock_id`.",226,{"inputs":[{"name":"radiotoolbutton"},{"name":"str"}],"output":{"name":"radiotoolbutton"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",227,null],[11,"static_type","","",227,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"recentchooser"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",228,null],[11,"static_type","","",228,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"recentchooserdialog"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",229,null],[11,"static_type","","",229,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"recentchooserwidget"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",230,null],[11,"static_type","","",230,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `RecentChooserWidget` object. This is an embeddable widget used to access the recently used resources list.",230,{"inputs":[],"output":{"name":"recentchooserwidget"}}],[11,"new_for_manager","","Creates a new `RecentChooserWidget` with a specified recent manager.",230,{"inputs":[{"name":"recentmanager"}],"output":{"name":"recentchooserwidget"}}],[11,"default","","",230,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"recentfilter"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",231,null],[11,"static_type","","",231,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `RecentFilter` with no rules added to it. Such filter does not accept any recently used resources, so is not particularly useful until you add rules with `RecentFilterExt::add_pattern`, `RecentFilterExt::add_mime_type`, `RecentFilterExt::add_application`, `RecentFilterExt::add_age`. To create a filter that accepts any recently used resource, use:",231,{"inputs":[],"output":{"name":"recentfilter"}}],[11,"default","","",231,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"recentmanager"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",232,null],[11,"static_type","","",232,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new recent manager object. Recent manager objects are used to handle the list of recently used resources. A `RecentManager` object monitors the recently used resources list, and emits the “changed” signal each time something inside the list changes.",232,{"inputs":[],"output":{"name":"recentmanager"}}],[11,"get_default","","Gets a unique instance of `RecentManager`, that you can share in your application without caring about memory management.",232,{"inputs":[],"output":{"generics":["recentmanager"],"name":"option"}}],[11,"default","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"revealer"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",233,null],[11,"static_type","","",233,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Revealer`.",233,{"inputs":[],"output":{"name":"revealer"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",234,null],[11,"static_type","","",234,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Scale`. ## `orientation` the scale’s orientation. ## `adjustment` the `Adjustment` which sets the range  of the scale, or `None` to create a new adjustment.",234,{"inputs":[{"name":"orientation"},{"name":"p"}],"output":{"name":"scale"}}],[11,"new_with_range","","Creates a new scale widget with the given orientation that lets the user input a number between `min` and `max` (including `min` and `max`) with the increment `step`. `step` must be nonzero; it’s the distance the slider moves when using the arrow keys to adjust the scale value.",234,{"inputs":[{"name":"orientation"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"scale"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"scalebutton"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",235,null],[11,"static_type","","",235,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `ScaleButton`, with a range between `min` and `max`, with a stepping of `step`. ## `size` a stock icon size (`IconSize`) ## `min` the minimum value of the scale (usually 0) ## `max` the maximum value of the scale (usually 100) ## `step` the stepping of value when a scroll-wheel event,  or up/down arrow event occurs (usually 2) ## `icons` a `None`-terminated  array of icon names, or `None` if you want to set the list  later with `ScaleButtonExt::set_icons`",235,null],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"scrollable"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",236,null],[11,"static_type","","",236,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"scrollbar"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",237,null],[11,"static_type","","",237,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new scrollbar with the given orientation. ## `orientation` the scrollbar’s orientation. ## `adjustment` the `Adjustment` to use, or `None` to create a new adjustment.",237,{"inputs":[{"name":"orientation"},{"name":"p"}],"output":{"name":"scrollbar"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"scrolledwindow"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",238,null],[11,"static_type","","",238,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new scrolled window.",238,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"scrolledwindow"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"searchbar"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",239,null],[11,"static_type","","",239,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `SearchBar`. You will need to tell it about which widget is going to be your text entry using `SearchBarExt::connect_entry`.",239,{"inputs":[],"output":{"name":"searchbar"}}],[11,"default","","",239,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"searchentry"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",240,null],[11,"static_type","","",240,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `SearchEntry`, with a find icon when the search field is empty, and a clear icon when it isn't.",240,{"inputs":[],"output":{"name":"searchentry"}}],[11,"default","","",240,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"separator"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",241,null],[11,"static_type","","",241,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Separator` with the given orientation. ## `orientation` the separator’s orientation.",241,{"inputs":[{"name":"orientation"}],"output":{"name":"separator"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"separatormenuitem"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",242,null],[11,"static_type","","",242,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `SeparatorMenuItem`.",242,{"inputs":[],"output":{"name":"separatormenuitem"}}],[11,"default","","",242,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"separatortoolitem"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",243,null],[11,"static_type","","",243,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `SeparatorToolItem`",243,{"inputs":[],"output":{"name":"separatortoolitem"}}],[11,"default","","",243,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"settings"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",244,null],[11,"static_type","","",244,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_default","","Gets the `Settings` object for the default GDK screen, creating it if necessary. See `Settings::get_for_screen`.",244,{"inputs":[],"output":{"generics":["settings"],"name":"option"}}],[11,"get_for_screen","","Gets the `Settings` object for `screen`, creating it if necessary. ## `screen` a `gdk::Screen`.",244,{"inputs":[{"name":"screen"}],"output":{"generics":["settings"],"name":"option"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"shortcutswindow"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",245,null],[11,"static_type","","",245,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",245,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"sizegroup"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",246,null],[11,"static_type","","",246,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",246,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `SizeGroup`. ## `mode` the mode for the new size group.",246,{"inputs":[{"name":"sizegroupmode"}],"output":{"name":"sizegroup"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"spinbutton"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",247,null],[11,"static_type","","",247,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `SpinButton`. ## `adjustment` the `Adjustment` object that this spin  button should use, or `None` ## `climb_rate` specifies how much the spin button changes when an arrow  is clicked on ## `digits` the number of decimal places to display",247,{"inputs":[{"name":"p"},{"name":"f64"},{"name":"u32"}],"output":{"name":"spinbutton"}}],[11,"new_with_range","","This is a convenience constructor that allows creation of a numeric `SpinButton` without manually creating an adjustment. The value is initially set to the minimum value and a page increment of 10 * `step` is the default. The precision of the spin button is equivalent to the precision of `step`.",247,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"spinbutton"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"spinner"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",248,null],[11,"static_type","","",248,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a new spinner widget. Not yet started.",248,{"inputs":[],"output":{"name":"spinner"}}],[11,"default","","",248,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",249,null],[11,"static_type","","",249,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Stack` container.",249,{"inputs":[],"output":{"name":"stack"}}],[11,"default","","",249,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"stacksidebar"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",250,null],[11,"static_type","","",250,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",250,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new sidebar.",250,{"inputs":[],"output":{"name":"stacksidebar"}}],[11,"default","","",250,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"stackswitcher"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",251,null],[11,"static_type","","",251,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",251,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `StackSwitcher`.",251,{"inputs":[],"output":{"name":"stackswitcher"}}],[11,"default","","",251,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"statusicon"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",252,null],[11,"static_type","","",252,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty status icon object.",252,{"inputs":[],"output":{"name":"statusicon"}}],[11,"new_from_file","","Creates a status icon displaying the file `filename`.",252,{"inputs":[{"name":"p"}],"output":{"name":"statusicon"}}],[11,"new_from_gicon","","Creates a status icon displaying a `gio::Icon`. If the icon is a themed icon, it will be updated when the theme changes.",252,{"inputs":[{"name":"p"}],"output":{"name":"statusicon"}}],[11,"new_from_icon_name","","Creates a status icon displaying an icon from the current icon theme. If the current icon theme is changed, the icon will be updated appropriately.",252,{"inputs":[{"name":"str"}],"output":{"name":"statusicon"}}],[11,"new_from_pixbuf","","Creates a status icon displaying `pixbuf`.",252,{"inputs":[{"name":"pixbuf"}],"output":{"name":"statusicon"}}],[11,"new_from_stock","","Creates a status icon displaying a stock icon. Sample stock icon names are `GTK_STOCK_OPEN`, `GTK_STOCK_QUIT`. You can register your own stock icon names, see `IconFactoryExt::add_default` and `IconFactoryExt::add`.",252,{"inputs":[{"name":"str"}],"output":{"name":"statusicon"}}],[11,"position_menu","","Menu positioning function to use with `MenuExt::popup` to position `menu` aligned to the status icon `user_data`.",252,{"inputs":[{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"statusicon"}],"output":{"name":"bool"}}],[11,"default","","",252,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"statusbar"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",253,null],[11,"static_type","","",253,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Statusbar` ready for messages.",253,{"inputs":[],"output":{"name":"statusbar"}}],[11,"default","","",253,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"stylecontext"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",254,null],[11,"static_type","","",254,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",254,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a standalone `StyleContext`, this style context won’t be attached to any widget, so you may want to call `StyleContextExt::set_path` yourself.",254,{"inputs":[],"output":{"name":"stylecontext"}}],[11,"add_provider_for_screen","","Adds a global style provider to `screen`, which will be used in style construction for all `GtkStyleContexts` under `screen`.",254,{"inputs":[{"name":"screen"},{"name":"p"},{"name":"u32"}],"output":null}],[11,"remove_provider_for_screen","","Removes `provider` from the global style providers list in `screen`. ## `screen` a `gdk::Screen` ## `provider` a `StyleProvider`",254,{"inputs":[{"name":"screen"},{"name":"p"}],"output":null}],[11,"reset_widgets","","This function recomputes the styles for all widgets under a particular `gdk::Screen`. This is useful when some global parameter has changed that affects the appearance of all widgets, because when a widget gets a new style, it will both redraw and recompute any cached information about its appearance. As an example, it is used when the color scheme changes in the related `Settings` object. ## `screen` a `gdk::Screen`",254,{"inputs":[{"name":"screen"}],"output":null}],[11,"default","","",254,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"styleproperties"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",255,null],[11,"static_type","","",255,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a newly created `StyleProperties`",255,{"inputs":[],"output":{"name":"styleproperties"}}],[11,"default","","",255,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"styleprovider"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",256,null],[11,"static_type","","",256,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",256,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"switch"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",257,null],[11,"static_type","","",257,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",257,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Switch` widget.",257,{"inputs":[],"output":{"name":"switch"}}],[11,"default","","",257,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"textbuffer"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",258,null],[11,"static_type","","",258,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",258,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new text buffer. ## `table` a tag table, or `None` to create a new one",258,{"inputs":[{"name":"p"}],"output":{"name":"textbuffer"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"textchildanchor"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",259,null],[11,"static_type","","",259,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",259,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `TextChildAnchor`. Usually you would then insert it into a `TextBuffer` with `TextBufferExt::insert_child_anchor`. To perform the creation and insertion in one step, use the convenience function `TextBufferExt::create_child_anchor`.",259,{"inputs":[],"output":{"name":"textchildanchor"}}],[11,"default","","",259,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"textmark"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",260,null],[11,"static_type","","",260,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",260,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a text mark. Add it to a buffer using `TextBufferExt::add_mark`. If `name` is `None`, the mark is anonymous; otherwise, the mark can be retrieved by name using `TextBufferExt::get_mark`. If a mark has left gravity, and text is inserted at the mark’s current location, the mark will be moved to the left of the newly-inserted text. If the mark has right gravity (`left_gravity` = `false`), the mark will end up on the right of newly-inserted text. The standard left-to-right cursor is a mark with right gravity (when you type, the cursor stays on the right side of the text you’re typing). ## `name` mark name or `None` ## `left_gravity` whether the mark should have left gravity",260,{"inputs":[{"name":"p"},{"name":"bool"}],"output":{"name":"textmark"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"texttag"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",261,null],[11,"static_type","","",261,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `TextTag`. Configure the tag using object arguments, i.e. using `gobject::ObjectExt::set`. ## `name` tag name, or `None`",261,{"inputs":[{"name":"p"}],"output":{"name":"texttag"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"texttagtable"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",262,null],[11,"static_type","","",262,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `TextTagTable`. The table contains no tags by default.",262,{"inputs":[],"output":{"name":"texttagtable"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"textview"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",263,null],[11,"static_type","","",263,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `TextView`. If you don’t call `TextViewExt::set_buffer` before using the text view, an empty default buffer will be created for you. Get the buffer with `TextViewExt::get_buffer`. If you want to specify your own buffer, consider `TextView::new_with_buffer`.",263,{"inputs":[],"output":{"name":"textview"}}],[11,"new_with_buffer","","Creates a new `TextView` widget displaying the buffer `buffer`. One buffer can be shared among many widgets. `buffer` may be `None` to create a default buffer, in which case this function is equivalent to `TextView::new`. The text view adds its own reference count to the buffer; it does not take over an existing reference. ## `buffer` a `TextBuffer`",263,{"inputs":[{"name":"textbuffer"}],"output":{"name":"textview"}}],[11,"default","","",263,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"togglebutton"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",264,null],[11,"static_type","","",264,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new toggle button. A widget should be packed into the button, as in `Button::new`.",264,{"inputs":[],"output":{"name":"togglebutton"}}],[11,"new_with_label","","Creates a new toggle button with a text label. ## `label` a string containing the message to be placed in the toggle button.",264,{"inputs":[{"name":"str"}],"output":{"name":"togglebutton"}}],[11,"new_with_mnemonic","","Creates a new `ToggleButton` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the button. ## `label` the text of the button, with an underscore in front of the  mnemonic character",264,{"inputs":[{"name":"str"}],"output":{"name":"togglebutton"}}],[11,"default","","",264,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"toggletoolbutton"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",265,null],[11,"static_type","","",265,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Returns a new `ToggleToolButton`",265,{"inputs":[],"output":{"name":"toggletoolbutton"}}],[11,"new_from_stock","","Creates a new `ToggleToolButton` containing the image and text from a stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK` and `GTK_STOCK_APPLY`.",265,{"inputs":[{"name":"str"}],"output":{"name":"toggletoolbutton"}}],[11,"default","","",265,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"toolbutton"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",266,null],[11,"static_type","","",266,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ToolButton` using `icon_widget` as contents and `label` as label. ## `icon_widget` a widget that will be used as the button contents, or `None` ## `label` a string that will be used as label, or `None`",266,{"inputs":[{"name":"q"},{"name":"r"}],"output":{"name":"toolbutton"}}],[11,"new_from_stock","","Creates a new `ToolButton` containing the image and text from a stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK` and `GTK_STOCK_APPLY`.",266,{"inputs":[{"name":"str"}],"output":{"name":"toolbutton"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"toolitem"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",267,null],[11,"static_type","","",267,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ToolItem`",267,{"inputs":[],"output":{"name":"toolitem"}}],[11,"default","","",267,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"toolitemgroup"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",268,null],[11,"static_type","","",268,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",268,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new tool item group with label `label`. ## `label` the label of the new group",268,{"inputs":[{"name":"str"}],"output":{"name":"toolitemgroup"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"toolpalette"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",269,null],[11,"static_type","","",269,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",269,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new tool palette.",269,{"inputs":[],"output":{"name":"toolpalette"}}],[11,"get_drag_target_group","","Get the target entry for a dragged `ToolItemGroup`.",269,{"inputs":[],"output":{"generics":["targetentry"],"name":"option"}}],[11,"get_drag_target_item","","Gets the target entry for a dragged `ToolItem`.",269,{"inputs":[],"output":{"generics":["targetentry"],"name":"option"}}],[11,"default","","",269,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"toolshell"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",270,null],[11,"static_type","","",270,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"toolbar"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",271,null],[11,"static_type","","",271,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new toolbar.",271,{"inputs":[],"output":{"name":"toolbar"}}],[11,"default","","",271,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"tooltip"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",272,null],[11,"static_type","","",272,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"trigger_tooltip_query","","Triggers a new tooltip query on `display`, in order to update the current visible tooltip, or to show/hide the current tooltip. This function is useful to call when, for example, the state of the widget changed by a key press. ## `display` a `gdk::Display`",272,{"inputs":[{"name":"display"}],"output":null}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"treemodel"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",273,null],[11,"static_type","","",273,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"treemodelfilter"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",274,null],[11,"static_type","","",274,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"treeselection"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",275,null],[11,"static_type","","",275,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",275,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"treesortable"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",276,null],[11,"static_type","","",276,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"treestore"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",277,null],[11,"static_type","","",277,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",277,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"treeview"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",278,null],[11,"static_type","","",278,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",278,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `TreeView` widget.",278,{"inputs":[],"output":{"name":"treeview"}}],[11,"new_with_model","","Creates a new `TreeView` widget with the model initialized to `model`. ## `model` the model.",278,{"inputs":[{"name":"p"}],"output":{"name":"treeview"}}],[11,"default","","",278,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"treeviewcolumn"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",279,null],[11,"static_type","","",279,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",279,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `TreeViewColumn`.",279,{"inputs":[],"output":{"name":"treeviewcolumn"}}],[11,"new_with_area","","Creates a new `TreeViewColumn` using `area` to render its cells. ## `area` the `CellArea` that the newly created column should use to layout cells.",279,{"inputs":[{"name":"p"}],"output":{"name":"treeviewcolumn"}}],[11,"default","","",279,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",280,null],[11,"static_type","","",280,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",280,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Viewport` with the given adjustments, or with default adjustments if none are given. ## `hadjustment` horizontal adjustment ## `vadjustment` vertical adjustment",280,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"viewport"}}],[11,"clone","","",281,{"inputs":[{"name":"self"}],"output":{"name":"volumebutton"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",281,null],[11,"static_type","","",281,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",281,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a `VolumeButton`, with a range between 0.0 and 1.0, with a stepping of 0.02. Volume values can be obtained and modified using the functions from `ScaleButton`.",281,{"inputs":[],"output":{"name":"volumebutton"}}],[11,"default","","",281,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",282,null],[11,"static_type","","",282,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_default_direction","","Obtains the current default reading direction. See `Widget::set_default_direction`.",282,{"inputs":[],"output":{"name":"textdirection"}}],[11,"pop_composite_child","","Cancels the effect of a previous call to `Widget::push_composite_child`.",282,{"inputs":[],"output":null}],[11,"push_composite_child","","Makes all newly-created widgets as composite children until the corresponding `Widget::pop_composite_child` call.",282,{"inputs":[],"output":null}],[11,"set_default_direction","","Sets the default reading direction for widgets where the direction has not been explicitly set by `WidgetExt::set_direction`. ## `dir` the new default direction. This cannot be  `TextDirection::None`.",282,{"inputs":[{"name":"textdirection"}],"output":null}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",283,null],[11,"static_type","","",283,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",283,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Window`, which is a toplevel window that can contain other widgets. Nearly always, the type of the window should be `WindowType::Toplevel`. If you’re implementing something like a popup menu from scratch (which is a bad idea, just use `Menu`), you might use `WindowType::Popup`. `WindowType::Popup` is not for dialogs, though in some other toolkits dialogs are called “popups”. In GTK+, `WindowType::Popup` means a pop-up menu or pop-up tooltip. On X11, popup windows are not controlled by the [window manager][gtk-X11-arch].",283,{"inputs":[{"name":"windowtype"}],"output":{"name":"window"}}],[11,"get_default_icon_list","","Gets the value set by `Window::set_default_icon_list`. The list is a copy and should be freed with `glib::List::free`, but the pixbufs in the list have not had their reference count incremented.",283,{"inputs":[],"output":{"generics":["pixbuf"],"name":"vec"}}],[11,"get_default_icon_name","","Returns the fallback icon name for windows that has been set with `Window::set_default_icon_name`. The returned string is owned by GTK+ and should not be modified. It is only valid until the next call to `Window::set_default_icon_name`.",283,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[11,"list_toplevels","","Returns a list of all existing toplevel windows. The widgets in the list are not individually referenced. If you want to iterate through the list and perform actions involving callbacks that might destroy the widgets, you must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)` first, and then unref all the widgets afterwards.",283,{"inputs":[],"output":{"generics":["widget"],"name":"vec"}}],[11,"set_auto_startup_notification","","By default, after showing the first `Window`, GTK+ calls `gdk_notify_startup_complete`. Call this function to disable the automatic startup notification. You might do this if your first window is a splash screen, and you want to delay notification until after your real main window has been shown, for example.",283,{"inputs":[{"name":"bool"}],"output":null}],[11,"set_default_icon","","Sets an icon to be used as fallback for windows that haven't had `GtkWindowExt::set_icon` called on them from a pixbuf. ## `icon` the icon",283,{"inputs":[{"name":"pixbuf"}],"output":null}],[11,"set_default_icon_from_file","","Sets an icon to be used as fallback for windows that haven't had `GtkWindowExt::set_icon_list` called on them from a file on disk. Warns on failure if `err` is `None`. ## `filename` location of icon file",283,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_default_icon_list","","",283,null],[11,"set_default_icon_name","","",283,{"inputs":[{"name":"str"}],"output":null}],[11,"set_interactive_debugging","","",283,{"inputs":[{"name":"bool"}],"output":null}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"windowgroup"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",284,null],[11,"static_type","","",284,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",284,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `WindowGroup` object. Grabs added with `WidgetExt::grab_add` only affect windows within the same `WindowGroup`.",284,{"inputs":[],"output":{"name":"windowgroup"}}],[11,"default","","",284,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"csssection"}}],[11,"static_type","","",285,{"inputs":[],"output":{"name":"type"}}],[11,"get_end_line","","Returns the line in the CSS document where this section end. The line number is 0-indexed, so the first line of the document will return 0. This value may change in future invocations of this function if `self` is not yet parsed completely. This will for example happen in the `CssProvider`::parsing-error signal. The end position and line may be identical to the start position and line for sections which failed to parse anything successfully.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_end_position","","Returns the offset in bytes from the start of the current line returned via `CssSection::get_end_line`. This value may change in future invocations of this function if `self` is not yet parsed completely. This will for example happen in the `CssProvider`::parsing-error signal. The end position and line may be identical to the start position and line for sections which failed to parse anything successfully.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_file","","Gets the file that `self` was parsed from. If no such file exists, for example because the CSS was loaded via `CssProviderExt::load_from_data`(), then `None` is returned.",285,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[11,"get_parent","","Gets the parent section for the given `self`. The parent section is the section that contains this `self`. A special case are sections of type `CssSectionType::Document`. Their parent will either be `None` if they are the original CSS document that was loaded by `CssProviderExt::load_from_file` or a section of type `CssSectionType::Import` if it was loaded with an import rule from a different file.",285,{"inputs":[{"name":"self"}],"output":{"generics":["csssection"],"name":"option"}}],[11,"get_section_type","","Gets the type of information that `self` describes.",285,{"inputs":[{"name":"self"}],"output":{"name":"csssectiontype"}}],[11,"get_start_line","","Returns the line in the CSS document where this section starts. The line number is 0-indexed, so the first line of the document will return 0.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_start_position","","Returns the offset in bytes from the start of the current line returned via `CssSection::get_start_line`.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"iconset"}}],[11,"static_type","","",286,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `IconSet`. A `IconSet` represents a single icon in various sizes and widget states. It can provide a `gdk_pixbuf::Pixbuf` for a given size and state on request, and automatically caches some of the rendered `gdk_pixbuf::Pixbuf` objects.",286,{"inputs":[],"output":{"name":"iconset"}}],[11,"new_from_pixbuf","","Creates a new `IconSet` with `pixbuf` as the default/fallback source image. If you don’t add any additional `IconSource` to the icon set, all variants of the icon will be created from `pixbuf`, using scaling, pixelation, etc. as required to adjust the icon size or make the icon look insensitive/prelighted.",286,{"inputs":[{"name":"pixbuf"}],"output":{"name":"iconset"}}],[11,"add_source","","Icon sets have a list of `IconSource`, which they use as base icons for rendering icons in different states and sizes. Icons are scaled, made to look insensitive, etc. in `IconSet::render_icon`, but `IconSet` needs base images to work with. The base images and when to use them are described by a `IconSource`.",286,{"inputs":[{"name":"self"},{"name":"iconsource"}],"output":null}],[11,"copy","","Copies `self` by value.",286,{"inputs":[{"name":"self"}],"output":{"generics":["iconset"],"name":"option"}}],[11,"get_sizes","","Obtains a list of icon sizes this icon set can render. The returned array must be freed with `g_free`.",286,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"render_icon_pixbuf","","Renders an icon using `gtk_render_icon_pixbuf`. In most cases, `WidgetExt::render_icon_pixbuf` is better, since it automatically provides most of the arguments from the current widget settings. This function never returns `None`; if the icon can’t be rendered (perhaps because an image file fails to load), a default \"missing image\" icon will be returned instead.",286,{"inputs":[{"name":"self"},{"name":"stylecontext"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"render_icon_surface","","Renders an icon using `gtk_render_icon_pixbuf` and converts it to a cairo surface.",286,{"inputs":[{"name":"self"},{"name":"stylecontext"},{"name":"i32"},{"name":"i32"},{"name":"p"}],"output":{"generics":["surface"],"name":"option"}}],[11,"default","","",286,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"iconsource"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",287,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `IconSource`. A `IconSource` contains a `gdk_pixbuf::Pixbuf` (or image filename) that serves as the base image for one or more of the icons in a `IconSet`, along with a specification for which icons in the icon set will be based on that pixbuf or image file. An icon set contains a set of icons that represent “the same” logical concept in different states, different global text directions, and different sizes.",287,{"inputs":[],"output":{"name":"iconsource"}}],[11,"get_direction","","Obtains the text direction this icon source applies to. The return value is only useful/meaningful if the text direction is not wildcarded.",287,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[11,"get_direction_wildcarded","","Gets the value set by `IconSource::set_direction_wildcarded`.",287,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_filename","","Retrieves the source filename, or `None` if none is set. The filename is not a copy, and should not be modified or expected to persist beyond the lifetime of the icon source.",287,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"get_icon_name","","Retrieves the source icon name, or `None` if none is set. The icon_name is not a copy, and should not be modified or expected to persist beyond the lifetime of the icon source.",287,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_pixbuf","","Retrieves the source pixbuf, or `None` if none is set. In addition, if a filename source is in use, this function in some cases will return the pixbuf from loaded from the filename. This is, for example, true for the `IconSource` passed to the `Style` `render_icon` virtual function. The reference count on the pixbuf is not incremented.",287,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"get_size","","Obtains the icon size this source applies to. The return value is only useful/meaningful if the icon size is not wildcarded.",287,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_size_wildcarded","","Gets the value set by `IconSource::set_size_wildcarded`.",287,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_state","","Obtains the widget state this icon source applies to. The return value is only useful/meaningful if the widget state is not wildcarded.",287,{"inputs":[{"name":"self"}],"output":{"name":"statetype"}}],[11,"get_state_wildcarded","","Gets the value set by `IconSource::set_state_wildcarded`.",287,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_direction","","Sets the text direction this icon source is intended to be used with.",287,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[11,"set_direction_wildcarded","","If the text direction is wildcarded, this source can be used as the base image for an icon in any `TextDirection`. If the text direction is not wildcarded, then the text direction the icon source applies to should be set with `IconSource::set_direction`, and the icon source will only be used with that text direction.",287,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_filename","","Sets the name of an image file to use as a base image when creating icon variants for `IconSet`. The filename must be absolute.",287,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"set_icon_name","","Sets the name of an icon to look up in the current icon theme to use as a base image when creating icon variants for `IconSet`.",287,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"set_pixbuf","","Sets a pixbuf to use as a base image when creating icon variants for `IconSet`.",287,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[11,"set_size","","Sets the icon size this icon source is intended to be used with.",287,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_size_wildcarded","","If the icon size is wildcarded, this source can be used as the base image for an icon of any size. If the size is not wildcarded, then the size the source applies to should be set with `IconSource::set_size` and the icon source will only be used with that specific size.",287,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_state","","Sets the widget state this icon source is intended to be used with.",287,{"inputs":[{"name":"self"},{"name":"statetype"}],"output":null}],[11,"set_state_wildcarded","","If the widget state is wildcarded, this source can be used as the base image for an icon in any `StateType`. If the widget state is not wildcarded, then the state the source applies to should be set with `IconSource::set_state` and the icon source will only be used with that specific state.",287,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"default","","",287,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"papersize"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",288,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `PaperSize` object by parsing a PWG 5101.1-2002 paper name.",288,{"inputs":[{"name":"p"}],"output":{"name":"papersize"}}],[11,"new_custom","","Creates a new `PaperSize` object with the given parameters. ## `name` the paper name ## `display_name` the human-readable name ## `width` the paper width, in units of `unit` ## `height` the paper height, in units of `unit` ## `unit` the unit for `width` and `height`. not `Unit::None`.",288,{"inputs":[{"name":"str"},{"name":"str"},{"name":"f64"},{"name":"f64"},{"name":"unit"}],"output":{"name":"papersize"}}],[11,"new_from_gvariant","","Deserialize a paper size from an a{sv} variant in the format produced by `PaperSize::to_gvariant`.",288,{"inputs":[{"name":"variant"}],"output":{"name":"papersize"}}],[11,"new_from_ipp","","Creates a new `PaperSize` object by using IPP information.",288,{"inputs":[{"name":"str"},{"name":"f64"},{"name":"f64"}],"output":{"name":"papersize"}}],[11,"new_from_key_file","","Reads a paper size from the group `group_name` in the key file `key_file`. ## `key_file` the `glib::KeyFile` to retrieve the papersize from ## `group_name` the name ofthe group in the key file to read,  or `None` to read the first group",288,{"inputs":[{"name":"keyfile"},{"name":"str"}],"output":{"generics":["papersize","error"],"name":"result"}}],[11,"new_from_ppd","","",288,{"inputs":[{"name":"str"},{"name":"str"},{"name":"f64"},{"name":"f64"}],"output":{"name":"papersize"}}],[11,"get_default_bottom_margin","","",288,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[11,"get_default_left_margin","","",288,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[11,"get_default_right_margin","","",288,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[11,"get_default_top_margin","","",288,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[11,"get_display_name","","",288,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_height","","",288,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[11,"get_name","","",288,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_ppd_name","","",288,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_width","","",288,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[11,"is_custom","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipp","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_size","","",288,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"unit"}],"output":null}],[11,"to_gvariant","","",288,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[11,"to_key_file","","",288,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"str"}],"output":null}],[11,"get_default","","",288,{"inputs":[],"output":{"generics":["string"],"name":"option"}}],[11,"get_paper_sizes","","",288,{"inputs":[{"name":"bool"}],"output":{"generics":["papersize"],"name":"vec"}}],[11,"eq","","",288,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",289,{"inputs":[{"name":"self"}],"output":{"name":"recentinfo"}}],[11,"static_type","","",289,{"inputs":[],"output":{"name":"type"}}],[11,"create_app_info","","Creates a `gio::AppInfo` for the specified `RecentInfo` ## `app_name` the name of the application that should  be mapped to a `gio::AppInfo`; if `None` is used then the default  application for the MIME type is used",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"exists","","Checks whether the resource pointed by `self` still exists. At the moment this check is done only on resources pointing to local files.",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_added","","Gets the timestamp (seconds from system’s Epoch) when the resource was added to the recently used resources list.",289,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"get_age","","Gets the number of days elapsed since the last update of the resource pointed by `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_application_info","","Gets the data regarding the application that has registered the resource pointed by `self`.",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_applications","","Retrieves the list of applications that have registered this resource. ## `length` return location for the length of the returned list",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_description","","Gets the (short) description of the resource.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_display_name","","Gets the name of the resource. If none has been defined, the basename of the resource is obtained.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_gicon","","Retrieves the icon associated to the resource MIME type.",289,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[11,"get_groups","","Returns all groups registered for the recently used item `self`. The array of returned group names will be `None` terminated, so length might optionally be `None`. ## `length` return location for the number of groups returned",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_icon","","Retrieves the icon of size `size` associated to the resource MIME type. ## `size` the size of the icon in pixels",289,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"get_mime_type","","Gets the MIME type of the resource.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_modified","","Gets the timestamp (seconds from system’s Epoch) when the meta-data for the resource was last modified.",289,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"get_private_hint","","Gets the value of the “private” flag. Resources in the recently used list that have this flag set to `true` should only be displayed by the applications that have registered them.",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_short_name","","Computes a valid UTF-8 string that can be used as the name of the item in a menu or list. For example, calling this function on an item that refers to “file:///foo/bar.txt” will yield “bar.txt”.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_uri","","Gets the URI of the resource.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_uri_display","","Gets a displayable version of the resource’s URI. If the resource is local, it returns a local path; if the resource is not local, it returns the UTF-8 encoded content of `RecentInfo::get_uri`.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_visited","","Gets the timestamp (seconds from system’s Epoch) when the meta-data for the resource was last visited.",289,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"has_application","","Checks whether an application registered this resource using `app_name`. ## `app_name` a string containing an application name",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"has_group","","Checks whether `group_name` appears inside the groups registered for the recently used item `self`. ## `group_name` name of a group",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_local","","Checks whether the resource is local or not by looking at the scheme of its URI.",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"last_application","","Gets the name of the last application that have registered the recently used resource represented by `self`.",289,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"match_","","",289,{"inputs":[{"name":"self"},{"name":"recentinfo"}],"output":{"name":"bool"}}],[11,"clone","","",290,{"inputs":[{"name":"self"}],"output":{"name":"selectiondata"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",290,{"inputs":[],"output":{"name":"type"}}],[11,"get_data_type","","Retrieves the data type of the selection.",290,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_data_with_length","","Retrieves the raw data of the selection along with its length. ## `length` return location for length of the data segment",290,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_display","","Retrieves the display of the selection.",290,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[11,"get_format","","Retrieves the format of the selection.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_length","","Retrieves the length of the raw data of the selection.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_pixbuf","","Gets the contents of the selection data as a `gdk_pixbuf::Pixbuf`.",290,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"get_selection","","Retrieves the selection `gdk::Atom` of the selection data.",290,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_target","","Retrieves the target of the selection.",290,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"get_targets","","Gets the contents of `self` as an array of targets. This can be used to interpret the results of getting the standard TARGETS target that is always supplied for any selection. ## `targets`",290,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_text","","Gets the contents of the selection data as a UTF-8 string.",290,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_uris","","Gets the contents of the selection data as array of URIs.",290,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"set","","Stores new data into a `SelectionData` object. Should only be called from a selection handler callback. Zero-terminates the stored data. ## `type_` the type of selection data ## `format` format (number of bits in a unit) ## `data` pointer to the data (will be copied) ## `length` length of the data",290,null],[11,"set_pixbuf","","Sets the contents of the selection from a `gdk_pixbuf::Pixbuf` The pixbuf is converted to the form determined by `self`->target. ## `pixbuf` a `gdk_pixbuf::Pixbuf`",290,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":{"name":"bool"}}],[11,"set_text","","Sets the contents of the selection from a UTF-8 encoded string. The string is converted to the form determined by `self`->target. ## `str` a UTF-8 string ## `len` the length of `str`, or -1 if `str` is nul-terminated.",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"set_uris","","Sets the contents of the selection from a list of URIs. The string is converted to the form determined by `self`->target. ## `uris` a `None`-terminated array of  strings holding URIs",290,null],[11,"targets_include_image","","Given a `SelectionData` object holding a list of targets, determines if any of the targets in `targets` can be used to provide a `gdk_pixbuf::Pixbuf`. ## `writable` whether to accept only targets for which GTK+ knows  how to convert a pixbuf into the format",290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"targets_include_rich_text","","Given a `SelectionData` object holding a list of targets, determines if any of the targets in `targets` can be used to provide rich text. ## `buffer` a `TextBuffer`",290,{"inputs":[{"name":"self"},{"name":"textbuffer"}],"output":{"name":"bool"}}],[11,"targets_include_text","","Given a `SelectionData` object holding a list of targets, determines if any of the targets in `targets` can be used to provide text.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"targets_include_uri","","Given a `SelectionData` object holding a list of targets, determines if any of the targets in `targets` can be used to provide a list or URIs.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",291,{"inputs":[{"name":"self"}],"output":{"name":"symboliccolor"}}],[11,"static_type","","",291,{"inputs":[],"output":{"name":"type"}}],[11,"new_alpha","","Creates a symbolic color by modifying the relative alpha value of `color`. A factor < 1.0 would resolve to a more transparent color, while > 1.0 would resolve to a more opaque color.",291,{"inputs":[{"name":"symboliccolor"},{"name":"f64"}],"output":{"name":"symboliccolor"}}],[11,"new_literal","","Creates a symbolic color pointing to a literal color.",291,{"inputs":[{"name":"rgba"}],"output":{"name":"symboliccolor"}}],[11,"new_mix","","Creates a symbolic color defined as a mix of another two colors. a mix factor of 0 would resolve to `color1`, while a factor of 1 would resolve to `color2`.",291,{"inputs":[{"name":"symboliccolor"},{"name":"symboliccolor"},{"name":"f64"}],"output":{"name":"symboliccolor"}}],[11,"new_name","","Creates a symbolic color pointing to an unresolved named color. See `StyleContextExt::lookup_color` and `StylePropertiesExt::lookup_color`.",291,{"inputs":[{"name":"str"}],"output":{"name":"symboliccolor"}}],[11,"new_shade","","Creates a symbolic color defined as a shade of another color. A factor > 1.0 would resolve to a brighter color, while < 1.0 would resolve to a darker color.",291,{"inputs":[{"name":"symboliccolor"},{"name":"f64"}],"output":{"name":"symboliccolor"}}],[11,"new_win32","","Creates a symbolic color based on the current win32 theme.",291,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"name":"symboliccolor"}}],[11,"resolve","","If `self` is resolvable, `resolved_color` will be filled in with the resolved color, and `true` will be returned. Generally, if `self` can’t be resolved, it is due to it being defined on top of a named color that doesn’t exist in `props`.",291,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["rgba"],"name":"option"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"targetlist"}}],[11,"static_type","","",292,{"inputs":[],"output":{"name":"type"}}],[11,"add","","Appends another target to a `TargetList`. ## `target` the interned atom representing the target ## `flags` the flags for this target ## `info` an ID that will be passed back to the application",292,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"add_image_targets","","Appends the image targets supported by `SelectionData` to the target list. All targets are added with the same `info`. ## `info` an ID that will be passed back to the application ## `writable` whether to add only targets for which GTK+ knows  how to convert a pixbuf into the format",292,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"add_rich_text_targets","","Appends the rich text targets registered with `TextBufferExt::register_serialize_format` or `TextBufferExt::register_deserialize_format` to the target list. All targets are added with the same `info`. ## `info` an ID that will be passed back to the application ## `deserializable` if `true`, then deserializable rich text formats  will be added, serializable formats otherwise. ## `buffer` a `TextBuffer`.",292,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"},{"name":"textbuffer"}],"output":null}],[11,"add_text_targets","","Appends the text targets supported by `SelectionData` to the target list. All targets are added with the same `info`. ## `info` an ID that will be passed back to the application",292,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_uri_targets","","Appends the URI targets supported by `SelectionData` to the target list. All targets are added with the same `info`. ## `info` an ID that will be passed back to the application",292,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"find","","Looks up a given target in a `TargetList`. ## `target` an interned atom representing the target to search for ## `info` a pointer to the location to store  application info for target, or `None`",292,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"generics":["u32"],"name":"option"}}],[11,"remove","","Removes a target from a target list. ## `target` the interned atom representing the target",292,{"inputs":[{"name":"self"},{"name":"atom"}],"output":null}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"textattributes"}}],[11,"static_type","","",293,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a `TextAttributes`, which describes a set of properties on some text.",293,{"inputs":[],"output":{"name":"textattributes"}}],[11,"copy","","Copies `self` and returns a new `TextAttributes`.",293,{"inputs":[{"name":"self"}],"output":{"generics":["textattributes"],"name":"option"}}],[11,"copy_values","","Copies the values from `self` to `dest` so that `dest` has the same values as `self`. Frees existing values in `dest`. ## `dest` another `TextAttributes`",293,{"inputs":[{"name":"self"},{"name":"textattributes"}],"output":null}],[11,"default","","",293,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"textiter"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",294,{"inputs":[],"output":{"name":"type"}}],[11,"assign","","Assigns the value of `other` to `self`. This function is not useful in applications, because iterators can be assigned with `GtkTextIter i = j;`. The function is used by language bindings. ## `other` another `TextIter`",294,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":null}],[11,"backward_char","","Moves backward by one character offset. Returns `true` if movement was possible; if `self` was the first in the buffer (character offset 0), `TextIter::backward_char` returns `false` for convenience when writing loops.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_chars","","Moves `count` characters backward, if possible (if `count` would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn’t move, or moved onto the end iterator, then `false` is returned. If `count` is 0, the function does nothing and returns `false`. ## `count` number of characters to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_cursor_position","","Like `TextIter::forward_cursor_position`, but moves backward.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_cursor_positions","","Moves up to `count` cursor positions. See `TextIter::forward_cursor_position` for details. ## `count` number of positions to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_line","","Moves `self` to the start of the previous line. Returns `true` if `self` could be moved; i.e. if `self` was at character offset 0, this function returns `false`. Therefore if `self` was already on line 0, but not at the start of the line, `self` is snapped to the start of the line and the function returns `true`. (Note that this implies that in a loop calling this function, the line number may not change on every iteration, if your first iteration is on line 0.)",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_lines","","Moves `count` lines backward, if possible (if `count` would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn’t move, or moved onto the end iterator, then `false` is returned. If `count` is 0, the function does nothing and returns `false`. If `count` is negative, moves forward by 0 - `count` lines. ## `count` number of lines to move backward",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_search","","Same as `TextIter::forward_search`, but moves backward.",294,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textsearchflags"},{"name":"p"}],"output":{"name":"option"}}],[11,"backward_sentence_start","","Moves backward to the previous sentence start; if `self` is already at the start of a sentence, moves backward to the next one. Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_sentence_starts","","Calls `TextIter::backward_sentence_start` up to `count` times, or until it returns `false`. If `count` is negative, moves forward instead of backward. ## `count` number of sentences to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_to_tag_toggle","","Moves backward to the next toggle (on or off) of the `TextTag` `tag`, or to the next toggle of any tag if `tag` is `None`. If no matching tag toggles are found, returns `false`, otherwise `true`. Does not return toggles located at `self`, only toggles before `self`. Sets `self` to the location of the toggle, or the start of the buffer if no toggle is found. ## `tag` a `TextTag`, or `None`",294,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"backward_visible_cursor_position","","Moves `self` forward to the previous visible cursor position. See `TextIter::backward_cursor_position` for details.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_visible_cursor_positions","","Moves up to `count` visible cursor positions. See `TextIter::backward_cursor_position` for details. ## `count` number of positions to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_visible_line","","Moves `self` to the start of the previous visible line. Returns `true` if `self` could be moved; i.e. if `self` was at character offset 0, this function returns `false`. Therefore if `self` was already on line 0, but not at the start of the line, `self` is snapped to the start of the line and the function returns `true`. (Note that this implies that in a loop calling this function, the line number may not change on every iteration, if your first iteration is on line 0.)",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_visible_lines","","Moves `count` visible lines backward, if possible (if `count` would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn’t move, or moved onto the end iterator, then `false` is returned. If `count` is 0, the function does nothing and returns `false`. If `count` is negative, moves forward by 0 - `count` lines. ## `count` number of lines to move backward",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_visible_word_start","","Moves backward to the previous visible word start. (If `self` is currently on a word start, moves backward to the next one after that.) Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_visible_word_starts","","Calls `TextIter::backward_visible_word_start` up to `count` times. ## `count` number of times to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"backward_word_start","","Moves backward to the previous word start. (If `self` is currently on a word start, moves backward to the next one after that.) Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"backward_word_starts","","Calls `TextIter::backward_word_start` up to `count` times. ## `count` number of times to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"begins_tag","","Returns `true` if `tag` is toggled on at exactly this point. If `tag` is `None`, returns `true` if any tag is toggled on at this point.",294,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"can_insert","","Considering the default editability of the buffer, and tags that affect editability, determines whether text inserted at `self` would be editable. If text inserted at `self` would be editable then the user should be allowed to insert text at `self`. `TextBufferExt::insert_interactive` uses this function to decide whether insertions are allowed at a given position. ## `default_editability` `true` if text is editable by default",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"editable","","Returns whether the character at `self` is within an editable region of text. Non-editable text is “locked” and can’t be changed by the user via `TextView`. This function is simply a convenience wrapper around `TextIter::get_attributes`. If no tags applied to this text affect editability, `default_setting` will be returned.",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ends_line","","Returns `true` if `self` points to the start of the paragraph delimiter characters for a line (delimiters will be either a newline, a carriage return, a carriage return followed by a newline, or a Unicode paragraph separator character). Note that an iterator pointing to the \\n of a \\r\\n pair will not be counted as the end of a line, the line ends before the \\r. The end iterator is considered to be at the end of a line, even though there are no paragraph delimiter chars there.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ends_sentence","","Determines whether `self` ends a sentence. Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ends_tag","","Returns `true` if `tag` is toggled off at exactly this point. If `tag` is `None`, returns `true` if any tag is toggled off at this point.",294,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_word","","Determines whether `self` ends a natural-language word. Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_char","","Moves `self` forward by one character offset. Note that images embedded in the buffer occupy 1 character slot, so `TextIter::forward_char` may actually move onto an image instead of a character, if you have images in your buffer. If `self` is the end iterator or one character before it, `self` will now point at the end iterator, and `TextIter::forward_char` returns `false` for convenience when writing loops.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_chars","","Moves `count` characters if possible (if `count` would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the new position of `self` is different from its original position, and dereferenceable (the last iterator in the buffer is not dereferenceable). If `count` is 0, the function does nothing and returns `false`. ## `count` number of characters to move, may be negative",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_cursor_position","","Moves `self` forward by a single cursor position. Cursor positions are (unsurprisingly) positions where the cursor can appear. Perhaps surprisingly, there may not be a cursor position between all characters. The most common example for European languages would be a carriage return/newline sequence. For some Unicode characters, the equivalent of say the letter “a” with an accent mark will be represented as two characters, first the letter then a \"combining mark\" that causes the accent to be rendered; so the cursor can’t go between those two characters. See also the `pango::LogAttr`-struct and `pango_break` function.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_cursor_positions","","Moves up to `count` cursor positions. See `TextIter::forward_cursor_position` for details. ## `count` number of positions to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_line","","Moves `self` to the start of the next line. If the iter is already on the last line of the buffer, moves the iter to the end of the current line. If after the operation, the iter is at the end of the buffer and not dereferencable, returns `false`. Otherwise, returns `true`.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_lines","","Moves `count` lines forward, if possible (if `count` would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn’t move, or moved onto the end iterator, then `false` is returned. If `count` is 0, the function does nothing and returns `false`. If `count` is negative, moves backward by 0 - `count` lines. ## `count` number of lines to move forward",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_search","","Searches forward for `str`. Any match is returned by setting `match_start` to the first character of the match and `match_end` to the first character after the match. The search will not continue past `limit`. Note that a search is a linear or O(n) operation, so you may wish to use `limit` to avoid locking up your UI on large buffers.",294,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textsearchflags"},{"name":"p"}],"output":{"name":"option"}}],[11,"forward_sentence_end","","Moves forward to the next sentence end. (If `self` is at the end of a sentence, moves to the next end of sentence.) Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_sentence_ends","","Calls `TextIter::forward_sentence_end` `count` times (or until `TextIter::forward_sentence_end` returns `false`). If `count` is negative, moves backward instead of forward. ## `count` number of sentences to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_to_end","","Moves `self` forward to the “end iterator,” which points one past the last valid character in the buffer. `TextIter::get_char` called on the end iterator returns 0, which is convenient for writing loops.",294,{"inputs":[{"name":"self"}],"output":null}],[11,"forward_to_line_end","","Moves the iterator to point to the paragraph delimiter characters, which will be either a newline, a carriage return, a carriage return/newline in sequence, or the Unicode paragraph separator character. If the iterator is already at the paragraph delimiter characters, moves to the paragraph delimiter characters for the next line. If `self` is on the last line in the buffer, which does not end in paragraph delimiters, moves to the end iterator (end of the last line), and returns `false`.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_to_tag_toggle","","Moves forward to the next toggle (on or off) of the `TextTag` `tag`, or to the next toggle of any tag if `tag` is `None`. If no matching tag toggles are found, returns `false`, otherwise `true`. Does not return toggles located at `self`, only toggles after `self`. Sets `self` to the location of the toggle, or to the end of the buffer if no toggle is found. ## `tag` a `TextTag`, or `None`",294,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"forward_visible_cursor_position","","Moves `self` forward to the next visible cursor position. See `TextIter::forward_cursor_position` for details.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_visible_cursor_positions","","Moves up to `count` visible cursor positions. See `TextIter::forward_cursor_position` for details. ## `count` number of positions to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_visible_line","","Moves `self` to the start of the next visible line. Returns `true` if there was a next line to move to, and `false` if `self` was simply moved to the end of the buffer and is now not dereferenceable, or if `self` was already at the end of the buffer.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_visible_lines","","Moves `count` visible lines forward, if possible (if `count` would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn’t move, or moved onto the end iterator, then `false` is returned. If `count` is 0, the function does nothing and returns `false`. If `count` is negative, moves backward by 0 - `count` lines. ## `count` number of lines to move forward",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_visible_word_end","","Moves forward to the next visible word end. (If `self` is currently on a word end, moves forward to the next one after that.) Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_visible_word_ends","","Calls `TextIter::forward_visible_word_end` up to `count` times. ## `count` number of times to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"forward_word_end","","Moves forward to the next word end. (If `self` is currently on a word end, moves forward to the next one after that.) Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"forward_word_ends","","Calls `TextIter::forward_word_end` up to `count` times. ## `count` number of times to move",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"get_buffer","","Returns the `TextBuffer` this iterator is associated with.",294,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[11,"get_bytes_in_line","","Returns the number of bytes in the line containing `self`, including the paragraph delimiters.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_char","","The Unicode character at this iterator is returned. (Equivalent to operator* on a C++ iterator.) If the element at this iterator is a non-character element, such as an image embedded in the buffer, the Unicode “unknown” character 0xFFFC is returned. If invoked on the end iterator, zero is returned; zero is not a valid Unicode character. So you can write a loop which ends when `TextIter::get_char` returns 0.",294,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"get_chars_in_line","","Returns the number of characters in the line containing `self`, including the paragraph delimiters.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_child_anchor","","If the location at `self` contains a child anchor, the anchor is returned (with no new reference count added). Otherwise, `None` is returned.",294,{"inputs":[{"name":"self"}],"output":{"generics":["textchildanchor"],"name":"option"}}],[11,"get_language","","A convenience wrapper around `TextIter::get_attributes`, which returns the language in effect at `self`. If no tags affecting language apply to `self`, the return value is identical to that of `gtk_get_default_language`.",294,{"inputs":[{"name":"self"}],"output":{"generics":["language"],"name":"option"}}],[11,"get_line","","Returns the line number containing the iterator. Lines in a `TextBuffer` are numbered beginning with 0 for the first line in the buffer.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_line_index","","Returns the byte index of the iterator, counting from the start of a newline-terminated line. Remember that `TextBuffer` encodes text in UTF-8, and that characters can require a variable number of bytes to represent.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_line_offset","","Returns the character offset of the iterator, counting from the start of a newline-terminated line. The first character on the line has offset 0.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_marks","","Returns a list of all `TextMark` at this location. Because marks are not iterable (they don’t take up any \"space\" in the buffer, they are just marks in between iterable locations), multiple marks can exist in the same place. The returned list is not in any meaningful order.",294,{"inputs":[{"name":"self"}],"output":{"generics":["textmark"],"name":"vec"}}],[11,"get_offset","","Returns the character offset of an iterator. Each character in a `TextBuffer` has an offset, starting with 0 for the first character in the buffer. Use `TextBufferExt::get_iter_at_offset` to convert an offset back into an iterator.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_pixbuf","","If the element at `self` is a pixbuf, the pixbuf is returned (with no new reference count added). Otherwise, `None` is returned.",294,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[11,"get_slice","","Returns the text in the given range. A “slice” is an array of characters encoded in UTF-8 format, including the Unicode “unknown” character 0xFFFC for iterable non-character elements in the buffer, such as images. Because images are encoded in the slice, byte and character offsets in the returned array will correspond to byte offsets in the text buffer. Note that 0xFFFC can occur in normal text as well, so it is not a reliable indicator that a pixbuf or widget is in the buffer. ## `end` iterator at end of a range",294,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_tags","","Returns a list of tags that apply to `self`, in ascending order of priority (highest-priority tags are last). The `TextTag` in the list don’t have a reference added, but you have to free the list itself.",294,{"inputs":[{"name":"self"}],"output":{"generics":["texttag"],"name":"vec"}}],[11,"get_text","","Returns text in the given range. If the range contains non-text elements such as images, the character and byte offsets in the returned string will not correspond to character and byte offsets in the buffer. If you want offsets to correspond, see `TextIter::get_slice`. ## `end` iterator at end of a range",294,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_toggled_tags","","Returns a list of `TextTag` that are toggled on or off at this point. (If `toggled_on` is `true`, the list contains tags that are toggled on.) If a tag is toggled on at `self`, then some non-empty range of characters following `self` has that tag applied to it. If a tag is toggled off, then some non-empty range following `self` does not have the tag applied to it. ## `toggled_on` `true` to get toggled-on tags",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["texttag"],"name":"vec"}}],[11,"get_visible_line_index","","Returns the number of bytes from the start of the line to the given `self`, not counting bytes that are invisible due to tags with the “invisible” flag toggled on.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_visible_line_offset","","Returns the offset in characters from the start of the line to the given `self`, not counting characters that are invisible due to tags with the “invisible” flag toggled on.",294,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_visible_slice","","Like `TextIter::get_slice`, but invisible text is not included. Invisible text is usually invisible because a `TextTag` with the “invisible” attribute turned on has been applied to it. ## `end` iterator at end of range",294,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_visible_text","","Like `TextIter::get_text`, but invisible text is not included. Invisible text is usually invisible because a `TextTag` with the “invisible” attribute turned on has been applied to it. ## `end` iterator at end of range",294,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["string"],"name":"option"}}],[11,"has_tag","","Returns `true` if `self` points to a character that is part of a range tagged with `tag`. See also `TextIter::starts_tag` and `TextIter::ends_tag`. ## `tag` a `TextTag`",294,{"inputs":[{"name":"self"},{"name":"texttag"}],"output":{"name":"bool"}}],[11,"in_range","","Checks whether `self` falls in the range [`start`, `end`). `start` and `end` must be in ascending order. ## `start` start of range ## `end` end of range",294,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":{"name":"bool"}}],[11,"inside_sentence","","Determines whether `self` is inside a sentence (as opposed to in between two sentences, e.g. after a period and before the first letter of the next sentence). Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inside_word","","Determines whether the character pointed by `self` is part of a natural-language word (as opposed to say inside some whitespace). Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_cursor_position","","See `TextIter::forward_cursor_position` or `pango::LogAttr` or `pango_break` for details on what a cursor position is.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","Returns `true` if `self` is the end iterator, i.e. one past the last dereferenceable iterator in the buffer. `TextIter::is_end` is the most efficient way to check whether an iterator is the end iterator.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_start","","Returns `true` if `self` is the first iterator in the buffer, that is if `self` has a character offset of 0.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"order","","Swaps the value of `self` and `second` if `second` comes before `self` in the buffer. That is, ensures that `self` and `second` are in sequence. Most text buffer functions that take a range call this automatically on your behalf, so there’s no real reason to call it yourself in those cases. There are some exceptions, such as `TextIter::in_range`, that expect a pre-sorted range. ## `second` another `TextIter`",294,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":null}],[11,"set_line","","Moves iterator `self` to the start of the line `line_number`. If `line_number` is negative or larger than the number of lines in the buffer, moves `self` to the start of the last line in the buffer. ## `line_number` line number (counted from 0)",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_line_index","","Same as `TextIter::set_line_offset`, but works with a byte index. The given byte index must be at the start of a character, it can’t be in the middle of a UTF-8 encoded character. ## `byte_on_line` a byte index relative to the start of `self`’s current line",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_line_offset","","Moves `self` within a line, to a new character (not byte) offset. The given character offset must be less than or equal to the number of characters in the line; if equal, `self` moves to the start of the next line. See `TextIter::set_line_index` if you have a byte index rather than a character offset. ## `char_on_line` a character offset relative to the start of `self`’s current line",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_offset","","Sets `self` to point to `char_offset`. `char_offset` counts from the start of the entire text buffer, starting with 0. ## `char_offset` a character number",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_visible_line_index","","Like `TextIter::set_line_index`, but the index is in visible bytes, i.e. text with a tag making it invisible is not counted in the index. ## `byte_on_line` a byte index",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_visible_line_offset","","Like `TextIter::set_line_offset`, but the offset is in visible characters, i.e. text with a tag making it invisible is not counted in the offset. ## `char_on_line` a character offset",294,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"starts_line","","Returns `true` if `self` begins a paragraph, i.e. if `TextIter::get_line_offset` would return 0. However this function is potentially more efficient than `TextIter::get_line_offset` because it doesn’t have to compute the offset, it just has to see whether it’s 0.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"starts_sentence","","Determines whether `self` begins a sentence. Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"starts_tag","","Returns `true` if `tag` is toggled on at exactly this point. If `tag` is `None`, returns `true` if any tag is toggled on at this point.",294,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"starts_word","","Determines whether `self` begins a natural-language word. Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"toggles_tag","","This is equivalent to (`TextIter::starts_tag` || `TextIter::ends_tag`), i.e. it tells you whether a range with `tag` applied to it begins or ends at `self`. ## `tag` a `TextTag`, or `None`",294,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",294,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",294,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",294,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"treeiter"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",295,{"inputs":[],"output":{"name":"type"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"treepath"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",296,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `TreePath`-struct. This refers to a row.",296,{"inputs":[],"output":{"name":"treepath"}}],[11,"new_first","","Creates a new `TreePath`-struct.",296,{"inputs":[],"output":{"name":"treepath"}}],[11,"new_from_indicesv","","Creates a new path with the given `indices` array of `length`.",296,null],[11,"new_from_string","","Creates a new `TreePath`-struct initialized to `path`.",296,{"inputs":[{"name":"str"}],"output":{"name":"treepath"}}],[11,"append_index","","Appends a new index to a path.",296,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"down","","Moves `self` to point to the first child of the current path.",296,{"inputs":[{"name":"self"}],"output":null}],[11,"get_depth","","Returns the current depth of `self`.",296,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_indices_with_depth","","Returns the current indices of `self`.",296,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"is_ancestor","","Returns `true` if `descendant` is a descendant of `self`. ## `descendant` another `TreePath`-struct",296,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[11,"is_descendant","","Returns `true` if `self` is a descendant of `ancestor`. ## `ancestor` another `TreePath`-struct",296,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[11,"next","","Moves the `self` to point to the next node at the current depth.",296,{"inputs":[{"name":"self"}],"output":null}],[11,"prepend_index","","Prepends a new index to a path.",296,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"prev","","Moves the `self` to point to the previous node at the current depth, if it exists.",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"up","","Moves the `self` to point to its parent node, if it has a parent.",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",296,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",296,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"treerowreference"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",297,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a row reference based on `path`.",297,{"inputs":[{"name":"p"},{"name":"treepath"}],"output":{"generics":["treerowreference"],"name":"option"}}],[11,"new_proxy","","You do not need to use this function.",297,{"inputs":[{"name":"p"},{"name":"q"},{"name":"treepath"}],"output":{"generics":["treerowreference"],"name":"option"}}],[11,"get_model","","Returns the model that the row reference is monitoring.",297,{"inputs":[{"name":"self"}],"output":{"name":"treemodel"}}],[11,"get_path","","Returns a path that the row reference currently points to, or `None` if the path pointed to is no longer valid.",297,{"inputs":[{"name":"self"}],"output":{"generics":["treepath"],"name":"option"}}],[11,"valid","","Returns `true` if the `self` is non-`None` and refers to a current valid path.",297,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deleted","","Lets a set of row reference created by `TreeRowReference::new_proxy` know that the model emitted the `TreeModel::row-deleted` signal. ## `proxy` a `gobject::Object` ## `path` the path position that was deleted",297,{"inputs":[{"name":"p"},{"name":"treepath"}],"output":null}],[11,"inserted","","Lets a set of row reference created by `TreeRowReference::new_proxy` know that the model emitted the `TreeModel::row-inserted` signal. ## `proxy` a `gobject::Object` ## `path` the row position that was inserted",297,{"inputs":[{"name":"p"},{"name":"treepath"}],"output":null}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"widgetpath"}}],[11,"static_type","","",298,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",298,{"inputs":[],"output":{"name":"widgetpath"}}],[11,"append_for_widget","","",298,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[11,"append_type","","",298,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"i32"}}],[11,"append_with_siblings","","",298,{"inputs":[{"name":"self"},{"name":"widgetpath"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"copy","","",298,{"inputs":[{"name":"self"}],"output":{"generics":["widgetpath"],"name":"option"}}],[11,"get_object_type","","",298,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"has_parent","","",298,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"is_type","","",298,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"iter_add_class","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[11,"iter_add_region","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"},{"name":"regionflags"}],"output":null}],[11,"iter_clear_classes","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"iter_clear_regions","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"iter_get_name","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[11,"iter_get_object_name","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[11,"iter_get_object_type","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"type"}}],[11,"iter_get_sibling_index","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"iter_get_siblings","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["widgetpath"],"name":"option"}}],[11,"iter_get_state","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"stateflags"}}],[11,"iter_has_class","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":{"name":"bool"}}],[11,"iter_has_name","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":{"name":"bool"}}],[11,"iter_has_region","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":{"generics":["regionflags"],"name":"option"}}],[11,"iter_list_classes","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"vec"}}],[11,"iter_list_regions","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"vec"}}],[11,"iter_remove_class","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[11,"iter_remove_region","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[11,"iter_set_name","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[11,"iter_set_object_name","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":null}],[11,"iter_set_object_type","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"type"}],"output":null}],[11,"iter_set_state","","",298,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"stateflags"}],"output":null}],[11,"length","","",298,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"prepend_type","","",298,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"default","","",298,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"static_type","","",9,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",9,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",9,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"arrowtype"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"arrowtype"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"arrowtype"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"static_type","","",10,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",10,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",10,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"assistantpagetype"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"assistantpagetype"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"assistantpagetype"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"static_type","","",11,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",11,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",11,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",11,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"baselineposition"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"baselineposition"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"baselineposition"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"static_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",12,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",12,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",12,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"borderstyle"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"static_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",13,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",13,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",13,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"buildererror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"buildererror"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"buildererror"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"domain","","",14,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",14,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",14,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",14,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"buttonboxstyle"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"buttonboxstyle"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"buttonboxstyle"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"static_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",15,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",15,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",15,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"buttonrole"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"buttonrole"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"buttonrole"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"static_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",16,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",16,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",16,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"buttonstype"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"buttonstype"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"buttonstype"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"static_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",17,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",17,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",17,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"cellrendereraccelmode"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"cellrendereraccelmode"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"cellrendereraccelmode"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"static_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",18,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",18,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",18,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderermode"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"cellrenderermode"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"cellrenderermode"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"static_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",19,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",19,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",19,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"static_type","","",20,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",20,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",20,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",20,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"cssprovidererror"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"cssprovidererror"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"cssprovidererror"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"domain","","",21,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",21,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",21,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",21,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",21,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",21,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"csssectiontype"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"csssectiontype"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"csssectiontype"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"static_type","","",22,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",22,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",22,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",22,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"deletetype"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"deletetype"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"deletetype"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",23,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",23,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",23,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"directiontype"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",24,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",24,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",24,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dragresult"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"dragresult"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"dragresult"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",25,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",25,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",25,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"entryiconposition"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",26,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",26,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",26,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"eventsequencestate"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"eventsequencestate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"eventsequencestate"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"static_type","","",27,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",27,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",27,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",27,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"filechooseraction"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"filechooseraction"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"filechooseraction"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"static_type","","",28,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",28,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",28,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",28,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"filechooserconfirmation"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"filechooserconfirmation"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"filechooserconfirmation"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"static_type","","",29,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",29,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",29,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",29,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"filechoosererror"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"filechoosererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"filechoosererror"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"domain","","",30,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",30,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",30,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",30,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",30,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",30,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",30,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"impreeditstyle"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"impreeditstyle"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"impreeditstyle"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"static_type","","",31,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",31,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",31,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",31,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"imstatusstyle"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"imstatusstyle"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"imstatusstyle"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"static_type","","",32,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",32,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",32,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",32,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"static_type","","",33,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",33,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",33,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",33,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"iconthemeerror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"iconthemeerror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"iconthemeerror"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"domain","","",34,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",34,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",34,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",34,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",34,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",34,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",34,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"iconviewdropposition"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"iconviewdropposition"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"iconviewdropposition"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"static_type","","",35,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",35,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",35,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",35,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"imagetype"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"imagetype"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"static_type","","",36,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",36,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",36,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",36,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"static_type","","",37,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",37,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",37,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",37,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"justification"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"justification"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"static_type","","",38,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",38,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",38,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",38,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"levelbarmode"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"levelbarmode"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"levelbarmode"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"static_type","","",39,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",39,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",39,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",39,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"license"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"license"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"license"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"static_type","","",40,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",40,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",40,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",40,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"menudirectiontype"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"menudirectiontype"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"menudirectiontype"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"static_type","","",41,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",41,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",41,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",41,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"static_type","","",42,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",42,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",42,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",42,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"movementstep"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"movementstep"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"movementstep"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"static_type","","",43,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",43,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",43,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",43,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"notebooktab"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"notebooktab"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"notebooktab"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"static_type","","",44,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",44,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",44,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",44,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"numberuplayout"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"numberuplayout"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"numberuplayout"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"static_type","","",45,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",45,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",45,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",45,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"static_type","","",46,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",46,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",46,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",46,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"packdirection"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"packdirection"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"packdirection"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"static_type","","",47,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",47,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",47,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",47,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"packtype"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"packtype"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"packtype"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"static_type","","",48,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",48,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",48,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",48,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"padactiontype"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"padactiontype"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"padactiontype"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"static_type","","",49,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",49,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",49,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",49,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"pageorientation"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"pageorientation"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"pageorientation"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"static_type","","",50,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",50,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",50,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",50,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pageset"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pageset"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pageset"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"static_type","","",51,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",51,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",51,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",51,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"pandirection"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"pandirection"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"pandirection"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"static_type","","",52,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",52,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",52,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",52,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"static_type","","",53,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",53,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",53,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",53,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"popoverconstraint"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"popoverconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"popoverconstraint"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"static_type","","",54,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",54,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",54,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",54,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"static_type","","",55,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",55,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",55,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",55,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"printduplex"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"printduplex"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"printduplex"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"static_type","","",56,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",56,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",56,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",56,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"printerror"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"printerror"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"printerror"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"domain","","",57,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",57,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",57,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",57,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",57,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",57,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",57,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"printoperationaction"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"printoperationaction"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"printoperationaction"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"static_type","","",58,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",58,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",58,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",58,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"printoperationresult"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"printoperationresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"printoperationresult"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"static_type","","",59,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",59,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",59,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",59,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"printpages"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"printpages"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"printpages"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"static_type","","",60,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",60,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",60,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",60,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"printquality"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"printquality"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"printquality"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"static_type","","",61,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",61,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",61,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",61,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"printstatus"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"printstatus"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"printstatus"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"static_type","","",62,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",62,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",62,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",62,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"propagationphase"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"propagationphase"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"propagationphase"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"static_type","","",63,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",63,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",63,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",63,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"recentchoosererror"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"recentchoosererror"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"recentchoosererror"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"domain","","",64,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",64,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",64,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",64,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",64,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",64,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",64,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"recentmanagererror"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"recentmanagererror"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"recentmanagererror"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"domain","","",65,{"inputs":[],"output":{"name":"gquark"}}],[11,"code","","",65,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",65,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"static_type","","",65,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",65,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",65,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",65,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"recentsorttype"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"recentsorttype"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"recentsorttype"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"static_type","","",66,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",66,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",66,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",66,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"reliefstyle"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"reliefstyle"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"static_type","","",67,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",67,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",67,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",67,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"resizemode"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"resizemode"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"resizemode"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"static_type","","",68,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",68,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",68,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",68,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"responsetype"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"responsetype"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"responsetype"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"static_type","","",69,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",69,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",69,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",69,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"revealertransitiontype"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"revealertransitiontype"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"revealertransitiontype"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"static_type","","",70,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",70,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",70,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",70,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"scrollstep"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"scrollstep"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"scrollstep"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"static_type","","",71,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",71,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",71,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",71,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"scrolltype"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"static_type","","",72,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",72,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",72,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",72,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"scrollablepolicy"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"scrollablepolicy"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"scrollablepolicy"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"static_type","","",73,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",73,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",73,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",73,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"static_type","","",74,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",74,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",74,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",74,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"static_type","","",75,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",75,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",75,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",75,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"static_type","","",76,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",76,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",76,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",76,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"sizegroupmode"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"sizegroupmode"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"sizegroupmode"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"static_type","","",77,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",77,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",77,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",77,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"sizerequestmode"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"sizerequestmode"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"static_type","","",78,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",78,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",78,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",78,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"sorttype"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"sorttype"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"sorttype"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"static_type","","",79,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",79,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",79,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",79,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"spinbuttonupdatepolicy"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"spinbuttonupdatepolicy"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"spinbuttonupdatepolicy"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"static_type","","",80,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",80,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",80,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",80,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"spintype"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"spintype"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"spintype"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"static_type","","",81,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",81,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",81,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",81,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"stacktransitiontype"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"stacktransitiontype"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"stacktransitiontype"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"static_type","","",82,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",82,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",82,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",82,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"statetype"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"statetype"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"statetype"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"static_type","","",83,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",83,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",83,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",83,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"static_type","","",84,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",84,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",84,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",84,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"textextendselection"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"textextendselection"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"textextendselection"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"static_type","","",85,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",85,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",85,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",85,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"textviewlayer"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"textviewlayer"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"textviewlayer"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"static_type","","",86,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",86,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",86,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",86,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"textwindowtype"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"static_type","","",87,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",87,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",87,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",87,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"static_type","","",88,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",88,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",88,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",88,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"treeviewcolumnsizing"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"treeviewcolumnsizing"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"treeviewcolumnsizing"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"static_type","","",89,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",89,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",89,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",89,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"treeviewdropposition"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"treeviewdropposition"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"treeviewdropposition"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"static_type","","",90,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",90,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",90,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",90,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"treeviewgridlines"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"treeviewgridlines"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"treeviewgridlines"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"static_type","","",91,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",91,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",91,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",91,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"static_type","","",92,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",92,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",92,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",92,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"widgethelptype"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"widgethelptype"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"widgethelptype"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"static_type","","",93,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",93,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",93,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",93,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"windowposition"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"windowposition"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"windowposition"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"static_type","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",94,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",94,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",94,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"windowtype"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"windowtype"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"static_type","","",95,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",95,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",95,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",95,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"static_type","","",96,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",96,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",96,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",96,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"accelflags"}}],[11,"partial_cmp","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"le","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"gt","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"ge","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"cmp","","",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"ordering"}}],[11,"hash","","",299,null],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"VISIBLE","","",299,null],[18,"LOCKED","","",299,null],[18,"MASK","","",299,null],[11,"empty","","Returns an empty set of flags.",299,{"inputs":[],"output":{"name":"accelflags"}}],[11,"all","","Returns the set containing all flags.",299,{"inputs":[],"output":{"name":"accelflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",299,{"inputs":[{"name":"u32"}],"output":{"generics":["accelflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",299,{"inputs":[{"name":"u32"}],"output":{"name":"accelflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",299,{"inputs":[{"name":"self"},{"name":"accelflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"accelflags"}}],[11,"bitor_assign","","Adds the set of flags.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"accelflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"accelflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":{"name":"accelflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",299,{"inputs":[{"name":"self"},{"name":"accelflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",299,{"inputs":[{"name":"self"}],"output":{"name":"accelflags"}}],[11,"extend","","",299,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",299,{"inputs":[{"name":"t"}],"output":{"name":"accelflags"}}],[11,"static_type","","",299,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",299,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",299,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",299,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"applicationinhibitflags"}}],[11,"partial_cmp","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"le","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"gt","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"ge","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"cmp","","",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"ordering"}}],[11,"hash","","",300,null],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"LOGOUT","","",300,null],[18,"SWITCH","","",300,null],[18,"SUSPEND","","",300,null],[18,"IDLE","","",300,null],[11,"empty","","Returns an empty set of flags.",300,{"inputs":[],"output":{"name":"applicationinhibitflags"}}],[11,"all","","Returns the set containing all flags.",300,{"inputs":[],"output":{"name":"applicationinhibitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",300,{"inputs":[{"name":"u32"}],"output":{"generics":["applicationinhibitflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",300,{"inputs":[{"name":"u32"}],"output":{"name":"applicationinhibitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"applicationinhibitflags"}}],[11,"bitor_assign","","Adds the set of flags.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"applicationinhibitflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"applicationinhibitflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"applicationinhibitflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",300,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",300,{"inputs":[{"name":"self"}],"output":{"name":"applicationinhibitflags"}}],[11,"extend","","",300,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",300,{"inputs":[{"name":"t"}],"output":{"name":"applicationinhibitflags"}}],[11,"static_type","","",300,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",300,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",300,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",300,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"calendardisplayoptions"}}],[11,"partial_cmp","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"le","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"gt","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"ge","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"ordering"}}],[11,"hash","","",301,null],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SHOW_HEADING","","",301,null],[18,"SHOW_DAY_NAMES","","",301,null],[18,"NO_MONTH_CHANGE","","",301,null],[18,"SHOW_WEEK_NUMBERS","","",301,null],[18,"SHOW_DETAILS","","",301,null],[11,"empty","","Returns an empty set of flags.",301,{"inputs":[],"output":{"name":"calendardisplayoptions"}}],[11,"all","","Returns the set containing all flags.",301,{"inputs":[],"output":{"name":"calendardisplayoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",301,{"inputs":[{"name":"u32"}],"output":{"generics":["calendardisplayoptions"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",301,{"inputs":[{"name":"u32"}],"output":{"name":"calendardisplayoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"calendardisplayoptions"}}],[11,"bitor_assign","","Adds the set of flags.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"calendardisplayoptions"}}],[11,"bitxor_assign","","Toggles the set of flags.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"calendardisplayoptions"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":{"name":"calendardisplayoptions"}}],[11,"sub_assign","","Disables all flags enabled in the set.",301,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",301,{"inputs":[{"name":"self"}],"output":{"name":"calendardisplayoptions"}}],[11,"extend","","",301,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",301,{"inputs":[{"name":"t"}],"output":{"name":"calendardisplayoptions"}}],[11,"static_type","","",301,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",301,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",301,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",301,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"clone","","",302,{"inputs":[{"name":"self"}],"output":{"name":"cellrendererstate"}}],[11,"partial_cmp","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"le","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"gt","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"ge","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"cmp","","",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"ordering"}}],[11,"hash","","",302,null],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SELECTED","","",302,null],[18,"PRELIT","","",302,null],[18,"INSENSITIVE","","",302,null],[18,"SORTED","","",302,null],[18,"FOCUSED","","",302,null],[18,"EXPANDABLE","","",302,null],[18,"EXPANDED","","",302,null],[11,"empty","","Returns an empty set of flags.",302,{"inputs":[],"output":{"name":"cellrendererstate"}}],[11,"all","","Returns the set containing all flags.",302,{"inputs":[],"output":{"name":"cellrendererstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",302,{"inputs":[{"name":"u32"}],"output":{"generics":["cellrendererstate"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",302,{"inputs":[{"name":"u32"}],"output":{"name":"cellrendererstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"cellrendererstate"}}],[11,"bitor_assign","","Adds the set of flags.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"cellrendererstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"cellrendererstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":{"name":"cellrendererstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",302,{"inputs":[{"name":"self"},{"name":"cellrendererstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",302,{"inputs":[{"name":"self"}],"output":{"name":"cellrendererstate"}}],[11,"extend","","",302,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",302,{"inputs":[{"name":"t"}],"output":{"name":"cellrendererstate"}}],[11,"static_type","","",302,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",302,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",302,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",302,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"ne","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"destdefaults"}}],[11,"partial_cmp","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"le","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"gt","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"ge","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"cmp","","",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"ordering"}}],[11,"hash","","",303,null],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MOTION","","",303,null],[18,"HIGHLIGHT","","",303,null],[18,"DROP","","",303,null],[18,"ALL","","",303,null],[11,"empty","","Returns an empty set of flags.",303,{"inputs":[],"output":{"name":"destdefaults"}}],[11,"all","","Returns the set containing all flags.",303,{"inputs":[],"output":{"name":"destdefaults"}}],[11,"bits","","Returns the raw value of the flags currently stored.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",303,{"inputs":[{"name":"u32"}],"output":{"generics":["destdefaults"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",303,{"inputs":[{"name":"u32"}],"output":{"name":"destdefaults"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"destdefaults"}}],[11,"bitor_assign","","Adds the set of flags.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"destdefaults"}}],[11,"bitxor_assign","","Toggles the set of flags.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"destdefaults"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":{"name":"destdefaults"}}],[11,"sub_assign","","Disables all flags enabled in the set.",303,{"inputs":[{"name":"self"},{"name":"destdefaults"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",303,{"inputs":[{"name":"self"}],"output":{"name":"destdefaults"}}],[11,"extend","","",303,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",303,{"inputs":[{"name":"t"}],"output":{"name":"destdefaults"}}],[11,"static_type","","",303,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",303,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",303,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",303,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"dialogflags"}}],[11,"partial_cmp","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"le","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"gt","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"ge","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"cmp","","",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"ordering"}}],[11,"hash","","",304,null],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MODAL","","",304,null],[18,"DESTROY_WITH_PARENT","","",304,null],[18,"USE_HEADER_BAR","","",304,null],[11,"empty","","Returns an empty set of flags.",304,{"inputs":[],"output":{"name":"dialogflags"}}],[11,"all","","Returns the set containing all flags.",304,{"inputs":[],"output":{"name":"dialogflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",304,{"inputs":[{"name":"u32"}],"output":{"generics":["dialogflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",304,{"inputs":[{"name":"u32"}],"output":{"name":"dialogflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"dialogflags"}}],[11,"bitor_assign","","Adds the set of flags.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"dialogflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"dialogflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":{"name":"dialogflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",304,{"inputs":[{"name":"self"},{"name":"dialogflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",304,{"inputs":[{"name":"self"}],"output":{"name":"dialogflags"}}],[11,"extend","","",304,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",304,{"inputs":[{"name":"t"}],"output":{"name":"dialogflags"}}],[11,"static_type","","",304,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",304,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",304,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",304,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"clone","","",305,{"inputs":[{"name":"self"}],"output":{"name":"filefilterflags"}}],[11,"partial_cmp","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"cmp","","",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"ordering"}}],[11,"hash","","",305,null],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FILENAME","","",305,null],[18,"URI","","",305,null],[18,"DISPLAY_NAME","","",305,null],[18,"MIME_TYPE","","",305,null],[11,"empty","","Returns an empty set of flags.",305,{"inputs":[],"output":{"name":"filefilterflags"}}],[11,"all","","Returns the set containing all flags.",305,{"inputs":[],"output":{"name":"filefilterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",305,{"inputs":[{"name":"u32"}],"output":{"generics":["filefilterflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",305,{"inputs":[{"name":"u32"}],"output":{"name":"filefilterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",305,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",305,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"filefilterflags"}}],[11,"bitor_assign","","Adds the set of flags.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"filefilterflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"filefilterflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":{"name":"filefilterflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",305,{"inputs":[{"name":"self"},{"name":"filefilterflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",305,{"inputs":[{"name":"self"}],"output":{"name":"filefilterflags"}}],[11,"extend","","",305,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",305,{"inputs":[{"name":"t"}],"output":{"name":"filefilterflags"}}],[11,"static_type","","",305,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",305,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",305,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",305,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"clone","","",306,{"inputs":[{"name":"self"}],"output":{"name":"iconlookupflags"}}],[11,"partial_cmp","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"le","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"gt","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"ge","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"cmp","","",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"ordering"}}],[11,"hash","","",306,null],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_SVG","","",306,null],[18,"FORCE_SVG","","",306,null],[18,"USE_BUILTIN","","",306,null],[18,"GENERIC_FALLBACK","","",306,null],[18,"FORCE_SIZE","","",306,null],[18,"FORCE_REGULAR","","",306,null],[18,"FORCE_SYMBOLIC","","",306,null],[18,"DIR_LTR","","",306,null],[18,"DIR_RTL","","",306,null],[11,"empty","","Returns an empty set of flags.",306,{"inputs":[],"output":{"name":"iconlookupflags"}}],[11,"all","","Returns the set containing all flags.",306,{"inputs":[],"output":{"name":"iconlookupflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",306,{"inputs":[{"name":"u32"}],"output":{"generics":["iconlookupflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",306,{"inputs":[{"name":"u32"}],"output":{"name":"iconlookupflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"iconlookupflags"}}],[11,"bitor_assign","","Adds the set of flags.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"iconlookupflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"iconlookupflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":{"name":"iconlookupflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",306,{"inputs":[{"name":"self"},{"name":"iconlookupflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",306,{"inputs":[{"name":"self"}],"output":{"name":"iconlookupflags"}}],[11,"extend","","",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",306,{"inputs":[{"name":"t"}],"output":{"name":"iconlookupflags"}}],[11,"static_type","","",306,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",306,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",306,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",306,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"ne","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[11,"partial_cmp","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"le","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"gt","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"ge","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"cmp","","",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"ordering"}}],[11,"hash","","",307,null],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",307,null],[18,"SPELLCHECK","","",307,null],[18,"NO_SPELLCHECK","","",307,null],[18,"WORD_COMPLETION","","",307,null],[18,"LOWERCASE","","",307,null],[18,"UPPERCASE_CHARS","","",307,null],[18,"UPPERCASE_WORDS","","",307,null],[18,"UPPERCASE_SENTENCES","","",307,null],[18,"INHIBIT_OSK","","",307,null],[18,"VERTICAL_WRITING","","",307,null],[18,"EMOJI","","",307,null],[18,"NO_EMOJI","","",307,null],[11,"empty","","Returns an empty set of flags.",307,{"inputs":[],"output":{"name":"inputhints"}}],[11,"all","","Returns the set containing all flags.",307,{"inputs":[],"output":{"name":"inputhints"}}],[11,"bits","","Returns the raw value of the flags currently stored.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",307,{"inputs":[{"name":"u32"}],"output":{"generics":["inputhints"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",307,{"inputs":[{"name":"u32"}],"output":{"name":"inputhints"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",307,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",307,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",307,{"inputs":[{"name":"self"},{"name":"inputhints"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"inputhints"}}],[11,"bitor_assign","","Adds the set of flags.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"inputhints"}}],[11,"bitxor_assign","","Toggles the set of flags.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"inputhints"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":{"name":"inputhints"}}],[11,"sub_assign","","Disables all flags enabled in the set.",307,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",307,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[11,"extend","","",307,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",307,{"inputs":[{"name":"t"}],"output":{"name":"inputhints"}}],[11,"static_type","","",307,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",307,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",307,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",307,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"ne","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"junctionsides"}}],[11,"partial_cmp","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"le","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"gt","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"ge","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"cmp","","",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"ordering"}}],[11,"hash","","",308,null],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",308,null],[18,"CORNER_TOPLEFT","","",308,null],[18,"CORNER_TOPRIGHT","","",308,null],[18,"CORNER_BOTTOMLEFT","","",308,null],[18,"CORNER_BOTTOMRIGHT","","",308,null],[18,"TOP","","",308,null],[18,"BOTTOM","","",308,null],[18,"LEFT","","",308,null],[18,"RIGHT","","",308,null],[11,"empty","","Returns an empty set of flags.",308,{"inputs":[],"output":{"name":"junctionsides"}}],[11,"all","","Returns the set containing all flags.",308,{"inputs":[],"output":{"name":"junctionsides"}}],[11,"bits","","Returns the raw value of the flags currently stored.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",308,{"inputs":[{"name":"u32"}],"output":{"generics":["junctionsides"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",308,{"inputs":[{"name":"u32"}],"output":{"name":"junctionsides"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",308,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",308,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"junctionsides"}}],[11,"bitor_assign","","Adds the set of flags.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"junctionsides"}}],[11,"bitxor_assign","","Toggles the set of flags.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"junctionsides"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":{"name":"junctionsides"}}],[11,"sub_assign","","Disables all flags enabled in the set.",308,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",308,{"inputs":[{"name":"self"}],"output":{"name":"junctionsides"}}],[11,"extend","","",308,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",308,{"inputs":[{"name":"t"}],"output":{"name":"junctionsides"}}],[11,"static_type","","",308,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",308,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",308,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",308,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"placesopenflags"}}],[11,"partial_cmp","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"le","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"gt","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"ge","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"cmp","","",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"ordering"}}],[11,"hash","","",309,null],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NORMAL","","",309,null],[18,"NEW_TAB","","",309,null],[18,"NEW_WINDOW","","",309,null],[11,"empty","","Returns an empty set of flags.",309,{"inputs":[],"output":{"name":"placesopenflags"}}],[11,"all","","Returns the set containing all flags.",309,{"inputs":[],"output":{"name":"placesopenflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",309,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",309,{"inputs":[{"name":"u32"}],"output":{"generics":["placesopenflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",309,{"inputs":[{"name":"u32"}],"output":{"name":"placesopenflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"placesopenflags"}}],[11,"bitor_assign","","Adds the set of flags.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"placesopenflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"placesopenflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":{"name":"placesopenflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",309,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",309,{"inputs":[{"name":"self"}],"output":{"name":"placesopenflags"}}],[11,"extend","","",309,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",309,{"inputs":[{"name":"t"}],"output":{"name":"placesopenflags"}}],[11,"static_type","","",309,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",309,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",309,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",309,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"recentfilterflags"}}],[11,"partial_cmp","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"le","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"gt","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"ge","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"cmp","","",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"ordering"}}],[11,"hash","","",310,null],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"URI","","",310,null],[18,"DISPLAY_NAME","","",310,null],[18,"MIME_TYPE","","",310,null],[18,"APPLICATION","","",310,null],[18,"GROUP","","",310,null],[18,"AGE","","",310,null],[11,"empty","","Returns an empty set of flags.",310,{"inputs":[],"output":{"name":"recentfilterflags"}}],[11,"all","","Returns the set containing all flags.",310,{"inputs":[],"output":{"name":"recentfilterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",310,{"inputs":[{"name":"u32"}],"output":{"generics":["recentfilterflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",310,{"inputs":[{"name":"u32"}],"output":{"name":"recentfilterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",310,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",310,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"recentfilterflags"}}],[11,"bitor_assign","","Adds the set of flags.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"recentfilterflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"recentfilterflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":{"name":"recentfilterflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",310,{"inputs":[{"name":"self"},{"name":"recentfilterflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",310,{"inputs":[{"name":"self"}],"output":{"name":"recentfilterflags"}}],[11,"extend","","",310,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",310,{"inputs":[{"name":"t"}],"output":{"name":"recentfilterflags"}}],[11,"static_type","","",310,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",310,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",310,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",310,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"regionflags"}}],[11,"partial_cmp","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"le","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"gt","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"ge","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"cmp","","",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"ordering"}}],[11,"hash","","",311,null],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EVEN","","",311,null],[18,"ODD","","",311,null],[18,"FIRST","","",311,null],[18,"LAST","","",311,null],[18,"ONLY","","",311,null],[18,"SORTED","","",311,null],[11,"empty","","Returns an empty set of flags.",311,{"inputs":[],"output":{"name":"regionflags"}}],[11,"all","","Returns the set containing all flags.",311,{"inputs":[],"output":{"name":"regionflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",311,{"inputs":[{"name":"u32"}],"output":{"generics":["regionflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",311,{"inputs":[{"name":"u32"}],"output":{"name":"regionflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",311,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",311,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",311,{"inputs":[{"name":"self"},{"name":"regionflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"regionflags"}}],[11,"bitor_assign","","Adds the set of flags.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"regionflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"regionflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":{"name":"regionflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",311,{"inputs":[{"name":"self"},{"name":"regionflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",311,{"inputs":[{"name":"self"}],"output":{"name":"regionflags"}}],[11,"extend","","",311,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",311,{"inputs":[{"name":"t"}],"output":{"name":"regionflags"}}],[11,"static_type","","",311,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",311,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",311,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",311,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[11,"partial_cmp","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"le","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"gt","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"ge","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",312,null],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NORMAL","","",312,null],[18,"ACTIVE","","",312,null],[18,"PRELIGHT","","",312,null],[18,"SELECTED","","",312,null],[18,"INSENSITIVE","","",312,null],[18,"INCONSISTENT","","",312,null],[18,"FOCUSED","","",312,null],[18,"BACKDROP","","",312,null],[18,"DIR_LTR","","",312,null],[18,"DIR_RTL","","",312,null],[18,"LINK","","",312,null],[18,"VISITED","","",312,null],[18,"CHECKED","","",312,null],[18,"DROP_ACTIVE","","",312,null],[11,"empty","","Returns an empty set of flags.",312,{"inputs":[],"output":{"name":"stateflags"}}],[11,"all","","Returns the set containing all flags.",312,{"inputs":[],"output":{"name":"stateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",312,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",312,{"inputs":[{"name":"u32"}],"output":{"generics":["stateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",312,{"inputs":[{"name":"u32"}],"output":{"name":"stateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",312,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",312,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",312,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"bitor_assign","","Adds the set of flags.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",312,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",312,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[11,"extend","","",312,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",312,{"inputs":[{"name":"t"}],"output":{"name":"stateflags"}}],[11,"static_type","","",312,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",312,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",312,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",312,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"stylecontextprintflags"}}],[11,"partial_cmp","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"le","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"gt","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"ge","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"cmp","","",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"ordering"}}],[11,"hash","","",313,null],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",313,null],[18,"RECURSE","","",313,null],[18,"SHOW_STYLE","","",313,null],[11,"empty","","Returns an empty set of flags.",313,{"inputs":[],"output":{"name":"stylecontextprintflags"}}],[11,"all","","Returns the set containing all flags.",313,{"inputs":[],"output":{"name":"stylecontextprintflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",313,{"inputs":[{"name":"u32"}],"output":{"generics":["stylecontextprintflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",313,{"inputs":[{"name":"u32"}],"output":{"name":"stylecontextprintflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"stylecontextprintflags"}}],[11,"bitor_assign","","Adds the set of flags.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"stylecontextprintflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"stylecontextprintflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"stylecontextprintflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",313,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",313,{"inputs":[{"name":"self"}],"output":{"name":"stylecontextprintflags"}}],[11,"extend","","",313,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",313,{"inputs":[{"name":"t"}],"output":{"name":"stylecontextprintflags"}}],[11,"static_type","","",313,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",313,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",313,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",313,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"targetflags"}}],[11,"partial_cmp","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"le","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"gt","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"ge","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"cmp","","",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"ordering"}}],[11,"hash","","",314,null],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SAME_APP","","",314,null],[18,"SAME_WIDGET","","",314,null],[18,"OTHER_APP","","",314,null],[18,"OTHER_WIDGET","","",314,null],[11,"empty","","Returns an empty set of flags.",314,{"inputs":[],"output":{"name":"targetflags"}}],[11,"all","","Returns the set containing all flags.",314,{"inputs":[],"output":{"name":"targetflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",314,{"inputs":[{"name":"u32"}],"output":{"generics":["targetflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",314,{"inputs":[{"name":"u32"}],"output":{"name":"targetflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",314,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",314,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",314,{"inputs":[{"name":"self"},{"name":"targetflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"targetflags"}}],[11,"bitor_assign","","Adds the set of flags.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"targetflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"targetflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":{"name":"targetflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",314,{"inputs":[{"name":"self"},{"name":"targetflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",314,{"inputs":[{"name":"self"}],"output":{"name":"targetflags"}}],[11,"extend","","",314,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",314,{"inputs":[{"name":"t"}],"output":{"name":"targetflags"}}],[11,"static_type","","",314,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",314,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",314,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",314,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"textsearchflags"}}],[11,"partial_cmp","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"le","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"gt","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"ge","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"cmp","","",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"ordering"}}],[11,"hash","","",315,null],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"VISIBLE_ONLY","","",315,null],[18,"TEXT_ONLY","","",315,null],[18,"CASE_INSENSITIVE","","",315,null],[11,"empty","","Returns an empty set of flags.",315,{"inputs":[],"output":{"name":"textsearchflags"}}],[11,"all","","Returns the set containing all flags.",315,{"inputs":[],"output":{"name":"textsearchflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",315,{"inputs":[{"name":"u32"}],"output":{"generics":["textsearchflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",315,{"inputs":[{"name":"u32"}],"output":{"name":"textsearchflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",315,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",315,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"textsearchflags"}}],[11,"bitor_assign","","Adds the set of flags.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"textsearchflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"textsearchflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":{"name":"textsearchflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",315,{"inputs":[{"name":"self"},{"name":"textsearchflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",315,{"inputs":[{"name":"self"}],"output":{"name":"textsearchflags"}}],[11,"extend","","",315,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",315,{"inputs":[{"name":"t"}],"output":{"name":"textsearchflags"}}],[11,"static_type","","",315,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",315,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",315,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",315,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"toolpalettedragtargets"}}],[11,"partial_cmp","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"le","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"gt","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"ge","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"cmp","","",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"ordering"}}],[11,"hash","","",316,null],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ITEMS","","",316,null],[18,"GROUPS","","",316,null],[11,"empty","","Returns an empty set of flags.",316,{"inputs":[],"output":{"name":"toolpalettedragtargets"}}],[11,"all","","Returns the set containing all flags.",316,{"inputs":[],"output":{"name":"toolpalettedragtargets"}}],[11,"bits","","Returns the raw value of the flags currently stored.",316,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",316,{"inputs":[{"name":"u32"}],"output":{"generics":["toolpalettedragtargets"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",316,{"inputs":[{"name":"u32"}],"output":{"name":"toolpalettedragtargets"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",316,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",316,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"toolpalettedragtargets"}}],[11,"bitor_assign","","Adds the set of flags.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"toolpalettedragtargets"}}],[11,"bitxor_assign","","Toggles the set of flags.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"toolpalettedragtargets"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":{"name":"toolpalettedragtargets"}}],[11,"sub_assign","","Disables all flags enabled in the set.",316,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",316,{"inputs":[{"name":"self"}],"output":{"name":"toolpalettedragtargets"}}],[11,"extend","","",316,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",316,{"inputs":[{"name":"t"}],"output":{"name":"toolpalettedragtargets"}}],[11,"static_type","","",316,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",316,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",316,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",316,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"treemodelflags"}}],[11,"partial_cmp","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"le","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"gt","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"ge","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"cmp","","",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"ordering"}}],[11,"hash","","",317,null],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ITERS_PERSIST","","",317,null],[18,"LIST_ONLY","","",317,null],[11,"empty","","Returns an empty set of flags.",317,{"inputs":[],"output":{"name":"treemodelflags"}}],[11,"all","","Returns the set containing all flags.",317,{"inputs":[],"output":{"name":"treemodelflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",317,{"inputs":[{"name":"u32"}],"output":{"generics":["treemodelflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",317,{"inputs":[{"name":"u32"}],"output":{"name":"treemodelflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",317,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",317,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"treemodelflags"}}],[11,"bitor_assign","","Adds the set of flags.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"treemodelflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"treemodelflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":{"name":"treemodelflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",317,{"inputs":[{"name":"self"},{"name":"treemodelflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",317,{"inputs":[{"name":"self"}],"output":{"name":"treemodelflags"}}],[11,"extend","","",317,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",317,{"inputs":[{"name":"t"}],"output":{"name":"treemodelflags"}}],[11,"static_type","","",317,{"inputs":[],"output":{"name":"type"}}],[11,"from_value_optional","","",317,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"from_value","","",317,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"set_value","","",317,{"inputs":[{"name":"value"},{"name":"self"}],"output":null}],[11,"deref","","",318,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",318,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",319,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",319,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",320,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",320,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",321,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",321,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",322,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",322,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",323,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",323,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",324,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",324,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",325,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",325,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",326,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",326,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",327,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",327,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",328,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",328,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",329,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",329,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",330,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",330,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",331,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",331,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",332,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",332,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",333,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",333,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",334,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",334,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",335,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",335,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",336,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",336,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",337,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",337,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",338,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",338,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",339,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",339,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",340,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",340,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",341,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",341,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",342,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",342,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",343,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",343,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",344,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",344,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",345,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",345,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",346,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",346,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",347,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",347,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",348,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",348,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",349,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",349,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",350,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",350,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",351,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",351,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",352,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",352,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",353,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",353,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",354,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",354,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",355,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",355,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",356,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",356,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",357,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",357,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",358,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",358,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",359,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",359,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",360,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",360,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",361,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",361,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",362,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",362,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",363,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",363,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",364,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",364,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",365,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",365,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",366,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",366,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",367,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",367,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",368,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",368,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",369,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",369,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",370,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",370,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",371,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",371,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",372,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",372,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",373,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",373,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",374,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",374,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",375,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",375,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",376,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",376,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",377,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",377,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",378,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",378,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",379,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",379,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",380,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",380,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",381,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",381,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",382,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",382,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",383,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",383,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",384,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",384,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",385,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",385,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",386,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",386,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",387,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",387,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",388,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",388,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",389,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",389,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",390,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",390,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",391,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",391,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",392,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",392,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",393,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",393,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",394,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",394,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",395,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",395,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",396,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",396,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",397,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",397,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",398,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",398,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",399,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",399,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",400,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",400,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",401,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",401,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",402,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",402,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",403,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",403,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",404,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",404,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",405,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",405,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",406,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",406,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",407,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",407,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",408,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",408,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",409,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",409,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",410,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",410,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",411,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",411,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",412,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",412,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",413,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",413,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",414,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",414,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",415,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",415,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",416,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",416,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",417,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",417,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",418,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",418,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",419,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",419,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",420,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",420,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",421,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",421,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",422,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",422,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",423,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",423,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",424,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",424,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",425,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",425,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",426,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",426,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",427,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",427,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",428,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",428,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",429,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",429,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",430,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",430,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",431,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",431,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",432,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",432,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",433,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",433,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",434,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",434,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",435,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",435,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",436,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",436,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",437,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",437,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",438,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",438,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",439,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",439,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",440,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",440,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",441,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",441,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",442,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",442,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",443,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",443,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",444,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",444,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",445,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",445,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",446,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",446,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",447,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",447,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",448,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",448,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",449,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",449,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",450,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",450,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",451,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",451,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",452,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",452,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",453,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",453,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",454,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",454,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",455,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",455,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",456,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",456,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",457,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",457,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",458,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",458,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",459,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",459,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",460,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",460,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",461,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",461,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",462,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",462,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",463,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",463,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",464,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",464,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",465,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",465,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",466,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",466,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",467,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",467,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",468,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",468,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",469,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",469,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",470,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",470,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",471,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",471,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",472,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",472,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",473,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",473,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",474,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",474,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",475,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",475,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",476,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",476,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",477,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",477,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",478,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",478,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",479,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",479,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",480,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",480,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",481,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",481,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",482,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",482,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",483,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",483,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",484,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",484,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",485,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",485,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",486,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",486,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",487,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",487,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",488,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",488,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",489,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",489,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",490,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",490,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",491,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",491,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",492,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",492,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",493,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",493,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",494,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",494,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",495,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",495,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",496,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",496,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",497,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",497,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",498,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",498,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",499,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",499,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",500,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",500,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",501,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",501,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",502,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",502,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",503,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",503,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",504,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",504,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",505,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",505,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",506,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",506,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",507,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",507,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",508,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",508,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",509,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",509,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",510,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",510,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",511,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",511,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",512,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",512,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",513,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",513,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",514,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",514,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",515,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",515,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",516,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",516,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",517,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",517,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",518,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",518,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",519,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",519,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",520,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",520,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",521,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",521,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",522,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",522,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",523,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",523,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",524,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",524,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",525,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",525,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",526,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",526,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",527,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",527,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",528,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",528,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",529,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",529,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",530,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",530,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",531,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",531,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",532,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",532,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",533,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",533,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",534,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",534,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",535,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",535,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",536,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",536,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",537,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",537,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",538,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",538,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",539,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",539,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",540,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",540,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",541,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",541,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",542,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",542,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",543,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",543,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",544,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",544,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",545,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",545,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",546,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",546,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",547,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",547,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",548,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",548,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",549,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",549,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",550,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",550,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",551,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",551,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",552,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",552,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",553,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",553,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",554,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",554,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",555,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",555,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",556,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",556,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",557,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",557,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",558,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",558,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",559,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",559,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",560,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",560,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",561,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",561,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",562,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"initialize","","",562,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",563,{"inputs":[{"name":"self"}],"output":{"name":"appchooser"}}],[11,"fmt","","",563,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",563,null],[11,"static_type","","",563,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",563,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",107,{"inputs":[{"name":"str"},{"name":"applicationflags"}],"output":{"generics":["application","boolerror"],"name":"result"}}],[11,"new_from_file","","Builds the [`Builder` UI definition][BUILDER-UI] in the file `filename`.",115,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"get_object","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"add_from_file","","",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",564,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"fmt","","",564,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",564,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",564,{"inputs":[],"output":{"name":"border"}}],[11,"right","","",564,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"left","","",564,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"top","","",564,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"bottom","","",564,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"default","","",564,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_buttons","","Creates a new `Dialog` with title `title` (or `None` for the default title; see `GtkWindowExt::set_title`) and transient parent `parent` (or `None` for none; see `GtkWindowExt::set_transient_for`). The `flags` argument can be used to make the dialog modal (`DialogFlags::Modal`) and/or to have it destroyed along with its transient parent (`DialogFlags::DestroyWithParent`). After `flags`, button text/response ID pairs should be listed, with a `None` pointer ending the list. Button text can be arbitrary text. A response ID can be any positive number, or one of the values in the `ResponseType` enumeration. If the user clicks one of these dialog buttons, `Dialog` will emit the `Dialog::response` signal with the corresponding response ID. If a `Dialog` receives the `Widget::delete-event` signal, it will emit ::response with a response ID of `ResponseType::DeleteEvent`. However, destroying a dialog does not emit the ::response signal; so be careful relying on ::response when using the `DialogFlags::DestroyWithParent` flag. Buttons are from left to right, so the first button in the list will be the leftmost button in the dialog.",145,null],[11,"clone","","",565,{"inputs":[{"name":"self"}],"output":{"name":"entrybuffer"}}],[11,"fmt","","",565,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",565,null],[11,"static_type","","",565,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",565,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Create a new `EntryBuffer` object.",565,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"name":"entrybuffer"}}],[11,"delete_text","","",565,{"inputs":[{"name":"self"},{"name":"u16"},{"generics":["u16"],"name":"option"}],"output":{"name":"u16"}}],[11,"get_bytes","","",565,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_length","","",565,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_max_length","","",565,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_text","","",565,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert_text","","",565,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"str"}],"output":{"name":"u16"}}],[11,"set_max_length","","",565,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"}],"output":null}],[11,"set_text","","",565,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"into","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",33,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"into","","",69,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",69,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"new","","Creates a new `FileChooserDialog`. This function is analogous to `Dialog::new_with_buttons`. ## `title` Title of the dialog, or `None` ## `parent` Transient parent of the dialog, or `None` ## `action` Open or save mode for the dialog ## `first_button_text` stock ID or text to go in the first button, or `None`",155,{"inputs":[{"generics":["str"],"name":"option"},{"name":"option"},{"name":"filechooseraction"}],"output":{"name":"filechooserdialog"}}],[11,"with_buttons","","This function creates a `FileChooserDialog` with buttons:",155,null],[11,"get_screen","","",188,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[11,"new","","Creates a new list store as with `n_columns` columns each of the types passed in. Note that only types derived from standard GObject fundamental types are supported.",195,null],[11,"new","","Creates a new message dialog, which is a simple dialog with some text the user may want to see. When the user clicks a button a “response” signal is emitted with response IDs from `ResponseType`. See `Dialog` for more details. ## `parent` transient parent, or `None` for none ## `flags` flags ## `type_` type of message ## `buttons` set of buttons to use ## `message_format` `printf`-style format string, or `None`",203,{"inputs":[{"name":"option"},{"name":"dialogflags"},{"name":"messagetype"},{"name":"buttonstype"},{"name":"str"}],"output":{"name":"messagedialog"}}],[11,"new","","Creates a new `RadioButton`. To be of any practical value, a widget should then be packed into the radio button. ## `group` an existing  radio button group, or `None` if you are creating a new group.",224,{"inputs":[],"output":{"name":"radiobutton"}}],[11,"new_with_label","","Creates a new `RadioButton` with a text label. ## `group` an existing  radio button group, or `None` if you are creating a new group. ## `label` the text label to display next to the radio button.",224,{"inputs":[{"name":"str"}],"output":{"name":"radiobutton"}}],[11,"new_with_mnemonic","","Creates a new `RadioButton` containing a label, adding it to the same group as `group`. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the button. ## `group` the radio button  group, or `None` ## `label` the text of the button, with an underscore in front of the  mnemonic character",224,{"inputs":[{"name":"str"}],"output":{"name":"radiobutton"}}],[11,"new","","Creates a new `RadioMenuItem`. ## `group` the group to which the  radio menu item is to be attached, or `None`",225,{"inputs":[],"output":{"name":"radiomenuitem"}}],[11,"new_with_label","","Creates a new `RadioMenuItem` whose child is a simple `Label`. ## `group`",225,{"inputs":[{"name":"str"}],"output":{"name":"radiomenuitem"}}],[11,"new_with_mnemonic","","Creates a new `RadioMenuItem` containing a label. The label will be created using `Label::new_with_mnemonic`, so underscores in `label` indicate the mnemonic for the menu item. ## `group`",225,{"inputs":[{"name":"str"}],"output":{"name":"radiomenuitem"}}],[11,"new","","Creates a new `RadioToolButton`, adding it to `group`. ## `group` An  existing radio button group, or `None` if you are creating a new group",226,{"inputs":[],"output":{"name":"radiotoolbutton"}}],[11,"new_from_stock","","Creates a new `RadioToolButton`, adding it to `group`. The new `RadioToolButton` will contain an icon and label from the stock item indicated by `stock_id`.",226,{"inputs":[{"name":"str"}],"output":{"name":"radiotoolbutton"}}],[11,"join_group","","",226,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"new","","Creates a new `RecentChooserDialog`. This function is analogous to `Dialog::new_with_buttons`. ## `title` Title of the dialog, or `None` ## `parent` Transient parent of the dialog, or `None`, ## `first_button_text` stock ID or text to go in the first button, or `None`",229,{"inputs":[{"generics":["str"],"name":"option"},{"name":"option"}],"output":{"name":"recentchooserdialog"}}],[11,"new_for_manager","","Creates a new `RecentChooserDialog` with a specified recent manager.",229,{"inputs":[{"generics":["str"],"name":"option"},{"name":"option"},{"name":"recentmanager"}],"output":{"name":"recentchooserdialog"}}],[11,"connect_change_value","","",247,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_input","","",247,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_output","","",247,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_value_changed","","",247,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"connect_wrapped","","",247,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"clone","","",566,{"inputs":[{"name":"self"}],"output":{"name":"socket"}}],[11,"fmt","","",566,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",566,null],[11,"static_type","","",566,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",566,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","",566,{"inputs":[],"output":{"name":"socket"}}],[11,"clone","","",567,{"inputs":[{"name":"self"}],"output":{"name":"targetentry"}}],[11,"fmt","","",567,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `TargetEntry`. ## `target` String identifier for target ## `flags` Set of flags, see `TargetFlags` ## `info` an ID that will be passed back to the application",567,{"inputs":[{"name":"str"},{"name":"targetflags"},{"name":"u32"}],"output":{"name":"targetentry"}}],[11,"get_target","","",567,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_flags","","",567,{"inputs":[{"name":"self"}],"output":{"name":"targetflags"}}],[11,"get_info","","",567,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"static_type","","",567,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `TargetList` from an array of `TargetEntry`. ## `targets` Pointer to an array  of `TargetEntry` ## `ntargets` number of entries in `targets`.",292,null],[11,"get_attributes","","Computes the effect of any tags applied to this spot in the text. The `values` parameter should be initialized to the default settings you wish to use if no tags are in effect. You’d typically obtain the defaults from `TextViewExt::get_default_attributes`.",294,{"inputs":[{"name":"self"},{"name":"textattributes"}],"output":{"name":"bool"}}],[11,"new","","",274,{"inputs":[{"name":"t"},{"generics":["treepath"],"name":"option"}],"output":{"name":"treemodelfilter"}}],[11,"reordered","","Lets a set of row reference created by `TreeRowReference::new_proxy` know that the model emitted the `TreeModel::rows-reordered` signal. ## `proxy` a `gobject::Object` ## `path` the parent path of the reordered signal ## `iter` the iter pointing to the parent of the reordered ## `new_order` the new order of rows",297,null],[11,"get_indices","","Returns the current indices of `self`.",296,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"new","","Creates a new tree store as with `n_columns` columns each of the types passed in. Note that only types derived from standard GObject fundamental types are supported.",277,null],[0,"prelude","","Traits and essential types intended for blanket imports.",null,null],[3,"Inhibit","gtk::prelude","Whether to propagate the signal to the default handler.",null,null],[12,"0","","",5,null],[5,"idle_add","","Adds a closure to be called by the default main loop when it's idle.",null,{"inputs":[{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add","","Adds a closure to be called by the default main loop at regular intervals with millisecond granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[5,"timeout_add_seconds","","Adds a closure to be called by the default main loop at regular intervals with second granularity.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"sourceid"}}],[8,"AboutDialogExt","","Trait containing all `AboutDialog` methods.",null,null],[10,"add_credit_section","","Creates a new section in the Credits page. ## `section_name` The name of the section ## `people` The people who belong to that section",568,null],[10,"get_artists","","Returns the string which are displayed in the artists tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_authors","","Returns the string which are displayed in the authors tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_comments","","Returns the comments string.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_copyright","","Returns the copyright string.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_documenters","","Returns the string which are displayed in the documenters tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_license","","Returns the license information.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_license_type","","Retrieves the license set using `AboutDialogExt::set_license_type`",568,{"inputs":[{"name":"self"}],"output":{"name":"license"}}],[10,"get_logo","","Returns the pixbuf displayed as logo in the about dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_logo_icon_name","","Returns the icon name displayed as logo in the about dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_program_name","","Returns the program name displayed in the about dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_translator_credits","","Returns the translator credits string which is displayed in the translators tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_version","","Returns the version string.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_website","","Returns the website URL.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_website_label","","Returns the label used for the website link.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_wrap_license","","Returns whether the license text in `self` is automatically wrapped.",568,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_artists","","Sets the strings which are displayed in the artists tab of the secondary credits dialog. ## `artists` a `None`-terminated array of strings",568,null],[10,"set_authors","","Sets the strings which are displayed in the authors tab of the secondary credits dialog. ## `authors` a `None`-terminated array of strings",568,null],[10,"set_comments","","Sets the comments string to display in the about dialog. This should be a short string of one or two lines. ## `comments` a comments string",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_copyright","","Sets the copyright string to display in the about dialog. This should be a short string of one or two lines. ## `copyright` the copyright string",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_documenters","","Sets the strings which are displayed in the documenters tab of the secondary credits dialog. ## `documenters` a `None`-terminated array of strings",568,null],[10,"set_license","","Sets the license information to be displayed in the secondary license dialog. If `license` is `None`, the license button is hidden. ## `license` the license information or `None`",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_license_type","","Sets the license of the application showing the `self` dialog from a list of known licenses.",568,{"inputs":[{"name":"self"},{"name":"license"}],"output":null}],[10,"set_logo","","Sets the pixbuf to be displayed as logo in the about dialog. If it is `None`, the default window icon set with `Window::set_default_icon` will be used. ## `logo` a `gdk_pixbuf::Pixbuf`, or `None`",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_logo_icon_name","","Sets the pixbuf to be displayed as logo in the about dialog. If it is `None`, the default window icon set with `Window::set_default_icon` will be used. ## `icon_name` an icon name, or `None`",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_program_name","","Sets the name to display in the about dialog. If this is not set, it defaults to `g_get_application_name`. ## `name` the program name",568,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_translator_credits","","Sets the translator credits string which is displayed in the translators tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_version","","Sets the version string to display in the about dialog. ## `version` the version string",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_website","","Sets the URL to use for the website link. ## `website` a URL string starting with \"http://\"",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_website_label","","Sets the label to be used for the website link. ## `website_label` the label used for the website link",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_wrap_license","","Sets whether the license text in `self` is automatically wrapped. ## `wrap_license` whether to wrap the license",568,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_link","","The signal which gets emitted to activate a URI. Applications may connect to it to override the default behaviour, which is to call `gtk_show_uri_on_window`. ## `uri` the URI that is activated",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_artists_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_authors_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_comments_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_copyright_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_documenters_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_license_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_license_type_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_logo_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_logo_icon_name_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_program_name_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_translator_credits_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_version_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_website_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_website_label_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_license_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AccelGroupExt","","Trait containing all `AccelGroup` methods.",null,null],[10,"disconnect_key","","Removes an accelerator previously installed through `AccelGroupExt::connect`. ## `accel_key` key value of the accelerator ## `accel_mods` modifier combination of the accelerator",569,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[10,"get_is_locked","","Locks are added and removed using `AccelGroupExt::lock` and `AccelGroupExt::unlock`.",569,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_modifier_mask","","Gets a `gdk::ModifierType` representing the mask for this `self`. For example, `gdk::ModifierType::ControlMask`, `gdk::ModifierType::ShiftMask`, etc.",569,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[10,"lock","","Locks the given accelerator group.",569,{"inputs":[{"name":"self"}],"output":null}],[10,"unlock","","Undoes the last call to `AccelGroupExt::lock` on this `self`.",569,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_accel_activate","","The accel-activate signal is an implementation detail of `AccelGroup` and not meant to be used by applications. ## `acceleratable` the object on which the accelerator was activated ## `keyval` the accelerator keyval ## `modifier` the modifier combination of the accelerator",569,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_locked_notify","","",569,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modifier_mask_notify","","",569,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ActionBarExt","","Trait containing all `ActionBar` methods.",null,null],[10,"get_center_widget","","Retrieves the center bar widget of the bar.",570,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"pack_end","","Adds `child` to `self`, packed with reference to the end of the `self`.",570,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"pack_start","","Adds `child` to `self`, packed with reference to the start of the `self`.",570,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_center_widget","","Sets the center widget for the `ActionBar`.",570,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_child_pack_type","","",570,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"packtype"}}],[10,"set_child_pack_type","","",570,{"inputs":[{"name":"self"},{"name":"t"},{"name":"packtype"}],"output":null}],[10,"get_child_position","","",570,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",570,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[8,"ActionableExt","","Trait containing all `Actionable` methods.",null,null],[10,"get_action_name","","Gets the action name for `self`.",571,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_action_target_value","","Gets the current target value of `self`.",571,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"set_action_name","","Specifies the name of the action with which this widget should be associated. If `action_name` is `None` then the widget will be unassociated from any previous action.",571,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_action_target_value","","Sets the target value of an actionable widget.",571,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"set_detailed_action_name","","Sets the action-name and associated string target value of an actionable widget.",571,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_property_action_name_notify","","",571,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AdjustmentExt","","Trait containing all `Adjustment` methods.",null,null],[10,"changed","","Emits a `Adjustment::changed` signal from the `Adjustment`. This is typically called by the owner of the `Adjustment` after it has changed any of the `Adjustment` properties other than the value.",572,{"inputs":[{"name":"self"}],"output":null}],[10,"clamp_page","","Updates the `Adjustment:value` property to ensure that the range between `lower` and `upper` is in the current page (i.e. between `Adjustment:value` and `Adjustment:value` + `Adjustment:page-size`). If the range is larger than the page size, then only the start of it will be in the current page.",572,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"configure","","Sets all properties of the adjustment at once.",572,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"get_lower","","Retrieves the minimum value of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_minimum_increment","","Gets the smaller of step increment and page increment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_page_increment","","Retrieves the page increment of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_page_size","","Retrieves the page size of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_step_increment","","Retrieves the step increment of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_upper","","Retrieves the maximum value of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_value","","Gets the current value of the adjustment. See `AdjustmentExt::set_value`.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_lower","","Sets the minimum value of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_page_increment","","Sets the page increment of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_page_size","","Sets the page size of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_step_increment","","Sets the step increment of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_upper","","Sets the maximum value of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_value","","Sets the `Adjustment` value. The value is clamped to lie between `Adjustment:lower` and `Adjustment:upper`.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"value_changed","","Emits a `Adjustment::value-changed` signal from the `Adjustment`. This is typically called by the owner of the `Adjustment` after it has changed the `Adjustment:value` property.",572,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_changed","","Emitted when one or more of the `Adjustment` properties have been changed, other than the `Adjustment:value` property.",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_value_changed","","Emitted when the `Adjustment:value` property has been changed.",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_lower_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_page_increment_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_page_size_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_step_increment_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_upper_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AlignmentExt","","`[Deprecated since 3.14]` Trait containing all `Alignment` methods.",null,null],[10,"get_padding","","Gets the padding on the different sides of the widget. See gtk_alignment_set_padding ().",573,null],[10,"set","","Sets the `Alignment` values.",573,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_padding","","Sets the padding on the different sides of the widget. The padding adds blank space to the sides of the widget. For instance, this can be used to indent the child widget towards the right by adding padding on the left.",573,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_property_bottom_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_bottom_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_left_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_left_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_right_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_right_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_top_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_top_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_xalign","","Horizontal position of child in available space. A value of 0.0 will flush the child left (or right, in RTL locales); a value of 1.0 will flush the child right (or left, in RTL locales).",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","Horizontal position of child in available space. A value of 0.0 will flush the child left (or right, in RTL locales); a value of 1.0 will flush the child right (or left, in RTL locales).",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xscale","","If available horizontal space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xscale","","If available horizontal space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yalign","","Vertical position of child in available space. A value of 0.0 will flush the child to the top; a value of 1.0 will flush the child to the bottom.",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","Vertical position of child in available space. A value of 0.0 will flush the child to the top; a value of 1.0 will flush the child to the bottom.",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yscale","","If available vertical space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yscale","","If available vertical space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_property_bottom_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_top_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xscale_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yscale_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AppChooserButtonExt","","",null,null],[10,"append_custom_item","","",574,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":null}],[10,"append_separator","","",574,{"inputs":[{"name":"self"}],"output":null}],[10,"get_heading","","",574,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_default_item","","",574,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_dialog_item","","",574,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active_custom_item","","",574,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_heading","","",574,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_show_default_item","","",574,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_dialog_item","","",574,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_custom_item_activated","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_heading_notify","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_default_item_notify","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_dialog_item_notify","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AppChooserDialogExt","","Trait containing all `AppChooserDialog` methods.",null,null],[10,"get_heading","","Returns the text to display at the top of the dialog.",575,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_widget","","Returns the `AppChooserWidget` of this dialog.",575,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[10,"set_heading","","Sets the text to display at the top of the dialog. If the heading is not set, the dialog displays a default text. ## `heading` a string containing Pango markup",575,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_gfile","","The GFile used by the `AppChooserDialog`. The dialog's `AppChooserWidget` content type will be guessed from the file, if present.",575,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"connect_property_gfile_notify","","",575,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_heading_notify","","",575,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AppChooserWidgetExt","","Trait containing all `AppChooserWidget` methods.",null,null],[10,"get_default_text","","Returns the text that is shown if there are not applications that can handle the content type.",576,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_all","","Returns the current value of the `AppChooserWidget:show-all` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_default","","Returns the current value of the `AppChooserWidget:show-default` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_fallback","","Returns the current value of the `AppChooserWidget:show-fallback` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_other","","Returns the current value of the `AppChooserWidget:show-other` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_recommended","","Returns the current value of the `AppChooserWidget:show-recommended` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_default_text","","Sets the text that is shown if there are not applications that can handle the content type. ## `text` the new value for `AppChooserWidget:default-text`",576,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_show_all","","Sets whether the app chooser should show all applications in a flat list. ## `setting` the new value for `AppChooserWidget:show-all`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_default","","Sets whether the app chooser should show the default handler for the content type in a separate section. ## `setting` the new value for `AppChooserWidget:show-default`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_fallback","","Sets whether the app chooser should show related applications for the content type in a separate section. ## `setting` the new value for `AppChooserWidget:show-fallback`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_other","","Sets whether the app chooser should show applications which are unrelated to the content type. ## `setting` the new value for `AppChooserWidget:show-other`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_recommended","","Sets whether the app chooser should show recommended applications for the content type in a separate section. ## `setting` the new value for `AppChooserWidget:show-recommended`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_application_activated","","Emitted when an application item is activated from the widget's list.",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_application_selected","","Emitted when an application item is selected from the widget's list. ## `application` the selected `gio::AppInfo`",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_populate_popup","","Emitted when a context menu is about to popup over an application item. Clients can insert menu items into the provided `Menu` object in the callback of this signal; the context menu will be shown over the item if at least one item has been added to the menu. ## `menu` the `Menu` to populate ## `application` the current `gio::AppInfo`",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_text_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_all_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_default_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_fallback_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_other_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_recommended_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GtkApplicationExt","","Trait containing all `Application` methods.",null,null],[10,"add_accelerator","","Installs an accelerator that will cause the named action to be activated when the key combination specificed by `accelerator` is pressed.",577,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":null}],[10,"add_window","","Adds a window to `self`.",577,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_accels_for_action","","Gets the accelerators that are currently associated with the given action.",577,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_actions_for_accel","","Returns the list of actions (possibly empty) that `accel` maps to. Each item in the list is a detailed action name in the usual form.",577,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_active_window","","Gets the “active” window for the application.",577,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_app_menu","","Returns the menu model that has been set with `GtkApplicationExt::set_app_menu`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_menu_by_id","","Gets a menu from automatically loaded resources. See [Automatic resources][automatic-resources] for more information.",577,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["menu"],"name":"option"}}],[10,"get_menubar","","Returns the menu model that has been set with `GtkApplicationExt::set_menubar`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_window_by_id","","Returns the `ApplicationWindow` with the given ID.",577,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_windows","","Gets a list of the `GtkWindows` associated with `self`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"inhibit","","Inform the session manager that certain types of actions should be inhibited. This is not guaranteed to work on all platforms and for all types of actions.",577,{"inputs":[{"name":"self"},{"name":"q"},{"name":"applicationinhibitflags"},{"name":"r"}],"output":{"name":"u32"}}],[10,"is_inhibited","","Determines if any of the actions specified in `flags` are currently inhibited (possibly by another application). ## `flags` what types of actions should be queried",577,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[10,"list_action_descriptions","","Lists the detailed action names which have associated accelerators. See `GtkApplicationExt::set_accels_for_action`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"prefers_app_menu","","Determines if the desktop environment in which the application is running would prefer an application menu be shown.",577,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remove_accelerator","","Removes an accelerator that has been previously added with `GtkApplicationExt::add_accelerator`.",577,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"remove_window","","Remove a window from `self`.",577,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_accels_for_action","","Sets zero or more keyboard accelerators that will trigger the given action. The first item in `accels` will be the primary accelerator, which may be displayed in the UI.",577,null],[10,"set_app_menu","","Sets or unsets the application menu for `self`.",577,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_menubar","","Sets or unsets the menubar for windows of `self`.",577,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"uninhibit","","Removes an inhibitor that has been established with `GtkApplicationExt::inhibit`. Inhibitors are also cleared when the application exits. ## `cookie` a cookie that was returned by `GtkApplicationExt::inhibit`",577,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_active_window","","",577,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_property_register_session","","",577,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_register_session","","",577,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_window_added","","Emitted when a `Window` is added to `application` through `GtkApplicationExt::add_window`. ## `window` the newly-added `Window`",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_window_removed","","Emitted when a `Window` is removed from `application`, either as a side-effect of being destroyed or explicitly through `GtkApplicationExt::remove_window`. ## `window` the `Window` that is being removed",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_window_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_app_menu_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menubar_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_register_session_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ApplicationWindowExt","","Trait containing all `ApplicationWindow` methods.",null,null],[10,"get_help_overlay","","Gets the `ShortcutsWindow` that has been set up with a prior call to `ApplicationWindowExt::set_help_overlay`.",578,{"inputs":[{"name":"self"}],"output":{"generics":["shortcutswindow"],"name":"option"}}],[10,"get_id","","Returns the unique ID of the window. If the window has not yet been added to a `Application`, returns `0`.",578,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_show_menubar","","Returns whether the window will display a menubar for the app menu and menubar as needed.",578,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_help_overlay","","Associates a shortcuts window with the application window, and sets up an action with the name win.show-help-overlay to present it.",578,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_show_menubar","","Sets whether the window will display a menubar for the app menu and menubar as needed. ## `show_menubar` whether to show a menubar when needed",578,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_menubar_notify","","",578,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ArrowExt","","`[Deprecated since 3.14]` Trait containing all `Arrow` methods.",null,null],[10,"set","","Sets the direction and style of the `Arrow`, `self`.",579,{"inputs":[{"name":"self"},{"name":"arrowtype"},{"name":"shadowtype"}],"output":null}],[10,"get_property_arrow_type","","",579,{"inputs":[{"name":"self"}],"output":{"name":"arrowtype"}}],[10,"set_property_arrow_type","","",579,{"inputs":[{"name":"self"},{"name":"arrowtype"}],"output":null}],[10,"get_property_shadow_type","","",579,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"set_property_shadow_type","","",579,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"connect_property_arrow_type_notify","","",579,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",579,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AspectFrameExt","","Trait containing all `AspectFrame` methods.",null,null],[10,"set","","Set parameters for an existing `AspectFrame`. ## `xalign` Horizontal alignment of the child within the allocation of  the `AspectFrame`. This ranges from 0.0 (left aligned)  to 1.0 (right aligned) ## `yalign` Vertical alignment of the child within the allocation of  the `AspectFrame`. This ranges from 0.0 (top aligned)  to 1.0 (bottom aligned) ## `ratio` The desired aspect ratio. ## `obey_child` If `true`, `ratio` is ignored, and the aspect  ratio is taken from the requistion of the child.",580,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"bool"}],"output":null}],[10,"get_property_obey_child","","",580,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_obey_child","","",580,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_ratio","","",580,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_ratio","","",580,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xalign","","",580,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","",580,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yalign","","",580,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","",580,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_property_obey_child_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ratio_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AssistantExt","","Trait containing all `Assistant` methods.",null,null],[10,"add_action_widget","","Adds a widget to the action area of a `Assistant`. ## `child` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"append_page","","Appends a page to the `self`. ## `page` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"commit","","Erases the visited page history so the back button is not shown on the current page, and removes the cancel button from subsequent pages.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"get_current_page","","Returns the page number of the current page.",581,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_pages","","Returns the number of pages in the `self`",581,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_nth_page","","Returns the child widget contained in page number `page_num`. ## `page_num` the index of a page in the `self`,  or -1 to get the last page",581,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_page_complete","","Gets whether `page` is complete. ## `page` a page of `self`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_page_has_padding","","Gets whether page has padding.",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_page_title","","Gets the title for `page`. ## `page` a page of `self`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_page_type","","Gets the page type of `page`. ## `page` a page of `self`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"assistantpagetype"}}],[10,"insert_page","","Inserts a page in the `self` at a given position. ## `page` a `Widget` ## `position` the index (starting at 0) at which to insert the page,  or -1 to append the page to the `self`",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"next_page","","Navigate to the next page.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"prepend_page","","Prepends a page to the `self`. ## `page` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"previous_page","","Navigate to the previous visited page.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_action_widget","","Removes a widget from the action area of a `Assistant`. ## `child` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_page","","Removes the `page_num`’s page from `self`. ## `page_num` the index of a page in the `self`,  or -1 to remove the last page",581,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_current_page","","Switches the page to `page_num`.",581,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_page_complete","","Sets whether `page` contents are complete.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_page_has_padding","","Sets whether the assistant is adding padding around the page.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_page_title","","Sets a title for `page`.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"set_page_type","","Sets the page type for `page`.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"assistantpagetype"}],"output":null}],[10,"update_buttons_state","","Forces `self` to recompute the buttons state.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_use_header_bar","","",581,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_child_complete","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_complete","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_has_padding","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_has_padding","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_page_type","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"assistantpagetype"}}],[10,"set_child_page_type","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"assistantpagetype"}],"output":null}],[10,"get_child_title","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_title","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"connect_apply","","The ::apply signal is emitted when the apply button is clicked.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cancel","","The ::cancel signal is emitted when then the cancel button is clicked.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_close","","The ::close signal is emitted either when the close button of a summary page is clicked, or when the apply button in the last page in the flow (of type `AssistantPageType::Confirm`) is clicked.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_escape","","",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_escape","","",581,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_prepare","","The ::prepare signal is emitted when a new page is set as the assistant's current page, before making the new page visible.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_header_bar_notify","","",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BinExt","","Trait containing all `Bin` methods.",null,null],[10,"get_child","","Gets the child of the `Bin`, or `None` if the bin contains no child widget. The returned widget does not have a reference added, so you do not need to unref it.",582,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[8,"BoxExt","","Trait containing all `Box` methods.",null,null],[10,"get_baseline_position","","Gets the value set by `BoxExt::set_baseline_position`.",583,{"inputs":[{"name":"self"}],"output":{"name":"baselineposition"}}],[10,"get_center_widget","","Retrieves the center widget of the box.",583,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_homogeneous","","Returns whether the box is homogeneous (all children are the same size). See `BoxExt::set_homogeneous`.",583,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_spacing","","Gets the value set by `BoxExt::set_spacing`.",583,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"pack_end","","Adds `child` to `self`, packed with reference to the end of `self`. The `child` is packed after (away from end of) any other child packed with reference to the end of `self`. ## `child` the `Widget` to be added to `self` ## `expand` `true` if the new child is to be given extra space allocated  to `self`. The extra space will be divided evenly between all children  of `self` that use this option ## `fill` `true` if space given to `child` by the `expand` option is  actually allocated to `child`, rather than just padding it. This  parameter has no effect if `expand` is set to `false`. A child is  always allocated the full height of a horizontal `Box` and the full width  of a vertical `Box`. This option affects the other dimension ## `padding` extra space in pixels to put between this child and its  neighbors, over and above the global amount specified by  `Box:spacing` property. If `child` is a widget at one of the  reference ends of `self`, then `padding` pixels are also put between  `child` and the reference edge of `self`",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"pack_start","","Adds `child` to `self`, packed with reference to the start of `self`. The `child` is packed after any other child packed with reference to the start of `self`. ## `child` the `Widget` to be added to `self` ## `expand` `true` if the new child is to be given extra space allocated  to `self`. The extra space will be divided evenly between all children  that use this option ## `fill` `true` if space given to `child` by the `expand` option is  actually allocated to `child`, rather than just padding it. This  parameter has no effect if `expand` is set to `false`. A child is  always allocated the full height of a horizontal `Box` and the full width  of a vertical `Box`. This option affects the other dimension ## `padding` extra space in pixels to put between this child and its  neighbors, over and above the global amount specified by  `Box:spacing` property. If `child` is a widget at one of the  reference ends of `self`, then `padding` pixels are also put between  `child` and the reference edge of `self`",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"query_child_packing","","Obtains information about how `child` is packed into `self`. ## `child` the `Widget` of the child to query ## `expand` pointer to return location for expand child  property ## `fill` pointer to return location for fill child  property ## `padding` pointer to return location for padding  child property ## `pack_type` pointer to return location for pack-type  child property",583,null],[10,"reorder_child","","Moves `child` to a new `position` in the list of `self` children. The list contains widgets packed `PackType::Start` as well as widgets packed `PackType::End`, in the order that these widgets were added to `self`.",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_baseline_position","","Sets the baseline position of a box. This affects only horizontal boxes with at least one baseline aligned child. If there is more vertical space available than requested, and the baseline is not allocated by the parent then `position` is used to allocate the baseline wrt the extra space available.",583,{"inputs":[{"name":"self"},{"name":"baselineposition"}],"output":null}],[10,"set_center_widget","","Sets a center widget; that is a child widget that will be centered with respect to the full width of the box, even if the children at either side take up different amounts of space.",583,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_child_packing","","Sets the way `child` is packed into `self`. ## `child` the `Widget` of the child to set ## `expand` the new value of the expand child property ## `fill` the new value of the fill child property ## `padding` the new value of the padding child property ## `pack_type` the new value of the pack-type child property",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"u32"},{"name":"packtype"}],"output":null}],[10,"set_homogeneous","","Sets the `Box:homogeneous` property of `self`, controlling whether or not all children of `self` are given equal space in the box. ## `homogeneous` a boolean value, `true` to create equal allotments,  `false` for variable allotments",583,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_spacing","","Sets the `Box:spacing` property of `self`, which is the number of pixels to place between children of `self`. ## `spacing` the number of pixels to put between children",583,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_child_position","","",583,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",583,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_baseline_position_notify","","",583,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_homogeneous_notify","","",583,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",583,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BuildableExt","","Trait containing all `Buildable` methods.",null,null],[10,"add_child","","Adds a child to `self`. `type_` is an optional string describing how the child should be added. ## `builder` a `Builder` ## `child` child to add ## `type_` kind of child or `None`",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"p"},{"name":"q"}],"output":null}],[10,"construct_child","","Constructs a child of `self` with the name `name`.",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_internal_child","","Get the internal child called `childname` of the `self` object. ## `builder` a `Builder` ## `childname` name of child",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"parser_finished","","Called when the builder finishes the parsing of a [`Builder` UI definition][BUILDER-UI]. Note that this will be called once for each time `Builder::add_from_file` or `BuilderExt::add_from_string` is called on a builder. ## `builder` a `Builder`",584,{"inputs":[{"name":"self"},{"name":"builder"}],"output":null}],[10,"set_buildable_property","","Sets the property name `name` to `value` on the `self` object. ## `builder` a `Builder` ## `name` name of property ## `value` value of property",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"str"},{"name":"value"}],"output":null}],[8,"BuilderExt","","Trait containing all `Builder` methods.",null,null],[10,"add_from_resource","","Parses a resource file containing a [`Builder` UI definition][BUILDER-UI] and merges it with the current contents of `self`.",585,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_from_string","","Parses a string containing a [`Builder` UI definition][BUILDER-UI] and merges it with the current contents of `self`.",585,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_objects_from_resource","","Parses a resource file containing a [`Builder` UI definition][BUILDER-UI] building only the requested objects and merges them with the current contents of `self`.",585,null],[10,"add_objects_from_string","","Parses a string containing a [`Builder` UI definition][BUILDER-UI] building only the requested objects and merges them with the current contents of `self`.",585,null],[10,"expose_object","","Add `object` to the `self` object pool so it can be referenced just like any other object built by builder.",585,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"extend_with_template","","Main private entry point for building composite container components from template XML.",585,{"inputs":[{"name":"self"},{"name":"p"},{"name":"type"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_application","","Gets the `Application` associated with the builder.",585,{"inputs":[{"name":"self"}],"output":{"generics":["application"],"name":"option"}}],[10,"get_objects","","Gets all objects that have been constructed by `self`. Note that this function does not increment the reference counts of the returned objects.",585,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"vec"}}],[10,"get_translation_domain","","Gets the translation domain of `self`.",585,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_type_from_name","","Looks up a type by name, using the virtual function that `Builder` has for that purpose. This is mainly used when implementing the `Buildable` interface on a type. ## `type_name` type name to lookup",585,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"type"}}],[10,"set_application","","Sets the application associated with `self`.",585,{"inputs":[{"name":"self"},{"name":"application"}],"output":null}],[10,"set_translation_domain","","Sets the translation domain of `self`. See `Builder:translation-domain`. ## `domain` the translation domain or `None`",585,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"value_from_string_type","","Like `BuilderExt::value_from_string`, this function demarshals a value from a string, but takes a `glib::Type` instead of `gobject::ParamSpec`. This function calls `gobject::Value::init` on the `value` argument, so it need not be initialised beforehand.",585,{"inputs":[{"name":"self"},{"name":"type"},{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[10,"connect_property_translation_domain_notify","","",585,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ButtonExt","","Trait containing all `Button` methods.",null,null],[10,"clicked","","Emits a `Button::clicked` signal to the given `Button`.",586,{"inputs":[{"name":"self"}],"output":null}],[10,"get_alignment","","Gets the alignment of the child in the button.",586,null],[10,"get_always_show_image","","Returns whether the button will ignore the `Settings:gtk-button-images` setting and always show the image, if available.",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_event_window","","Returns the button’s event window if it is realized, `None` otherwise. This function should be rarely needed.",586,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_focus_on_click","","Returns whether the button grabs focus when it is clicked with the mouse. See `ButtonExt::set_focus_on_click`.",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_image","","Gets the widget that is currenty set as the image of `self`. This may have been explicitly set by `ButtonExt::set_image` or constructed by `Button::new_from_stock`.",586,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_image_position","","Gets the position of the image relative to the text inside the button.",586,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"get_label","","Fetches the text from the label of the button, as set by `ButtonExt::set_label`. If the label text has not been set the return value will be `None`. This will be the case if you create an empty button with `Button::new` to use as a container.",586,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_relief","","Returns the current relief style of the given `Button`.",586,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_use_stock","","Returns whether the button label is a stock item.",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_underline","","Returns whether an embedded underline in the button label indicates a mnemonic. See gtk_button_set_use_underline ().",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_alignment","","Sets the alignment of the child. This property has no effect unless the child is a `Misc` or a `Alignment`.",586,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_always_show_image","","If `true`, the button will ignore the `Settings:gtk-button-images` setting and always show the image, if available.",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_focus_on_click","","Sets whether the button will grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_image","","Set the image of `self` to the given widget. The image will be displayed if the label text is `None` or if `Button:always-show-image` is `true`. You don’t have to call `WidgetExt::show` on `image` yourself. ## `image` a widget to set as the image for the button",586,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_image_position","","Sets the position of the image relative to the text inside the button. ## `position` the position",586,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"set_label","","Sets the text of the label of the button to `str`. This text is also used to select the stock item if `ButtonExt::set_use_stock` is used.",586,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_relief","","Sets the relief style of the edges of the given `Button` widget. Two styles exist, `ReliefStyle::Normal` and `ReliefStyle::None`. The default style is, as one can guess, `ReliefStyle::Normal`. The deprecated value `ReliefStyle::Half` behaves the same as `ReliefStyle::Normal`. ## `relief` The `ReliefStyle` as described above",586,{"inputs":[{"name":"self"},{"name":"reliefstyle"}],"output":null}],[10,"set_use_stock","","If `true`, the label set on the button is used as a stock id to select the stock item for the button.",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text of the button label indicates the next character should be used for the mnemonic accelerator key. ## `use_underline` `true` if underlines in the text indicate mnemonics",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_xalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its horizontal alignment. 0.0 is left aligned, 1.0 is right aligned.",586,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its horizontal alignment. 0.0 is left aligned, 1.0 is right aligned.",586,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its vertical alignment. 0.0 is top aligned, 1.0 is bottom aligned.",586,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its vertical alignment. 0.0 is top aligned, 1.0 is bottom aligned.",586,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_activate","","The ::activate signal on `Button` is an action signal and emitting it causes the button to animate press then release. Applications should never connect to this signal, but use the `Button::clicked` signal.",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",586,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_clicked","","Emitted when the button has been activated (pressed and released).",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_clicked","","",586,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_always_show_image_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_position_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_relief_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_stock_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ButtonBoxExt","","Trait containing all `ButtonBox` methods.",null,null],[10,"get_child_non_homogeneous","","Returns whether the child is exempted from homogenous sizing. ## `child` a child of `self`",587,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_child_secondary","","Returns whether `child` should appear in a secondary group of children. ## `child` a child of `self`",587,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_layout","","Retrieves the method being used to arrange the buttons in a button box.",587,{"inputs":[{"name":"self"}],"output":{"name":"buttonboxstyle"}}],[10,"set_child_non_homogeneous","","Sets whether the child is exempted from homogeous sizing. ## `child` a child of `self` ## `non_homogeneous` the new value",587,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_child_secondary","","Sets whether `child` should appear in a secondary group of children. A typical use of a secondary child is the help button in a dialog.",587,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_layout","","Changes the way buttons are arranged in their container. ## `layout_style` the new layout style",587,{"inputs":[{"name":"self"},{"name":"buttonboxstyle"}],"output":null}],[10,"get_property_layout_style","","",587,{"inputs":[{"name":"self"}],"output":{"name":"buttonboxstyle"}}],[10,"set_property_layout_style","","",587,{"inputs":[{"name":"self"},{"name":"buttonboxstyle"}],"output":null}],[10,"connect_property_layout_style_notify","","",587,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CalendarExt","","Trait containing all `Calendar` methods.",null,null],[10,"clear_marks","","Remove all visual markers.",588,{"inputs":[{"name":"self"}],"output":null}],[10,"get_date","","Obtains the selected date from a `Calendar`. ## `year` location to store the year as a decimal  number (e.g. 2011), or `None` ## `month` location to store the month number  (between 0 and 11), or `None` ## `day` location to store the day number (between  1 and 31), or `None`",588,null],[10,"get_day_is_marked","","Returns if the `day` of the `self` is already marked. ## `day` the day number between 1 and 31.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_detail_height_rows","","Queries the height of detail cells, in rows. See `Calendar:detail-width-chars`.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_detail_width_chars","","Queries the width of detail cells, in characters. See `Calendar:detail-width-chars`.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_display_options","","Returns the current display options of `self`.",588,{"inputs":[{"name":"self"}],"output":{"name":"calendardisplayoptions"}}],[10,"mark_day","","Places a visual marker on a particular day. ## `day` the day number to mark between 1 and 31.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"select_day","","Selects a day from the current month. ## `day` the day number between 1 and 31, or 0 to unselect  the currently selected day.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"select_month","","Shifts the calendar to a different month. ## `month` a month number between 0 and 11. ## `year` the year the month is in.",588,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"set_detail_height_rows","","Updates the height of detail cells. See `Calendar:detail-height-rows`. ## `rows` detail height in rows.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_detail_width_chars","","Updates the width of detail cells. See `Calendar:detail-width-chars`. ## `chars` detail width in characters.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_display_options","","Sets display options (whether to display the heading and the month headings). ## `flags` the display options to set",588,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[10,"unmark_day","","Removes the visual marker from a particular day. ## `day` the day number to unmark between 1 and 31.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_day","","The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day). This property gets initially set to the current day.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_day","","The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day). This property gets initially set to the current day.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_month","","The selected month (as a number between 0 and 11). This property gets initially set to the current month.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_month","","The selected month (as a number between 0 and 11). This property gets initially set to the current month.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_no_month_change","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_no_month_change","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_day_names","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_day_names","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_details","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_details","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_heading","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_heading","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_week_numbers","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_week_numbers","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_year","","The selected year. This property gets initially set to the current year.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_year","","The selected year. This property gets initially set to the current year.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_day_selected","","Emitted when the user selects a day.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_day_selected_double_click","","Emitted when the user double-clicks a day.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_month_changed","","Emitted when the user clicks a button to change the selected month on a calendar.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_next_month","","Emitted when the user switched to the next month.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_next_year","","Emitted when user switched to the next year.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_prev_month","","Emitted when the user switched to the previous month.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_prev_year","","Emitted when user switched to the previous year.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_day_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_detail_height_rows_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_detail_width_chars_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_month_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_no_month_change_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_day_names_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_details_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_heading_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_week_numbers_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_year_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellAreaExt","","Trait containing all `CellArea` methods.",null,null],[10,"activate","","Activates `self`, usually by activating the currently focused cell, however some subclasses which embed widgets in the area can also activate a widget if it currently has the focus. ## `context` the `CellAreaContext` in context with the current row data ## `widget` the `Widget` that `self` is rendering on ## `cell_area` the size and location of `self` relative to `widget`’s allocation ## `flags` the `CellRendererState` flags for `self` for this row of data. ## `edit_only` if `true` then only cell renderers that are `CellRendererMode::Editable`  will be activated.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"rectangle"},{"name":"cellrendererstate"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"activate_cell","","This is used by `CellArea` subclasses when handling events to activate cells, the base `CellArea` class activates cells for keyboard events for free in its own `CellArea`->`activate` implementation. ## `widget` the `Widget` that `self` is rendering onto ## `renderer` the `CellRenderer` in `self` to activate ## `event` the `GdkEvent` for which cell activation should occur ## `cell_area` the `gdk::Rectangle` in `widget` relative coordinates  of `renderer` for the current row. ## `flags` the `CellRendererState` for `renderer`",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"event"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[10,"add","","Adds `renderer` to `self` with the default child cell properties. ## `renderer` the `CellRenderer` to add to `self`",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add_focus_sibling","","Adds `sibling` to `renderer`’s focusable area, focus will be drawn around `renderer` and all of its siblings if `renderer` can focus for a given row.",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"apply_attributes","","Applies any connected attributes to the renderers in `self` by pulling the values from `tree_model`. ## `tree_model` the `TreeModel` to pull values from ## `iter` the `TreeIter` in `tree_model` to apply values for ## `is_expander` whether `iter` has children ## `is_expanded` whether `iter` is expanded in the view and  children are visible",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"treeiter"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"attribute_connect","","Connects an `attribute` to apply values from `column` for the `TreeModel` in use. ## `renderer` the `CellRenderer` to connect an attribute for ## `attribute` the attribute name ## `column` the `TreeModel` column to fetch attribute values from",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"attribute_disconnect","","Disconnects `attribute` for the `renderer` in `self` so that attribute will no longer be updated with values from the model. ## `renderer` the `CellRenderer` to disconnect an attribute for ## `attribute` the attribute name",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"attribute_get_column","","Returns the model column that an attribute has been mapped to, or -1 if the attribute is not mapped.",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"name":"i32"}}],[10,"copy_context","","This is sometimes needed for cases where rows need to share alignments in one orientation but may be separately grouped in the opposing orientation.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"}],"output":{"generics":["cellareacontext"],"name":"option"}}],[10,"create_context","","Creates a `CellAreaContext` to be used with `self` for all purposes. `CellAreaContext` stores geometry information for rows for which it was operated on, it is important to use the same context for the same row of data at all times (i.e. one should render and handle events with the same `CellAreaContext` which was used to request the size of those rows of data).",589,{"inputs":[{"name":"self"}],"output":{"generics":["cellareacontext"],"name":"option"}}],[10,"event","","Delegates event handling to a `CellArea`. ## `context` the `CellAreaContext` for this row of data. ## `widget` the `Widget` that `self` is rendering to ## `event` the `GdkEvent` to handle ## `cell_area` the `widget` relative coordinates for `self` ## `flags` the `CellRendererState` for `self` in this row.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"event"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"name":"i32"}}],[10,"focus","","This should be called by the `self`’s owning layout widget when focus is to be passed to `self`, or moved within `self` for a given `direction` and row data.",589,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[10,"get_cell_allocation","","Derives the allocation of `renderer` inside `self` if `self` were to be renderered in `cell_area`. ## `context` the `CellAreaContext` used to hold sizes for `self`. ## `widget` the `Widget` that `self` is rendering on ## `renderer` the `CellRenderer` to get the allocation for ## `cell_area` the whole allocated area for `self` in `widget`  for this row ## `allocation` where to store the allocation for `renderer`",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"q"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[10,"get_cell_at_position","","Gets the `CellRenderer` at `x` and `y` coordinates inside `self` and optionally returns the full cell allocation for it inside `cell_area`. ## `context` the `CellAreaContext` used to hold sizes for `self`. ## `widget` the `Widget` that `self` is rendering on ## `cell_area` the whole allocated area for `self` in `widget`  for this row ## `x` the x position ## `y` the y position ## `alloc_area` where to store the inner allocated area of the  returned cell renderer, or `None`.",589,null],[10,"get_current_path_string","","Gets the current `TreePath` string for the currently applied `TreeIter`, this is implicitly updated when `CellAreaExt::apply_attributes` is called and can be used to interact with renderers from `CellArea` subclasses.",589,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_edit_widget","","Gets the `CellEditable` widget currently used to edit the currently edited cell.",589,{"inputs":[{"name":"self"}],"output":{"generics":["celleditable"],"name":"option"}}],[10,"get_edited_cell","","Gets the `CellRenderer` in `self` that is currently being edited.",589,{"inputs":[{"name":"self"}],"output":{"generics":["cellrenderer"],"name":"option"}}],[10,"get_focus_cell","","Retrieves the currently focused cell for `self`",589,{"inputs":[{"name":"self"}],"output":{"generics":["cellrenderer"],"name":"option"}}],[10,"get_focus_from_sibling","","Gets the `CellRenderer` which is expected to be focusable for which `renderer` is, or may be a sibling.",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["cellrenderer"],"name":"option"}}],[10,"get_focus_siblings","","Gets the focus sibling cell renderers for `renderer`. ## `renderer` the `CellRenderer` expected to have focus",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["cellrenderer"],"name":"vec"}}],[10,"get_preferred_height","","Retrieves a cell area’s initial minimum and natural height.",589,null],[10,"get_preferred_height_for_width","","Retrieves a cell area’s minimum and natural height if it would be given the specified `width`.",589,null],[10,"get_preferred_width","","Retrieves a cell area’s initial minimum and natural width.",589,null],[10,"get_preferred_width_for_height","","Retrieves a cell area’s minimum and natural width if it would be given the specified `height`.",589,null],[10,"get_request_mode","","Gets whether the area prefers a height-for-width layout or a width-for-height layout.",589,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[10,"has_renderer","","Checks if `self` contains `renderer`. ## `renderer` the `CellRenderer` to check",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"inner_cell_area","","This is a convenience function for `CellArea` implementations to get the inner area where a given `CellRenderer` will be rendered. It removes any padding previously added by `CellAreaExt::request_renderer`. ## `widget` the `Widget` that `self` is rendering onto ## `cell_area` the `widget` relative coordinates where one of `self`’s cells  is to be placed ## `inner_area` the return location for the inner cell area",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[10,"is_activatable","","Returns whether the area can do anything when activated, after applying new attributes to `self`.",589,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_focus_sibling","","Returns whether `sibling` is one of `renderer`’s focus siblings (see `CellAreaExt::add_focus_sibling`). ## `renderer` the `CellRenderer` expected to have focus ## `sibling` the `CellRenderer` to check against `renderer`’s sibling list",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"bool"}}],[10,"remove","","Removes `renderer` from `self`. ## `renderer` the `CellRenderer` to remove from `self`",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_focus_sibling","","Removes `sibling` from `renderer`’s focus sibling list (see `CellAreaExt::add_focus_sibling`). ## `renderer` the `CellRenderer` expected to have focus ## `sibling` the `CellRenderer` to remove from `renderer`’s focus area",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"render","","Renders `self`’s cells according to `self`’s layout onto `widget` at the given coordinates. ## `context` the `CellAreaContext` for this row of data. ## `widget` the `Widget` that `self` is rendering to ## `cr` the `cairo::Context` to render with ## `background_area` the `widget` relative coordinates for `self`’s background ## `cell_area` the `widget` relative coordinates for `self` ## `flags` the `CellRendererState` for `self` in this row. ## `paint_focus` whether `self` should paint focus on focused cells for focused rows or not.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"context"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"},{"name":"bool"}],"output":null}],[10,"request_renderer","","This is a convenience function for `CellArea` implementations to request size for cell renderers. It’s important to use this function to request size and then use `CellAreaExt::inner_cell_area` at render and event time since this function will add padding around the cell for focus painting. ## `renderer` the `CellRenderer` to request size for ## `orientation` the `Orientation` in which to request size ## `widget` the `Widget` that `self` is rendering onto ## `for_size` the allocation contextual size to request for, or -1 if the base request for the orientation is to be returned. ## `minimum_size` location to store the minimum size, or `None` ## `natural_size` location to store the natural size, or `None`",589,null],[10,"set_focus_cell","","Explicitly sets the currently focused cell to `renderer`.",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"stop_editing","","Explicitly stops the editing of the currently edited cell.",589,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_add_editable","","Indicates that editing has started on `renderer` and that `editable` should be added to the owning cell-layouting widget at `cell_area`. ## `renderer` the `CellRenderer` that started the edited ## `editable` the `CellEditable` widget to add ## `cell_area` the `Widget` relative `gdk::Rectangle` coordinates  where `editable` should be added ## `path` the `TreePath` string this edit was initiated for",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_apply_attributes","","This signal is emitted whenever applying attributes to `area` from `model` ## `model` the `TreeModel` to apply the attributes from ## `iter` the `TreeIter` indicating which row to apply the attributes of ## `is_expander` whether the view shows children for this row ## `is_expanded` whether the view is currently showing the children of this row",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_changed","","Indicates that focus changed on this `area`. This signal is emitted either as a result of focus handling or event handling.",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove_editable","","Indicates that editing finished on `renderer` and that `editable` should be removed from the owning cell-layouting widget. ## `renderer` the `CellRenderer` that finished editeding ## `editable` the `CellEditable` widget to remove",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_edit_widget_notify","","",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_edited_cell_notify","","",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_cell_notify","","",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellAreaBoxExt","","Trait containing all `CellAreaBox` methods.",null,null],[10,"get_spacing","","Gets the spacing added between cell renderers.",590,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"pack_end","","Adds `renderer` to `self`, packed with reference to the end of `self`.",590,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"pack_start","","Adds `renderer` to `self`, packed with reference to the start of `self`.",590,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"set_spacing","","Sets the spacing to add between cell renderers in `self`. ## `spacing` the space to add between `GtkCellRenderers`",590,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_spacing_notify","","",590,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellAreaContextExt","","Trait containing all `CellAreaContext` methods.",null,null],[10,"allocate","","Allocates a width and/or a height for all rows which are to be rendered with `self`.",591,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_allocation","","Fetches the current allocation size for `self`.",591,null],[10,"get_area","","Fetches the `CellArea` this `self` was created by.",591,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_preferred_height","","Gets the accumulative preferred height for all rows which have been requested with this context.",591,null],[10,"get_preferred_height_for_width","","Gets the accumulative preferred height for `width` for all rows which have been requested for the same said `width` with this context.",591,null],[10,"get_preferred_width","","Gets the accumulative preferred width for all rows which have been requested with this context.",591,null],[10,"get_preferred_width_for_height","","Gets the accumulative preferred width for `height` for all rows which have been requested for the same said `height` with this context.",591,null],[10,"push_preferred_height","","Causes the minimum and/or natural height to grow if the new proposed sizes exceed the current minimum and natural height.",591,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"push_preferred_width","","Causes the minimum and/or natural width to grow if the new proposed sizes exceed the current minimum and natural width.",591,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"reset","","Resets any previously cached request and allocation data.",591,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_minimum_height","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_minimum_width","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_natural_height","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_natural_width","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_property_area_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_height_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_width_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_natural_height_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_natural_width_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellEditableExt","","Trait containing all `CellEditable` methods.",null,null],[10,"editing_done","","Emits the `CellEditable::editing-done` signal.",592,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_widget","","Emits the `CellEditable::remove-widget` signal.",592,{"inputs":[{"name":"self"}],"output":null}],[10,"start_editing","","Begins editing on a `self`. `event` is the `GdkEvent` that began the editing process. It may be `None`, in the instance that editing was initiated through programatic means. ## `event` A `GdkEvent`, or `None`",592,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_editing_canceled","","",592,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editing_canceled","","",592,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_editing_done","","This signal is a sign for the cell renderer to update its value from the `cell_editable`.",592,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove_widget","","This signal is meant to indicate that the cell is finished editing, and the widget may now be destroyed.",592,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editing_canceled_notify","","",592,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellLayoutExt","","Trait containing all `CellLayout` methods.",null,null],[10,"add_attribute","","Adds an attribute mapping to the list in `self`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"clear","","Unsets all the mappings on all renderers on `self` and removes all renderers from `self`.",593,{"inputs":[{"name":"self"}],"output":null}],[10,"clear_attributes","","Clears all existing attributes previously set with `CellLayout::set_attributes`. ## `cell` a `CellRenderer` to clear the attribute mapping on",593,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_area","","Returns the underlying `CellArea` which might be `self` if called on a `CellArea` or might be `None` if no `CellArea` is used by `self`.",593,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_cells","","Returns the cell renderers which have been added to `self`.",593,{"inputs":[{"name":"self"}],"output":{"generics":["cellrenderer"],"name":"vec"}}],[10,"pack_end","","Adds the `cell` to the end of `self`. If `expand` is `false`, then the `cell` is allocated no more space than it needs. Any unused space is divided evenly between cells for which `expand` is `true`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"pack_start","","Packs the `cell` into the beginning of `self`. If `expand` is `false`, then the `cell` is allocated no more space than it needs. Any unused space is divided evenly between cells for which `expand` is `true`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"reorder","","Re-inserts `cell` at `position`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[8,"CellRendererExt","","Trait containing all `CellRenderer` methods.",null,null],[10,"activate","","Passes an activate event to the cell renderer for possible processing. Some cell renderers may use events; for example, `CellRendererToggle` toggles when it gets a mouse click. ## `event` a `GdkEvent` ## `widget` widget that received the event ## `path` widget-dependent string representation of the event location;  e.g. for `TreeView`, a string representation of `TreePath` ## `background_area` background area as passed to `CellRendererExt::render` ## `cell_area` cell area as passed to `CellRendererExt::render` ## `flags` render flags",594,{"inputs":[{"name":"self"},{"name":"event"},{"name":"p"},{"name":"str"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[10,"get_aligned_area","","Gets the aligned area used by `self` inside `cell_area`. Used for finding the appropriate edit and focus rectangle. ## `widget` the `Widget` this cell will be rendering to ## `flags` render flags ## `cell_area` cell area which would be passed to `CellRendererExt::render` ## `aligned_area` the return location for the space inside `cell_area`  that would acually be used to render.",594,{"inputs":[{"name":"self"},{"name":"p"},{"name":"cellrendererstate"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[10,"get_alignment","","Fills in `xalign` and `yalign` with the appropriate values of `self`. ## `xalign` location to fill in with the x alignment of the cell, or `None` ## `yalign` location to fill in with the y alignment of the cell, or `None`",594,null],[10,"get_fixed_size","","Fills in `width` and `height` with the appropriate size of `self`. ## `width` location to fill in with the fixed width of the cell, or `None` ## `height` location to fill in with the fixed height of the cell, or `None`",594,null],[10,"get_padding","","Fills in `xpad` and `ypad` with the appropriate values of `self`. ## `xpad` location to fill in with the x padding of the cell, or `None` ## `ypad` location to fill in with the y padding of the cell, or `None`",594,null],[10,"get_preferred_height","","Retreives a renderer’s natural size when rendered to `widget`. ## `widget` the `Widget` this cell will be rendering to ## `minimum_size` location to store the minimum size, or `None` ## `natural_size` location to store the natural size, or `None`",594,null],[10,"get_preferred_height_for_width","","Retreives a cell renderers’s minimum and natural height if it were rendered to `widget` with the specified `width`. ## `widget` the `Widget` this cell will be rendering to ## `width` the size which is available for allocation ## `minimum_height` location for storing the minimum size, or `None` ## `natural_height` location for storing the preferred size, or `None`",594,null],[10,"get_preferred_size","","Retrieves the minimum and natural size of a cell taking into account the widget’s preference for height-for-width management. ## `widget` the `Widget` this cell will be rendering to ## `minimum_size` location for storing the minimum size, or `None` ## `natural_size` location for storing the natural size, or `None`",594,null],[10,"get_preferred_width","","Retreives a renderer’s natural size when rendered to `widget`. ## `widget` the `Widget` this cell will be rendering to ## `minimum_size` location to store the minimum size, or `None` ## `natural_size` location to store the natural size, or `None`",594,null],[10,"get_preferred_width_for_height","","Retreives a cell renderers’s minimum and natural width if it were rendered to `widget` with the specified `height`. ## `widget` the `Widget` this cell will be rendering to ## `height` the size which is available for allocation ## `minimum_width` location for storing the minimum size, or `None` ## `natural_width` location for storing the preferred size, or `None`",594,null],[10,"get_request_mode","","Gets whether the cell renderer prefers a height-for-width layout or a width-for-height layout.",594,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[10,"get_sensitive","","Returns the cell renderer’s sensitivity.",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_state","","Translates the cell renderer state to `StateFlags`, based on the cell renderer and widget sensitivity, and the given `CellRendererState`. ## `widget` a `Widget`, or `None` ## `cell_state` cell renderer state",594,{"inputs":[{"name":"self"},{"name":"q"},{"name":"cellrendererstate"}],"output":{"name":"stateflags"}}],[10,"get_visible","","Returns the cell renderer’s visibility.",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_activatable","","Checks whether the cell renderer can do something when activated.",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"render","","Invokes the virtual render function of the `CellRenderer`. The three passed-in rectangles are areas in `cr`. Most renderers will draw within `cell_area`; the xalign, yalign, xpad, and ypad fields of the `CellRenderer` should be honored with respect to `cell_area`. `background_area` includes the blank space around the cell, and also the area containing the tree expander; so the `background_area` rectangles for all cells tile to cover the entire `window`. ## `cr` a cairo context to draw to ## `widget` the widget owning `window` ## `background_area` entire cell area (including tree expanders and maybe  padding on the sides) ## `cell_area` area normally rendered by a cell renderer ## `flags` flags that affect rendering",594,{"inputs":[{"name":"self"},{"name":"context"},{"name":"p"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":null}],[10,"set_alignment","","Sets the renderer’s alignment within its available space. ## `xalign` the x alignment of the cell renderer ## `yalign` the y alignment of the cell renderer",594,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_fixed_size","","Sets the renderer size to be explicit, independent of the properties set. ## `width` the width of the cell renderer, or -1 ## `height` the height of the cell renderer, or -1",594,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_padding","","Sets the renderer’s padding. ## `xpad` the x padding of the cell renderer ## `ypad` the y padding of the cell renderer",594,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_sensitive","","Sets the cell renderer’s sensitivity. ## `sensitive` the sensitivity of the cell",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible","","Sets the cell renderer’s visibility. ## `visible` the visibility of the cell",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"start_editing","","Passes an activate event to the cell renderer for possible processing. ## `event` a `GdkEvent` ## `widget` widget that received the event ## `path` widget-dependent string representation of the event location;  e.g. for `TreeView`, a string representation of `TreePath` ## `background_area` background area as passed to `CellRendererExt::render` ## `cell_area` cell area as passed to `CellRendererExt::render` ## `flags` render flags",594,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"str"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"generics":["celleditable"],"name":"option"}}],[10,"stop_editing","","Informs the cell renderer that the editing is stopped. If `canceled` is `true`, the cell renderer will emit the `CellRenderer::editing-canceled` signal.",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_cell_background","","",594,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_cell_background_rgba","","",594,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_cell_background_rgba","","",594,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_cell_background_set","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_cell_background_set","","",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editing","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_height","","",594,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_height","","",594,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_is_expanded","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_is_expanded","","",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_is_expander","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_is_expander","","",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_mode","","",594,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderermode"}}],[10,"set_property_mode","","",594,{"inputs":[{"name":"self"},{"name":"cellrenderermode"}],"output":null}],[10,"get_property_width","","",594,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_width","","",594,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_xalign","","",594,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","",594,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xpad","","",594,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_xpad","","",594,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_yalign","","",594,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","",594,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_ypad","","",594,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_ypad","","",594,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_editing_canceled","","This signal gets emitted when the user cancels the process of editing a cell. For example, an editable cell renderer could be written to cancel editing when the user presses Escape.",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_editing_started","","This signal gets emitted when a cell starts to be edited. The intended use of this signal is to do special setup on `editable`, e.g. adding a `EntryCompletion` or setting up additional columns in a `ComboBox`.",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_background_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_background_rgba_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_background_set_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editing_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_expanded_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_expander_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sensitive_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererAccelExt","","Trait containing all `CellRendererAccel` methods.",null,null],[10,"get_property_accel_key","","",595,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_accel_key","","",595,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_accel_mode","","",595,{"inputs":[{"name":"self"}],"output":{"name":"cellrendereraccelmode"}}],[10,"set_property_accel_mode","","",595,{"inputs":[{"name":"self"},{"name":"cellrendereraccelmode"}],"output":null}],[10,"get_property_accel_mods","","",595,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[10,"set_property_accel_mods","","",595,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[10,"get_property_keycode","","The hardware keycode of the accelerator. Note that the hardware keycode is only relevant if the key does not have a keyval. Normally, the keyboard configuration should assign keyvals to all keys.",595,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_keycode","","The hardware keycode of the accelerator. Note that the hardware keycode is only relevant if the key does not have a keyval. Normally, the keyboard configuration should assign keyvals to all keys.",595,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_accel_cleared","","Gets emitted when the user has removed the accelerator. ## `path_string` the path identifying the row of the edited cell",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_accel_edited","","Gets emitted when the user has selected a new accelerator. ## `path_string` the path identifying the row of the edited cell ## `accel_key` the new accelerator keyval ## `accel_mods` the new acclerator modifier mask ## `hardware_keycode` the keycode of the new accelerator",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_key_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_mode_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_mods_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_keycode_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererComboExt","","Trait containing all `CellRendererCombo` methods.",null,null],[10,"get_property_has_entry","","",596,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_entry","","",596,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_model","","Holds a tree model containing the possible values for the combo box. Use the text_column property to specify the column holding the values.",596,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"set_property_model","","Holds a tree model containing the possible values for the combo box. Use the text_column property to specify the column holding the values.",596,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_text_column","","",596,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_text_column","","",596,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_changed","","This signal is emitted each time after the user selected an item in the combo box, either by using the mouse or the arrow keys. Contrary to `ComboBox`, `CellRendererCombo`::changed is not emitted for changes made to a selected item in the entry. The argument `new_iter` corresponds to the newly selected item in the combo box and it is relative to the `TreeModel` set via the model property on `CellRendererCombo`.",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_entry_notify","","",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_column_notify","","",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererPixbufExt","","Trait containing all `CellRendererPixbuf` methods.",null,null],[10,"get_property_follow_state","","",597,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_follow_state","","",597,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gicon","","The GIcon representing the icon to display. If the icon theme is changed, the image will be updated automatically.",597,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_gicon","","The GIcon representing the icon to display. If the icon theme is changed, the image will be updated automatically.",597,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_icon_name","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_icon_name","","",597,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_pixbuf","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_pixbuf","","",597,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_pixbuf_expander_closed","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_pixbuf_expander_closed","","",597,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_pixbuf_expander_open","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_pixbuf_expander_open","","",597,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_stock_detail","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_stock_detail","","",597,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_stock_id","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_stock_id","","",597,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_stock_size","","",597,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_stock_size","","",597,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_property_follow_state_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_expander_closed_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_expander_open_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_detail_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_size_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererProgressExt","","Trait containing all `CellRendererProgress` methods.",null,null],[10,"get_property_inverted","","",598,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_inverted","","",598,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pulse","","Setting this to a non-negative value causes the cell renderer to enter \"activity mode\", where a block bounces back and forth to indicate that some progress is made, without specifying exactly how much.",598,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pulse","","Setting this to a non-negative value causes the cell renderer to enter \"activity mode\", where a block bounces back and forth to indicate that some progress is made, without specifying exactly how much.",598,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_text","","The \"text\" property determines the label which will be drawn over the progress bar. Setting this property to `None` causes the default label to be displayed. Setting this property to an empty string causes no label to be displayed.",598,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","The \"text\" property determines the label which will be drawn over the progress bar. Setting this property to `None` causes the default label to be displayed. Setting this property to an empty string causes no label to be displayed.",598,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_text_xalign","","",598,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_text_xalign","","",598,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_text_yalign","","",598,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_text_yalign","","",598,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_value","","The \"value\" property determines the percentage to which the progress bar will be \"filled in\".",598,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_value","","The \"value\" property determines the percentage to which the progress bar will be \"filled in\".",598,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_inverted_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pulse_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_xalign_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_yalign_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererSpinExt","","Trait containing all `CellRendererSpin` methods.",null,null],[10,"get_property_adjustment","","The adjustment that holds the value of the spinbutton. This must be non-`None` for the cell renderer to be editable.",599,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"set_property_adjustment","","The adjustment that holds the value of the spinbutton. This must be non-`None` for the cell renderer to be editable.",599,{"inputs":[{"name":"self"},{"generics":["adjustment"],"name":"option"}],"output":null}],[10,"get_property_climb_rate","","",599,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_climb_rate","","",599,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_digits","","The number of decimal places to display.",599,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_digits","","The number of decimal places to display.",599,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_property_adjustment_notify","","",599,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_climb_rate_notify","","",599,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_digits_notify","","",599,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererSpinnerExt","","Trait containing all `CellRendererSpinner` methods.",null,null],[10,"get_property_active","","",600,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","",600,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pulse","","Pulse of the spinner. Increment this value to draw the next frame of the spinner animation. Usually, you would update this value in a timeout.",600,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_pulse","","Pulse of the spinner. Increment this value to draw the next frame of the spinner animation. Usually, you would update this value in a timeout.",600,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_size","","The `IconSize` value that specifies the size of the rendered spinner.",600,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"set_property_size","","The `IconSize` value that specifies the size of the rendered spinner.",600,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"connect_property_active_notify","","",600,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pulse_notify","","",600,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",600,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererTextExt","","Trait containing all `CellRendererText` methods.",null,null],[10,"set_fixed_height_from_font","","Sets the height of a renderer to explicitly be determined by the “font” and “y_pad” property set on it. Further changes in these properties do not affect the height, so they must be accompanied by a subsequent call to this function. Using this function is unflexible, and should really only be used if calculating the size of a cell is too slow (ie, a massive number of cells displayed). If `number_of_rows` is -1, then the fixed height is unset, and the height is determined by the properties again. ## `number_of_rows` Number of rows of text each cell renderer is allocated, or -1",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_align_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_align_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_alignment","","Specifies how to align the lines of text with respect to each other.",601,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[10,"set_property_alignment","","Specifies how to align the lines of text with respect to each other.",601,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":null}],[10,"set_property_background","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_background_rgba","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_background_rgba","","",601,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_background_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editable","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editable_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_ellipsize","","Specifies the preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string. Setting it to `pango::EllipsizeMode::None` turns off ellipsizing. See the wrap-width property for another way of making the text fit into a given width.",601,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"set_property_ellipsize","","Specifies the preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string. Setting it to `pango::EllipsizeMode::None` turns off ellipsizing. See the wrap-width property for another way of making the text fit into a given width.",601,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"get_property_ellipsize_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_ellipsize_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_family","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_family","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_family_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_family_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_font","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_font","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_foreground","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_foreground_rgba","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_foreground_rgba","","",601,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_foreground_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_foreground_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_language","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_language","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_language_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_language_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_markup","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_max_width_chars","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_max_width_chars","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_placeholder_text","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_placeholder_text","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_rise","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rise","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_rise_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_rise_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_scale","","",601,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_scale","","",601,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_scale_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_scale_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_single_paragraph_mode","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_single_paragraph_mode","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_size","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_size","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_size_points","","",601,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_size_points","","",601,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_size_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_size_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_stretch","","",601,{"inputs":[{"name":"self"}],"output":{"name":"stretch"}}],[10,"set_property_stretch","","",601,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":null}],[10,"get_property_stretch_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_stretch_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_style","","",601,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[10,"set_property_style","","",601,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[10,"get_property_style_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_style_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_text","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_underline","","",601,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[10,"set_property_underline","","",601,{"inputs":[{"name":"self"},{"name":"underline"}],"output":null}],[10,"get_property_underline_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_underline_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_variant","","",601,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[10,"set_property_variant","","",601,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"get_property_variant_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_variant_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_weight","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_weight","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_weight_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_weight_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_width_chars","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_width_chars","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_wrap_mode","","",601,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_property_wrap_mode","","",601,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"get_property_wrap_width","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_wrap_width","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_edited","","This signal is emitted after `renderer` has been edited.",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_align_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alignment_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_rgba_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_markup_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_chars_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_placeholder_text_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_single_paragraph_mode_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_points_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_width_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererToggleExt","","Trait containing all `CellRendererToggle` methods.",null,null],[10,"get_activatable","","Returns whether the cell renderer is activatable. See `CellRendererToggleExt::set_activatable`.",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_active","","Returns whether the cell renderer is active. See `CellRendererToggleExt::set_active`.",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_radio","","Returns whether we’re rendering radio toggles rather than checkboxes.",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_activatable","","Makes the cell renderer activatable. ## `setting` the value to set.",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_active","","Activates or deactivates a cell renderer. ## `setting` the value to set.",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_radio","","If `radio` is `true`, the cell renderer renders a radio toggle (i.e. a toggle in a group of mutually-exclusive toggles). If `false`, it renders a check toggle (a standalone boolean option). This can be set globally for the cell renderer, or changed just before rendering each cell in the model (for `TreeView`, you set up a per-row setting using `TreeViewColumn` to associate model columns with cell renderer properties). ## `radio` `true` to make the toggle look like a radio button",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_inconsistent","","",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_inconsistent","","",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_indicator_size","","",602,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_indicator_size","","",602,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_toggled","","The ::toggled signal is emitted when the cell is toggled.",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_activatable_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inconsistent_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indicator_size_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_radio_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellViewExt","","",null,null],[10,"get_displayed_row","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_draw_sensitive","","",603,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_fit_model","","",603,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_model","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"set_background_rgba","","",603,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_displayed_row","","",603,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"set_draw_sensitive","","",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_fit_model","","",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_model","","",603,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_property_background","","",603,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_background_rgba","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"get_property_background_set","","",603,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_cell_area","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_property_cell_area_context","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["cellareacontext"],"name":"option"}}],[10,"connect_property_background_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_context_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_sensitive_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fit_model_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CheckMenuItemExt","","Trait containing all `CheckMenuItem` methods.",null,null],[10,"get_active","","Returns whether the check menu item is active. See gtk_check_menu_item_set_active ().",604,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_draw_as_radio","","Returns whether `self` looks like a `RadioMenuItem`",604,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inconsistent","","Retrieves the value set by `CheckMenuItemExt::set_inconsistent`.",604,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Sets the active state of the menu item’s check box. ## `is_active` boolean value indicating whether the check box is active.",604,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_draw_as_radio","","Sets whether `self` is drawn like a `RadioMenuItem` ## `draw_as_radio` whether `self` is drawn like a `RadioMenuItem`",604,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_inconsistent","","If the user has selected a range of elements (such as some text or spreadsheet cells) that are affected by a boolean setting, and the current values in that range are inconsistent, you may want to display the check in an “in between” state. This function turns on “in between” display. Normally you would turn off the inconsistent state again if the user explicitly selects a setting. This has to be done manually, `CheckMenuItemExt::set_inconsistent` only affects visual appearance, it doesn’t affect the semantics of the widget. ## `setting` `true` to display an “inconsistent” third state check",604,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toggled","","Emits the `CheckMenuItem::toggled` signal.",604,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_toggled","","This signal is emitted when the state of the check box is changed.",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_as_radio_notify","","",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inconsistent_notify","","",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ClipboardExt","","Trait containing all `Clipboard` methods.",null,null],[10,"clear","","Clears the contents of the clipboard. Generally this should only be called between the time you call `ClipboardExt::set_with_owner` or `ClipboardExt::set_with_data`, and when the `clear_func` you supplied is called. Otherwise, the clipboard may be owned by someone else.",605,{"inputs":[{"name":"self"}],"output":null}],[10,"get_display","","Gets the `gdk::Display` associated with `self`",605,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_owner","","If the clipboard contents callbacks were set with `ClipboardExt::set_with_owner`, and the `ClipboardExt::set_with_data` or `ClipboardExt::clear` has not subsequently called, returns the owner set by `ClipboardExt::set_with_owner`.",605,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_selection","","Gets the selection that this clipboard is for.",605,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"option"}}],[10,"set_image","","Sets the contents of the clipboard to the given `gdk_pixbuf::Pixbuf`. GTK+ will take responsibility for responding for requests for the image, and for converting the image into the requested format. ## `pixbuf` a `gdk_pixbuf::Pixbuf`",605,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"set_text","","Sets the contents of the clipboard to the given UTF-8 string. GTK+ will make a copy of the text and take responsibility for responding for requests for the text, and for converting the text into the requested format. ## `text` a UTF-8 string. ## `len` length of `text`, in bytes, or -1, in which case  the length will be determined with `strlen`.",605,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"store","","Stores the current clipboard data somewhere so that it will stay around after the application has quit.",605,{"inputs":[{"name":"self"}],"output":null}],[10,"wait_for_contents","","Requests the contents of the clipboard using the given target. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait. ## `target` an atom representing the form into which the clipboard  owner should convert the selection.",605,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"generics":["selectiondata"],"name":"option"}}],[10,"wait_for_image","","Requests the contents of the clipboard as image and converts the result to a `gdk_pixbuf::Pixbuf`. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"wait_for_rich_text","","Requests the contents of the clipboard as rich text. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait. ## `buffer` a `TextBuffer` ## `format` return location for the format of the returned data ## `length` return location for the length of the returned data",605,null],[10,"wait_for_targets","","Returns a list of targets that are present on the clipboard, or `None` if there aren’t any targets available. The returned list must be freed with `g_free`. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait. ## `targets` location  to store an array of targets. The result stored here must  be freed with `g_free`. ## `n_targets` location to store number of items in `targets`.",605,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[10,"wait_for_text","","Requests the contents of the clipboard as text and converts the result to UTF-8 if necessary. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"wait_for_uris","","Requests the contents of the clipboard as URIs. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"wait_is_image_available","","Test to see if there is an image available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported image targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"wait_is_rich_text_available","","Test to see if there is rich text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported rich text targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"},{"name":"textbuffer"}],"output":{"name":"bool"}}],[10,"wait_is_target_available","","Checks if a clipboard supports pasting data of a given type. This function can be used to determine if a “Paste” menu item should be insensitive or not.",605,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[10,"wait_is_text_available","","Test to see if there is text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported text targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"wait_is_uris_available","","Test to see if there is a list of URIs available to be pasted This is done by requesting the TARGETS atom and checking if it contains the URI targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ColorButtonExt","","Trait containing all `ColorButton` methods.",null,null],[10,"get_title","","Gets the title of the color selection dialog.",606,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_title","","Sets the title for the color selection dialog. ## `title` String containing new window title",606,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_alpha","","The selected opacity value (0 fully transparent, 65535 fully opaque).",606,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_alpha","","The selected opacity value (0 fully transparent, 65535 fully opaque).",606,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_show_editor","","",606,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_editor","","",606,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_color_set","","The ::color-set signal is emitted when the user selects a color. When handling this signal, use `ColorButton::get_rgba` to find out which color was just selected.",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alpha_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rgba_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_editor_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_alpha_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ColorChooserExt","","Trait containing all `ColorChooser` methods.",null,null],[10,"get_rgba","","Gets the currently-selected color. ## `color` a `gdk::RGBA` to fill in with the current color",607,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"get_use_alpha","","Returns whether the color chooser shows the alpha channel.",607,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_rgba","","Sets the color. ## `color` the new color",607,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_use_alpha","","Sets whether or not the color chooser should use the alpha channel. ## `use_alpha` `true` if color chooser should use alpha channel, `false` if not",607,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_color_activated","","Emitted when a color is activated from the color chooser. This usually happens when the user clicks a color swatch, or a color is selected and the user presses one of the keys Space, Shift+Space, Return or Enter. ## `color` the color",607,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rgba_notify","","",607,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_alpha_notify","","",607,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ColorChooserDialogExt","","Trait containing all `ColorChooserDialog` methods.",null,null],[10,"get_property_show_editor","","",608,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_editor","","",608,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_editor_notify","","",608,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ColorChooserWidgetExt","","Trait containing all `ColorChooserWidget` methods.",null,null],[10,"get_property_show_editor","","",609,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_editor","","",609,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_editor_notify","","",609,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ComboBoxExt","","Trait containing all `ComboBox` methods.",null,null],[10,"get_active","","Returns the index of the currently active item, or -1 if there’s no active item. If the model is a non-flat treemodel, and the active item is not an immediate child of the root of the tree, this function returns `gtk_tree_path_get_indices (path)[0]`, where `path` is the `TreePath` of the active item.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_active_id","","Returns the ID of the active row of `self`. This value is taken from the active row and the column specified by the `ComboBox:id-column` property of `self` (see `ComboBoxExt::set_id_column`).",610,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_active_iter","","Sets `iter` to point to the current active item, if it exists. ## `iter` The uninitialized `TreeIter`",610,{"inputs":[{"name":"self"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_add_tearoffs","","Gets the current value of the :add-tearoffs property.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_button_sensitivity","","Returns whether the combo box sets the dropdown button sensitive or not when there are no items in the model.",610,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[10,"get_column_span_column","","Returns the column with column span information for `self`.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_entry_text_column","","Returns the column which `self` is using to get the strings from to display in the internal entry.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_focus_on_click","","Returns whether the combo box grabs focus when it is clicked with the mouse. See `ComboBoxExt::set_focus_on_click`.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_entry","","Returns whether the combo box has an entry.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_id_column","","Returns the column which `self` is using to get string IDs for values from.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the `TreeModel` which is acting as data source for `self`.",610,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_popup_fixed_width","","Gets whether the popup uses a fixed width matching the allocated width of the combo box.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_row_span_column","","Returns the column with row span information for `self`.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_title","","Gets the current title of the menu in tearoff mode. See `ComboBoxExt::set_add_tearoffs`.",610,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_wrap_width","","Returns the wrap width which is used to determine the number of columns for the popup menu. If the wrap width is larger than 1, the combo box is in table mode.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"popdown","","Hides the menu or dropdown list of `self`.",610,{"inputs":[{"name":"self"}],"output":null}],[10,"popup","","Pops up the menu or dropdown list of `self`.",610,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_for_device","","Pops up the menu or dropdown list of `self`, the popup window will be grabbed so only `device` and its associated pointer/keyboard are the only `GdkDevices` able to send events to it. ## `device` a `gdk::Device`",610,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_active","","Sets the active item of `self` to be the item at `index`. ## `index_` An index in the model passed during construction, or -1 to have no active item",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_active_id","","Changes the active row of `self` to the one that has an ID equal to `active_id`, or unsets the active row if `active_id` is `None`. Rows having a `None` ID string cannot be made active by this function.",610,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_active_iter","","Sets the current active item to be the one referenced by `iter`, or unsets the active item if `iter` is `None`. ## `iter` The `TreeIter`, or `None`",610,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_add_tearoffs","","Sets whether the popup menu should have a tearoff menu item.",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_button_sensitivity","","Sets whether the dropdown button of the combo box should be always sensitive (`SensitivityType::On`), never sensitive (`SensitivityType::Off`) or only if there is at least one item to display (`SensitivityType::Auto`). ## `sensitivity` specify the sensitivity of the dropdown button",610,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":null}],[10,"set_column_span_column","","Sets the column with column span information for `self` to be `column_span`. The column span column contains integers which indicate how many columns an item should span. ## `column_span` A column in the model passed during construction",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_entry_text_column","","Sets the model column which `self` should use to get strings from to be `text_column`. The column `text_column` in the model of `self` must be of type `G_TYPE_STRING`.",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_focus_on_click","","Sets whether the combo box will grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_id_column","","Sets the model column which `self` should use to get string IDs for values from. The column `id_column` in the model of `self` must be of type `G_TYPE_STRING`. ## `id_column` A column in `model` to get string IDs for values from",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model used by `self` to be `model`. Will unset a previously set model (if applicable). If model is `None`, then it will unset the model.",610,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popup_fixed_width","","Specifies whether the popup’s width should be a fixed width matching the allocated width of the combo box. ## `fixed` whether to use a fixed popup width",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_row_span_column","","Sets the column with row span information for `self` to be `row_span`. The row span column contains integers which indicate how many rows an item should span. ## `row_span` A column in the model passed during construction.",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_title","","Sets the menu’s title in tearoff mode.",610,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_wrap_width","","Sets the wrap width of `self` to be `width`. The wrap width is basically the preferred number of columns when you want the popup to be layed out in a table. ## `width` Preferred number of columns",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_cell_area","","",610,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_property_has_frame","","",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_frame","","",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_popup_shown","","",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_tearoff_title","","",610,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tearoff_title","","",610,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_changed","","The changed signal is emitted when the active item is changed. The can be due to the user selecting a different item from the list, or due to a call to `ComboBoxExt::set_active_iter`. It will also be emitted while typing into the entry of a combo box with an entry.",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_format_entry_text","","For combo boxes that are created with an entry (See `ComboBox`:has-entry).",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_active","","The ::move-active signal is a [keybinding signal][`BindingSignal`] which gets emitted to move the active selection. ## `scroll_type` a `ScrollType`",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_active","","",610,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":null}],[10,"connect_popdown","","The ::popdown signal is a [keybinding signal][`BindingSignal`] which gets emitted to popdown the combo box list.",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popdown","","",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_popup","","The ::popup signal is a [keybinding signal][`BindingSignal`] which gets emitted to popup the combo box list.",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup","","",610,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_active_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_id_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_add_tearoffs_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_button_sensitivity_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_span_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_entry_text_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_entry_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_frame_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_id_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_fixed_width_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_shown_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_span_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tearoff_title_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_width_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ComboBoxTextExt","","Trait containing all `ComboBoxText` methods.",null,null],[10,"append","","Appends `text` to the list of strings stored in `self`. If `id` is non-`None` then it is used as the ID of the row.",611,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"append_text","","Appends `text` to the list of strings stored in `self`.",611,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_active_text","","Returns the currently active string in `self`, or `None` if none is selected. If `self` contains an entry, this function will return its contents (which will not necessarily be an item from the list).",611,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"insert","","Inserts `text` at `position` in the list of strings stored in `self`. If `id` is non-`None` then it is used as the ID of the row. See `ComboBox:id-column`.",611,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"str"}],"output":null}],[10,"insert_text","","Inserts `text` at `position` in the list of strings stored in `self`.",611,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[10,"prepend","","Prepends `text` to the list of strings stored in `self`. If `id` is non-`None` then it is used as the ID of the row.",611,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"prepend_text","","Prepends `text` to the list of strings stored in `self`.",611,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"remove","","Removes the string at `position` from `self`. ## `position` Index of the item to remove",611,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_all","","Removes all the text entries from the combo box.",611,{"inputs":[{"name":"self"}],"output":null}],[8,"ContainerExt","","Trait containing all `Container` methods.",null,null],[10,"add","","Adds `widget` to `self`. Typically used for simple containers such as `Window`, `Frame`, or `Button`; for more complicated layout containers such as `Box` or `Grid`, this function will pick default packing parameters that may not be correct. So consider functions such as `BoxExt::pack_start` and `GridExt::attach` as an alternative to `ContainerExt::add` in those cases. A widget may be added to only one container at a time; you can’t place the same widget inside two different containers.",612,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"check_resize","","",612,{"inputs":[{"name":"self"}],"output":null}],[10,"child_notify","","Emits a `Widget::child-notify` signal for the child property `child_property` on widget.",612,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"child_type","","Returns the type of the children supported by the container.",612,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[10,"get_border_width","","Retrieves the border width of the container. See `ContainerExt::set_border_width`.",612,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_children","","Returns the container’s non-internal children. See `ContainerExt::forall` for details on what constitutes an \"internal\" child.",612,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[10,"get_focus_child","","Returns the current focus child widget inside `self`. This is not the currently focused widget. That can be obtained by calling `GtkWindowExt::get_focus`.",612,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_focus_hadjustment","","Retrieves the horizontal focus adjustment for the container. See gtk_container_set_focus_hadjustment ().",612,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_focus_vadjustment","","Retrieves the vertical focus adjustment for the container. See `ContainerExt::set_focus_vadjustment`.",612,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_path_for_child","","Returns a newly created widget path representing all the widget hierarchy from the toplevel down to and including `child`. ## `child` a child of `self`",612,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widgetpath"],"name":"option"}}],[10,"get_resize_mode","","Returns the resize mode for the container. See gtk_container_set_resize_mode ().",612,{"inputs":[{"name":"self"}],"output":{"name":"resizemode"}}],[10,"propagate_draw","","When a container receives a call to the draw function, it must send synthetic `Widget::draw` calls to all children that don’t have their own `GdkWindows`. This function provides a convenient way of doing this. A container, when it receives a call to its `Widget::draw` function, calls `ContainerExt::propagate_draw` once for each child, passing in the `cr` the container received.",612,{"inputs":[{"name":"self"},{"name":"p"},{"name":"context"}],"output":null}],[10,"remove","","Removes `widget` from `self`. `widget` must be inside `self`. Note that `self` will own a reference to `widget`, and that this may be the last reference held; so removing a widget from its container can destroy that widget. If you want to use `widget` again, you need to add a reference to it before removing it from a container, using `gobject::ObjectExt::ref`. If you don’t want to use `widget` again it’s usually more efficient to simply destroy it directly using `WidgetExt::destroy` since this will remove it from the container and help break any circular reference count cycles. ## `widget` a current child of `self`",612,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"resize_children","","Deprecated since 3.10",612,{"inputs":[{"name":"self"}],"output":null}],[10,"set_border_width","","Sets the border width of the container.",612,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_focus_chain","","Sets a focus chain, overriding the one computed automatically by GTK+.",612,null],[10,"set_focus_child","","Sets, or unsets if `child` is `None`, the focused child of `self`.",612,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_focus_hadjustment","","Hooks up an adjustment to focus handling in a container, so when a child of the container is focused, the adjustment is scrolled to show that widget. This function sets the horizontal alignment. See `ScrolledWindowExt::get_hadjustment` for a typical way of obtaining the adjustment and `ContainerExt::set_focus_vadjustment` for setting the vertical adjustment.",612,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_focus_vadjustment","","Hooks up an adjustment to focus handling in a container, so when a child of the container is focused, the adjustment is scrolled to show that widget. This function sets the vertical alignment. See `ScrolledWindowExt::get_vadjustment` for a typical way of obtaining the adjustment and `ContainerExt::set_focus_hadjustment` for setting the horizontal adjustment.",612,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_reallocate_redraws","","Sets the `reallocate_redraws` flag of the container to the given value.",612,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_resize_mode","","Sets the resize mode for the container.",612,{"inputs":[{"name":"self"},{"name":"resizemode"}],"output":null}],[10,"unset_focus_chain","","Removes a focus chain explicitly set with `ContainerExt::set_focus_chain`.",612,{"inputs":[{"name":"self"}],"output":null}],[10,"set_property_child","","",612,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"connect_add","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_check_resize","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_set_focus_child","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_border_width_notify","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_child_notify","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resize_mode_notify","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CssProviderExt","","Trait containing all `CssProvider` methods.",null,null],[10,"load_from_data","","Loads `data` into `self`, and by doing so clears any previously loaded information. ## `data` CSS data loaded in memory ## `length` the length of `data` in bytes, or -1 for NUL terminated strings. If  `length` is not -1, the code will assume it is not NUL terminated and will  potentially do a copy.",613,null],[10,"load_from_file","","Loads the data contained in `file` into `self`, making it clear any previously loaded information. ## `file` `gio::File` pointing to a file to load",613,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_from_path","","Loads the data contained in `path` into `self`, making it clear any previously loaded information. ## `path` the path of a filename to load, in the GLib filename encoding",613,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_from_resource","","Loads the data contained in the resource at `resource_path` into the `CssProvider`, clearing any previously loaded information.",613,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"to_string","","Converts the `self` into a string representation in CSS format.",613,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"connect_parsing_error","","Signals that a parsing error occurred. the `path`, `line` and `position` describe the actual location of the error as accurately as possible.",613,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DialogExt","","Trait containing all `Dialog` methods.",null,null],[10,"add_action_widget","","Adds an activatable widget to the action area of a `Dialog`, connecting a signal handler that will emit the `Dialog::response` signal on the dialog when the widget is activated. The widget is appended to the end of the dialog’s action area. If you want to add a non-activatable widget, simply pack it into the `action_area` field of the `Dialog` struct. ## `child` an activatable widget ## `response_id` response ID for `child`",614,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"add_button","","Adds a button with the given text and sets things up so that clicking the button will emit the `Dialog::response` signal with the given `response_id`. The button is appended to the end of the dialog’s action area. The button widget is returned, but usually you don’t need it. ## `button_text` text of button ## `response_id` response ID for the button",614,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"widget"}}],[10,"get_action_area","","Returns the action area of `self`.",614,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[10,"get_content_area","","Returns the content area of `self`.",614,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"get_header_bar","","Returns the header bar of `self`. Note that the headerbar is only used by the dialog if the `Dialog:use-header-bar` property is `true`.",614,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_response_for_widget","","Gets the response id of a widget in the action area of a dialog. ## `widget` a widget in the action area of `self`",614,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_widget_for_response","","Gets the widget button that uses the given response ID in the action area of a dialog. ## `response_id` the response ID used by the `self` widget",614,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["widget"],"name":"option"}}],[10,"response","","Emits the `Dialog::response` signal with the given response ID. Used to indicate that the user has responded to the dialog in some way; typically either you or `DialogExt::run` will be monitoring the ::response signal and take appropriate action. ## `response_id` response ID",614,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"run","","Blocks in a recursive main loop until the `self` either emits the `Dialog::response` signal, or is destroyed. If the dialog is destroyed during the call to `DialogExt::run`, `DialogExt::run` returns `ResponseType::None`. Otherwise, it returns the response ID from the ::response signal emission.",614,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_alternative_button_order_from_array","","Sets an alternative button order. If the `Settings:gtk-alternative-button-order` setting is set to `true`, the dialog buttons are reordered according to the order of the response ids in `new_order`.",614,null],[10,"set_default_response","","Sets the last widget in the dialog’s action area with the given `response_id` as the default widget for the dialog. Pressing “Enter” normally activates the default widget. ## `response_id` a response ID",614,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_response_sensitive","","Calls `gtk_widget_set_sensitive (widget, @setting)` for each widget in the dialog’s action area with the given `response_id`. A convenient way to sensitize/desensitize dialog buttons. ## `response_id` a response ID ## `setting` `true` for sensitive",614,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"get_property_use_header_bar","","",614,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_close","","The ::close signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to close the dialog.",614,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_close","","",614,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_response","","Emitted when an action widget is clicked, the dialog receives a delete event, or the application programmer calls `DialogExt::response`. On a delete event, the response ID is `ResponseType::DeleteEvent`. Otherwise, it depends on which action widget was clicked. ## `response_id` the response ID",614,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_header_bar_notify","","",614,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EditableExt","","Trait containing all `Editable` methods.",null,null],[10,"copy_clipboard","","Copies the contents of the currently selected content in the editable and puts it on the clipboard.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"cut_clipboard","","Removes the contents of the currently selected content in the editable and puts it on the clipboard.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"delete_selection","","Deletes the currently selected text of the editable. This call doesn’t do anything if there is no selected text.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"delete_text","","Deletes a sequence of characters. The characters that are deleted are those characters at positions from `start_pos` up to, but not including `end_pos`. If `end_pos` is negative, then the characters deleted are those from `start_pos` to the end of the text.",615,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_chars","","Retrieves a sequence of characters. The characters that are retrieved are those characters at positions from `start_pos` up to, but not including `end_pos`. If `end_pos` is negative, then the characters retrieved are those characters from `start_pos` to the end of the text.",615,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_editable","","Retrieves whether `self` is editable. See `Editable::set_editable`.",615,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_position","","Retrieves the current position of the cursor relative to the start of the content of the editable.",615,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_selection_bounds","","Retrieves the selection bound of the editable. start_pos will be filled with the start of the selection and `end_pos` with end. If no text was selected both will be identical and `false` will be returned.",615,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"insert_text","","Inserts `new_text_length` bytes of `new_text` into the contents of the widget, at position `position`.",615,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"paste_clipboard","","Pastes the content of the clipboard to the current position of the cursor in the editable.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"select_region","","Selects a region of text. The characters that are selected are those characters at positions from `start_pos` up to, but not including `end_pos`. If `end_pos` is negative, then the characters selected are those characters from `start_pos` to the end of the text.",615,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_editable","","Determines if the user can edit the text in the editable widget or not. ## `is_editable` `true` if the user is allowed to edit the text  in the widget",615,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_position","","Sets the cursor position in the editable to the given value.",615,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[8,"EntryExt","","Trait containing all `Entry` methods.",null,null],[10,"get_activates_default","","Retrieves the value set by `EntryExt::set_activates_default`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_alignment","","Gets the value set by `EntryExt::set_alignment`.",616,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_attributes","","Gets the attribute list that was set on the entry using `EntryExt::set_attributes`, if any.",616,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[10,"get_buffer","","Get the `EntryBuffer` object which holds the text for this widget.",616,{"inputs":[{"name":"self"}],"output":{"name":"entrybuffer"}}],[10,"get_completion","","Returns the auxiliary completion object currently in use by `self`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["entrycompletion"],"name":"option"}}],[10,"get_current_icon_drag_source","","Returns the index of the icon which is the source of the current DND operation, or -1.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_cursor_hadjustment","","Retrieves the horizontal cursor adjustment for the entry. See `EntryExt::set_cursor_hadjustment`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_has_frame","","Gets the value set by `EntryExt::set_has_frame`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon_activatable","","Returns whether the icon is activatable. ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"bool"}}],[10,"get_icon_area","","Gets the area where entry’s icon at `icon_pos` is drawn. This function is useful when drawing something to the entry in a draw callback.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"rectangle"}}],[10,"get_icon_at_pos","","Finds the icon at the given position and return its index. The position’s coordinates are relative to the `self`’s top left corner. If `x`, `y` doesn’t lie inside an icon, -1 is returned. This function is intended for use in a `Widget::query-tooltip` signal handler. ## `x` the x coordinate of the position to find ## `y` the y coordinate of the position to find",616,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_icon_gicon","","Retrieves the `gio::Icon` used for the icon, or `None` if there is no icon or if the icon was set by some other method (e.g., by stock, pixbuf, or icon name). ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon_name","","Retrieves the icon name used for the icon, or `None` if there is no icon or if the icon was set by some other method (e.g., by pixbuf, stock or gicon). ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_pixbuf","","Retrieves the image used for the icon.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_sensitive","","Returns whether the icon appears sensitive or insensitive. ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"bool"}}],[10,"get_icon_stock","","Retrieves the stock id used for the icon, or `None` if there is no icon or if the icon was set by some other method (e.g., by pixbuf, icon name or gicon).",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_storage_type","","Gets the type of representation being used by the icon to store image data. If the icon has no image data, the return value will be `ImageType::Empty`. ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"imagetype"}}],[10,"get_icon_tooltip_markup","","Gets the contents of the tooltip on the icon at the specified position in `self`. ## `icon_pos` the icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_tooltip_text","","Gets the contents of the tooltip on the icon at the specified position in `self`. ## `icon_pos` the icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_input_hints","","Gets the value of the `Entry:input-hints` property.",616,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[10,"get_input_purpose","","Gets the value of the `Entry:input-purpose` property.",616,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[10,"get_invisible_char","","Retrieves the character displayed in place of the real characters for entries with visibility set to false. See `EntryExt::set_invisible_char`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[10,"get_layout","","Gets the `pango::Layout` used to display the entry. The layout is useful to e.g. convert text positions to pixel positions, in combination with `EntryExt::get_layout_offsets`. The returned layout is owned by the entry and must not be modified or freed by the caller.",616,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_offsets","","Obtains the position of the `pango::Layout` used to render text in the entry, in widget coordinates. Useful if you want to line up the text in an entry with some other text, e.g. when using the entry to implement editable cells in a sheet widget.",616,null],[10,"get_max_length","","Retrieves the maximum allowed length of the text in `self`. See `EntryExt::set_max_length`.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_width_chars","","Retrieves the desired maximum width of `self`, in characters. See `EntryExt::set_max_width_chars`.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_overwrite_mode","","Gets the value set by `EntryExt::set_overwrite_mode`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_placeholder_text","","Retrieves the text that will be displayed when `self` is empty and unfocused",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_progress_fraction","","Returns the current fraction of the task that’s been completed. See `EntryExt::set_progress_fraction`.",616,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_progress_pulse_step","","Retrieves the pulse step set with `EntryExt::set_progress_pulse_step`.",616,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_tabs","","Gets the tabstops that were set on the entry using `EntryExt::set_tabs`, if any.",616,{"inputs":[{"name":"self"}],"output":{"generics":["tabarray"],"name":"option"}}],[10,"get_text","","Retrieves the contents of the entry widget. See also `Editable::get_chars`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_text_area","","Gets the area where the entry’s text is drawn. This function is useful when drawing something to the entry in a draw callback.",616,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_text_length","","Retrieves the current length of the text in `self`.",616,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[10,"get_visibility","","Retrieves whether the text in `self` is visible. See `EntryExt::set_visibility`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_width_chars","","Gets the value set by `EntryExt::set_width_chars`.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"grab_focus_without_selecting","","Causes `self` to have keyboard focus.",616,{"inputs":[{"name":"self"}],"output":null}],[10,"im_context_filter_keypress","","Allow the `Entry` input method to internally handle key press and release events. If this function returns `true`, then no further processing should be done for this key event. See `IMContextExt::filter_keypress`.",616,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"layout_index_to_text_index","","Converts from a position in the entry’s `pango::Layout` (returned by `EntryExt::get_layout`) to a position in the entry contents (returned by `EntryExt::get_text`). ## `layout_index` byte index into the entry layout text",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"progress_pulse","","Indicates that some progress is made, but you don’t know how much. Causes the entry’s progress indicator to enter “activity mode,” where a block bounces back and forth. Each call to `EntryExt::progress_pulse` causes the block to move by a little bit (the amount of movement per pulse is determined by `EntryExt::set_progress_pulse_step`).",616,{"inputs":[{"name":"self"}],"output":null}],[10,"reset_im_context","","Reset the input method context of the entry if needed.",616,{"inputs":[{"name":"self"}],"output":null}],[10,"set_activates_default","","If `setting` is `true`, pressing Enter in the `self` will activate the default widget for the window containing the entry. This usually means that the dialog box containing the entry will be closed, since the default widget is usually one of the dialog buttons.",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_alignment","","Sets the alignment for the contents of the entry. This controls the horizontal positioning of the contents when the displayed text is shorter than the width of the entry. ## `xalign` The horizontal alignment, from 0 (left) to 1 (right).  Reversed for RTL layouts",616,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"set_attributes","","Sets a `pango::AttrList`; the attributes in the list are applied to the entry text.",616,{"inputs":[{"name":"self"},{"name":"attrlist"}],"output":null}],[10,"set_buffer","","Set the `EntryBuffer` object which holds the text for this widget. ## `buffer` a `EntryBuffer`",616,{"inputs":[{"name":"self"},{"name":"entrybuffer"}],"output":null}],[10,"set_completion","","Sets `completion` to be the auxiliary completion object to use with `self`. All further configuration of the completion mechanism is done on `completion` using the `EntryCompletion` API. Completion is disabled if `completion` is set to `None`. ## `completion` The `EntryCompletion` or `None`",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cursor_hadjustment","","Hooks up an adjustment to the cursor position in an entry, so that when the cursor is moved, the adjustment is scrolled to show that position. See `ScrolledWindowExt::get_hadjustment` for a typical way of obtaining the adjustment.",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_frame","","Sets whether the entry has a beveled frame around it. ## `setting` new value",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_icon_activatable","","Sets whether the icon is activatable. ## `icon_pos` Icon position ## `activatable` `true` if the icon should be activatable",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"bool"}],"output":null}],[10,"set_icon_drag_source","","Sets up the icon at the given position so that GTK+ will start a drag operation when the user clicks and drags the icon.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"targetlist"},{"name":"dragaction"}],"output":null}],[10,"set_icon_from_gicon","","Sets the icon shown in the entry at the specified position from the current icon theme. If the icon isn’t known, a “broken image” icon will be displayed instead.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"q"}],"output":null}],[10,"set_icon_from_icon_name","","Sets the icon shown in the entry at the specified position from the current icon theme.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_from_pixbuf","","Sets the icon shown in the specified position using a pixbuf.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_from_stock","","Sets the icon shown in the entry at the specified position from a stock image.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_sensitive","","Sets the sensitivity for the specified icon. ## `icon_pos` Icon position ## `sensitive` Specifies whether the icon should appear  sensitive or insensitive",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"bool"}],"output":null}],[10,"set_icon_tooltip_markup","","Sets `tooltip` as the contents of the tooltip for the icon at the specified position. `tooltip` is assumed to be marked up with the [Pango text markup language][PangoMarkupFormat].",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_tooltip_text","","Sets `tooltip` as the contents of the tooltip for the icon at the specified position.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_input_hints","","Sets the `Entry:input-hints` property, which allows input methods to fine-tune their behaviour.",616,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[10,"set_input_purpose","","Sets the `Entry:input-purpose` property which can be used by on-screen keyboards and other input methods to adjust their behaviour.",616,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":null}],[10,"set_invisible_char","","Sets the character to use in place of the actual text when `EntryExt::set_visibility` has been called to set text visibility to `false`. i.e. this is the character used in “password mode” to show the user how many characters have been typed. By default, GTK+ picks the best invisible char available in the current font. If you set the invisible char to 0, then the user will get no feedback at all; there will be no text on the screen as they type. ## `ch` a Unicode character",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_max_length","","Sets the maximum allowed length of the contents of the widget. If the current contents are longer than the given length, then they will be truncated to fit.",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_max_width_chars","","Sets the desired maximum width in characters of `self`.",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_overwrite_mode","","Sets whether the text is overwritten when typing in the `Entry`. ## `overwrite` new value",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_placeholder_text","","Sets text to be displayed in `self` when it is empty and unfocused. This can be used to give a visual hint of the expected contents of the `Entry`.",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_progress_fraction","","Causes the entry’s progress indicator to “fill in” the given fraction of the bar. The fraction should be between 0.0 and 1.0, inclusive. ## `fraction` fraction of the task that’s been completed",616,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_progress_pulse_step","","Sets the fraction of total entry width to move the progress bouncing block for each call to `EntryExt::progress_pulse`. ## `fraction` fraction between 0.0 and 1.0",616,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_tabs","","Sets a `pango::TabArray`; the tabstops in the array are applied to the entry text.",616,{"inputs":[{"name":"self"},{"name":"tabarray"}],"output":null}],[10,"set_text","","Sets the text in the widget to the given value, replacing the current contents.",616,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visibility","","Sets whether the contents of the entry are visible or not. When visibility is set to `false`, characters are displayed as the invisible char, and will also appear that way when the text in the entry widget is copied elsewhere.",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_width_chars","","Changes the size request of the entry to be about the right size for `n_chars` characters. Note that it changes the size request, the size can still be affected by how you pack the widget into containers. If `n_chars` is -1, the size reverts to the default entry size. ## `n_chars` width in chars",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"text_index_to_layout_index","","Converts from a position in the entry contents (returned by `EntryExt::get_text`) to a position in the entry’s `pango::Layout` (returned by `EntryExt::get_layout`, with text retrieved via `pango::LayoutExt::get_text`). ## `text_index` byte index into the entry contents",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"unset_invisible_char","","Unsets the invisible char previously set with `EntryExt::set_invisible_char`. So that the default invisible char is used again.",616,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_caps_lock_warning","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_caps_lock_warning","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_cursor_position","","",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_im_module","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_im_module","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_invisible_char_set","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_invisible_char_set","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_populate_all","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_populate_all","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_primary_icon_activatable","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_primary_icon_activatable","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_primary_icon_gicon","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_primary_icon_gicon","","",616,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_primary_icon_name","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_name","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_pixbuf","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_primary_icon_pixbuf","","",616,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_sensitive","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_primary_icon_sensitive","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_primary_icon_stock","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_stock","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_storage_type","","",616,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"get_property_primary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_scroll_offset","","",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_secondary_icon_activatable","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_secondary_icon_activatable","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_secondary_icon_gicon","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_secondary_icon_gicon","","",616,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_secondary_icon_name","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_name","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_pixbuf","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_secondary_icon_pixbuf","","",616,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_sensitive","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_secondary_icon_sensitive","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_secondary_icon_stock","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_stock","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_storage_type","","",616,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"get_property_secondary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_selection_bound","","",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_shadow_type","","",616,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"set_property_shadow_type","","",616,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"get_property_show_emoji_icon","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_emoji_icon","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_truncate_multiline","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_truncate_multiline","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_xalign","","The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.",616,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.",616,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_activate","","The ::activate signal is emitted when the user hits the Enter key.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_backspace","","The ::backspace signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_backspace","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_copy_clipboard","","The ::copy-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to copy the selection to the clipboard.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_copy_clipboard","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_cut_clipboard","","The ::cut-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to cut the selection to the clipboard.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cut_clipboard","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_delete_from_cursor","","The ::delete-from-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a text deletion.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_delete_from_cursor","","",616,{"inputs":[{"name":"self"},{"name":"deletetype"},{"name":"i32"}],"output":null}],[10,"connect_icon_press","","The ::icon-press signal is emitted when an activatable icon is clicked. ## `icon_pos` The position of the clicked icon ## `event` the button press event",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_icon_release","","The ::icon-release signal is emitted on the button release from a mouse click over an activatable icon. ## `icon_pos` The position of the clicked icon ## `event` the button release event",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_at_cursor","","The ::insert-at-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates the insertion of a fixed string at the cursor.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_insert_at_cursor","","",616,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement. If the cursor is not visible in `entry`, this signal causes the viewport to be moved instead.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",616,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"connect_paste_clipboard","","The ::paste-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to paste the contents of the clipboard into the text view.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_paste_clipboard","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_populate_popup","","The ::populate-popup signal gets emitted before showing the context menu of the entry.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_changed","","If an input method is used, the typed text will not immediately be committed to the buffer. So if you are interested in the text, connect to this signal. ## `preedit` the current preedit string",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_preedit_changed","","",616,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_toggle_overwrite","","The ::toggle-overwrite signal is a [keybinding signal][`BindingSignal`] which gets emitted to toggle the overwrite mode of the entry.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_overwrite","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activates_default_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attributes_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_caps_lock_warning_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_completion_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_position_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_frame_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_im_module_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_hints_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_purpose_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_char_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_char_set_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_length_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_chars_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_overwrite_mode_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_placeholder_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_populate_all_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_activatable_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_gicon_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_name_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_pixbuf_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_sensitive_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_stock_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_storage_type_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_tooltip_markup_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_tooltip_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_progress_fraction_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_progress_pulse_step_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scroll_offset_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_activatable_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_gicon_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_name_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_pixbuf_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_sensitive_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_stock_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_storage_type_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_tooltip_markup_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_tooltip_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_bound_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_emoji_icon_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_length_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_truncate_multiline_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visibility_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EntryCompletionExt","","Trait containing all `EntryCompletion` methods.",null,null],[10,"complete","","Requests a completion operation, or in other words a refiltering of the current list with completions, using the current key. The completion list view will be updated accordingly.",617,{"inputs":[{"name":"self"}],"output":null}],[10,"compute_prefix","","Computes the common prefix that is shared by all rows in `self` that start with `key`. If no row matches `key`, `None` will be returned. Note that a text column must have been set for this function to work, see `EntryCompletionExt::set_text_column` for details. ## `key` The text to complete for",617,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"delete_action","","Deletes the action at `index_` from `self`’s action list.",617,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_completion_prefix","","Get the original text entered by the user that triggered the completion or `None` if there’s no completion ongoing.",617,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_entry","","Gets the entry `self` has been attached to.",617,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_inline_completion","","Returns whether the common prefix of the possible completions should be automatically inserted in the entry.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inline_selection","","Returns `true` if inline-selection mode is turned on.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_minimum_key_length","","Returns the minimum key length as set for `self`.",617,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the model the `EntryCompletion` is using as data source. Returns `None` if the model is unset.",617,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_popup_completion","","Returns whether the completions should be presented in a popup window.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_popup_set_width","","Returns whether the completion popup window will be resized to the width of the entry.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_popup_single_match","","Returns whether the completion popup window will appear even if there is only a single match.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_text_column","","Returns the column in the model of `self` to get strings from.",617,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"insert_action_markup","","Inserts an action in `self`’s action item list at position `index_` with markup `markup`. ## `index_` the index of the item to insert ## `markup` markup of the item to insert",617,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[10,"insert_action_text","","Inserts an action in `self`’s action item list at position `index_` with text `text`. If you want the action item to have markup, use `EntryCompletionExt::insert_action_markup`.",617,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[10,"insert_prefix","","Requests a prefix insertion.",617,{"inputs":[{"name":"self"}],"output":null}],[10,"set_inline_completion","","Sets whether the common prefix of the possible completions should be automatically inserted in the entry. ## `inline_completion` `true` to do inline completion",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_inline_selection","","Sets whether it is possible to cycle through the possible completions inside the entry. ## `inline_selection` `true` to do inline selection",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_minimum_key_length","","Requires the length of the search key for `self` to be at least `length`. This is useful for long lists, where completing using a small key takes a lot of time and will come up with meaningless results anyway (ie, a too large dataset). ## `length` the minimum length of the key in order to start completing",617,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model for a `EntryCompletion`. If `self` already has a model set, it will remove it before setting the new model. If model is `None`, then it will unset the model. ## `model` the `TreeModel`",617,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popup_completion","","Sets whether the completions should be presented in a popup window. ## `popup_completion` `true` to do popup completion",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_popup_set_width","","Sets whether the completion popup window will be resized to be the same width as the entry. ## `popup_set_width` `true` to make the width of the popup the same as the entry",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_popup_single_match","","Sets whether the completion popup window will appear even if there is only a single match. You may want to set this to `false` if you are using [inline completion][`EntryCompletion`--inline-completion]. ## `popup_single_match` `true` if the popup should appear even for a single  match",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text_column","","Convenience function for setting up the most used case of this code: a completion list with just strings. This function will set up `self` to have a list displaying all (and just) strings in the completion list, and to get those strings from `column` in the model of `self`.",617,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_cell_area","","",617,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"connect_action_activated","","Gets emitted when an action is activated. ## `index` the index of the activated action",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cursor_on_match","","Gets emitted when a match from the cursor is on a match of the list. The default behaviour is to replace the contents of the entry with the contents of the text column in the row pointed to by `iter`.",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_prefix","","Gets emitted when the inline autocompletion is triggered. The default behaviour is to make the entry display the whole prefix and select the newly inserted part.",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_match_selected","","Gets emitted when a match from the list is selected. The default behaviour is to replace the contents of the entry with the contents of the text column in the row pointed to by `iter`.",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_no_matches","","Gets emitted when the filter model has zero number of rows in completion_complete method. (In other words when `EntryCompletion` is out of  suggestions)",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inline_completion_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inline_selection_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_key_length_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_completion_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_set_width_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_single_match_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_column_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EventBoxExt","","Trait containing all `EventBox` methods.",null,null],[10,"get_above_child","","Returns whether the event box window is above or below the windows of its child. See `EventBoxExt::set_above_child` for details.",618,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_window","","Returns whether the event box has a visible window. See `EventBoxExt::set_visible_window` for details.",618,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_above_child","","Set whether the event box window is positioned above the windows of its child, as opposed to below it. If the window is above, all events inside the event box will go to the event box. If the window is below, events in windows of child widgets will first got to that widget, and then to its parents.",618,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_window","","Set whether the event box uses a visible or invisible child window. The default is to use visible windows.",618,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_above_child_notify","","",618,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_window_notify","","",618,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EventControllerExt","","Trait containing all `EventController` methods.",null,null],[10,"get_propagation_phase","","Gets the propagation phase at which `self` handles events.",619,{"inputs":[{"name":"self"}],"output":{"name":"propagationphase"}}],[10,"get_widget","","Returns the `Widget` this controller relates to.",619,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"handle_event","","Feeds an events into `self`, so it can be interpreted and the controller actions triggered.",619,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"reset","","Resets the `self` to a clean state. Every interaction the controller did through `EventController::handle-event` will be dropped at this point.",619,{"inputs":[{"name":"self"}],"output":null}],[10,"set_propagation_phase","","Sets the propagation phase at which a controller handles events.",619,{"inputs":[{"name":"self"},{"name":"propagationphase"}],"output":null}],[10,"connect_property_propagation_phase_notify","","",619,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_widget_notify","","",619,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ExpanderExt","","Trait containing all `Expander` methods.",null,null],[10,"get_expanded","","Queries a `Expander` and returns its current state. Returns `true` if the child widget is revealed.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_label","","Fetches the text from a label widget including any embedded underlines indicating mnemonics and Pango markup, as set by `ExpanderExt::set_label`. If the label text has not been set the return value will be `None`. This will be the case if you create an empty button with `Button::new` to use as a container.",620,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_fill","","Returns whether the label widget will fill all available horizontal space allocated to `self`.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_label_widget","","Retrieves the label widget for the frame. See `ExpanderExt::set_label_widget`.",620,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_resize_toplevel","","Returns whether the expander will resize the toplevel widget containing the expander upon resizing and collpasing.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_spacing","","Gets the value set by `ExpanderExt::set_spacing`.",620,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_use_markup","","Returns whether the label’s text is interpreted as marked up with the [Pango text markup language][PangoMarkupFormat]. See `ExpanderExt::set_use_markup`.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_underline","","Returns whether an embedded underline in the expander label indicates a mnemonic. See `ExpanderExt::set_use_underline`.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_expanded","","Sets the state of the expander. Set to `true`, if you want the child widget to be revealed, and `false` if you want the child widget to be hidden. ## `expanded` whether the child widget is revealed",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_label","","Sets the text of the label of the expander to `label`.",620,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label_fill","","Sets whether the label widget should fill all available horizontal space allocated to `self`. ## `label_fill` `true` if the label should should fill  all available horizontal space",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_label_widget","","Set the label widget for the expander. This is the widget that will appear embedded alongside the expander arrow. ## `label_widget` the new label widget",620,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_resize_toplevel","","Sets whether the expander will resize the toplevel widget containing the expander upon resizing and collpasing. ## `resize_toplevel` whether to resize the toplevel",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_spacing","","Sets the spacing field of `self`, which is the number of pixels to place between expander and the child.",620,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_use_markup","","Sets whether the text of the label contains markup in [Pango’s text markup language][PangoMarkupFormat]. See `LabelExt::set_markup`. ## `use_markup` `true` if the label’s text should be parsed for markup",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text of the expander label indicates the next character should be used for the mnemonic accelerator key. ## `use_underline` `true` if underlines in the text indicate mnemonics",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",620,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_expanded_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_fill_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resize_toplevel_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_markup_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserExt","","Trait containing all `FileChooser` methods.",null,null],[10,"add_filter","","Adds `filter` to the list of filters that the user can select between. When a filter is selected, only files that are passed by that filter are displayed.",621,{"inputs":[{"name":"self"},{"name":"filefilter"}],"output":null}],[10,"add_shortcut_folder","","Adds a folder to be displayed with the shortcut folders in a file chooser. Note that shortcut folders do not get saved, as they are provided by the application. For example, you can use this to add a “/usr/share/mydrawprogram/Clipart” folder to the volume list. ## `folder` filename of the folder to add",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_shortcut_folder_uri","","Adds a folder URI to be displayed with the shortcut folders in a file chooser. Note that shortcut folders do not get saved, as they are provided by the application. For example, you can use this to add a “file:///usr/share/mydrawprogram/Clipart” folder to the volume list. ## `uri` URI of the folder to add",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_action","","Gets the type of operation that the file chooser is performing; see `FileChooser::set_action`.",621,{"inputs":[{"name":"self"}],"output":{"name":"filechooseraction"}}],[10,"get_choice","","Gets the currently selected option in the 'choice' with the given ID.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_create_folders","","Gets whether file choser will offer to create new folders. See `FileChooser::set_create_folders`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_current_folder","","Gets the current folder of `self` as a local filename. See `FileChooser::set_current_folder`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_current_folder_file","","Gets the current folder of `self` as `gio::File`. See `FileChooser::get_current_folder_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_current_folder_uri","","Gets the current folder of `self` as an URI. See `FileChooser::set_current_folder_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_current_name","","Gets the current name in the file selector, as entered by the user in the text entry for “Name”.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_do_overwrite_confirmation","","Queries whether a file chooser is set to confirm for overwriting when the user types a file name that already exists.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_extra_widget","","Gets the current extra widget; see `FileChooser::set_extra_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_file","","Gets the `gio::File` for the currently selected file in the file selector. If multiple files are selected, one of the files will be returned at random.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_filename","","Gets the filename for the currently selected file in the file selector. The filename is returned as an absolute path. If multiple files are selected, one of the filenames will be returned at random.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_filenames","","Lists all the selected files and subfolders in the current folder of `self`. The returned names are full absolute paths. If files in the current folder cannot be represented as local filenames they will be ignored. (See `FileChooser::get_uris`)",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[10,"get_files","","Lists all the selected files and subfolders in the current folder of `self` as `gio::File`. An internal function, see `FileChooser::get_uris`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"vec"}}],[10,"get_filter","","Gets the current filter; see `FileChooser::set_filter`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["filefilter"],"name":"option"}}],[10,"get_local_only","","Gets whether only local files can be selected in the file selector. See `FileChooser::set_local_only`",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_preview_file","","Gets the `gio::File` that should be previewed in a custom preview Internal function, see `FileChooser::get_preview_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_preview_filename","","Gets the filename that should be previewed in a custom preview widget. See `FileChooser::set_preview_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_preview_uri","","Gets the URI that should be previewed in a custom preview widget. See `FileChooser::set_preview_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_preview_widget","","Gets the current preview widget; see `FileChooser::set_preview_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_preview_widget_active","","Gets whether the preview widget set by `FileChooser::set_preview_widget` should be shown for the current filename. See `FileChooser::set_preview_widget_active`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_select_multiple","","Gets whether multiple files can be selected in the file selector. See `FileChooser::set_select_multiple`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_hidden","","Gets whether hidden files and folders are displayed in the file selector. See `FileChooser::set_show_hidden`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_uri","","Gets the URI for the currently selected file in the file selector. If multiple files are selected, one of the filenames will be returned at random.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_uris","","Lists all the selected files and subfolders in the current folder of `self`. The returned names are full absolute URIs.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_use_preview_label","","Gets whether a stock label should be drawn with the name of the previewed file. See `FileChooser::set_use_preview_label`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_filters","","Lists the current set of user-selectable filters; see `FileChooser::add_filter`, `FileChooser::remove_filter`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["filefilter"],"name":"vec"}}],[10,"list_shortcut_folder_uris","","Queries the list of shortcut folders in the file chooser, as set by `FileChooser::add_shortcut_folder_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_shortcut_folders","","Queries the list of shortcut folders in the file chooser, as set by `FileChooser::add_shortcut_folder`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[10,"remove_choice","","Removes a 'choice' that has been added with `FileChooser::add_choice`.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"remove_filter","","Removes `filter` from the list of filters that the user can select between. ## `filter` a `FileFilter`",621,{"inputs":[{"name":"self"},{"name":"filefilter"}],"output":null}],[10,"remove_shortcut_folder","","Removes a folder from a file chooser’s list of shortcut folders. ## `folder` filename of the folder to remove",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"remove_shortcut_folder_uri","","Removes a folder URI from a file chooser’s list of shortcut folders. ## `uri` URI of the folder to remove",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"select_all","","Selects all the files in the current folder of a file chooser.",621,{"inputs":[{"name":"self"}],"output":null}],[10,"select_file","","Selects the file referred to by `file`. An internal function. See `_gtk_file_chooser_select_uri`. ## `file` the file to select",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"select_filename","","Selects a filename. If the file name isn’t in the current folder of `self`, then the current folder of `self` will be changed to the folder containing `filename`. ## `filename` the filename to select",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"select_uri","","Selects the file to by `uri`. If the URI doesn’t refer to a file in the current folder of `self`, then the current folder of `self` will be changed to the folder containing `filename`. ## `uri` the URI to select",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_action","","Sets the type of operation that the chooser is performing; the user interface is adapted to suit the selected action. For example, an option to create a new folder might be shown if the action is `FileChooserAction::Save` but not if the action is `FileChooserAction::Open`. ## `action` the action that the file selector is performing",621,{"inputs":[{"name":"self"},{"name":"filechooseraction"}],"output":null}],[10,"set_choice","","Selects an option in a 'choice' that has been added with `FileChooser::add_choice`. For a boolean choice, the possible options are \"true\" and \"false\".",621,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_create_folders","","Sets whether file choser will offer to create new folders. This is only relevant if the action is not set to be `FileChooserAction::Open`. ## `create_folders` `true` if the Create Folder button should be displayed",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_current_folder","","Sets the current folder for `self` from a local filename. The user will be shown the full contents of the current folder, plus user interface elements for navigating to other folders.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_current_folder_file","","Sets the current folder for `self` from a `gio::File`. Internal function, see `FileChooser::set_current_folder_uri`. ## `file` the `gio::File` for the new folder",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_current_folder_uri","","Sets the current folder for `self` from an URI. The user will be shown the full contents of the current folder, plus user interface elements for navigating to other folders.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_current_name","","Sets the current name in the file selector, as if entered by the user. Note that the name passed in here is a UTF-8 string rather than a filename. This function is meant for such uses as a suggested name in a “Save As...” dialog. You can pass “Untitled.doc” or a similarly suitable suggestion for the `name`.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_do_overwrite_confirmation","","Sets whether a file chooser in `FileChooserAction::Save` mode will present a confirmation dialog if the user types a file name that already exists. This is `false` by default.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_extra_widget","","Sets an application-supplied widget to provide extra options to the user. ## `extra_widget` widget for extra options",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_file","","Sets `file` as the current filename for the file chooser, by changing to the file’s parent folder and actually selecting the file in list. If the `self` is in `FileChooserAction::Save` mode, the file’s base name will also appear in the dialog’s file name entry.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_filename","","Sets `filename` as the current filename for the file chooser, by changing to the file’s parent folder and actually selecting the file in list; all other files will be unselected. If the `self` is in `FileChooserAction::Save` mode, the file’s base name will also appear in the dialog’s file name entry.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_filter","","Sets the current filter; only the files that pass the filter will be displayed. If the user-selectable list of filters is non-empty, then the filter should be one of the filters in that list. Setting the current filter when the list of filters is empty is useful if you want to restrict the displayed set of files without letting the user change it. ## `filter` a `FileFilter`",621,{"inputs":[{"name":"self"},{"name":"filefilter"}],"output":null}],[10,"set_local_only","","Sets whether only local files can be selected in the file selector. If `local_only` is `true` (the default), then the selected file or files are guaranteed to be accessible through the operating systems native file system and therefore the application only needs to worry about the filename functions in `FileChooser`, like `FileChooser::get_filename`, rather than the URI functions like `FileChooser::get_uri`,",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_preview_widget","","Sets an application-supplied widget to use to display a custom preview of the currently selected file. To implement a preview, after setting the preview widget, you connect to the `FileChooser::update-preview` signal, and call `FileChooser::get_preview_filename` or `FileChooser::get_preview_uri` on each change. If you can display a preview of the new file, update your widget and set the preview active using `FileChooser::set_preview_widget_active`. Otherwise, set the preview inactive.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_preview_widget_active","","Sets whether the preview widget set by `FileChooser::set_preview_widget` should be shown for the current filename. When `active` is set to false, the file chooser may display an internally generated preview of the current file or it may display no preview at all. See `FileChooser::set_preview_widget` for more details. ## `active` whether to display the user-specified preview widget",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_select_multiple","","Sets whether multiple files can be selected in the file selector. This is only relevant if the action is set to be `FileChooserAction::Open` or `FileChooserAction::SelectFolder`. ## `select_multiple` `true` if multiple files can be selected.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_hidden","","Sets whether hidden files and folders are displayed in the file selector. ## `show_hidden` `true` if hidden files and folders should be displayed.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_uri","","Sets the file referred to by `uri` as the current file for the file chooser, by changing to the URI’s parent folder and actually selecting the URI in the list. If the `self` is `FileChooserAction::Save` mode, the URI’s base name will also appear in the dialog’s file name entry.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_use_preview_label","","Sets whether the file chooser should display a stock label with the name of the file that is being previewed; the default is `true`. Applications that want to draw the whole preview area themselves should set this to `false` and display the name themselves in their preview widget.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"unselect_all","","Unselects all the files in the current folder of a file chooser.",621,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_file","","Unselects the file referred to by `file`. If the file is not in the current directory, does not exist, or is otherwise not currently selected, does nothing. ## `file` a `gio::File`",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unselect_filename","","Unselects a currently selected filename. If the filename is not in the current directory, does not exist, or is otherwise not currently selected, does nothing. ## `filename` the filename to unselect",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unselect_uri","","Unselects the file referred to by `uri`. If the file is not in the current directory, does not exist, or is otherwise not currently selected, does nothing. ## `uri` the URI to unselect",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_confirm_overwrite","","This signal gets emitted whenever it is appropriate to present a confirmation dialog when the user has selected a file name that already exists. The signal only gets emitted when the file chooser is in `FileChooserAction::Save` mode.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_current_folder_changed","","This signal is emitted when the current folder in a `FileChooser` changes. This can happen due to the user performing some action that changes folders, such as selecting a bookmark or visiting a folder on the file list. It can also happen as a result of calling a function to explicitly change the current folder in a file chooser.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_file_activated","","This signal is emitted when the user \"activates\" a file in the file chooser. This can happen by double-clicking on a file in the file list, or by pressing `Enter`.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_changed","","This signal is emitted when there is a change in the set of selected files in a `FileChooser`. This can happen when the user modifies the selection with the mouse or the keyboard, or when explicitly calling functions to change the selection.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_update_preview","","This signal is emitted when the preview in a file chooser should be regenerated. For example, this can happen when the currently selected file changes. You should use this signal if you want your file chooser to have a preview widget.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_action_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_create_folders_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_do_overwrite_confirmation_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_extra_widget_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filter_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_only_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_preview_widget_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_preview_widget_active_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_select_multiple_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_hidden_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_preview_label_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserButtonExt","","Trait containing all `FileChooserButton` methods.",null,null],[10,"get_focus_on_click","","Returns whether the button grabs focus when it is clicked with the mouse. See `FileChooserButtonExt::set_focus_on_click`.",622,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Retrieves the title of the browse dialog used by `self`. The returned value should not be modified or freed.",622,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_width_chars","","Retrieves the width in characters of the `self` widget’s entry and/or label.",622,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_focus_on_click","","Sets whether the button will grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",622,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Modifies the `title` of the browse dialog used by `self`. ## `title` the new browse dialog title.",622,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_width_chars","","Sets the width (in characters) that `self` will use to `n_chars`. ## `n_chars` the new width, in characters.",622,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_file_set","","The ::file-set signal is emitted when the user selects a file.",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_dialog_notify","","",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserNativeExt","","",null,null],[10,"get_accept_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_cancel_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_accept_label","","",623,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cancel_label","","",623,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_accept_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_accept_label","","",623,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_cancel_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_cancel_label","","",623,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_accept_label_notify","","",623,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cancel_label_notify","","",623,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserWidgetExt","","Trait containing all `FileChooserWidget` methods.",null,null],[10,"get_property_search_mode","","",624,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_search_mode","","",624,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_subtitle","","",624,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_desktop_folder","","The ::desktop-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_desktop_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_down_folder","","The ::down-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_down_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_home_folder","","The ::home-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_home_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_location_popup","","The ::location-popup signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_location_popup","","",624,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_location_popup_on_paste","","The ::location-popup-on-paste signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_location_popup_on_paste","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_location_toggle_popup","","The ::location-toggle-popup signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_location_toggle_popup","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_places_shortcut","","The ::places-shortcut signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_places_shortcut","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_quick_bookmark","","The ::quick-bookmark signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_quick_bookmark","","",624,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_recent_shortcut","","The ::recent-shortcut signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_recent_shortcut","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_search_shortcut","","The ::search-shortcut signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_search_shortcut","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_show_hidden","","The ::show-hidden signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show_hidden","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_up_folder","","The ::up-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_up_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_search_mode_notify","","",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_subtitle_notify","","",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileFilterExt","","Trait containing all `FileFilter` methods.",null,null],[10,"add_mime_type","","Adds a rule allowing a given mime type to `self`. ## `mime_type` name of a MIME type",625,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pattern","","Adds a rule allowing a shell style glob to a filter. ## `pattern` a shell style glob",625,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pixbuf_formats","","Adds a rule allowing image files in the formats supported by `gdk_pixbuf::Pixbuf`.",625,{"inputs":[{"name":"self"}],"output":null}],[10,"get_name","","Gets the human-readable name for the filter. See `FileFilterExt::set_name`.",625,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_needed","","Gets the fields that need to be filled in for the `FileFilterInfo` passed to `FileFilterExt::filter`",625,{"inputs":[{"name":"self"}],"output":{"name":"filefilterflags"}}],[10,"set_name","","Sets the human-readable name of the filter; this is the string that will be displayed in the file selector user interface if there is a selectable list of filters. ## `name` the human-readable-name for the filter, or `None`  to remove any existing name.",625,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"to_gvariant","","Serialize a file filter to an a{sv} variant.",625,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[8,"FixedExt","","Trait containing all `Fixed` methods.",null,null],[10,"move_","","",626,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"put","","Adds a widget to a `Fixed` container at the given position. ## `widget` the widget to add. ## `x` the horizontal position to place the widget at. ## `y` the vertical position to place the widget at.",626,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[8,"FlowBoxExt","","Trait containing all `FlowBox` methods.",null,null],[10,"get_activate_on_single_click","","Returns whether children activate on single clicks.",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_child_at_index","","Gets the nth child in the `self`.",627,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["flowboxchild"],"name":"option"}}],[10,"get_child_at_pos","","Gets the child in the (`x`, `y`) position.",627,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["flowboxchild"],"name":"option"}}],[10,"get_column_spacing","","Gets the horizontal spacing.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_homogeneous","","Returns whether the box is homogeneous (all children are the same size). See `BoxExt::set_homogeneous`.",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_max_children_per_line","","Gets the maximum number of children per line.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_min_children_per_line","","Gets the minimum number of children per line.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_row_spacing","","Gets the vertical spacing.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_selected_children","","Creates a list of all selected children.",627,{"inputs":[{"name":"self"}],"output":{"generics":["flowboxchild"],"name":"vec"}}],[10,"get_selection_mode","","Gets the selection mode of `self`.",627,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"insert","","Inserts the `widget` into `self` at `position`.",627,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"invalidate_filter","","Updates the filtering for all children.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"invalidate_sort","","Updates the sorting for all children.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"select_all","","Select all children of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"select_child","","Selects a single child of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"},{"name":"flowboxchild"}],"output":null}],[10,"set_activate_on_single_click","","If `single` is `true`, children will be activated when you click on them, otherwise you need to double-click.",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_column_spacing","","Sets the horizontal space to add between children. See the `FlowBox:column-spacing` property.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_hadjustment","","Hooks up an adjustment to focus handling in `self`. The adjustment is also used for autoscrolling during rubberband selection. See `ScrolledWindowExt::get_hadjustment` for a typical way of obtaining the adjustment, and `FlowBoxExt::set_vadjustment`for setting the vertical adjustment.",627,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_homogeneous","","Sets the `FlowBox:homogeneous` property of `self`, controlling whether or not all children of `self` are given equal space in the box.",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_children_per_line","","Sets the maximum number of children to request and allocate space for in `self`’s orientation.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_min_children_per_line","","Sets the minimum number of children to line up in `self`’s orientation before flowing.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_row_spacing","","Sets the vertical space to add between children. See the `FlowBox:row-spacing` property.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_selection_mode","","Sets how selection works in `self`. See `SelectionMode` for details.",627,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"set_vadjustment","","Hooks up an adjustment to focus handling in `self`. The adjustment is also used for autoscrolling during rubberband selection. See `ScrolledWindowExt::get_vadjustment` for a typical way of obtaining the adjustment, and `FlowBoxExt::set_hadjustment`for setting the horizontal adjustment.",627,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"unselect_all","","Unselect all children of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_child","","Unselects a single child of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"},{"name":"flowboxchild"}],"output":null}],[10,"get_property_activate_on_single_click","","",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_activate_on_single_click","","",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_column_spacing","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_column_spacing","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_homogeneous","","Determines whether all children should be allocated the same size.",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_homogeneous","","Determines whether all children should be allocated the same size.",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_max_children_per_line","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_max_children_per_line","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_min_children_per_line","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_min_children_per_line","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_row_spacing","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_row_spacing","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_selection_mode","","",627,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"set_property_selection_mode","","",627,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"connect_activate_cursor_child","","The ::activate-cursor-child signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user activates the `box_`.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_cursor_child","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_child_activated","","The ::child-activated signal is emitted when a child has been activated by the user. ## `child` the child that is activated",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",627,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_select_all","","The ::select-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to select all children of the box, if the selection mode permits it.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_selected_children_changed","","The ::selected-children-changed signal is emitted when the set of selected children changes.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_child","","The ::toggle-cursor-child signal is a [keybinding signal][`BindingSignal`] which toggles the selection of the child that has the focus.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_child","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_unselect_all","","The ::unselect-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to unselect all children of the box, if the selection mode permits it.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activate_on_single_click_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_spacing_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_homogeneous_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_children_per_line_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_children_per_line_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_spacing_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_mode_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FlowBoxChildExt","","Trait containing all `FlowBoxChild` methods.",null,null],[10,"changed","","Marks `self` as changed, causing any state that depends on this to be updated. This affects sorting and filtering.",628,{"inputs":[{"name":"self"}],"output":null}],[10,"get_index","","Gets the current index of the `self` in its `FlowBox` container.",628,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"is_selected","","Returns whether the `self` is currently selected in its `FlowBox` container.",628,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_activate","","The ::activate signal is emitted when the user activates a child widget in a `FlowBox`, either by clicking or double-clicking, or by using the Space or Enter key.",628,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",628,{"inputs":[{"name":"self"}],"output":null}],[8,"FontButtonExt","","Trait containing all `FontButton` methods.",null,null],[10,"get_font_name","","Retrieves the name of the currently selected font. This name includes style and size information as well. If you want to render something with the font, use this string with `pango::FontDescription::from_string` . If you’re interested in peeking certain values (family name, style, size, weight) just query these properties from the `pango::FontDescription` object.",629,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_size","","Returns whether the font size will be shown in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_style","","Returns whether the name of the font style will be shown in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Retrieves the title of the font chooser dialog.",629,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_use_font","","Returns whether the selected font is used in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_size","","Returns whether the selected size is used in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_font_name","","Sets or updates the currently-displayed font in font picker dialog. ## `fontname` Name of font to display in font chooser dialog",629,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_show_size","","If `show_size` is `true`, the font size will be displayed along with the name of the selected font. ## `show_size` `true` if font size should be displayed in dialog.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_style","","If `show_style` is `true`, the font style will be displayed along with name of the selected font. ## `show_style` `true` if font style should be displayed in label.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Sets the title for the font chooser dialog. ## `title` a string containing the font chooser dialog title",629,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_use_font","","If `use_font` is `true`, the font name will be written using the selected font. ## `use_font` If `true`, font name will be written using font chosen.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_size","","If `use_size` is `true`, the font name will be written using the selected size. ## `use_size` If `true`, font name will be written using the selected size.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_font_set","","The ::font-set signal is emitted when the user selects a font. When handling this signal, use `FontButtonExt::get_font_name` to find out which font was just selected.",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_name_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_size_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_style_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_font_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_size_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FontChooserExt","","Trait containing all `FontChooser` methods.",null,null],[10,"get_font","","Gets the currently-selected font name.",630,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_font_desc","","Gets the currently-selected font.",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_font_face","","Gets the `pango::FontFace` representing the selected font group details (i.e. family, slant, weight, width, etc).",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontface"],"name":"option"}}],[10,"get_font_family","","Gets the `pango::FontFamily` representing the selected font family. Font families are a collection of font faces.",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontfamily"],"name":"option"}}],[10,"get_font_map","","Gets the custom font map of this font chooser widget, or `None` if it does not have one.",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_font_size","","The selected font size.",630,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_preview_text","","Gets the text displayed in the preview area.",630,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_preview_entry","","Returns whether the preview entry is shown or not.",630,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_font","","Sets the currently-selected font. ## `fontname` a font name like “Helvetica 12” or “Times Bold 18”",630,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_font_desc","","Sets the currently-selected font from `font_desc`. ## `font_desc` a `pango::FontDescription`",630,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":null}],[10,"set_font_map","","Sets a custom font map to use for this font chooser widget. A custom font map can be used to present application-specific fonts instead of or in addition to the normal system fonts.",630,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_preview_text","","Sets the text displayed in the preview area. The `text` is used to show how the selected font looks. ## `text` the text to display in the preview area",630,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_show_preview_entry","","Shows or hides the editable preview entry. ## `show_preview_entry` whether to show the editable preview entry or not",630,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_font_activated","","Emitted when a font is activated. This usually happens when the user double clicks an item, or an item is selected and the user presses one of the keys Space, Shift+Space, Return or Enter. ## `fontname` the font name",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_desc_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_preview_text_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_preview_entry_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FrameExt","","Trait containing all `Frame` methods.",null,null],[10,"get_label","","If the frame’s label widget is a `Label`, returns the text in the label widget. (The frame will have a `Label` for the label widget if a non-`None` argument was passed to `Frame::new`.)",631,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_align","","Retrieves the X and Y alignment of the frame’s label. See `FrameExt::set_label_align`. ## `xalign` location to store X alignment of  frame’s label, or `None` ## `yalign` location to store X alignment of  frame’s label, or `None`",631,null],[10,"get_label_widget","","Retrieves the label widget for the frame. See `FrameExt::set_label_widget`.",631,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_shadow_type","","Retrieves the shadow type of the frame. See `FrameExt::set_shadow_type`.",631,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"set_label","","Removes the current `Frame:label-widget`. If `label` is not `None`, creates a new `Label` with that text and adds it as the `Frame:label-widget`. ## `label` the text to use as the label of the frame",631,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label_align","","Sets the alignment of the frame widget’s label. The default values for a newly created frame are 0.0 and 0.5. ## `xalign` The position of the label along the top edge  of the widget. A value of 0.0 represents left alignment;  1.0 represents right alignment. ## `yalign` The y alignment of the label. A value of 0.0 aligns under  the frame; 1.0 aligns above the frame. If the values are exactly  0.0 or 1.0 the gap in the frame won’t be painted because the label  will be completely above or below the frame.",631,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_label_widget","","Sets the `Frame:label-widget` for the frame. This is the widget that will appear embedded in the top edge of the frame as a title. ## `label_widget` the new label widget",631,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_shadow_type","","Sets the `Frame:shadow-type` for `self`, i.e. whether it is drawn without (GTK_SHADOW_NONE) or with (other values) a visible border. Values other than GTK_SHADOW_NONE are treated identically by `Frame`. The chosen type is applied by removing or adding the .flat class to the CSS node named border. ## `type_` the new `ShadowType`",631,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"get_property_label_xalign","","",631,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_label_xalign","","",631,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_label_yalign","","",631,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_label_yalign","","",631,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_property_label_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_xalign_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_yalign_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GLAreaExt","","Trait containing all `GLArea` methods.",null,null],[10,"attach_buffers","","Ensures that the `self` framebuffer object is made the current draw and read target, and that all the required buffers for the `self` are created and bound to the frambuffer.",632,{"inputs":[{"name":"self"}],"output":null}],[10,"get_auto_render","","Returns whether the area is in auto render mode or not.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_context","","Retrieves the `gdk::GLContext` used by `self`.",632,{"inputs":[{"name":"self"}],"output":{"generics":["glcontext"],"name":"option"}}],[10,"get_error","","Gets the current error set on the `self`.",632,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[10,"get_has_alpha","","Returns whether the area has an alpha component.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_depth_buffer","","Returns whether the area has a depth buffer.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_stencil_buffer","","Returns whether the area has a stencil buffer.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_required_version","","Retrieves the required version of OpenGL set using `GLAreaExt::set_required_version`.",632,null],[10,"get_use_es","","Retrieves the value set by `GLAreaExt::set_use_es`.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Ensures that the `gdk::GLContext` used by `self` is associated with the `GLArea`.",632,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_render","","Marks the currently rendered data (if any) as invalid, and queues a redraw of the widget, ensuring that the `GLArea::render` signal is emitted during the draw.",632,{"inputs":[{"name":"self"}],"output":null}],[10,"set_auto_render","","If `auto_render` is `true` the `GLArea::render` signal will be emitted every time the widget draws. This is the default and is useful if drawing the widget is faster.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_error","","Sets an error on the area which will be shown instead of the GL rendering. This is useful in the `GLArea::create-context` signal if GL context creation fails.",632,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_alpha","","If `has_alpha` is `true` the buffer allocated by the widget will have an alpha channel component, and when rendering to the window the result will be composited over whatever is below the widget.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_depth_buffer","","If `has_depth_buffer` is `true` the widget will allocate and enable a depth buffer for the target framebuffer. Otherwise there will be none.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_stencil_buffer","","If `has_stencil_buffer` is `true` the widget will allocate and enable a stencil buffer for the target framebuffer. Otherwise there will be none.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_required_version","","Sets the required version of OpenGL to be used when creating the context for the widget.",632,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_use_es","","Sets whether the `self` should create an OpenGL or an OpenGL ES context.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_create_context","","The ::create-context signal is emitted when the widget is being realized, and allows you to override how the GL context is created. This is useful when you want to reuse an existing GL context, or if you want to try creating different kinds of GL options.",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_render","","The ::render signal is emitted every time the contents of the `GLArea` should be redrawn.",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_resize","","The ::resize signal is emitted once when the widget is realized, and then each time the widget is changed while realized. This is useful in order to keep GL state up to date with the widget size, like for instance camera properties which may depend on the width/height ratio.",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_auto_render_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_context_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_alpha_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_depth_buffer_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_stencil_buffer_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_es_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureExt","","Trait containing all `Gesture` methods.",null,null],[10,"get_bounding_box","","If there are touch sequences being currently handled by `self`, this function returns `true` and fills in `rect` with the bounding box containing all active touches. Otherwise, `false` will be returned.",633,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_bounding_box_center","","If there are touch sequences being currently handled by `self`, this function returns `true` and fills in `x` and `y` with the center of the bounding box containing all active touches. Otherwise, `false` will be returned.",633,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_device","","Returns the master `gdk::Device` that is currently operating on `self`, or `None` if the gesture is not being interacted.",633,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_group","","Returns all gestures in the group of `self`",633,{"inputs":[{"name":"self"}],"output":{"generics":["gesture"],"name":"vec"}}],[10,"get_window","","Returns the user-defined window that receives the events handled by `self`. See `GestureExt::set_window` for more information.",633,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"group","","Adds `gesture` to the same group than `self`. Gestures are by default isolated in their own groups.",633,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"is_active","","Returns `true` if the gesture is currently active. A gesture is active meanwhile there are touch sequences interacting with it.",633,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_grouped_with","","Returns `true` if both gestures pertain to the same group.",633,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"is_recognized","","Returns `true` if the gesture is currently recognized. A gesture is recognized if there are as many interacting touch sequences as required by `self`, and `Gesture::check` returned `true` for the sequences being currently interpreted.",633,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_state","","Sets the state of all sequences that `self` is currently interacting with. See `GestureExt::set_sequence_state` for more details on sequence states.",633,{"inputs":[{"name":"self"},{"name":"eventsequencestate"}],"output":{"name":"bool"}}],[10,"set_window","","Sets a specific window to receive events about, so `self` will effectively handle only events targeting `window`, or a child of it. `window` must pertain to `EventControllerExt::get_widget`.",633,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"ungroup","","Separates `self` into an isolated group.",633,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_n_points","","",633,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_property_n_points_notify","","",633,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",633,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureDragExt","","Trait containing all `GestureDrag` methods.",null,null],[10,"get_offset","","If the `self` is active, this function returns `true` and fills in `x` and `y` with the coordinates of the current point, as an offset to the starting drag point.",634,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_start_point","","If the `self` is active, this function returns `true` and fills in `x` and `y` with the drag start coordinates, in window-relative coordinates.",634,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"connect_drag_begin","","This signal is emitted whenever dragging starts.",634,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_end","","This signal is emitted whenever the dragging is finished.",634,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_update","","This signal is emitted whenever the dragging point moves.",634,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureLongPressExt","","Trait containing all `GestureLongPress` methods.",null,null],[10,"get_property_delay_factor","","",635,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_delay_factor","","",635,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_cancelled","","This signal is emitted whenever a press moved too far, or was released before `GestureLongPress::pressed` happened.",635,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pressed","","This signal is emitted whenever a press goes unmoved/unreleased longer than what the GTK+ defaults tell.",635,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_delay_factor_notify","","",635,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureMultiPressExt","","Trait containing all `GestureMultiPress` methods.",null,null],[10,"get_area","","If an area was set through `GestureMultiPressExt::set_area`, this function will return `true` and fill in `rect` with the press area. See `GestureMultiPressExt::set_area` for more details on what the press area represents.",636,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"set_area","","If `rect` is non-`None`, the press area will be checked to be confined within the rectangle, otherwise the button count will be reset so the press is seen as being the first one. If `rect` is `None`, the area will be reset to an unrestricted state.",636,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_pressed","","This signal is emitted whenever a button or touch press happens.",636,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_released","","This signal is emitted when a button or touch is released. `n_press` will report the number of press that is paired to this event, note that `GestureMultiPress::stopped` may have been emitted between the press and its release, `n_press` will only start over at the next press.",636,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_stopped","","This signal is emitted whenever any time/distance threshold has been exceeded.",636,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GesturePanExt","","Trait containing all `GesturePan` methods.",null,null],[10,"get_orientation","","Returns the orientation of the pan gestures that this `self` expects.",637,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"set_orientation","","Sets the orientation to be expected on pan gestures.",637,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[10,"connect_pan","","This signal is emitted once a panning gesture along the expected axis is detected.",637,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_orientation_notify","","",637,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureRotateExt","","Trait containing all `GestureRotate` methods.",null,null],[10,"get_angle_delta","","If `self` is active, this function returns the angle difference in radians since the gesture was first recognized. If `self` is not active, 0 is returned.",638,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"connect_angle_changed","","This signal is emitted when the angle between both tracked points changes.",638,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureSingleExt","","Trait containing all `GestureSingle` methods.",null,null],[10,"get_button","","Returns the button number `self` listens for, or 0 if `self` reacts to any button press.",639,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_current_button","","Returns the button number currently interacting with `self`, or 0 if there is none.",639,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_exclusive","","Gets whether a gesture is exclusive. For more information, see `GestureSingleExt::set_exclusive`.",639,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_touch_only","","Returns `true` if the gesture is only triggered by touch events.",639,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_button","","Sets the button number `self` listens to. If non-0, every button press from a different button number will be ignored. Touch events implicitly match with button 1.",639,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_exclusive","","Sets whether `self` is exclusive. An exclusive gesture will only handle pointer and \"pointer emulated\" touch events, so at any given time, there is only one sequence able to interact with those.",639,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_touch_only","","If `touch_only` is `true`, `self` will only handle events of type `gdk::EventType::TouchBegin`, `gdk::EventType::TouchUpdate` or `gdk::EventType::TouchEnd`. If `false`, mouse events will be handled too.",639,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_button_notify","","",639,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_exclusive_notify","","",639,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_touch_only_notify","","",639,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureSwipeExt","","Trait containing all `GestureSwipe` methods.",null,null],[10,"get_velocity","","If the gesture is recognized, this function returns `true` and fill in `velocity_x` and `velocity_y` with the recorded velocity, as per the last event(s) processed.",640,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"connect_swipe","","This signal is emitted when the recognized gesture is finished, velocity and direction are a product of previously recorded events.",640,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureZoomExt","","Trait containing all `GestureZoom` methods.",null,null],[10,"get_scale_delta","","If `self` is active, this function returns the zooming difference since the gesture was recognized (hence the starting point is considered 1:1). If `self` is not active, 1 is returned.",641,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"connect_scale_changed","","This signal is emitted whenever the distance between both tracked sequences changes.",641,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GridExt","","Trait containing all `Grid` methods.",null,null],[10,"attach","","Adds a widget to the grid.",642,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"attach_next_to","","Adds a widget to the grid.",642,{"inputs":[{"name":"self"},{"name":"p"},{"name":"r"},{"name":"positiontype"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_baseline_row","","Returns which row defines the global baseline of `self`.",642,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_child_at","","Gets the child of `self` whose area covers the grid cell whose upper left corner is at `left`, `top`. ## `left` the left edge of the cell ## `top` the top edge of the cell",642,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_column_homogeneous","","Returns whether all columns of `self` have the same width.",642,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_column_spacing","","Returns the amount of space between the columns of `self`.",642,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_row_baseline_position","","Returns the baseline position of `row` as set by `GridExt::set_row_baseline_position` or the default value `BaselinePosition::Center`.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"baselineposition"}}],[10,"get_row_homogeneous","","Returns whether all rows of `self` have the same height.",642,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_row_spacing","","Returns the amount of space between the rows of `self`.",642,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"insert_column","","Inserts a column at the specified position.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"insert_next_to","","Inserts a row or column at the specified position.",642,{"inputs":[{"name":"self"},{"name":"p"},{"name":"positiontype"}],"output":null}],[10,"insert_row","","Inserts a row at the specified position.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_column","","Removes a column from the grid.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_row","","Removes a row from the grid.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_baseline_row","","Sets which row defines the global baseline for the entire grid. Each row in the grid can have its own local baseline, but only one of those is global, meaning it will be the baseline in the parent of the `self`.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_column_homogeneous","","Sets whether all columns of `self` will have the same width. ## `homogeneous` `true` to make columns homogeneous",642,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_column_spacing","","Sets the amount of space between columns of `self`. ## `spacing` the amount of space to insert between columns",642,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_row_baseline_position","","Sets how the baseline should be positioned on `row` of the grid, in case that row is assigned more space than is requested.",642,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"baselineposition"}],"output":null}],[10,"set_row_homogeneous","","Sets whether all rows of `self` will have the same height. ## `homogeneous` `true` to make rows homogeneous",642,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_row_spacing","","Sets the amount of space between rows of `self`. ## `spacing` the amount of space to insert between rows",642,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_baseline_row","","",642,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_baseline_row","","",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_cell_height","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_height","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_cell_width","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_width","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_cell_left_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_left_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_cell_top_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_top_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_baseline_row_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_homogeneous_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_spacing_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_homogeneous_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_spacing_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"HeaderBarExt","","Trait containing all `HeaderBar` methods.",null,null],[10,"get_custom_title","","Retrieves the custom title widget of the header. See `HeaderBarExt::set_custom_title`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_decoration_layout","","Gets the decoration layout set with `HeaderBarExt::set_decoration_layout`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_has_subtitle","","Retrieves whether the header bar reserves space for a subtitle, regardless if one is currently set or not.",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_close_button","","Returns whether this header bar shows the standard window decorations.",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_subtitle","","Retrieves the subtitle of the header. See `HeaderBarExt::set_subtitle`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_title","","Retrieves the title of the header. See `HeaderBarExt::set_title`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"pack_end","","Adds `child` to `self`, packed with reference to the end of the `self`.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"pack_start","","Adds `child` to `self`, packed with reference to the start of the `self`.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_custom_title","","Sets a custom title for the `HeaderBar`.",643,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_decoration_layout","","Sets the decoration layout for this header bar, overriding the `Settings:gtk-decoration-layout` setting.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_subtitle","","Sets whether the header bar should reserve space for a subtitle, even if none is currently set.",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_close_button","","Sets whether this header bar shows the standard window decorations, including close, maximize, and minimize.",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_subtitle","","Sets the subtitle of the `HeaderBar`. The title should give a user an additional detail to help him identify the current view.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_title","","Sets the title of the `HeaderBar`. The title should help a user identify the current view. A good title should not include the application name.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_custom_title","","",643,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_property_custom_title","","",643,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_decoration_layout_set","","",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_decoration_layout_set","","",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_close_button","","",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_close_button","","",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_spacing","","",643,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_spacing","","",643,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_subtitle","","",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_subtitle","","",643,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_title","","",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_title","","",643,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_child_pack_type","","",643,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"packtype"}}],[10,"set_child_pack_type","","",643,{"inputs":[{"name":"self"},{"name":"t"},{"name":"packtype"}],"output":null}],[10,"get_child_position","","",643,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",643,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_custom_title_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_decoration_layout_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_decoration_layout_set_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_subtitle_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_close_button_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_subtitle_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IMContextExt","","Trait containing all `IMContext` methods.",null,null],[10,"delete_surrounding","","Asks the widget that the input context is attached to to delete characters around the cursor position by emitting the `IMContext`::delete_surrounding signal. Note that `offset` and `n_chars` are in characters not in bytes which differs from the usage other places in `IMContext`.",644,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"filter_keypress","","Allow an input method to internally handle key press and release events. If this function returns `true`, then no further processing should be done for this key event. ## `event` the key event",644,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"focus_in","","Notify the input method that the widget to which this input context corresponds has gained focus. The input method may, for example, change the displayed feedback to reflect this change.",644,{"inputs":[{"name":"self"}],"output":null}],[10,"focus_out","","Notify the input method that the widget to which this input context corresponds has lost focus. The input method may, for example, change the displayed feedback or reset the contexts state to reflect this change.",644,{"inputs":[{"name":"self"}],"output":null}],[10,"get_preedit_string","","Retrieve the current preedit string for the input context, and a list of attributes to apply to the string. This string should be displayed inserted at the insertion point. ## `str` location to store the retrieved  string. The string retrieved must be freed with `g_free`. ## `attrs` location to store the retrieved  attribute list. When you are done with this list, you  must unreference it with `pango::AttrList::unref`. ## `cursor_pos` location to store position of cursor (in characters)  within the preedit string.",644,null],[10,"get_surrounding","","Retrieves context around the insertion point. Input methods typically want context in order to constrain input text based on existing text; this is important for languages such as Thai where only some sequences of characters are allowed.",644,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"reset","","Notify the input method that a change such as a change in cursor position has been made. This will typically cause the input method to clear the preedit state.",644,{"inputs":[{"name":"self"}],"output":null}],[10,"set_client_window","","Set the client window for the input context; this is the `gdk::Window` in which the input appears. This window is used in order to correctly position status windows, and may also be used for purposes internal to the input method. ## `window` the client window. This may be `None` to indicate  that the previous client window no longer exists.",644,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cursor_location","","Notify the input method that a change in cursor position has been made. The location is relative to the client window. ## `area` new location",644,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"set_surrounding","","Sets surrounding context around the insertion point and preedit string. This function is expected to be called in response to the `IMContext`::retrieve_surrounding signal, and will likely have no effect if called at other times. ## `text` text surrounding the insertion point, as UTF-8.  the preedit string should not be included within  `text`. ## `len` the length of `text`, or -1 if `text` is nul-terminated ## `cursor_index` the byte index of the insertion cursor within `text`.",644,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_use_preedit","","Sets whether the IM context should use the preedit string to display feedback. If `use_preedit` is FALSE (default is TRUE), then the IM context may use some other method to display feedback, such as displaying it in a child of the root window. ## `use_preedit` whether the IM context should use the preedit string.",644,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_input_hints","","",644,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[10,"set_property_input_hints","","",644,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[10,"get_property_input_purpose","","",644,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[10,"set_property_input_purpose","","",644,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":null}],[10,"connect_commit","","The ::commit signal is emitted when a complete input sequence has been entered by the user. This can be a single character immediately after a key press or the final result of preediting. ## `str` the completed character(s) entered by the user",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_surrounding","","The ::delete-surrounding signal is emitted when the input method needs to delete all or part of the context surrounding the cursor. ## `offset` the character offset from the cursor position of the text  to be deleted. A negative value indicates a position before  the cursor. ## `n_chars` the number of characters to be deleted",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_changed","","The ::preedit-changed signal is emitted whenever the preedit sequence currently being entered has changed. It is also emitted at the end of a preedit sequence, in which case `IMContextExt::get_preedit_string` returns the empty string.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_end","","The ::preedit-end signal is emitted when a preediting sequence has been completed or canceled.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_start","","The ::preedit-start signal is emitted when a new preediting sequence starts.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_retrieve_surrounding","","The ::retrieve-surrounding signal is emitted when the input method requires the context surrounding the cursor. The callback should set the input method surrounding context by calling the `IMContextExt::set_surrounding` method.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_hints_notify","","",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_purpose_notify","","",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IMMulticontextExt","","Trait containing all `IMMulticontext` methods.",null,null],[10,"append_menuitems","","Add menuitems for various available input methods to a menu; the menuitems, when selected, will switch the input method for the context and the global default input method.",645,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_context_id","","Gets the id of the currently active slave of the `self`.",645,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_context_id","","Sets the context id for `self`.",645,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"IconFactoryExt","","`[Deprecated since 3.10]` Trait containing all `IconFactory` methods.",null,null],[10,"add","","Adds the given `icon_set` to the icon factory, under the name `stock_id`. `stock_id` should be namespaced for your application, e.g. “myapp-whatever-icon”. Normally applications create a `IconFactory`, then add it to the list of default factories with `IconFactoryExt::add_default`. Then they pass the `stock_id` to widgets such as `Image` to display the icon. Themes can provide an icon with the same name (such as \"myapp-whatever-icon\") to override your application’s default icons. If an icon already existed in `self` for `stock_id`, it is unreferenced and replaced with the new `icon_set`.",646,{"inputs":[{"name":"self"},{"name":"str"},{"name":"iconset"}],"output":null}],[10,"add_default","","Adds an icon factory to the list of icon factories searched by `Style::lookup_icon_set`. This means that, for example, `Image::new_from_stock` will be able to find icons in `self`. There will normally be an icon factory added for each library or application that comes with icons. The default icon factories can be overridden by themes.",646,{"inputs":[{"name":"self"}],"output":null}],[10,"lookup","","Looks up `stock_id` in the icon factory, returning an icon set if found, otherwise `None`. For display to the user, you should use `Style::lookup_icon_set` on the `Style` for the widget that will display the icon, instead of using this function directly, so that themes are taken into account.",646,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["iconset"],"name":"option"}}],[10,"remove_default","","Removes an icon factory from the list of default icon factories. Not normally used; you might use it for a library that can be unloaded or shut down.",646,{"inputs":[{"name":"self"}],"output":null}],[8,"IconInfoExt","","Trait containing all `IconInfo` methods.",null,null],[10,"copy","","Make a copy of a `IconInfo`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"get_base_scale","","Gets the base scale for the icon. The base scale is a scale for the icon that was specified by the icon theme creator. For instance an icon drawn for a high-dpi screen with window scale 2 for a base size of 32 will be 64 pixels tall and have a base scale of 2.",647,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_base_size","","Gets the base size for the icon. The base size is a size for the icon that was specified by the icon theme creator. This may be different than the actual size of image; an example of this is small emblem icons that can be attached to a larger icon. These icons will be given the same base size as the larger icons to which they are attached.",647,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_builtin_pixbuf","","Gets the built-in image for this icon, if any. To allow GTK+ to use built in icon images, you must pass the `IconLookupFlags::UseBuiltin` to `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_display_name","","This function is deprecated and always returns `None`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_embedded_rect","","This function is deprecated and always returns `false`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_filename","","Gets the filename for the icon. If the `IconLookupFlags::UseBuiltin` flag was passed to `IconThemeExt::lookup_icon`, there may be no filename if a builtin icon is returned; in this case, you should use `IconInfoExt::get_builtin_pixbuf`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"is_symbolic","","Checks if the icon is symbolic or not. This currently uses only the file name and not the file contents for determining this. This behaviour may change in the future.",647,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"load_icon","","Renders an icon previously looked up in an icon theme using `IconThemeExt::lookup_icon`; the size will be based on the size passed to `IconThemeExt::lookup_icon`. Note that the resulting pixbuf may not be exactly this size; an icon theme may have icons that differ slightly from their nominal sizes, and in addition GTK+ will avoid scaling icons that it considers sufficiently close to the requested size or for which the source image would have to be scaled up too far. (This maintains sharpness.). This behaviour can be changed by passing the `IconLookupFlags::ForceSize` flag when obtaining the `IconInfo`. If this flag has been specified, the pixbuf returned by this function will be scaled to the exact size.",647,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[10,"load_icon_async","","Asynchronously load, render and scale an icon previously looked up from the icon theme using `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"load_surface","","Renders an icon previously looked up in an icon theme using `IconThemeExt::lookup_icon`; the size will be based on the size passed to `IconThemeExt::lookup_icon`. Note that the resulting surface may not be exactly this size; an icon theme may have icons that differ slightly from their nominal sizes, and in addition GTK+ will avoid scaling icons that it considers sufficiently close to the requested size or for which the source image would have to be scaled up too far. (This maintains sharpness.). This behaviour can be changed by passing the `IconLookupFlags::ForceSize` flag when obtaining the `IconInfo`. If this flag has been specified, the pixbuf returned by this function will be scaled to the exact size.",647,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["surface","error"],"name":"result"}}],[10,"load_symbolic","","Loads an icon, modifying it to match the system colours for the foreground, success, warning and error colors provided. If the icon is not a symbolic one, the function will return the result from `IconInfoExt::load_icon`.",647,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_symbolic_async","","Asynchronously load, render and scale a symbolic icon previously looked up from the icon theme using `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"s"},{"name":"t"}],"output":null}],[10,"load_symbolic_for_context","","Loads an icon, modifying it to match the system colors for the foreground, success, warning and error colors provided. If the icon is not a symbolic one, the function will return the result from `IconInfoExt::load_icon`. This function uses the regular foreground color and the symbolic colors with the names “success_color”, “warning_color” and “error_color” from the context.",647,{"inputs":[{"name":"self"},{"name":"stylecontext"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_symbolic_for_context_async","","Asynchronously load, render and scale a symbolic icon previously looked up from the icon theme using `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"},{"name":"stylecontext"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_raw_coordinates","","Sets whether the coordinates returned by `IconInfoExt::get_embedded_rect` and `IconInfoExt::get_attach_points` should be returned in their original form as specified in the icon theme, instead of scaled appropriately for the pixbuf returned by `IconInfoExt::load_icon`.",647,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"IconThemeExt","","Trait containing all `IconTheme` methods.",null,null],[10,"add_resource_path","","Adds a resource path that will be looked at when looking for icons, similar to search paths.",648,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"append_search_path","","Appends a directory to the search path. See `IconTheme::set_search_path`. ## `path` directory name to append to the icon path",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_example_icon_name","","Gets the name of an icon that is representative of the current theme (for instance, to use when presenting a list of themes to the user.)",648,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"has_icon","","Checks whether an icon theme includes an icon for a particular name. ## `icon_name` the name of an icon",648,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_contexts","","Gets the list of contexts available within the current hierarchy of icon themes. See `IconThemeExt::list_icons` for details about contexts.",648,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_icons","","Lists the icons in the current icon theme. Only a subset of the icons can be listed by providing a context string. The set of values for the context string is system dependent, but will typically include such values as “Applications” and “MimeTypes”. Contexts are explained in the Icon Theme Specification. The standard contexts are listed in the Icon Naming Specification. Also see `IconThemeExt::list_contexts`. ## `context` a string identifying a particular type of  icon, or `None` to list all icons.",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"vec"}}],[10,"load_icon","","Looks up an icon in an icon theme, scales it to the given size and renders it into a pixbuf. This is a convenience function; if more details about the icon are needed, use `IconThemeExt::lookup_icon` followed by `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"load_icon_for_scale","","Looks up an icon in an icon theme for a particular window scale, scales it to the given size and renders it into a pixbuf. This is a convenience function; if more details about the icon are needed, use `IconThemeExt::lookup_icon` followed by `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"load_surface","","Looks up an icon in an icon theme for a particular window scale, scales it to the given size and renders it into a cairo surface. This is a convenience function; if more details about the icon are needed, use `IconThemeExt::lookup_icon` followed by `IconInfoExt::load_surface`.",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"p"},{"name":"iconlookupflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"lookup_by_gicon","","Looks up an icon and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"lookup_by_gicon_for_scale","","Looks up an icon and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"lookup_icon","","Looks up a named icon and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`. (`IconThemeExt::load_icon` combines these two steps if all you need is the pixbuf.)",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"lookup_icon_for_scale","","Looks up a named icon for a particular window scale and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`. (`IconThemeExt::load_icon` combines these two steps if all you need is the pixbuf.)",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"prepend_search_path","","Prepends a directory to the search path. See `IconTheme::set_search_path`. ## `path` directory name to prepend to the icon path",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"rescan_if_needed","","Checks to see if the icon theme has changed; if it has, any currently cached information is discarded and will be reloaded next time `self` is accessed.",648,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_custom_theme","","Sets the name of the icon theme that the `IconTheme` object uses overriding system configuration. This function cannot be called on the icon theme objects returned from `IconTheme::get_default` and `IconTheme::get_for_screen`. ## `theme_name` name of icon theme to use instead of  configured theme, or `None` to unset a previously set custom theme",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_screen","","Sets the screen for an icon theme; the screen is used to track the user’s currently configured icon theme, which might be different for different screens. ## `screen` a `gdk::Screen`",648,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"connect_changed","","Emitted when the current icon theme is switched or GTK+ detects that a change has occurred in the contents of the current icon theme.",648,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IconViewExt","","Trait containing all `IconView` methods.",null,null],[10,"convert_widget_to_bin_window_coords","","Converts widget coordinates to coordinates for the bin_window, as expected by e.g. `IconViewExt::get_path_at_pos`. ## `wx` X coordinate relative to the widget ## `wy` Y coordinate relative to the widget ## `bx` return location for bin_window X coordinate ## `by` return location for bin_window Y coordinate",649,null],[10,"create_drag_icon","","Creates a `cairo::Surface` representation of the item at `path`. This image is used for a drag icon. ## `path` a `TreePath` in `self`",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["surface"],"name":"option"}}],[10,"get_activate_on_single_click","","Gets the setting set by `IconViewExt::set_activate_on_single_click`.",649,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_cell_rect","","Fills the bounding rectangle in widget coordinates for the cell specified by `path` and `cell`. If `cell` is `None` the main cell area is used.",649,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"q"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_column_spacing","","Returns the value of the ::column-spacing property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_columns","","Returns the value of the ::columns property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_cursor","","Fills in `path` and `cell` with the current cursor path and cell. If the cursor isn’t currently set, then *`path` will be `None`. If no cell currently has focus, then *`cell` will be `None`.",649,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_dest_item_at_pos","","Determines the destination item for a given position. ## `drag_x` the position to determine the destination item for ## `drag_y` the position to determine the destination item for ## `path` Return location for the path of the item,  or `None`. ## `pos` Return location for the drop position, or `None`",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_drag_dest_item","","Gets information about the item that is highlighted for feedback. ## `path` Return location for the path of  the highlighted item, or `None`. ## `pos` Return location for the drop position, or `None`",649,null],[10,"get_item_at_pos","","Finds the path at the point (`x`, `y`), relative to bin_window coordinates. In contrast to `IconViewExt::get_path_at_pos`, this function also obtains the cell at the specified position. The returned path should be freed with `TreePath::free`. See `IconViewExt::convert_widget_to_bin_window_coords` for converting widget coordinates to bin_window coordinates. ## `x` The x position to be identified ## `y` The y position to be identified ## `path` Return location for the path, or `None` ## `cell` Return location for the renderer  responsible for the cell at (`x`, `y`), or `None`",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_item_column","","Gets the column in which the item `path` is currently displayed. Column numbers start at 0. ## `path` the `TreePath` of the item",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"i32"}}],[10,"get_item_orientation","","Returns the value of the ::item-orientation property which determines whether the labels are drawn beside the icons instead of below.",649,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_item_padding","","Returns the value of the ::item-padding property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_item_row","","Gets the row in which the item `path` is currently displayed. Row numbers start at 0. ## `path` the `TreePath` of the item",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"i32"}}],[10,"get_item_width","","Returns the value of the ::item-width property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin","","Returns the value of the ::margin property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_markup_column","","Returns the column with markup text for `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the model the `IconView` is based on. Returns `None` if the model is unset.",649,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_path_at_pos","","Finds the path at the point (`x`, `y`), relative to bin_window coordinates. See `IconViewExt::get_item_at_pos`, if you are also interested in the cell at the specified position. See `IconViewExt::convert_widget_to_bin_window_coords` for converting widget coordinates to bin_window coordinates. ## `x` The x position to be identified ## `y` The y position to be identified",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_pixbuf_column","","Returns the column with pixbufs for `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reorderable","","Retrieves whether the user can reorder the list via drag-and-drop. See `IconViewExt::set_reorderable`.",649,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_row_spacing","","Returns the value of the ::row-spacing property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_selected_items","","Creates a list of paths of all selected items. Additionally, if you are planning on modifying the model after calling this function, you may want to convert the returned list into a list of `GtkTreeRowReferences`. To do this, you can use `TreeRowReference::new`.",649,{"inputs":[{"name":"self"}],"output":{"generics":["treepath"],"name":"vec"}}],[10,"get_selection_mode","","Gets the selection mode of the `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"get_spacing","","Returns the value of the ::spacing property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_text_column","","Returns the column with text for `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tooltip_column","","Returns the column of `self`’s model which is being used for displaying tooltips on `self`’s rows.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tooltip_context","","This function is supposed to be used in a `Widget::query-tooltip` signal handler for `IconView`. The `x`, `y` and `keyboard_tip` values which are received in the signal handler, should be passed to this function without modification.",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"option"}}],[10,"get_visible_range","","Sets `start_path` and `end_path` to be the first and last visible path. Note that there may be invisible paths in between.",649,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"item_activated","","Activates the item determined by `path`. ## `path` The `TreePath` to be activated",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"path_is_selected","","Returns `true` if the icon pointed to by `path` is currently selected. If `path` does not point to a valid location, `false` is returned. ## `path` A `TreePath` to check selection on.",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"scroll_to_path","","Moves the alignments of `self` to the position specified by `path`. `row_align` determines where the row is placed, and `col_align` determines where `column` is placed. Both are expected to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means center.",649,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"bool"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"select_all","","Selects all the icons. `self` must has its selection mode set to `SelectionMode::Multiple`.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"select_path","","Selects the row at `path`. ## `path` The `TreePath` to be selected.",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"set_activate_on_single_click","","Causes the `IconView::item-activated` signal to be emitted on a single click instead of a double click.",649,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_column_spacing","","Sets the ::column-spacing property which specifies the space which is inserted between the columns of the icon view. ## `column_spacing` the column spacing",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_columns","","Sets the ::columns property which determines in how many columns the icons are arranged. If `columns` is -1, the number of columns will be chosen automatically to fill the available area. ## `columns` the number of columns",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_cursor","","Sets the current keyboard focus to be at `path`, and selects it. This is useful when you want to focus the user’s attention on a particular item. If `cell` is not `None`, then focus is given to the cell specified by it. Additionally, if `start_editing` is `true`, then editing should be started in the specified cell.",649,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"q"},{"name":"bool"}],"output":null}],[10,"set_drag_dest_item","","Sets the item that is highlighted for feedback. ## `path` The path of the item to highlight, or `None`. ## `pos` Specifies where to drop, relative to the item",649,{"inputs":[{"name":"self"},{"name":"p"},{"name":"iconviewdropposition"}],"output":null}],[10,"set_item_orientation","","Sets the ::item-orientation property which determines whether the labels are drawn beside the icons instead of below. ## `orientation` the relative position of texts and icons",649,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[10,"set_item_padding","","Sets the `IconView:item-padding` property which specifies the padding around each of the icon view’s items. ## `item_padding` the item padding",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_item_width","","Sets the ::item-width property which specifies the width to use for each item. If it is set to -1, the icon view will automatically determine a suitable item size. ## `item_width` the width for each item",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin","","Sets the ::margin property which specifies the space which is inserted at the top, bottom, left and right of the icon view. ## `margin` the margin",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_markup_column","","Sets the column with markup information for `self` to be `column`. The markup column must be of type `G_TYPE_STRING`. If the markup column is set to something, it overrides the text column set by `IconViewExt::set_text_column`. ## `column` A column in the currently used model, or -1 to display no text",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model for a `IconView`. If the `self` already has a model set, it will remove it before setting the new model. If `model` is `None`, then it will unset the old model. ## `model` The model.",649,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_pixbuf_column","","Sets the column with pixbufs for `self` to be `column`. The pixbuf column must be of type `GDK_TYPE_PIXBUF` ## `column` A column in the currently used model, or -1 to disable",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_reorderable","","This function is a convenience function to allow you to reorder models that support the `TreeDragSourceIface` and the `TreeDragDestIface`. Both `TreeStore` and `ListStore` support these. If `reorderable` is `true`, then the user can reorder the model by dragging and dropping rows. The developer can listen to these changes by connecting to the model's row_inserted and row_deleted signals. The reordering is implemented by setting up the icon view as a drag source and destination. Therefore, drag and drop can not be used in a reorderable view for any other purpose.",649,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_row_spacing","","Sets the ::row-spacing property which specifies the space which is inserted between the rows of the icon view. ## `row_spacing` the row spacing",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_selection_mode","","Sets the selection mode of the `self`. ## `mode` The selection mode",649,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"set_spacing","","Sets the ::spacing property which specifies the space which is inserted between the cells (i.e. the icon and the text) of an item. ## `spacing` the spacing",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_text_column","","Sets the column with text for `self` to be `column`. The text column must be of type `G_TYPE_STRING`. ## `column` A column in the currently used model, or -1 to display no text",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tooltip_cell","","Sets the tip area of `tooltip` to the area which `cell` occupies in the item pointed to by `path`. See also `TooltipExt::set_tip_area`.",649,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"treepath"},{"name":"q"}],"output":null}],[10,"set_tooltip_column","","If you only plan to have simple (text-only) tooltips on full items, you can use this function to have `IconView` handle these automatically for you. `column` should be set to the column in `self`’s model containing the tooltip texts, or -1 to disable this feature.",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tooltip_item","","Sets the tip area of `tooltip` to be the area covered by the item at `path`. See also `IconViewExt::set_tooltip_column` for a simpler alternative. See also `TooltipExt::set_tip_area`. ## `tooltip` a `Tooltip` ## `path` a `TreePath`",649,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"treepath"}],"output":null}],[10,"unselect_all","","Unselects all the icons.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_path","","Unselects the row at `path`. ## `path` The `TreePath` to be unselected.",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"unset_model_drag_dest","","Undoes the effect of `IconView::enable_model_drag_dest`. Calling this method sets `IconView:reorderable` to `false`.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_model_drag_source","","Undoes the effect of `IconView::enable_model_drag_source`. Calling this method sets `IconView:reorderable` to `false`.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_cell_area","","",649,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"connect_activate_cursor_item","","A [keybinding signal][`BindingSignal`] which gets emitted when the user activates the currently focused item.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_cursor_item","","",649,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_item_activated","","The ::item-activated signal is emitted when the method `IconViewExt::item_activated` is called, when the user double clicks an item with the \"activate-on-single-click\" property set to `false`, or when the user single clicks an item when the \"activate-on-single-click\" property set to `true`. It is also emitted when a non-editable item is selected and one of the keys: Space, Return or Enter is pressed. ## `path` the `TreePath` for the activated item",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",649,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_select_all","","A [keybinding signal][`BindingSignal`] which gets emitted when the user selects all items.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_select_cursor_item","","A [keybinding signal][`BindingSignal`] which gets emitted when the user selects the item that is currently focused.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_cursor_item","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_selection_changed","","The ::selection-changed signal is emitted when the selection (i.e. the set of selected items) changes.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_item","","A [keybinding signal][`BindingSignal`] which gets emitted when the user toggles whether the currently focused item is selected or not. The exact effect of this depend on the selection mode.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_item","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_unselect_all","","A [keybinding signal][`BindingSignal`] which gets emitted when the user unselects all items.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activate_on_single_click_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_spacing_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_columns_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_item_orientation_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_item_padding_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_item_width_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_markup_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reorderable_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_spacing_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_mode_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ImageExt","","Trait containing all `Image` methods.",null,null],[10,"clear","","Resets the image to be empty.",650,{"inputs":[{"name":"self"}],"output":null}],[10,"get_animation","","Gets the `gdk_pixbuf::PixbufAnimation` being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::Animation` (see `ImageExt::get_storage_type`). The caller of this function does not own a reference to the returned animation.",650,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufanimation"],"name":"option"}}],[10,"get_gicon","","Gets the `gio::Icon` and size being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::Gicon` (see `ImageExt::get_storage_type`). The caller of this function does not own a reference to the returned `gio::Icon`. ## `gicon` place to store a  `gio::Icon`, or `None` ## `size` place to store an icon size  (`IconSize`), or `None`",650,null],[10,"get_icon_set","","Gets the icon set and size being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::IconSet` (see `ImageExt::get_storage_type`).",650,null],[10,"get_pixbuf","","Gets the `gdk_pixbuf::Pixbuf` being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::Pixbuf` (see `ImageExt::get_storage_type`). The caller of this function does not own a reference to the returned pixbuf.",650,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_pixel_size","","Gets the pixel size used for named icons.",650,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_storage_type","","Gets the type of representation being used by the `Image` to store image data. If the `Image` has no image data, the return value will be `ImageType::Empty`.",650,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"set_from_animation","","Causes the `Image` to display the given animation (or display nothing, if you set the animation to `None`). ## `animation` the `gdk_pixbuf::PixbufAnimation`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_file","","See `Image::new_from_file` for details. ## `filename` a filename or `None`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_gicon","","See `Image::new_from_gicon` for details. ## `icon` an icon ## `size` an icon size (`IconSize`)",650,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_from_icon_name","","See `Image::new_from_icon_name` for details. ## `icon_name` an icon name or `None` ## `size` an icon size (`IconSize`)",650,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_from_icon_set","","See `Image::new_from_icon_set` for details.",650,{"inputs":[{"name":"self"},{"name":"iconset"},{"name":"i32"}],"output":null}],[10,"set_from_pixbuf","","See `Image::new_from_pixbuf` for details. ## `pixbuf` a `gdk_pixbuf::Pixbuf` or `None`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_resource","","See `Image::new_from_resource` for details. ## `resource_path` a resource path or `None`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_stock","","See `Image::new_from_stock` for details.",650,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_from_surface","","See `Image::new_from_surface` for details.",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_pixel_size","","Sets the pixel size to use for named icons. If the pixel size is set to a value != -1, it is used instead of the icon size set by `ImageExt::set_from_icon_name`. ## `pixel_size` the new pixel size",650,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_file","","",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_file","","",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_gicon","","The GIcon displayed in the `Image`. For themed icons, If the icon theme is changed, the image will be updated automatically.",650,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_icon_name","","",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_icon_name","","",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_icon_size","","",650,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_icon_size","","",650,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_property_pixbuf","","",650,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_pixbuf_animation","","",650,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufanimation"],"name":"option"}}],[10,"set_property_pixbuf_animation","","",650,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_resource","","A path to a resource file to display.",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_resource","","A path to a resource file to display.",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_stock","","Deprecated since 3.10",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_stock","","Deprecated since 3.10",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_use_fallback","","",650,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_use_fallback","","",650,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_file_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_animation_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixel_size_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resource_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_storage_type_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_fallback_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ImageMenuItemExt","","`[Deprecated since 3.10]` Trait containing all `ImageMenuItem` methods.",null,null],[10,"get_always_show_image","","Returns whether the menu item will ignore the `Settings:gtk-menu-images` setting and always show the image, if available.",651,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_image","","Gets the widget that is currently set as the image of `self`. See `ImageMenuItemExt::set_image`.",651,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_use_stock","","Checks whether the label set in the menuitem is used as a stock id to select the stock item for the item.",651,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_accel_group","","Specifies an `accel_group` to add the menu items accelerator to (this only applies to stock items so a stock item must already be set, make sure to call `ImageMenuItemExt::set_use_stock` and `MenuItemExt::set_label` with a valid stock item first).",651,{"inputs":[{"name":"self"},{"name":"accelgroup"}],"output":null}],[10,"set_always_show_image","","If `true`, the menu item will ignore the `Settings:gtk-menu-images` setting and always show the image, if available.",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_image","","Sets the image of `self` to the given widget. Note that it depends on the show-menu-images setting whether the image will be displayed or not.",651,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_use_stock","","If `true`, the label set in the menuitem is used as a stock id to select the stock item for the item.",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_accel_group_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_always_show_image_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_stock_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InfoBarExt","","Trait containing all `InfoBar` methods.",null,null],[10,"add_action_widget","","Add an activatable widget to the action area of a `InfoBar`, connecting a signal handler that will emit the `InfoBar::response` signal on the message area when the widget is activated. The widget is appended to the end of the message areas action area. ## `child` an activatable widget ## `response_id` response ID for `child`",652,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"add_button","","Adds a button with the given text and sets things up so that clicking the button will emit the “response” signal with the given response_id. The button is appended to the end of the info bars's action area. The button widget is returned, but usually you don't need it. ## `button_text` text of button ## `response_id` response ID for the button",652,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["button"],"name":"option"}}],[10,"get_action_area","","Returns the action area of `self`.",652,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_content_area","","Returns the content area of `self`.",652,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_message_type","","Returns the message type of the message area.",652,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[10,"get_show_close_button","","Returns whether the widget will display a standard close button.",652,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"response","","Emits the “response” signal with the given `response_id`. ## `response_id` a response ID",652,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_default_response","","Sets the last widget in the info bar’s action area with the given response_id as the default widget for the dialog. Pressing “Enter” normally activates the default widget.",652,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_message_type","","Sets the message type of the message area.",652,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":null}],[10,"set_response_sensitive","","Calls gtk_widget_set_sensitive (widget, setting) for each widget in the info bars’s action area with the given response_id. A convenient way to sensitize/desensitize dialog buttons. ## `response_id` a response ID ## `setting` TRUE for sensitive",652,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"set_show_close_button","","If true, a standard close button is shown. When clicked it emits the response `ResponseType::Close`.",652,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_close","","The ::close signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to dismiss the info bar.",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_close","","",652,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_response","","Emitted when an action widget is clicked or the application programmer calls `DialogExt::response`. The `response_id` depends on which action widget was clicked. ## `response_id` the response ID",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_type_notify","","",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_close_button_notify","","",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InvisibleExt","","",null,null],[10,"set_screen","","",653,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"connect_property_screen_notify","","",653,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LabelExt","","Trait containing all `Label` methods.",null,null],[10,"get_angle","","Gets the angle of rotation for the label. See `LabelExt::set_angle`.",654,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_attributes","","Gets the attribute list that was set on the label using `LabelExt::set_attributes`, if any. This function does not reflect attributes that come from the labels markup (see `LabelExt::set_markup`). If you want to get the effective attributes for the label, use pango_layout_get_attribute (gtk_label_get_layout (label)).",654,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[10,"get_current_uri","","Returns the URI for the currently active link in the label. The active link is the one under the mouse pointer or, in a selectable label, the link in which the text cursor is currently positioned.",654,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_ellipsize","","Returns the ellipsizing position of the label. See `LabelExt::set_ellipsize`.",654,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_justify","","Returns the justification of the label. See `LabelExt::set_justify`.",654,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[10,"get_label","","Fetches the text from a label widget including any embedded underlines indicating mnemonics and Pango markup. (See `LabelExt::get_text`).",654,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_layout","","Gets the `pango::Layout` used to display the label. The layout is useful to e.g. convert text positions to pixel positions, in combination with `LabelExt::get_layout_offsets`. The returned layout is owned by the `self` so need not be freed by the caller. The `self` is free to recreate its layout at any time, so it should be considered read-only.",654,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_offsets","","Obtains the coordinates where the label will draw the `pango::Layout` representing the text in the label; useful to convert mouse events into coordinates inside the `pango::Layout`, e.g. to take some action if some part of the label is clicked. Of course you will need to create a `EventBox` to receive the events, and pack the label inside it, since labels are windowless (they return `false` from `WidgetExt::get_has_window`). Remember when using the `pango::Layout` functions you need to convert to and from pixels using PANGO_PIXELS() or `PANGO_SCALE`. ## `x` location to store X offset of layout, or `None` ## `y` location to store Y offset of layout, or `None`",654,null],[10,"get_line_wrap","","Returns whether lines in the label are automatically wrapped. See `LabelExt::set_line_wrap`.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_line_wrap_mode","","Returns line wrap mode used by the label. See `LabelExt::set_line_wrap_mode`.",654,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"get_lines","","Gets the number of lines to which an ellipsized, wrapping label should be limited. See `LabelExt::set_lines`.",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_width_chars","","Retrieves the desired maximum width of `self`, in characters. See `LabelExt::set_width_chars`.",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_mnemonic_keyval","","If the label has been set so that it has an mnemonic key this function returns the keyval used for the mnemonic accelerator. If there is no mnemonic set up it returns `GDK_KEY_VoidSymbol`.",654,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_mnemonic_widget","","Retrieves the target of the mnemonic (keyboard shortcut) of this label. See `LabelExt::set_mnemonic_widget`.",654,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_selectable","","Gets the value set by `LabelExt::set_selectable`.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_selection_bounds","","Gets the selected range of characters in the label, returning `true` if there’s a selection. ## `start` return location for start of selection, as a character offset ## `end` return location for end of selection, as a character offset",654,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_single_line_mode","","Returns whether the label is in single line mode.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_text","","Fetches the text from a label widget, as displayed on the screen. This does not include any embedded underlines indicating mnemonics or Pango markup. (See `LabelExt::get_label`)",654,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_track_visited_links","","Returns whether the label is currently keeping track of clicked links.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_markup","","Returns whether the label’s text is interpreted as marked up with the [Pango text markup language][PangoMarkupFormat]. See gtk_label_set_use_markup ().",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_underline","","Returns whether an embedded underline in the label indicates a mnemonic. See `LabelExt::set_use_underline`.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_width_chars","","Retrieves the desired width of `self`, in characters. See `LabelExt::set_width_chars`.",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_xalign","","Gets the `Label:xalign` property for `self`.",654,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_yalign","","Gets the `Label:yalign` property for `self`.",654,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"select_region","","Selects a range of characters in the label, if the label is selectable. See `LabelExt::set_selectable`. If the label is not selectable, this function has no effect. If `start_offset` or `end_offset` are -1, then the end of the label will be substituted. ## `start_offset` start offset (in characters not bytes) ## `end_offset` end offset (in characters not bytes)",654,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_angle","","Sets the angle of rotation for the label. An angle of 90 reads from from bottom to top, an angle of 270, from top to bottom. The angle setting for the label is ignored if the label is selectable, wrapped, or ellipsized. ## `angle` the angle that the baseline of the label makes with  the horizontal, in degrees, measured counterclockwise",654,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_attributes","","Sets a `pango::AttrList`; the attributes in the list are applied to the label text.",654,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_ellipsize","","Sets the mode used to ellipsize (add an ellipsis: \"...\") to the text if there is not enough space to render the entire string. ## `mode` a `pango::EllipsizeMode`",654,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_justify","","Sets the alignment of the lines in the text of the label relative to each other. `Justification::Left` is the default value when the widget is first created with `Label::new`. If you instead want to set the alignment of the label as a whole, use `WidgetExt::set_halign` instead. `LabelExt::set_justify` has no effect on labels containing only a single line. ## `jtype` a `Justification`",654,{"inputs":[{"name":"self"},{"name":"justification"}],"output":null}],[10,"set_label","","Sets the text of the label. The label is interpreted as including embedded underlines and/or Pango markup depending on the values of the `Label:use-underline` and `Label:use-markup` properties. ## `str` the new text to set for the label",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_line_wrap","","Toggles line wrapping within the `Label` widget. `true` makes it break lines if text exceeds the widget’s size. `false` lets the text get cut off by the edge of the widget if it exceeds the widget size.",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_line_wrap_mode","","If line wrapping is on (see `LabelExt::set_line_wrap`) this controls how the line wrapping is done. The default is `pango::WrapMode::Word` which means wrap on word boundaries. ## `wrap_mode` the line wrapping mode",654,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"set_lines","","Sets the number of lines to which an ellipsized, wrapping label should be limited. This has no effect if the label is not wrapping or ellipsized. Set this to -1 if you don’t want to limit the number of lines.",654,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_markup","","Parses `str` which is marked up with the [Pango text markup language][PangoMarkupFormat], setting the label’s text and attribute list based on the parse results.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_markup_with_mnemonic","","Parses `str` which is marked up with the [Pango text markup language][PangoMarkupFormat], setting the label’s text and attribute list based on the parse results. If characters in `str` are preceded by an underscore, they are underlined indicating that they represent a keyboard accelerator called a mnemonic.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_max_width_chars","","Sets the desired maximum width in characters of `self` to `n_chars`. ## `n_chars` the new desired maximum width, in characters.",654,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_mnemonic_widget","","If the label has been set so that it has an mnemonic key (using i.e. `LabelExt::set_markup_with_mnemonic`, `LabelExt::set_text_with_mnemonic`, `Label::new_with_mnemonic` or the “use_underline” property) the label can be associated with a widget that is the target of the mnemonic. When the label is inside a widget (like a `Button` or a `Notebook` tab) it is automatically associated with the correct widget, but sometimes (i.e. when the target is a `Entry` next to the label) you need to set it explicitly using this function.",654,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_pattern","","The pattern of underlines you want under the existing text within the `Label` widget. For example if the current text of the label says “FooBarBaz” passing a pattern of “___ ___” will underline “Foo” and “Baz” but not “Bar”. ## `pattern` The pattern as described above.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_selectable","","Selectable labels allow the user to select text from the label, for copy-and-paste. ## `setting` `true` to allow selecting text in the label",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_single_line_mode","","Sets whether the label is in single line mode. ## `single_line_mode` `true` if the label should be in single line mode",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text","","Sets the text within the `Label` widget. It overwrites any text that was there before.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_text_with_mnemonic","","Sets the label’s text from the string `str`. If characters in `str` are preceded by an underscore, they are underlined indicating that they represent a keyboard accelerator called a mnemonic. The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using `LabelExt::set_mnemonic_widget`. ## `str` a string",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_track_visited_links","","Sets whether the label should keep track of clicked links (and use a different color for them). ## `track_links` `true` to track visited links",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_markup","","Sets whether the text of the label contains markup in [Pango’s text markup language][PangoMarkupFormat]. See `LabelExt::set_markup`. ## `setting` `true` if the label’s text should be parsed for markup.",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text indicates the next character should be used for the mnemonic accelerator key. ## `setting` `true` if underlines in the text indicate mnemonics",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_width_chars","","Sets the desired width in characters of `self` to `n_chars`. ## `n_chars` the new desired width, in characters.",654,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_xalign","","Sets the `Label:xalign` property for `self`.",654,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"set_yalign","","Sets the `Label:yalign` property for `self`.",654,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_cursor_position","","",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_selection_bound","","",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_wrap","","",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_wrap","","",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_wrap_mode","","",654,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_property_wrap_mode","","",654,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"connect_activate_current_link","","A [keybinding signal][`BindingSignal`] which gets emitted when the user activates a link in the label.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_current_link","","",654,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_activate_link","","The signal which gets emitted to activate a URI. Applications may connect to it to override the default behaviour, which is to call `gtk_show_uri_on_window`. ## `uri` the URI that is activated",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_copy_clipboard","","The ::copy-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to copy the selection to the clipboard.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_copy_clipboard","","",654,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement. If the cursor is not visible in `entry`, this signal causes the viewport to be moved instead.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",654,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"connect_populate_popup","","The ::populate-popup signal gets emitted before showing the context menu of the label. Note that only selectable labels have context menus.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_angle_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attributes_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_position_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justify_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_lines_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_chars_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mnemonic_keyval_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mnemonic_widget_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pattern_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selectable_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_bound_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_single_line_mode_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_track_visited_links_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_markup_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LayoutExt","","Trait containing all `Layout` methods.",null,null],[10,"get_bin_window","","Retrieve the bin window of the layout used for drawing operations.",655,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_size","","Gets the size that has been set on the layout, and that determines the total extents of the layout’s scrollbar area. See gtk_layout_set_size (). ## `width` location to store the width set on  `self`, or `None` ## `height` location to store the height set on  `self`, or `None`",655,null],[10,"move_","","",655,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"put","","Adds `child_widget` to `self`, at position (`x`,`y`). `self` becomes the new parent container of `child_widget`. ## `child_widget` child widget ## `x` X position of child widget ## `y` Y position of child widget",655,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_size","","Sets the size of the scrollable area of the layout. ## `width` width of entire scrollable area ## `height` height of entire scrollable area",655,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_property_height","","",655,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_height","","",655,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_width","","",655,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_width","","",655,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_child_x","","",655,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_x","","",655,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_y","","",655,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_y","","",655,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_height_notify","","",655,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",655,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LevelBarExt","","Trait containing all `LevelBar` methods.",null,null],[10,"add_offset_value","","Adds a new offset marker on `self` at the position specified by `value`. When the bar value is in the interval topped by `value` (or between `value` and `LevelBar:max-value` in case the offset is the last one on the bar) a style class named `level-``name` will be applied when rendering the level bar fill. If another offset marker named `name` exists, its value will be replaced by `value`.",656,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":null}],[10,"get_inverted","","Return the value of the `LevelBar:inverted` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_max_value","","Returns the value of the `LevelBar:max-value` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_min_value","","Returns the value of the `LevelBar:min-value` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_mode","","Returns the value of the `LevelBar:mode` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"levelbarmode"}}],[10,"get_offset_value","","Fetches the value specified for the offset marker `name` in `self`, returning `true` in case an offset named `name` was found.",656,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["f64"],"name":"option"}}],[10,"get_value","","Returns the value of the `LevelBar:value` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"remove_offset_value","","Removes an offset marker previously added with `LevelBarExt::add_offset_value`.",656,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_inverted","","Sets the value of the `LevelBar:inverted` property.",656,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_value","","Sets the value of the `LevelBar:max-value` property.",656,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_min_value","","Sets the value of the `LevelBar:min-value` property.",656,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_mode","","Sets the value of the `LevelBar:mode` property.",656,{"inputs":[{"name":"self"},{"name":"levelbarmode"}],"output":null}],[10,"set_value","","Sets the value of the `LevelBar:value` property.",656,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_offset_changed","","Emitted when an offset specified on the bar changes value as an effect to `LevelBarExt::add_offset_value` being called.",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_value_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_value_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LinkButtonExt","","Trait containing all `LinkButton` methods.",null,null],[10,"get_uri","","Retrieves the URI set using `LinkButtonExt::set_uri`.",657,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_visited","","Retrieves the “visited” state of the URI where the `LinkButton` points. The button becomes visited when it is clicked. If the URI is changed on the button, the “visited” state is unset again.",657,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_uri","","Sets `uri` as the URI where the `LinkButton` points. As a side-effect this unsets the “visited” state of the button. ## `uri` a valid URI",657,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visited","","Sets the “visited” state of the URI where the `LinkButton` points. See `LinkButtonExt::get_visited` for more details. ## `visited` the new “visited” state",657,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_link","","The ::activate-link signal is emitted each time the `LinkButton` has been clicked.",657,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_uri_notify","","",657,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visited_notify","","",657,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ListBoxExt","","Trait containing all `ListBox` methods.",null,null],[10,"drag_highlight_row","","This is a helper function for implementing DnD onto a `ListBox`. The passed in `row` will be highlighted via `WidgetExt::drag_highlight`, and any previously highlighted row will be unhighlighted.",658,{"inputs":[{"name":"self"},{"name":"listboxrow"}],"output":null}],[10,"drag_unhighlight_row","","If a row has previously been highlighted via `ListBoxExt::drag_highlight_row` it will have the highlight removed.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"get_activate_on_single_click","","Returns whether rows activate on single clicks.",658,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_adjustment","","Gets the adjustment (if any) that the widget uses to for vertical scrolling.",658,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_row_at_index","","Gets the n-th child in the list (not counting headers). If `_index` is negative or larger than the number of items in the list, `None` is returned.",658,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["listboxrow"],"name":"option"}}],[10,"get_row_at_y","","Gets the row at the `y` position.",658,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["listboxrow"],"name":"option"}}],[10,"get_selected_row","","Gets the selected row.",658,{"inputs":[{"name":"self"}],"output":{"generics":["listboxrow"],"name":"option"}}],[10,"get_selected_rows","","Creates a list of all selected children.",658,{"inputs":[{"name":"self"}],"output":{"generics":["listboxrow"],"name":"vec"}}],[10,"get_selection_mode","","Gets the selection mode of the listbox.",658,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"insert","","Insert the `child` into the `self` at `position`. If a sort function is set, the widget will actually be inserted at the calculated position and this function has the same effect of `ContainerExt::add`.",658,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"invalidate_filter","","Update the filtering for all rows. Call this when result of the filter function on the `self` is changed due to an external factor. For instance, this would be used if the filter function just looked for a specific search string and the entry with the search string has changed.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"invalidate_headers","","Update the separators for all rows. Call this when result of the header function on the `self` is changed due to an external factor.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"invalidate_sort","","Update the sorting for all rows. Call this when result of the sort function on the `self` is changed due to an external factor.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"prepend","","Prepend a widget to the list. If a sort function is set, the widget will actually be inserted at the calculated position and this function has the same effect of `ContainerExt::add`.",658,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"select_all","","Select all children of `self`, if the selection mode allows it.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"select_row","","Make `row` the currently selected row.",658,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_activate_on_single_click","","If `single` is `true`, rows will be activated when you click on them, otherwise you need to double-click.",658,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_adjustment","","Sets the adjustment (if any) that the widget uses to for vertical scrolling. For instance, this is used to get the page size for PageUp/Down key handling.",658,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_placeholder","","Sets the placeholder widget that is shown in the list when it doesn't display any visible children.",658,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_selection_mode","","Sets how selection works in the listbox. See `SelectionMode` for details.",658,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"unselect_all","","Unselect all children of `self`, if the selection mode allows it.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_row","","Unselects a single row of `self`, if the selection mode allows it.",658,{"inputs":[{"name":"self"},{"name":"listboxrow"}],"output":null}],[10,"get_property_activate_on_single_click","","",658,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_activate_on_single_click","","",658,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_selection_mode","","",658,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"set_property_selection_mode","","",658,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"connect_activate_cursor_row","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_cursor_row","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",658,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":null}],[10,"connect_row_activated","","The ::row-activated signal is emitted when a row has been activated by the user.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_selected","","The ::row-selected signal is emitted when a new row is selected, or (with a `None` `row`) when the selection is cleared.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_select_all","","The ::select-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to select all children of the box, if the selection mode permits it.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_selected_rows_changed","","The ::selected-rows-changed signal is emitted when the set of selected rows changes.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_row","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_row","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_unselect_all","","The ::unselect-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to unselect all children of the box, if the selection mode permits it.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activate_on_single_click_notify","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_mode_notify","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ListBoxRowExt","","Trait containing all `ListBoxRow` methods.",null,null],[10,"changed","","Marks `self` as changed, causing any state that depends on this to be updated. This affects sorting, filtering and headers.",659,{"inputs":[{"name":"self"}],"output":null}],[10,"get_activatable","","Gets the value of the `ListBoxRow:activatable` property for this row.",659,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_header","","Returns the current header of the `self`. This can be used in a `GtkListBoxUpdateHeaderFunc` to see if there is a header set already, and if so to update the state of it.",659,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_index","","Gets the current index of the `self` in its `ListBox` container.",659,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_selectable","","Gets the value of the `ListBoxRow:selectable` property for this row.",659,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_selected","","Returns whether the child is currently selected in its `ListBox` container.",659,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_activatable","","Set the `ListBoxRow:activatable` property for this row.",659,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_header","","Sets the current header of the `self`. This is only allowed to be called from a `GtkListBoxUpdateHeaderFunc`. It will replace any existing header in the row, and be shown in front of the row in the listbox.",659,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_selectable","","Set the `ListBoxRow:selectable` property for this row.",659,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","",659,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",659,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activatable_notify","","",659,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selectable_notify","","",659,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ListStoreExt","","Trait containing all `ListStore` methods.",null,null],[10,"append","","Appends a new row to `self`. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the appended row",660,{"inputs":[{"name":"self"}],"output":{"name":"treeiter"}}],[10,"clear","","Removes all rows from the list store.",660,{"inputs":[{"name":"self"}],"output":null}],[10,"insert","","Creates a new row at `position`. `iter` will be changed to point to this new row. If `position` is -1 or is larger than the number of rows on the list, then the new row will be appended to the list. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `position` position to insert the new row, or -1 for last",660,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"treeiter"}}],[10,"insert_after","","Inserts a new row after `sibling`. If `sibling` is `None`, then the row will be prepended to the beginning of the list. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `sibling` A valid `TreeIter`, or `None`",660,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"insert_before","","Inserts a new row before `sibling`. If `sibling` is `None`, then the row will be appended to the end of the list. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `sibling` A valid `TreeIter`, or `None`",660,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"iter_is_valid","","This function is slow. Only use it for debugging and/or testing > purposes.",660,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"move_after","","Moves `iter` in `self` to the position after `position`. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the start of the list. ## `iter` A `TreeIter`. ## `position` A `TreeIter` or `None`.",660,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"move_before","","Moves `iter` in `self` to the position before `position`. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the end of the list. ## `iter` A `TreeIter`. ## `position` A `TreeIter`, or `None`.",660,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"prepend","","Prepends a new row to `self`. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the prepend row",660,{"inputs":[{"name":"self"}],"output":{"name":"treeiter"}}],[10,"remove","","Removes the given row from the list store. After being removed, `iter` is set to be the next valid row, or invalidated if it pointed to the last row in `self`. ## `iter` A valid `TreeIter`",660,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"swap","","Swaps `a` and `b` in `self`. Note that this function only works with unsorted stores. ## `a` A `TreeIter`. ## `b` Another `TreeIter`.",660,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"treeiter"}],"output":null}],[8,"LockButtonExt","","",null,null],[10,"get_permission","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["permission"],"name":"option"}}],[10,"set_permission","","",661,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_property_text_lock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text_lock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_text_unlock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text_unlock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_tooltip_lock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tooltip_lock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_tooltip_not_authorized","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tooltip_not_authorized","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_tooltip_unlock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tooltip_unlock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_permission_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_lock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_unlock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_lock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_not_authorized_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_unlock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuExt","","Trait containing all `Menu` methods.",null,null],[10,"attach","","Adds a new `MenuItem` to a (table) menu. The number of “cells” that an item will occupy is specified by `left_attach`, `right_attach`, `top_attach` and `bottom_attach`. These each represent the leftmost, rightmost, uppermost and lower column and row numbers of the table. (Columns and rows are indexed from zero).",662,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"detach","","Detaches the menu from the widget to which it had been attached. This function will call the callback function, `detacher`, provided when the `MenuExt::attach_to_widget` function was called.",662,{"inputs":[{"name":"self"}],"output":null}],[10,"get_accel_group","","Gets the `AccelGroup` which holds global accelerators for the menu. See `MenuExt::set_accel_group`.",662,{"inputs":[{"name":"self"}],"output":{"generics":["accelgroup"],"name":"option"}}],[10,"get_accel_path","","Retrieves the accelerator path set on the menu.",662,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_active","","Returns the selected menu item from the menu. This is used by the `ComboBox`.",662,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_attach_widget","","Returns the `Widget` that the menu is attached to.",662,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_monitor","","Retrieves the number of the monitor on which to show the menu.",662,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reserve_toggle_size","","Returns whether the menu reserves space for toggles and icons, regardless of their actual presence.",662,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tearoff_state","","Returns whether the menu is torn off. See `MenuExt::set_tearoff_state`.",662,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Returns the title of the menu. See `MenuExt::set_title`.",662,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"place_on_monitor","","Places `self` on the given monitor.",662,{"inputs":[{"name":"self"},{"name":"monitor"}],"output":null}],[10,"popdown","","Removes the menu from the screen.",662,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_at_pointer","","Displays `self` and makes it available for selection.",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"popup_at_rect","","Displays `self` and makes it available for selection.",662,{"inputs":[{"name":"self"},{"name":"window"},{"name":"rectangle"},{"name":"gravity"},{"name":"gravity"},{"name":"p"}],"output":null}],[10,"popup_at_widget","","Displays `self` and makes it available for selection.",662,{"inputs":[{"name":"self"},{"name":"p"},{"name":"gravity"},{"name":"gravity"},{"name":"q"}],"output":null}],[10,"reorder_child","","Moves `child` to a new `position` in the list of `self` children. ## `child` the `MenuItem` to move ## `position` the new position to place `child`.  Positions are numbered from 0 to n - 1",662,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"reposition","","Repositions the menu according to its position function.",662,{"inputs":[{"name":"self"}],"output":null}],[10,"set_accel_group","","Set the `AccelGroup` which holds global accelerators for the menu. This accelerator group needs to also be added to all windows that this menu is being used in with `GtkWindowExt::add_accel_group`, in order for those windows to support all the accelerators contained in this group. ## `accel_group` the `AccelGroup` to be associated  with the menu.",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_accel_path","","Sets an accelerator path for this menu from which accelerator paths for its immediate children, its menu items, can be constructed. The main purpose of this function is to spare the programmer the inconvenience of having to call `MenuItemExt::set_accel_path` on each menu item that should support runtime user changable accelerators. Instead, by just calling `MenuExt::set_accel_path` on their parent, each menu item of this menu, that contains a label describing its purpose, automatically gets an accel path assigned.",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_active","","Selects the specified menu item within the menu. This is used by the `ComboBox` and should not be used by anyone else. ## `index` the index of the menu item to select. Index values are  from 0 to n-1",662,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_monitor","","Informs GTK+ on which monitor a menu should be popped up. See `gdk::MonitorExt::get_geometry`.",662,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_reserve_toggle_size","","Sets whether the menu should reserve space for drawing toggles or icons, regardless of their actual presence. ## `reserve_toggle_size` whether to reserve size for toggles",662,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_screen","","Sets the `gdk::Screen` on which the menu will be displayed. ## `screen` a `gdk::Screen`, or `None` if the screen should be  determined by the widget the menu is attached to",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tearoff_state","","Changes the tearoff state of the menu. A menu is normally displayed as drop down menu which persists as long as the menu is active. It can also be displayed as a tearoff menu which persists until it is closed or reattached.",662,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Sets the title string for the menu.",662,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_anchor_hints","","",662,{"inputs":[{"name":"self"}],"output":{"name":"anchorhints"}}],[10,"set_property_anchor_hints","","",662,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[10,"set_property_attach_widget","","",662,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_menu_type_hint","","",662,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[10,"set_property_menu_type_hint","","",662,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":null}],[10,"get_property_rect_anchor_dx","","",662,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rect_anchor_dx","","",662,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_rect_anchor_dy","","",662,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rect_anchor_dy","","",662,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_tearoff_title","","",662,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tearoff_title","","",662,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_item_bottom_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_bottom_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_item_left_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_left_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_item_right_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_right_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_item_top_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_top_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_move_scroll","","`scroll_type` a `ScrollType`",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_scroll","","",662,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":null}],[10,"connect_property_accel_group_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_path_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_anchor_hints_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attach_widget_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_type_hint_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_monitor_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rect_anchor_dx_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rect_anchor_dy_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reserve_toggle_size_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tearoff_state_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tearoff_title_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuBarExt","","Trait containing all `MenuBar` methods.",null,null],[10,"get_child_pack_direction","","Retrieves the current child pack direction of the menubar. See `MenuBarExt::set_child_pack_direction`.",663,{"inputs":[{"name":"self"}],"output":{"name":"packdirection"}}],[10,"get_pack_direction","","Retrieves the current pack direction of the menubar. See `MenuBarExt::set_pack_direction`.",663,{"inputs":[{"name":"self"}],"output":{"name":"packdirection"}}],[10,"set_child_pack_direction","","Sets how widgets should be packed inside the children of a menubar. ## `child_pack_dir` a new `PackDirection`",663,{"inputs":[{"name":"self"},{"name":"packdirection"}],"output":null}],[10,"set_pack_direction","","Sets how items should be packed inside a menubar. ## `pack_dir` a new `PackDirection`",663,{"inputs":[{"name":"self"},{"name":"packdirection"}],"output":null}],[10,"connect_property_child_pack_direction_notify","","",663,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pack_direction_notify","","",663,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuButtonExt","","Trait containing all `MenuButton` methods.",null,null],[10,"get_align_widget","","Returns the parent `Widget` to use to line up with menu.",664,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_direction","","Returns the direction the popup will be pointing at when popped up.",664,{"inputs":[{"name":"self"}],"output":{"name":"arrowtype"}}],[10,"get_menu_model","","Returns the `gio::MenuModel` used to generate the popup.",664,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_popover","","Returns the `Popover` that pops out of the button. If the button is not using a `Popover`, this function returns `None`.",664,{"inputs":[{"name":"self"}],"output":{"generics":["popover"],"name":"option"}}],[10,"get_popup","","Returns the `Menu` that pops out of the button. If the button does not use a `Menu`, this function returns `None`.",664,{"inputs":[{"name":"self"}],"output":{"generics":["menu"],"name":"option"}}],[10,"get_use_popover","","Returns whether a `Popover` or a `Menu` will be constructed from the menu model.",664,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_align_widget","","Sets the `Widget` to use to line the menu with when popped up. Note that the `align_widget` must contain the `MenuButton` itself.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_direction","","Sets the direction in which the popup will be popped up, as well as changing the arrow’s direction. The child will not be changed to an arrow if it was customized.",664,{"inputs":[{"name":"self"},{"name":"arrowtype"}],"output":null}],[10,"set_menu_model","","Sets the `gio::MenuModel` from which the popup will be constructed, or `None` to disable the button.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popover","","Sets the `Popover` that will be popped up when the button is clicked, or `None` to disable the button. If `MenuButton:menu-model` or `MenuButton:popup` are set, they will be set to `None`.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popup","","Sets the `Menu` that will be popped up when the button is clicked, or `None` to disable the button. If `MenuButton:menu-model` or `MenuButton:popover` are set, they will be set to `None`.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_use_popover","","Sets whether to construct a `Popover` instead of `Menu` when `MenuButtonExt::set_menu_model` is called. Note that this property is only consulted when a new menu model is set.",664,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_align_widget_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_model_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popover_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_popover_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuItemExt","","Trait containing all `MenuItem` methods.",null,null],[10,"deselect","","Emits the `MenuItem::deselect` signal on the given item.",665,{"inputs":[{"name":"self"}],"output":null}],[10,"get_accel_path","","Retrieve the accelerator path that was previously set on `self`.",665,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label","","Sets `text` on the `self` label",665,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_reserve_indicator","","Returns whether the `self` reserves space for the submenu indicator, regardless if it has a submenu or not.",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_submenu","","Gets the submenu underneath this menu item, if any. See `MenuItemExt::set_submenu`.",665,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_use_underline","","Checks if an underline in the text indicates the next character should be used for the mnemonic accelerator key.",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"select","","Emits the `MenuItem::select` signal on the given item.",665,{"inputs":[{"name":"self"}],"output":null}],[10,"set_accel_path","","Set the accelerator path on `self`, through which runtime changes of the menu item’s accelerator caused by the user can be identified and saved to persistent storage (see `AccelMap::save` on this). To set up a default accelerator for this menu item, call `AccelMap::add_entry` with the same `accel_path`. See also `AccelMap::add_entry` on the specifics of accelerator paths, and `MenuExt::set_accel_path` for a more convenient variant of this function.",665,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label","","Sets `text` on the `self` label ## `label` the text you want to set",665,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_reserve_indicator","","Sets whether the `self` should reserve space for the submenu indicator, regardless if it actually has a submenu or not.",665,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_submenu","","Sets or replaces the menu item’s submenu, or removes it when a `None` submenu is passed. ## `submenu` the submenu, or `None`",665,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text indicates the next character should be used for the mnemonic accelerator key. ## `setting` `true` if underlines in the text indicate mnemonics",665,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toggle_size_allocate","","Emits the `MenuItem::toggle-size-allocate` signal on the given item. ## `allocation` the allocation to use as signal data.",665,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"toggle_size_request","","Emits the `MenuItem::toggle-size-request` signal on the given item. ## `requisition` the requisition to use as signal data.",665,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_right_justified","","",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_right_justified","","",665,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","Emitted when the item is activated.",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",665,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_activate_item","","Emitted when the item is activated, but also if the menu item has a submenu. For normal applications, the relevant signal is `MenuItem::activate`.",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_deselect","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_select","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_size_allocate","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_path_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_justified_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_submenu_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuShellExt","","Trait containing all `MenuShell` methods.",null,null],[10,"activate_item","","Activates the menu item within the menu shell. ## `menu_item` the `MenuItem` to activate ## `force_deactivate` if `true`, force the deactivation of the  menu shell after the menu item is activated",666,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"append","","Adds a new `MenuItem` to the end of the menu shell's item list. ## `child` The `MenuItem` to add",666,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"bind_model","","Establishes a binding between a `MenuShell` and a `gio::MenuModel`.",666,{"inputs":[{"name":"self"},{"name":"q"},{"name":"r"},{"name":"bool"}],"output":null}],[10,"cancel","","Cancels the selection within the menu shell.",666,{"inputs":[{"name":"self"}],"output":null}],[10,"deactivate","","Deactivates the menu shell.",666,{"inputs":[{"name":"self"}],"output":null}],[10,"deselect","","Deselects the currently selected item from the menu shell, if any.",666,{"inputs":[{"name":"self"}],"output":null}],[10,"get_parent_shell","","Gets the parent menu shell.",666,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_selected_item","","Gets the currently selected item.",666,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_take_focus","","Returns `true` if the menu shell will take the keyboard focus on popup.",666,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"insert","","Adds a new `MenuItem` to the menu shell’s item list at the position indicated by `position`. ## `child` The `MenuItem` to add ## `position` The position in the item list where `child`  is added. Positions are numbered from 0 to n-1",666,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"prepend","","Adds a new `MenuItem` to the beginning of the menu shell's item list. ## `child` The `MenuItem` to add",666,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"select_first","","Select the first visible or selectable child of the menu shell; don’t select tearoff items unless the only item is a tearoff item. ## `search_sensitive` if `true`, search for the first selectable  menu item, otherwise select nothing if  the first item isn’t sensitive. This  should be `false` if the menu is being  popped up initially.",666,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"select_item","","Selects the menu item from the menu shell. ## `menu_item` The `MenuItem` to select",666,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_take_focus","","If `take_focus` is `true` (the default) the menu shell will take the keyboard focus so that it will receive all keyboard events which is needed to enable keyboard navigation in menus.",666,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_current","","An action signal that activates the current menu item within the menu shell. ## `force_hide` if `true`, hide the menu after activating the menu item",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_current","","",666,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_cancel","","An action signal which cancels the selection within the menu shell. Causes the `MenuShell::selection-done` signal to be emitted.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cancel","","",666,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_cycle_focus","","A keybinding signal which moves the focus in the given `direction`. ## `direction` the direction to cycle in",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cycle_focus","","",666,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_deactivate","","This signal is emitted when a menu shell is deactivated.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert","","The ::insert signal is emitted when a new `MenuItem` is added to a `MenuShell`. A separate signal is used instead of `Container`::add because of the need for an additional position parameter.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_current","","An keybinding signal which moves the current menu item in the direction specified by `direction`. ## `direction` the direction to move",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_current","","",666,{"inputs":[{"name":"self"},{"name":"menudirectiontype"}],"output":null}],[10,"connect_move_selected","","The ::move-selected signal is emitted to move the selection to another item. ## `distance` +1 to move to the next item, -1 to move to the previous",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_done","","This signal is emitted when a selection has been completed within a menu shell.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_take_focus_notify","","",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuToolButtonExt","","Trait containing all `MenuToolButton` methods.",null,null],[10,"get_menu","","Gets the `Menu` associated with `MenuToolButton`.",667,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_arrow_tooltip_markup","","Sets the tooltip markup text to be used as tooltip for the arrow button which pops up the menu. See `ToolItem::set_tooltip_text` for setting a tooltip on the whole `MenuToolButton`. ## `markup` markup text to be used as tooltip text for button’s arrow button",667,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_arrow_tooltip_text","","Sets the tooltip text to be used as tooltip for the arrow button which pops up the menu. See `ToolItem::set_tooltip_text` for setting a tooltip on the whole `MenuToolButton`. ## `text` text to be used as tooltip text for button’s arrow button",667,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_menu","","Sets the `Menu` that is popped up when the user clicks on the arrow. If `menu` is NULL, the arrow button becomes insensitive. ## `menu` the `Menu` associated with `MenuToolButton`",667,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_show_menu","","The ::show-menu signal is emitted before the menu is shown.",667,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_notify","","",667,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MessageDialogExt","","Trait containing all `MessageDialog` methods.",null,null],[10,"get_image","","Gets the dialog’s image.",668,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_message_area","","Returns the message area of the dialog. This is the box where the dialog’s primary and secondary labels are packed. You can add your own extra content to that box and it will appear below those labels. See `DialogExt::get_content_area` for the corresponding function in the parent `Dialog`.",668,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_image","","Sets the dialog’s image to `image`.",668,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_markup","","Sets the text of the message dialog to be `str`, which is marked up with the [Pango text markup language][PangoMarkupFormat]. ## `str` markup string (see [Pango markup format][PangoMarkupFormat])",668,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_message_type","","",668,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[10,"set_property_message_type","","",668,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":null}],[10,"get_property_secondary_text","","",668,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_text","","",668,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_use_markup","","",668,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_secondary_use_markup","","",668,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_text","","The primary text of the message dialog. If the dialog has a secondary text, this will appear as the title.",668,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","The primary text of the message dialog. If the dialog has a secondary text, this will appear as the title.",668,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_use_markup","","",668,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_use_markup","","",668,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_buttons_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_area_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_type_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_text_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_use_markup_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_markup_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MiscExt","","`[Deprecated since 3.14]` Trait containing all `Misc` methods.",null,null],[10,"get_alignment","","Gets the X and Y alignment of the widget within its allocation. See `MiscExt::set_alignment`.",669,null],[10,"get_padding","","Gets the padding in the X and Y directions of the widget. See `MiscExt::set_padding`.",669,null],[10,"set_alignment","","Sets the alignment of the widget.",669,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_padding","","Sets the amount of space to add around the widget.",669,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_property_xalign","","The horizontal alignment. A value of 0.0 means left alignment (or right on RTL locales); a value of 1.0 means right alignment (or left on RTL locales).",669,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","The horizontal alignment. A value of 0.0 means left alignment (or right on RTL locales); a value of 1.0 means right alignment (or left on RTL locales).",669,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xpad","","The amount of space to add on the left and right of the widget, in pixels.",669,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_xpad","","The amount of space to add on the left and right of the widget, in pixels.",669,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_yalign","","The vertical alignment. A value of 0.0 means top alignment; a value of 1.0 means bottom alignment.",669,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","The vertical alignment. A value of 0.0 means top alignment; a value of 1.0 means bottom alignment.",669,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_ypad","","The amount of space to add on the top and bottom of the widget, in pixels.",669,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_ypad","","The amount of space to add on the top and bottom of the widget, in pixels.",669,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_xalign_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ModelButtonExt","","Trait containing all `ModelButton` methods.",null,null],[10,"get_property_active","","The state of the button. This is reflecting the state of the associated `gio::Action`.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","The state of the button. This is reflecting the state of the associated `gio::Action`.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_centered","","Wether to render the button contents centered instead of left-aligned. This property should be set for title-like items.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_centered","","Wether to render the button contents centered instead of left-aligned. This property should be set for title-like items.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_icon","","A `gio::Icon` that will be used if iconic appearance for the button is desired.",670,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_icon","","A `gio::Icon` that will be used if iconic appearance for the button is desired.",670,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_iconic","","If this property is set, the button will show an icon if one is set. If no icon is set, the text will be used. This is typically used for horizontal sections of linked buttons.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_iconic","","If this property is set, the button will show an icon if one is set. If no icon is set, the text will be used. This is typically used for horizontal sections of linked buttons.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_inverted","","Whether to show the submenu indicator at the opposite side than normal. This property should be set for model buttons that 'go back' to a parent menu.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_inverted","","Whether to show the submenu indicator at the opposite side than normal. This property should be set for model buttons that 'go back' to a parent menu.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_menu_name","","",670,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_menu_name","","",670,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_role","","Specifies whether the button is a plain, check or radio button. When `Actionable:action-name` is set, the role will be determined from the action and does not have to be set explicitly.",670,{"inputs":[{"name":"self"}],"output":{"name":"buttonrole"}}],[10,"set_property_role","","Specifies whether the button is a plain, check or radio button. When `Actionable:action-name` is set, the role will be determined from the action and does not have to be set explicitly.",670,{"inputs":[{"name":"self"},{"name":"buttonrole"}],"output":null}],[10,"get_property_text","","The label for the button.",670,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","The label for the button.",670,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_active_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_centered_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_iconic_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_name_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_role_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MountOperationExt","","",null,null],[10,"get_parent","","",671,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_screen","","",671,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"is_showing","","",671,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_parent","","",671,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_screen","","",671,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"get_property_is_showing","","",671,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_is_showing_notify","","",671,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",671,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",671,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NativeDialogExt","","",null,null],[10,"destroy","","",672,{"inputs":[{"name":"self"}],"output":null}],[10,"get_modal","","",672,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","",672,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_transient_for","","",672,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_visible","","",672,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"hide","","",672,{"inputs":[{"name":"self"}],"output":null}],[10,"run","","",672,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_modal","","",672,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","",672,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_transient_for","","",672,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"show","","",672,{"inputs":[{"name":"self"}],"output":null}],[10,"set_property_visible","","",672,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_response","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modal_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transient_for_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NotebookExt","","Trait containing all `Notebook` methods.",null,null],[10,"detach_tab","","Removes the child from the notebook.",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_action_widget","","Gets one of the action widgets. See `NotebookExt::set_action_widget`. ## `pack_type` pack type of the action widget to receive",673,{"inputs":[{"name":"self"},{"name":"packtype"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_group_name","","Gets the current group name for `self`.",673,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_menu_label","","Retrieves the menu label widget of the page containing `child`. ## `child` a widget contained in a page of `self`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_menu_label_text","","Retrieves the text of the menu label for the page containing `child`. ## `child` the child widget of a page of the notebook.",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_scrollable","","Returns whether the tab label area has arrows for scrolling. See `NotebookExt::set_scrollable`.",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_border","","Returns whether a bevel will be drawn around the notebook pages. See `NotebookExt::set_show_border`.",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_tabs","","Returns whether the tabs of the notebook are shown. See `NotebookExt::set_show_tabs`.",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tab_detachable","","Returns whether the tab contents can be detached from `self`. ## `child` a child `Widget`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_tab_label","","Returns the tab label widget for the page `child`. `None` is returned if `child` is not in `self` or if no tab label has specifically been set for `child`. ## `child` the page",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_tab_label_text","","Retrieves the text of the tab label for the page containing `child`. ## `child` a widget contained in a page of `self`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tab_pos","","Gets the edge at which the tabs for switching pages in the notebook are drawn.",673,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"get_tab_reorderable","","Gets whether the tab can be reordered via drag and drop or not. ## `child` a child `Widget`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"next_page","","Switches to the next page. Nothing happens if the current page is the last page.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_disable","","Disables the popup menu.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_enable","","Enables the popup menu: if the user clicks with the right mouse button on the tab labels, a menu with all the pages will be popped up.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"prev_page","","Switches to the previous page. Nothing happens if the current page is the first page.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"set_action_widget","","Sets `widget` as one of the action widgets. Depending on the pack type the widget will be placed before or after the tabs. You can use a `Box` if you need to pack more than one widget on the same side.",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"packtype"}],"output":null}],[10,"set_group_name","","Sets a group name for `self`.",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_menu_label","","Changes the menu label for the page containing `child`. ## `child` the child widget ## `menu_label` the menu label, or `None` for default",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"r"}],"output":null}],[10,"set_menu_label_text","","Creates a new label and sets it as the menu label of `child`. ## `child` the child widget ## `menu_text` the label text",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"set_scrollable","","Sets whether the tab label area will have arrows for scrolling if there are too many tabs to fit in the area. ## `scrollable` `true` if scroll arrows should be added",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_border","","Sets whether a bevel will be drawn around the notebook pages. This only has a visual effect when the tabs are not shown. See `NotebookExt::set_show_tabs`. ## `show_border` `true` if a bevel should be drawn around the notebook",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_tabs","","Sets whether to show the tabs for the notebook or not. ## `show_tabs` `true` if the tabs should be shown",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tab_detachable","","Sets whether the tab can be detached from `self` to another notebook or widget.",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_tab_label","","Changes the tab label for `child`. If `None` is specified for `tab_label`, then the page will have the label “page N”. ## `child` the page ## `tab_label` the tab label widget to use, or `None`  for default tab label",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"r"}],"output":null}],[10,"set_tab_label_text","","Creates a new label and sets it as the tab label for the page containing `child`. ## `child` the page ## `tab_text` the label text",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"set_tab_pos","","Sets the edge at which the tabs for switching pages in the notebook are drawn. ## `pos` the edge to draw the tabs at",673,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"set_tab_reorderable","","Sets whether the notebook tab can be reordered via drag and drop or not. ## `child` a child `Widget` ## `reorderable` whether the tab is reorderable or not",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"get_property_enable_popup","","",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_enable_popup","","",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_page","","",673,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_page","","",673,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_change_current_page","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_change_current_page","","",673,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_create_window","","The ::create-window signal is emitted when a detachable tab is dropped on the root window.",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_tab","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_focus_tab","","",673,{"inputs":[{"name":"self"},{"name":"notebooktab"}],"output":{"name":"bool"}}],[10,"connect_move_focus_out","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_focus_out","","",673,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_page_added","","the ::page-added signal is emitted in the notebook right after a page is added to the notebook. ## `child` the child `Widget` affected ## `page_num` the new page number for `child`",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_page_removed","","the ::page-removed signal is emitted in the notebook right after a page is removed from the notebook. ## `child` the child `Widget` affected ## `page_num` the `child` page number",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_page_reordered","","the ::page-reordered signal is emitted in the notebook right after a page has been reordered. ## `child` the child `Widget` affected ## `page_num` the new page number for `child`",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_reorder_tab","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_reorder_tab","","",673,{"inputs":[{"name":"self"},{"name":"directiontype"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_select_page","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_page","","",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_switch_page","","Emitted when the user or a function changes the current page. ## `page` the new current page ## `page_num` the index of the page",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_popup_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_group_name_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_page_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scrollable_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_border_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_tabs_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tab_pos_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"OffscreenWindowExt","","",null,null],[10,"get_pixbuf","","",674,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_surface","","",674,{"inputs":[{"name":"self"}],"output":{"generics":["surface"],"name":"option"}}],[8,"OrientableExt","","Trait containing all `Orientable` methods.",null,null],[10,"get_orientation","","Retrieves the orientation of the `self`.",675,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"set_orientation","","Sets the orientation of the `self`. ## `orientation` the orientable’s new orientation.",675,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[10,"connect_property_orientation_notify","","",675,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"OverlayExt","","Trait containing all `Overlay` methods.",null,null],[10,"add_overlay","","Adds `widget` to `self`.",676,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_overlay_pass_through","","Convenience function to get the value of the `Overlay:pass-through` child property for `widget`.",676,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"reorder_overlay","","Moves `child` to a new `index` in the list of `self` children. The list contains overlays in the order that these were added to `self`.",676,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_overlay_pass_through","","Convenience function to set the value of the `Overlay:pass-through` child property for `widget`.",676,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"get_child_index","","",676,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_index","","",676,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[8,"PadControllerExt","","",null,null],[10,"set_action","","",677,{"inputs":[{"name":"self"},{"name":"padactiontype"},{"name":"i32"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_property_action_group","","",677,{"inputs":[{"name":"self"}],"output":{"generics":["actiongroup"],"name":"option"}}],[10,"get_property_pad","","",677,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"connect_property_action_group_notify","","",677,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pad_notify","","",677,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PageSetupExt","","Trait containing all `PageSetup` methods.",null,null],[10,"copy","","Copies a `PageSetup`.",678,{"inputs":[{"name":"self"}],"output":{"generics":["pagesetup"],"name":"option"}}],[10,"get_bottom_margin","","Gets the bottom margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_left_margin","","Gets the left margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_orientation","","Gets the page orientation of the `PageSetup`.",678,{"inputs":[{"name":"self"}],"output":{"name":"pageorientation"}}],[10,"get_page_height","","Returns the page height in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_page_width","","Returns the page width in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_paper_height","","Returns the paper height in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_paper_size","","Gets the paper size of the `PageSetup`.",678,{"inputs":[{"name":"self"}],"output":{"name":"papersize"}}],[10,"get_paper_width","","Returns the paper width in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_right_margin","","Gets the right margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_top_margin","","Gets the top margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"load_file","","Reads the page setup from the file `file_name`. See `PageSetupExt::to_file`. ## `file_name` the filename to read the page setup from",678,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_key_file","","Reads the page setup from the group `group_name` in the key file `key_file`. ## `key_file` the `glib::KeyFile` to retrieve the page_setup from ## `group_name` the name of the group in the key_file to read, or `None`  to use the default name “Page Setup”",678,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_bottom_margin","","Sets the bottom margin of the `PageSetup`. ## `margin` the new bottom margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_left_margin","","Sets the left margin of the `PageSetup`. ## `margin` the new left margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_orientation","","Sets the page orientation of the `PageSetup`. ## `orientation` a `PageOrientation` value",678,{"inputs":[{"name":"self"},{"name":"pageorientation"}],"output":null}],[10,"set_paper_size","","Sets the paper size of the `PageSetup` without changing the margins. See `PageSetupExt::set_paper_size_and_default_margins`. ## `size` a `PaperSize`",678,{"inputs":[{"name":"self"},{"name":"papersize"}],"output":null}],[10,"set_paper_size_and_default_margins","","Sets the paper size of the `PageSetup` and modifies the margins according to the new paper size. ## `size` a `PaperSize`",678,{"inputs":[{"name":"self"},{"name":"papersize"}],"output":null}],[10,"set_right_margin","","Sets the right margin of the `PageSetup`. ## `margin` the new right margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_top_margin","","Sets the top margin of the `PageSetup`. ## `margin` the new top margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"to_file","","This function saves the information from `self` to `file_name`. ## `file_name` the file to save to",678,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"to_gvariant","","Serialize page setup to an a{sv} variant.",678,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"to_key_file","","This function adds the page setup from `self` to `key_file`. ## `key_file` the `glib::KeyFile` to save the page setup to ## `group_name` the group to add the settings to in `key_file`,  or `None` to use the default name “Page Setup”",678,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"str"}],"output":null}],[8,"PanedExt","","Trait containing all `Paned` methods.",null,null],[10,"add1","","Adds a child to the top or left pane with default parameters. This is equivalent to `gtk_paned_pack1 (paned, child, FALSE, TRUE)`. ## `child` the child to add",679,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add2","","Adds a child to the bottom or right pane with default parameters. This is equivalent to `gtk_paned_pack2 (paned, child, TRUE, TRUE)`. ## `child` the child to add",679,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_child1","","Obtains the first child of the paned widget.",679,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_child2","","Obtains the second child of the paned widget.",679,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_handle_window","","Returns the `gdk::Window` of the handle. This function is useful when handling button or motion events because it enables the callback to distinguish between the window of the paned, a child and the handle.",679,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_position","","Obtains the position of the divider between the two panes.",679,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_wide_handle","","Gets the `Paned:wide-handle` property.",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pack1","","Adds a child to the top or left pane. ## `child` the child to add ## `resize` should this child expand when the paned widget is resized. ## `shrink` can this child be made smaller than its requisition.",679,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"pack2","","Adds a child to the bottom or right pane. ## `child` the child to add ## `resize` should this child expand when the paned widget is resized. ## `shrink` can this child be made smaller than its requisition.",679,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"set_position","","Sets the position of the divider between the two panes. ## `position` pixel position of divider, a negative value means that the position  is unset.",679,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_wide_handle","","Sets the `Paned:wide-handle` property.",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_max_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_min_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_position_set","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_position_set","","",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_child_resize","","",679,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_resize","","",679,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_shrink","","",679,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_shrink","","",679,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"connect_accept_position","","The ::accept-position signal is a [keybinding signal][`BindingSignal`] which gets emitted to accept the current position of the handle when moving it using key bindings.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_accept_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_cancel_position","","The ::cancel-position signal is a [keybinding signal][`BindingSignal`] which gets emitted to cancel moving the position of the handle using key bindings. The position of the handle will be reset to the value prior to moving it.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cancel_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_cycle_child_focus","","The ::cycle-child-focus signal is a [keybinding signal][`BindingSignal`] which gets emitted to cycle the focus between the children of the paned.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cycle_child_focus","","",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_cycle_handle_focus","","The ::cycle-handle-focus signal is a [keybinding signal][`BindingSignal`] which gets emitted to cycle whether the paned should grab focus to allow the user to change position of the handle by using key bindings.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cycle_handle_focus","","",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_move_handle","","The ::move-handle signal is a [keybinding signal][`BindingSignal`] which gets emitted to move the handle when the user is using key bindings to move it. ## `scroll_type` a `ScrollType`",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_handle","","",679,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":{"name":"bool"}}],[10,"connect_toggle_handle_focus","","The ::toggle-handle-focus is a [keybinding signal][`BindingSignal`] which gets emitted to accept the current position of the handle and then move focus to the next widget in the focus chain.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_handle_focus","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_max_position_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_position_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_position_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_position_set_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wide_handle_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PlacesSidebarExt","","Trait containing all `PlacesSidebar` methods.",null,null],[10,"add_shortcut","","Applications may want to present some folders in the places sidebar if they could be immediately useful to users. For example, a drawing program could add a “/usr/share/clipart” location when the sidebar is being used in an “Insert Clipart” dialog box.",680,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_local_only","","Returns the value previously set with `PlacesSidebarExt::set_local_only`.",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_location","","Gets the currently-selected location in the `self`. This can be `None` when nothing is selected, for example, when `PlacesSidebarExt::set_location` has been called with a location that is not among the sidebar’s list of places to show.",680,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_nth_bookmark","","This function queries the bookmarks added by the user to the places sidebar, and returns one of them. This function is used by `FileChooser` to implement the “Alt-1”, “Alt-2”, etc. shortcuts, which activate the cooresponding bookmark.",680,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_open_flags","","Gets the open flags.",680,{"inputs":[{"name":"self"}],"output":{"name":"placesopenflags"}}],[10,"get_show_connect_to_server","","Returns the value previously set with `PlacesSidebarExt::set_show_connect_to_server`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_desktop","","Returns the value previously set with `PlacesSidebarExt::set_show_desktop`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_enter_location","","Returns the value previously set with `PlacesSidebarExt::set_show_enter_location`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_other_locations","","Returns the value previously set with `PlacesSidebarExt::set_show_other_locations`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_recent","","Returns the value previously set with `PlacesSidebarExt::set_show_recent`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_starred_location","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_trash","","Returns the value previously set with `PlacesSidebarExt::set_show_trash`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_shortcuts","","Gets the list of shortcuts.",680,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"vec"}}],[10,"remove_shortcut","","Removes an application-specific shortcut that has been previously been inserted with `PlacesSidebarExt::add_shortcut`. If the `location` is not a shortcut in the sidebar, then nothing is done.",680,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_drop_targets_visible","","Make the `PlacesSidebar` show drop targets, so it can show the available drop targets and a \"new bookmark\" row. This improves the Drag-and-Drop experience of the user and allows applications to show all available drop targets at once.",680,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"dragcontext"}],"output":null}],[10,"set_local_only","","Sets whether the `self` should only show local files.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_location","","Sets the location that is being shown in the widgets surrounding the `self`, for example, in a folder view in a file manager. In turn, the `self` will highlight that location if it is being shown in the list of places, or it will unhighlight everything if the `location` is not among the places in the list.",680,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_open_flags","","Sets the way in which the calling application can open new locations from the places sidebar. For example, some applications only open locations “directly” into their main view, while others may support opening locations in a new notebook tab or a new window.",680,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[10,"set_show_connect_to_server","","Sets whether the `self` should show an item for connecting to a network server; this is off by default. An application may want to turn this on if it implements a way for the user to connect to network servers directly.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_desktop","","Sets whether the `self` should show an item for the Desktop folder. The default value for this option is determined by the desktop environment and the user’s configuration, but this function can be used to override it on a per-application basis.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_enter_location","","Sets whether the `self` should show an item for entering a location; this is off by default. An application may want to turn this on if manually entering URLs is an expected user action.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_other_locations","","Sets whether the `self` should show an item for the application to show an Other Locations view; this is off by default. When set to `true`, persistent devices such as hard drives are hidden, otherwise they are shown in the sidebar. An application may want to turn this on if it implements a way for the user to see and interact with drives and network servers directly.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_recent","","Sets whether the `self` should show an item for recent files. The default value for this option is determined by the desktop environment, but this function can be used to override it on a per-application basis.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_starred_location","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_trash","","Sets whether the `self` should show an item for the Trash location.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_local_only","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_local_only","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_location","","",680,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"set_property_location","","",680,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_open_flags","","",680,{"inputs":[{"name":"self"}],"output":{"name":"placesopenflags"}}],[10,"set_property_open_flags","","",680,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[10,"get_property_populate_all","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_populate_all","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_show_connect_to_server","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_desktop","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_desktop","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_enter_location","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_enter_location","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_other_locations","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_other_locations","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_recent","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_recent","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_trash","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_trash","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_drag_action_ask","","The places sidebar emits this signal when it needs to ask the application to pop up a menu to ask the user for which drag action to perform.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mount","","The places sidebar emits this signal when it starts a new operation because the user clicked on some location that needs mounting. In this way the application using the `PlacesSidebar` can track the progress of the operation and, for example, show a notification.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_open_location","","The places sidebar emits this signal when the user selects a location in it. The calling application should display the contents of that location; for example, a file manager should show a list of files in the specified location.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_connect_to_server","","The places sidebar emits this signal when it needs the calling application to present an way to connect directly to a network server. For example, the application may bring up a dialog box asking for a URL like \"sftp://ftp.example.com\". It is up to the application to create the corresponding mount by using, for example, `gio::File::mount_enclosing_volume`.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_enter_location","","The places sidebar emits this signal when it needs the calling application to present an way to directly enter a location. For example, the application may bring up a dialog box asking for a URL like \"http://http.example.com\".",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_error_message","","The places sidebar emits this signal when it needs the calling application to present an error message. Most of these messages refer to mounting or unmounting media, for example, when a drive cannot be started for some reason.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_other_locations","","The places sidebar emits this signal when it needs the calling application to present a way to show other locations e.g. drives and network access points. For example, the application may bring up a page showing persistent volumes and discovered network addresses.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_other_locations_with_flags","","The places sidebar emits this signal when it needs the calling application to present a way to show other locations e.g. drives and network access points. For example, the application may bring up a page showing persistent volumes and discovered network addresses.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_starred_location","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unmount","","The places sidebar emits this signal when it starts a new operation because the user for example ejected some drive or unmounted a mount. In this way the application using the `PlacesSidebar` can track the progress of the operation and, for example, show a notification.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_only_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_open_flags_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_populate_all_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_connect_to_server_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_desktop_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_enter_location_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_other_locations_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_recent_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_starred_location_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_trash_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PlugExt","","",null,null],[10,"construct","","",681,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"construct_for_display","","",681,{"inputs":[{"name":"self"},{"name":"display"},{"name":"window"}],"output":null}],[10,"get_embedded","","",681,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_id","","",681,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_socket_window","","",681,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"connect_embedded","","",681,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_embedded_notify","","",681,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_socket_window_notify","","",681,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PopoverExt","","Trait containing all `Popover` methods.",null,null],[10,"bind_model","","Establishes a binding between a `Popover` and a `gio::MenuModel`.",682,{"inputs":[{"name":"self"},{"name":"q"},{"name":"r"}],"output":null}],[10,"get_constrain_to","","Returns the constraint for placing this popover. See `PopoverExt::set_constrain_to`.",682,{"inputs":[{"name":"self"}],"output":{"name":"popoverconstraint"}}],[10,"get_default_widget","","Gets the widget that should be set as the default while the popover is shown.",682,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_modal","","Returns whether the popover is modal, see gtk_popover_set_modal to see the implications of this.",682,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pointing_to","","If a rectangle to point to has been set, this function will return `true` and fill in `rect` with such rectangle, otherwise it will return `false` and fill in `rect` with the attached widget coordinates. ## `rect` location to store the rectangle",682,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_position","","Returns the preferred position of `self`.",682,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"get_relative_to","","Returns the widget `self` is currently attached to",682,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_transitions_enabled","","Returns whether show/hide transitions are enabled on this popover.",682,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"popdown","","Pops `self` down.This is different than a `WidgetExt::hide` call in that it shows the popover with a transition. If you want to hide the popover without a transition, use `WidgetExt::hide`.",682,{"inputs":[{"name":"self"}],"output":null}],[10,"popup","","Pops `self` up. This is different than a `WidgetExt::show` call in that it shows the popover with a transition. If you want to show the popover without a transition, use `WidgetExt::show`.",682,{"inputs":[{"name":"self"}],"output":null}],[10,"set_constrain_to","","Sets a constraint for positioning this popover.",682,{"inputs":[{"name":"self"},{"name":"popoverconstraint"}],"output":null}],[10,"set_default_widget","","Sets the widget that should be set as default widget while the popover is shown (see `GtkWindowExt::set_default`). `Popover` remembers the previous default widget and reestablishes it when the popover is dismissed.",682,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_modal","","Sets whether `self` is modal, a modal popover will grab all input within the toplevel and grab the keyboard focus on it when being displayed. Clicking outside the popover area or pressing Esc will dismiss the popover and ungrab input.",682,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pointing_to","","Sets the rectangle that `self` will point to, in the coordinate space of the widget `self` is attached to, see `PopoverExt::set_relative_to`.",682,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"set_position","","Sets the preferred position for `self` to appear. If the `self` is currently visible, it will be immediately updated.",682,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"set_relative_to","","Sets a new widget to be attached to `self`. If `self` is visible, the position will be updated.",682,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_transitions_enabled","","Sets whether show/hide transitions are enabled on this popover",682,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_closed","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_constrain_to_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modal_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pointing_to_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_position_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_relative_to_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transitions_enabled_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PopoverMenuExt","","Trait containing all `PopoverMenu` methods.",null,null],[10,"open_submenu","","Opens a submenu of the `self`. The `name` must be one of the names given to the submenus of `self` with `PopoverMenu:submenu`, or \"main\" to switch back to the main menu.",683,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_visible_submenu","","",683,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_visible_submenu","","",683,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_child_position","","",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",683,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_submenu","","",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_submenu","","",683,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"connect_property_visible_submenu_notify","","",683,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintContextExt","","Trait containing all `PrintContext` methods.",null,null],[10,"create_pango_context","","Creates a new `pango::Context` that can be used with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"create_pango_layout","","Creates a new `pango::Layout` that is suitable for use with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_cairo_context","","Obtains the cairo context that is associated with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_dpi_x","","Obtains the horizontal resolution of the `PrintContext`, in dots per inch.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_dpi_y","","Obtains the vertical resolution of the `PrintContext`, in dots per inch.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_hard_margins","","Obtains the hardware printer margins of the `PrintContext`, in units. ## `top` top hardware printer margin ## `bottom` bottom hardware printer margin ## `left` left hardware printer margin ## `right` right hardware printer margin",684,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_height","","Obtains the height of the `PrintContext`, in pixels.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_page_setup","","Obtains the `PageSetup` that determines the page dimensions of the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["pagesetup"],"name":"option"}}],[10,"get_pango_fontmap","","Returns a `pango::FontMap` that is suitable for use with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_width","","Obtains the width of the `PrintContext`, in pixels.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_cairo_context","","Sets a new cairo context on a print context.",684,{"inputs":[{"name":"self"},{"name":"context"},{"name":"f64"},{"name":"f64"}],"output":null}],[8,"PrintOperationExt","","Trait containing all `PrintOperation` methods.",null,null],[10,"cancel","","Cancels a running print operation. This function may be called from a `PrintOperation::begin-print`, `PrintOperation::paginate` or `PrintOperation::draw-page` signal handler to stop the currently running print operation.",685,{"inputs":[{"name":"self"}],"output":null}],[10,"draw_page_finish","","Signalize that drawing of particular page is complete.",685,{"inputs":[{"name":"self"}],"output":null}],[10,"get_default_page_setup","","Returns the default page setup, see `PrintOperationExt::set_default_page_setup`.",685,{"inputs":[{"name":"self"}],"output":{"generics":["pagesetup"],"name":"option"}}],[10,"get_embed_page_setup","","Gets the value of `PrintOperation:embed-page-setup` property.",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_error","","Call this when the result of a print operation is `PrintOperationResult::Error`, either as returned by `PrintOperationExt::run`, or in the `PrintOperation::done` signal handler. The returned `glib::Error` will contain more details on what went wrong.",685,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_has_selection","","Gets the value of `PrintOperation:has-selection` property.",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_n_pages_to_print","","Returns the number of pages that will be printed.",685,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_print_settings","","Returns the current print settings.",685,{"inputs":[{"name":"self"}],"output":{"generics":["printsettings"],"name":"option"}}],[10,"get_status","","Returns the status of the print operation. Also see `PrintOperationExt::get_status_string`.",685,{"inputs":[{"name":"self"}],"output":{"name":"printstatus"}}],[10,"get_status_string","","Returns a string representation of the status of the print operation. The string is translated and suitable for displaying the print status e.g. in a `Statusbar`.",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_support_selection","","Gets the value of `PrintOperation:support-selection` property.",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finished","","A convenience function to find out if the print operation is finished, either successfully (`PrintStatus::Finished`) or unsuccessfully (`PrintStatus::FinishedAborted`).",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"run","","Runs the print operation, by first letting the user modify print settings in the print dialog, and then print the document.",685,{"inputs":[{"name":"self"},{"name":"printoperationaction"},{"name":"q"}],"output":{"generics":["printoperationresult","error"],"name":"result"}}],[10,"set_allow_async","","Sets whether the `PrintOperationExt::run` may return before the print operation is completed. Note that some platforms may not allow asynchronous operation. ## `allow_async` `true` to allow asynchronous operation",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_current_page","","Sets the current page.",685,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_custom_tab_label","","Sets the label for the tab holding custom widgets. ## `label` the label to use, or `None` to use the default label",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_default_page_setup","","Makes `default_page_setup` the default page setup for `self`.",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_defer_drawing","","Sets up the `PrintOperation` to wait for calling of `PrintOperationExt::draw_page_finish` from application. It can be used for drawing page in another thread.",685,{"inputs":[{"name":"self"}],"output":null}],[10,"set_embed_page_setup","","Embed page size combo box and orientation combo box into page setup page. Selected page setup is stored as default page setup in `PrintOperation`. ## `embed` `true` to embed page setup selection in the `GtkPrintUnixDialog`",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_export_filename","","Sets up the `PrintOperation` to generate a file instead of showing the print dialog. The indended use of this function is for implementing “Export to PDF” actions. Currently, PDF is the only supported format.",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_selection","","Sets whether there is a selection to print.",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_job_name","","Sets the name of the print job. The name is used to identify the job (e.g. in monitoring applications like eggcups).",685,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_n_pages","","Sets the number of pages in the document.",685,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_print_settings","","Sets the print settings for `self`. This is typically used to re-establish print settings from a previous print operation, see `PrintOperationExt::run`. ## `print_settings` `PrintSettings`",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_show_progress","","If `show_progress` is `true`, the print operation will show a progress dialog during the print operation. ## `show_progress` `true` to show a progress dialog",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_support_selection","","Sets whether selection is supported by `PrintOperation`. ## `support_selection` `true` to support selection",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_track_print_status","","If track_status is `true`, the print operation will try to continue report on the status of the print job in the printer queues and printer. This can allow your application to show things like “out of paper” issues, and when the print job actually reaches the printer.",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_unit","","Sets up the transformation for the cairo context obtained from `PrintContext` in such a way that distances are measured in units of `unit`. ## `unit` the unit to use",685,{"inputs":[{"name":"self"},{"name":"unit"}],"output":null}],[10,"set_use_full_page","","If `full_page` is `true`, the transformation for the cairo context obtained from `PrintContext` puts the origin at the top left corner of the page (which may not be the top left corner of the sheet, depending on page orientation and the number of pages per sheet). Otherwise, the origin is at the top left corner of the imageable area (i.e. inside the margins). ## `full_page` `true` to set up the `PrintContext` for the full page",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_allow_async","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_current_page","","",685,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_custom_tab_label","","",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_export_filename","","",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_job_name","","",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_n_pages","","",685,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_show_progress","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_track_print_status","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_unit","","The transformation for the cairo context obtained from `PrintContext` is set up in such a way that distances are measured in units of `unit`.",685,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[10,"get_property_use_full_page","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_begin_print","","Emitted after the user has finished changing print settings in the dialog, before the actual rendering starts.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_create_custom_widget","","Emitted when displaying the print dialog. If you return a widget in a handler for this signal it will be added to a custom tab in the print dialog. You typically return a container widget with multiple widgets in it.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_custom_widget_apply","","Emitted right before `PrintOperation::begin-print` if you added a custom widget in the `PrintOperation::create-custom-widget` handler. When you get this signal you should read the information from the custom widgets, as the widgets are not guaraneed to be around at a later time. ## `widget` the custom widget added in create-custom-widget",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_done","","Emitted when the print operation run has finished doing everything required for printing.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_draw_page","","Emitted for every page that is printed. The signal handler must render the `page_nr`'s page onto the cairo context obtained from `context` using `PrintContextExt::get_cairo_context`.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_end_print","","Emitted after all pages have been rendered. A handler for this signal can clean up any resources that have been allocated in the `PrintOperation::begin-print` handler. ## `context` the `PrintContext` for the current operation",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_paginate","","Emitted after the `PrintOperation::begin-print` signal, but before the actual rendering starts. It keeps getting emitted until a connected signal handler returns `true`.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preview","","Gets emitted when a preview is requested from the native dialog.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_request_page_setup","","Emitted once for every page that is printed, to give the application a chance to modify the page setup. Any changes done to `setup` will be in force only for printing this page. ## `context` the `PrintContext` for the current operation ## `page_nr` the number of the currently printed page (0-based) ## `setup` the `PageSetup`",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_status_changed","","Emitted at between the various phases of the print operation. See `PrintStatus` for the phases that are being discriminated. Use `PrintOperationExt::get_status` to find out the current status.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_update_custom_widget","","Emitted after change of selected printer. The actual page setup and print settings are passed to the custom widget, which can actualize itself according to this change. ## `widget` the custom widget added in create-custom-widget ## `setup` actual page setup ## `settings` actual print settings",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_allow_async_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_current_page_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_custom_tab_label_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_page_setup_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_embed_page_setup_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_export_filename_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_selection_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_job_name_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_pages_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_pages_to_print_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_settings_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_progress_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_status_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_status_string_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_support_selection_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_track_print_status_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_unit_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_full_page_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintOperationPreviewExt","","Trait containing all `PrintOperationPreview` methods.",null,null],[10,"end_preview","","Ends a preview.",686,{"inputs":[{"name":"self"}],"output":null}],[10,"is_selected","","Returns whether the given page is included in the set of pages that have been selected for printing. ## `page_nr` a page number",686,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"render_page","","Renders a page to the preview, using the print context that was passed to the `PrintOperation::preview` handler together with `self`.",686,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_got_page_size","","The ::got-page-size signal is emitted once for each page that gets rendered to the preview.",686,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_ready","","The ::ready signal gets emitted once per preview operation, before the first page is rendered.",686,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintSettingsExt","","Trait containing all `PrintSettings` methods.",null,null],[10,"copy","","Copies a `PrintSettings` object.",687,{"inputs":[{"name":"self"}],"output":{"generics":["printsettings"],"name":"option"}}],[10,"get","","Looks up the string value associated with `key`. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_bool","","Returns the boolean represented by the value that is associated with `key`.",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_collate","","Gets the value of `GTK_PRINT_SETTINGS_COLLATE`.",687,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_default_source","","Gets the value of `GTK_PRINT_SETTINGS_DEFAULT_SOURCE`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_dither","","Gets the value of `GTK_PRINT_SETTINGS_DITHER`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_double","","Returns the double value associated with `key`, or 0. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"f64"}}],[10,"get_double_with_default","","Returns the floating point number represented by the value that is associated with `key`, or `default_val` if the value does not represent a floating point number.",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"get_duplex","","Gets the value of `GTK_PRINT_SETTINGS_DUPLEX`.",687,{"inputs":[{"name":"self"}],"output":{"name":"printduplex"}}],[10,"get_finishings","","Gets the value of `GTK_PRINT_SETTINGS_FINISHINGS`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_int","","Returns the integer value of `key`, or 0. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_int_with_default","","Returns the value of `key`, interpreted as an integer, or the default value. ## `key` a key ## `def` the default value",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_length","","Returns the value associated with `key`, interpreted as a length. The returned value is converted to `units`. ## `key` a key ## `unit` the unit of the return value",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_media_type","","Gets the value of `GTK_PRINT_SETTINGS_MEDIA_TYPE`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_n_copies","","Gets the value of `GTK_PRINT_SETTINGS_N_COPIES`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_number_up","","Gets the value of `GTK_PRINT_SETTINGS_NUMBER_UP`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_number_up_layout","","Gets the value of `GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT`.",687,{"inputs":[{"name":"self"}],"output":{"name":"numberuplayout"}}],[10,"get_orientation","","Get the value of `GTK_PRINT_SETTINGS_ORIENTATION`, converted to a `PageOrientation`.",687,{"inputs":[{"name":"self"}],"output":{"name":"pageorientation"}}],[10,"get_output_bin","","Gets the value of `GTK_PRINT_SETTINGS_OUTPUT_BIN`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_page_set","","Gets the value of `GTK_PRINT_SETTINGS_PAGE_SET`.",687,{"inputs":[{"name":"self"}],"output":{"name":"pageset"}}],[10,"get_paper_height","","Gets the value of `GTK_PRINT_SETTINGS_PAPER_HEIGHT`, converted to `unit`. ## `unit` the unit for the return value",687,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_paper_size","","Gets the value of `GTK_PRINT_SETTINGS_PAPER_FORMAT`, converted to a `PaperSize`.",687,{"inputs":[{"name":"self"}],"output":{"name":"papersize"}}],[10,"get_paper_width","","Gets the value of `GTK_PRINT_SETTINGS_PAPER_WIDTH`, converted to `unit`. ## `unit` the unit for the return value",687,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_print_pages","","Gets the value of `GTK_PRINT_SETTINGS_PRINT_PAGES`.",687,{"inputs":[{"name":"self"}],"output":{"name":"printpages"}}],[10,"get_printer","","Convenience function to obtain the value of `GTK_PRINT_SETTINGS_PRINTER`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_printer_lpi","","Gets the value of `GTK_PRINT_SETTINGS_PRINTER_LPI`.",687,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_quality","","Gets the value of `GTK_PRINT_SETTINGS_QUALITY`.",687,{"inputs":[{"name":"self"}],"output":{"name":"printquality"}}],[10,"get_resolution","","Gets the value of `GTK_PRINT_SETTINGS_RESOLUTION`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_resolution_x","","Gets the value of `GTK_PRINT_SETTINGS_RESOLUTION_X`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_resolution_y","","Gets the value of `GTK_PRINT_SETTINGS_RESOLUTION_Y`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reverse","","Gets the value of `GTK_PRINT_SETTINGS_REVERSE`.",687,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_scale","","Gets the value of `GTK_PRINT_SETTINGS_SCALE`.",687,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_use_color","","Gets the value of `GTK_PRINT_SETTINGS_USE_COLOR`.",687,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_key","","Returns `true`, if a value is associated with `key`. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"load_file","","Reads the print settings from `file_name`. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. See `PrintSettingsExt::to_file`. ## `file_name` the filename to read the settings from",687,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_key_file","","Reads the print settings from the group `group_name` in `key_file`. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. ## `key_file` the `glib::KeyFile` to retrieve the settings from ## `group_name` the name of the group to use, or `None` to use the default  “Print Settings”",687,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set","","Associates `value` with `key`. ## `key` a key ## `value` a string value, or `None`",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_bool","","Sets `key` to a boolean value. ## `key` a key ## `value` a boolean",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"set_collate","","Sets the value of `GTK_PRINT_SETTINGS_COLLATE`. ## `collate` whether to collate the output",687,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_default_source","","Sets the value of `GTK_PRINT_SETTINGS_DEFAULT_SOURCE`. ## `default_source` the default source",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_dither","","Sets the value of `GTK_PRINT_SETTINGS_DITHER`. ## `dither` the dithering that is used",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_double","","Sets `key` to a double value. ## `key` a key ## `value` a double value",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":null}],[10,"set_duplex","","Sets the value of `GTK_PRINT_SETTINGS_DUPLEX`. ## `duplex` a `PrintDuplex` value",687,{"inputs":[{"name":"self"},{"name":"printduplex"}],"output":null}],[10,"set_finishings","","Sets the value of `GTK_PRINT_SETTINGS_FINISHINGS`. ## `finishings` the finishings",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_int","","Sets `key` to an integer value. ## `key` a key ## `value` an integer",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_length","","Associates a length in units of `unit` with `key`. ## `key` a key ## `value` a length ## `unit` the unit of `length`",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_media_type","","Sets the value of `GTK_PRINT_SETTINGS_MEDIA_TYPE`.",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_n_copies","","Sets the value of `GTK_PRINT_SETTINGS_N_COPIES`. ## `num_copies` the number of copies",687,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_number_up","","Sets the value of `GTK_PRINT_SETTINGS_NUMBER_UP`. ## `number_up` the number of pages per sheet",687,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_number_up_layout","","Sets the value of `GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT`. ## `number_up_layout` a `NumberUpLayout` value",687,{"inputs":[{"name":"self"},{"name":"numberuplayout"}],"output":null}],[10,"set_orientation","","Sets the value of `GTK_PRINT_SETTINGS_ORIENTATION`. ## `orientation` a page orientation",687,{"inputs":[{"name":"self"},{"name":"pageorientation"}],"output":null}],[10,"set_output_bin","","Sets the value of `GTK_PRINT_SETTINGS_OUTPUT_BIN`. ## `output_bin` the output bin",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_page_set","","Sets the value of `GTK_PRINT_SETTINGS_PAGE_SET`. ## `page_set` a `PageSet` value",687,{"inputs":[{"name":"self"},{"name":"pageset"}],"output":null}],[10,"set_paper_height","","Sets the value of `GTK_PRINT_SETTINGS_PAPER_HEIGHT`. ## `height` the paper height ## `unit` the units of `height`",687,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_paper_size","","Sets the value of `GTK_PRINT_SETTINGS_PAPER_FORMAT`, `GTK_PRINT_SETTINGS_PAPER_WIDTH` and `GTK_PRINT_SETTINGS_PAPER_HEIGHT`. ## `paper_size` a paper size",687,{"inputs":[{"name":"self"},{"name":"papersize"}],"output":null}],[10,"set_paper_width","","Sets the value of `GTK_PRINT_SETTINGS_PAPER_WIDTH`. ## `width` the paper width ## `unit` the units of `width`",687,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_print_pages","","Sets the value of `GTK_PRINT_SETTINGS_PRINT_PAGES`. ## `pages` a `PrintPages` value",687,{"inputs":[{"name":"self"},{"name":"printpages"}],"output":null}],[10,"set_printer","","Convenience function to set `GTK_PRINT_SETTINGS_PRINTER` to `printer`. ## `printer` the printer name",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_printer_lpi","","Sets the value of `GTK_PRINT_SETTINGS_PRINTER_LPI`. ## `lpi` the resolution in lpi (lines per inch)",687,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_quality","","Sets the value of `GTK_PRINT_SETTINGS_QUALITY`. ## `quality` a `PrintQuality` value",687,{"inputs":[{"name":"self"},{"name":"printquality"}],"output":null}],[10,"set_resolution","","Sets the values of `GTK_PRINT_SETTINGS_RESOLUTION`, `GTK_PRINT_SETTINGS_RESOLUTION_X` and `GTK_PRINT_SETTINGS_RESOLUTION_Y`. ## `resolution` the resolution in dpi",687,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_resolution_xy","","Sets the values of `GTK_PRINT_SETTINGS_RESOLUTION`, `GTK_PRINT_SETTINGS_RESOLUTION_X` and `GTK_PRINT_SETTINGS_RESOLUTION_Y`. ## `resolution_x` the horizontal resolution in dpi ## `resolution_y` the vertical resolution in dpi",687,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_reverse","","Sets the value of `GTK_PRINT_SETTINGS_REVERSE`. ## `reverse` whether to reverse the output",687,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_scale","","Sets the value of `GTK_PRINT_SETTINGS_SCALE`. ## `scale` the scale in percent",687,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_use_color","","Sets the value of `GTK_PRINT_SETTINGS_USE_COLOR`. ## `use_color` whether to use color",687,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"to_file","","This function saves the print settings from `self` to `file_name`. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. ## `file_name` the file to save to",687,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"to_gvariant","","Serialize print settings to an a{sv} variant.",687,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"to_key_file","","This function adds the print settings from `self` to `key_file`. ## `key_file` the `glib::KeyFile` to save the print settings to ## `group_name` the group to add the settings to in `key_file`, or  `None` to use the default “Print Settings”",687,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"str"}],"output":null}],[10,"unset","","Removes any value associated with `key`. This has the same effect as setting the value to `None`. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"ProgressBarExt","","Trait containing all `ProgressBar` methods.",null,null],[10,"get_ellipsize","","Returns the ellipsizing position of the progress bar. See `ProgressBarExt::set_ellipsize`.",688,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_fraction","","Returns the current fraction of the task that’s been completed.",688,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_inverted","","Gets the value set by `ProgressBarExt::set_inverted`.",688,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pulse_step","","Retrieves the pulse step set with `ProgressBarExt::set_pulse_step`.",688,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_show_text","","Gets the value of the `ProgressBar:show-text` property. See `ProgressBarExt::set_show_text`.",688,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_text","","Retrieves the text that is displayed with the progress bar, if any, otherwise `None`. The return value is a reference to the text, not a copy of it, so will become invalid if you change the text in the progress bar.",688,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"pulse","","Indicates that some progress has been made, but you don’t know how much. Causes the progress bar to enter “activity mode,” where a block bounces back and forth. Each call to `ProgressBarExt::pulse` causes the block to move by a little bit (the amount of movement per pulse is determined by `ProgressBarExt::set_pulse_step`).",688,{"inputs":[{"name":"self"}],"output":null}],[10,"set_ellipsize","","Sets the mode used to ellipsize (add an ellipsis: \"...\") the text if there is not enough space to render the entire string. ## `mode` a `pango::EllipsizeMode`",688,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_fraction","","Causes the progress bar to “fill in” the given fraction of the bar. The fraction should be between 0.0 and 1.0, inclusive. ## `fraction` fraction of the task that’s been completed",688,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_inverted","","Progress bars normally grow from top to bottom or left to right. Inverted progress bars grow in the opposite direction. ## `inverted` `true` to invert the progress bar",688,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pulse_step","","Sets the fraction of total progress bar length to move the bouncing block for each call to `ProgressBarExt::pulse`. ## `fraction` fraction between 0.0 and 1.0",688,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_show_text","","Sets whether the progress bar will show text next to the bar. The shown text is either the value of the `ProgressBar:text` property or, if that is `None`, the `ProgressBar:fraction` value, as a percentage.",688,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text","","Causes the given `text` to appear next to the progress bar.",688,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_property_ellipsize_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fraction_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pulse_step_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_text_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RadioButtonExt","","Trait containing all `RadioButton` methods.",null,null],[10,"get_group","","Retrieves the group assigned to a radio button.",689,{"inputs":[{"name":"self"}],"output":{"generics":["radiobutton"],"name":"vec"}}],[10,"join_group","","Joins a `RadioButton` object to the group of another `RadioButton` object",689,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_group_changed","","Emitted when the group of radio buttons that a radio button belongs to changes. This is emitted when a radio button switches from being alone to being part of a group of 2 or more buttons, or vice-versa, and when a button is moved from one group of 2 or more buttons to a different one, but not when the composition of the group that a button belongs to changes.",689,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RadioMenuItemExt","","Trait containing all `RadioMenuItem` methods.",null,null],[10,"get_group","","Returns the group to which the radio menu item belongs, as a `glib::List` of `RadioMenuItem`. The list belongs to GTK+ and should not be freed.",690,{"inputs":[{"name":"self"}],"output":{"generics":["radiomenuitem"],"name":"vec"}}],[10,"join_group","","Joins a `RadioMenuItem` object to the group of another `RadioMenuItem` object.",690,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_group_changed","","",690,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RadioToolButtonExt","","Trait containing all `RadioToolButton` methods.",null,null],[10,"get_group","","Returns the radio button group `self` belongs to.",691,{"inputs":[{"name":"self"}],"output":{"generics":["radiobutton"],"name":"vec"}}],[8,"RangeExt","","Trait containing all `Range` methods.",null,null],[10,"get_adjustment","","Get the `Adjustment` which is the “model” object for `Range`. See `RangeExt::set_adjustment` for details. The return value does not have a reference added, so should not be unreferenced.",692,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[10,"get_fill_level","","Gets the current position of the fill level indicator.",692,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_flippable","","Gets the value set by `RangeExt::set_flippable`.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inverted","","Gets the value set by `RangeExt::set_inverted`.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_lower_stepper_sensitivity","","Gets the sensitivity policy for the stepper that points to the 'lower' end of the `Range`’s adjustment.",692,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[10,"get_min_slider_size","","This function is useful mainly for `Range` subclasses.",692,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_range_rect","","This function returns the area that contains the range’s trough and its steppers, in widget->window coordinates.",692,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_restrict_to_fill_level","","Gets whether the range is restricted to the fill level.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_round_digits","","Gets the number of digits to round the value to when it changes. See `Range::change-value`.",692,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_show_fill_level","","Gets whether the range displays the fill level graphically.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_slider_range","","This function returns sliders range along the long dimension, in widget->window coordinates.",692,null],[10,"get_slider_size_fixed","","This function is useful mainly for `Range` subclasses.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_upper_stepper_sensitivity","","Gets the sensitivity policy for the stepper that points to the 'upper' end of the `Range`’s adjustment.",692,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[10,"get_value","","Gets the current value of the range.",692,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_adjustment","","Sets the adjustment to be used as the “model” object for this range widget. The adjustment indicates the current range value, the minimum and maximum range values, the step/page increments used for keybindings and scrolling, and the page size. The page size is normally 0 for `Scale` and nonzero for `Scrollbar`, and indicates the size of the visible area of the widget being scrolled. The page size affects the size of the scrollbar slider. ## `adjustment` a `Adjustment`",692,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_fill_level","","Set the new position of the fill level indicator.",692,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_flippable","","If a range is flippable, it will switch its direction if it is horizontal and its direction is `TextDirection::Rtl`.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_increments","","Sets the step and page sizes for the range. The step size is used when the user clicks the `Scrollbar` arrows or moves `Scale` via arrow keys. The page size is used for example when moving via Page Up or Page Down keys. ## `step` step size ## `page` page size",692,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_inverted","","Ranges normally move from lower to higher values as the slider moves from top to bottom or left to right. Inverted ranges have higher values at the top or on the right rather than on the bottom or left. ## `setting` `true` to invert the range",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_lower_stepper_sensitivity","","Sets the sensitivity policy for the stepper that points to the 'lower' end of the `Range`’s adjustment. ## `sensitivity` the lower stepper’s sensitivity policy.",692,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":null}],[10,"set_min_slider_size","","Sets the minimum size of the range’s slider.",692,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_range","","Sets the allowable values in the `Range`, and clamps the range value to be between `min` and `max`. (If the range has a non-zero page size, it is clamped between `min` and `max` - page-size.) ## `min` minimum range value ## `max` maximum range value",692,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_restrict_to_fill_level","","Sets whether the slider is restricted to the fill level. See `RangeExt::set_fill_level` for a general description of the fill level concept. ## `restrict_to_fill_level` Whether the fill level restricts slider movement.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_round_digits","","Sets the number of digits to round the value to when it changes. See `Range::change-value`. ## `round_digits` the precision in digits, or -1",692,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_show_fill_level","","Sets whether a graphical fill level is show on the trough. See `RangeExt::set_fill_level` for a general description of the fill level concept. ## `show_fill_level` Whether a fill level indicator graphics is shown.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_slider_size_fixed","","Sets whether the range’s slider has a fixed size, or a size that depends on its adjustment’s page size.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_upper_stepper_sensitivity","","Sets the sensitivity policy for the stepper that points to the 'upper' end of the `Range`’s adjustment. ## `sensitivity` the upper stepper’s sensitivity policy.",692,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":null}],[10,"set_value","","Sets the current value of the range; if the value is outside the minimum or maximum range values, it will be clamped to fit inside them. The range emits the `Range::value-changed` signal if the value changes. ## `value` new value of the range",692,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_adjust_bounds","","Emitted before clamping a value, to give the application a chance to adjust the bounds. ## `value` the value before we clamp",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_change_value","","The `Range::change-value` signal is emitted when a scroll action is performed on a range. It allows an application to determine the type of scroll event that occurred and the resultant new value. The application can handle the event itself and return `true` to prevent further processing. Or, by returning `false`, it can pass the event to other handlers until the default GTK+ handler is reached.",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_slider","","Virtual function that moves the slider. Used for keybindings. ## `step` how to move the slider",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_slider","","",692,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":null}],[10,"connect_value_changed","","Emitted when the range value changes.",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_adjustment_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fill_level_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_lower_stepper_sensitivity_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_restrict_to_fill_level_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_round_digits_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_fill_level_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_upper_stepper_sensitivity_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RecentChooserExt","","Trait containing all `RecentChooser` methods.",null,null],[10,"add_filter","","Adds `filter` to the list of `RecentFilter` objects held by `self`.",693,{"inputs":[{"name":"self"},{"name":"recentfilter"}],"output":null}],[10,"get_current_item","","Gets the `RecentInfo` currently selected by `self`.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentinfo"],"name":"option"}}],[10,"get_current_uri","","Gets the URI currently selected by `self`.",693,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_filter","","Gets the `RecentFilter` object currently used by `self` to affect the display of the recently used resources.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentfilter"],"name":"option"}}],[10,"get_items","","Gets the list of recently used resources in form of `RecentInfo` objects.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentinfo"],"name":"vec"}}],[10,"get_limit","","Gets the number of items returned by `RecentChooser::get_items` and `RecentChooser::get_uris`.",693,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_local_only","","Gets whether only local resources should be shown in the recently used resources selector. See `RecentChooser::set_local_only`",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_select_multiple","","Gets whether `self` can select multiple items.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_icons","","Retrieves whether `self` should show an icon near the resource.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_not_found","","Retrieves whether `self` should show the recently used resources that were not found.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_private","","Returns whether `self` should display recently used resources registered as private.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_tips","","Gets whether `self` should display tooltips containing the full path of a recently user resource.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_sort_type","","Gets the value set by `RecentChooser::set_sort_type`.",693,{"inputs":[{"name":"self"}],"output":{"name":"recentsorttype"}}],[10,"get_uris","","Gets the URI of the recently used resources.",693,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_filters","","Gets the `RecentFilter` objects held by `self`.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentfilter"],"name":"vec"}}],[10,"remove_filter","","Removes `filter` from the list of `RecentFilter` objects held by `self`. ## `filter` a `RecentFilter`",693,{"inputs":[{"name":"self"},{"name":"recentfilter"}],"output":null}],[10,"select_all","","Selects all the items inside `self`, if the `self` supports multiple selection.",693,{"inputs":[{"name":"self"}],"output":null}],[10,"select_uri","","Selects `uri` inside `self`. ## `uri` a URI",693,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_current_uri","","Sets `uri` as the current URI for `self`. ## `uri` a URI",693,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_filter","","Sets `filter` as the current `RecentFilter` object used by `self` to affect the displayed recently used resources. ## `filter` a `RecentFilter`",693,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_limit","","Sets the number of items that should be returned by `RecentChooser::get_items` and `RecentChooser::get_uris`. ## `limit` a positive integer, or -1 for all items",693,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_local_only","","Sets whether only local resources, that is resources using the file:// URI scheme, should be shown in the recently used resources selector. If `local_only` is `true` (the default) then the shown resources are guaranteed to be accessible through the operating system native file system. ## `local_only` `true` if only local files can be shown",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_select_multiple","","Sets whether `self` can select multiple items. ## `select_multiple` `true` if `self` can select more than one item",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_icons","","Sets whether `self` should show an icon near the resource when displaying it. ## `show_icons` whether to show an icon near the resource",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_not_found","","Sets whether `self` should display the recently used resources that it didn’t find. This only applies to local resources. ## `show_not_found` whether to show the local items we didn’t find",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_private","","Whether to show recently used resources marked registered as private. ## `show_private` `true` to show private items, `false` otherwise",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_tips","","Sets whether to show a tooltips containing the full path of each recently used resource in a `RecentChooser` widget. ## `show_tips` `true` if tooltips should be shown",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sort_type","","Changes the sorting order of the recently used resources list displayed by `self`. ## `sort_type` sort order that the chooser should use",693,{"inputs":[{"name":"self"},{"name":"recentsorttype"}],"output":null}],[10,"unselect_all","","Unselects all the items inside `self`.",693,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_uri","","Unselects `uri` inside `self`. ## `uri` a URI",693,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_item_activated","","This signal is emitted when the user \"activates\" a recent item in the recent chooser. This can happen by double-clicking on an item in the recently used resources list, or by pressing `Enter`.",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_changed","","This signal is emitted when there is a change in the set of selected recently used resources. This can happen when a user modifies the selection with the mouse or the keyboard, or when explicitly calling functions to change the selection.",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filter_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_limit_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_only_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_recent_manager_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_select_multiple_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_icons_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_not_found_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_private_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_tips_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_type_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RecentFilterExt","","Trait containing all `RecentFilter` methods.",null,null],[10,"add_age","","Adds a rule that allows resources based on their age - that is, the number of days elapsed since they were last modified. ## `days` number of days",694,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"add_application","","Adds a rule that allows resources based on the name of the application that has registered them. ## `application` an application name",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_group","","Adds a rule that allows resources based on the name of the group to which they belong ## `group` a group name",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_mime_type","","Adds a rule that allows resources based on their registered MIME type. ## `mime_type` a MIME type",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pattern","","Adds a rule that allows resources based on a pattern matching their display name. ## `pattern` a file pattern",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pixbuf_formats","","Adds a rule allowing image files in the formats supported by `gdk_pixbuf::Pixbuf`.",694,{"inputs":[{"name":"self"}],"output":null}],[10,"get_name","","Gets the human-readable name for the filter. See `RecentFilterExt::set_name`.",694,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_needed","","Gets the fields that need to be filled in for the `RecentFilterInfo` passed to `RecentFilterExt::filter`",694,{"inputs":[{"name":"self"}],"output":{"name":"recentfilterflags"}}],[10,"set_name","","Sets the human-readable name of the filter; this is the string that will be displayed in the recently used resources selector user interface if there is a selectable list of filters. ## `name` then human readable name of `self`",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"RecentManagerExt","","Trait containing all `RecentManager` methods.",null,null],[10,"add_full","","Adds a new resource, pointed by `uri`, into the recently used resources list, using the metadata specified inside the `RecentData`-struct passed in `recent_data`.",695,{"inputs":[{"name":"self"},{"name":"str"},{"name":"recentdata"}],"output":{"name":"bool"}}],[10,"add_item","","Adds a new resource, pointed by `uri`, into the recently used resources list.",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_items","","Gets the list of recently used resources.",695,{"inputs":[{"name":"self"}],"output":{"generics":["recentinfo"],"name":"vec"}}],[10,"has_item","","Checks whether there is a recently used resource registered with `uri` inside the recent manager. ## `uri` a URI",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"lookup_item","","Searches for a URI inside the recently used resources list, and returns a `RecentInfo`-struct containing informations about the resource like its MIME type, or its display name. ## `uri` a URI",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"move_item","","Changes the location of a recently used resource from `uri` to `new_uri`.",695,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"purge_items","","Purges every item from the recently used resources list.",695,{"inputs":[{"name":"self"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"remove_item","","Removes a resource pointed by `uri` from the recently used resources list handled by a recent manager. ## `uri` the URI of the item you wish to remove",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_property_filename","","The full path to the file to be used to store and read the recently used resources list",695,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_size","","The size of the recently used resources list.",695,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_changed","","Emitted when the current recently used resources manager changes its contents, either by calling `RecentManagerExt::add_item` or by another application.",695,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filename_notify","","",695,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",695,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RevealerExt","","Trait containing all `Revealer` methods.",null,null],[10,"get_child_revealed","","Returns whether the child is fully revealed, in other words whether the transition to the revealed state is completed.",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_reveal_child","","Returns whether the child is currently revealed. See `RevealerExt::set_reveal_child`.",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_transition_duration","","Returns the amount of time (in milliseconds) that transitions will take.",696,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_transition_type","","Gets the type of animation that will be used for transitions in `self`.",696,{"inputs":[{"name":"self"}],"output":{"name":"revealertransitiontype"}}],[10,"set_reveal_child","","Tells the `Revealer` to reveal or conceal its child.",696,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_transition_duration","","Sets the duration that transitions will take.",696,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_transition_type","","Sets the type of animation that will be used for transitions in `self`. Available types include various kinds of fades and slides.",696,{"inputs":[{"name":"self"},{"name":"revealertransitiontype"}],"output":null}],[10,"get_property_child_revealed","","",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_reveal_child","","",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_reveal_child","","",696,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_transition_duration","","",696,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_transition_duration","","",696,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_transition_type","","",696,{"inputs":[{"name":"self"}],"output":{"name":"revealertransitiontype"}}],[10,"set_property_transition_type","","",696,{"inputs":[{"name":"self"},{"name":"revealertransitiontype"}],"output":null}],[10,"connect_property_child_revealed_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reveal_child_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_duration_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_type_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScaleExt","","Trait containing all `Scale` methods.",null,null],[10,"add_mark","","Adds a mark at `value`.",697,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"positiontype"},{"name":"p"}],"output":null}],[10,"clear_marks","","Removes any marks that have been added with `ScaleExt::add_mark`.",697,{"inputs":[{"name":"self"}],"output":null}],[10,"get_digits","","Gets the number of decimal places that are displayed in the value.",697,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_draw_value","","Returns whether the current value is displayed as a string next to the slider.",697,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_origin","","Returns whether the scale has an origin.",697,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_layout","","Gets the `pango::Layout` used to display the scale. The returned object is owned by the scale so does not need to be freed by the caller.",697,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_offsets","","Obtains the coordinates where the scale will draw the `pango::Layout` representing the text in the scale. Remember when using the `pango::Layout` function you need to convert to and from pixels using PANGO_PIXELS() or `PANGO_SCALE`.",697,null],[10,"get_value_pos","","Gets the position in which the current value is displayed.",697,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"set_digits","","Sets the number of decimal places that are displayed in the value. Also causes the value of the adjustment to be rounded to this number of digits, so the retrieved value matches the displayed one, if `Scale:draw-value` is `true` when the value changes. If you want to enforce rounding the value when `Scale:draw-value` is `false`, you can set `Range:round-digits` instead.",697,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_draw_value","","Specifies whether the current value is displayed as a string next to the slider. ## `draw_value` `true` to draw the value",697,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_origin","","If `Scale:has-origin` is set to `true` (the default), the scale will highlight the part of the trough between the origin (bottom or left side) and the current value. ## `has_origin` `true` if the scale has an origin",697,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_value_pos","","Sets the position in which the current value is displayed. ## `pos` the position in which the current value is displayed",697,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"connect_format_value","","Signal which allows you to change how the scale value is displayed. Connect a signal handler which returns an allocated string representing `value`. That string will then be used to display the scale's value.",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_digits_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_value_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_origin_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_pos_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScaleButtonExt","","Trait containing all `ScaleButton` methods.",null,null],[10,"get_adjustment","","Gets the `Adjustment` associated with the `ScaleButton`’s scale. See `RangeExt::get_adjustment` for details.",698,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[10,"get_minus_button","","Retrieves the minus button of the `ScaleButton`.",698,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[10,"get_plus_button","","Retrieves the plus button of the `ScaleButton`.",698,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[10,"get_popup","","Retrieves the popup of the `ScaleButton`.",698,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_value","","Gets the current value of the scale button.",698,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_adjustment","","Sets the `Adjustment` to be used as a model for the `ScaleButton`’s scale. See `RangeExt::set_adjustment` for details. ## `adjustment` a `Adjustment`",698,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_icons","","Sets the icons to be used by the scale button. For details, see the `ScaleButton:icons` property. ## `icons` a `None`-terminated array of icon names",698,null],[10,"set_value","","Sets the current value of the scale; if the value is outside the minimum or maximum range values, it will be clamped to fit inside them. The scale button emits the `ScaleButton::value-changed` signal if the value changes. ## `value` new value of the scale button",698,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_icons","","The names of the icons to be used by the scale button. The first item in the array will be used in the button when the current value is the lowest value, the second item for the highest value. All the subsequent icons will be used for all the other values, spread evenly over the range of values.",698,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_property_size","","",698,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"set_property_size","","",698,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"connect_popdown","","The ::popdown signal is a [keybinding signal][`BindingSignal`] which gets emitted to popdown the scale widget.",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popdown","","",698,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_popup","","The ::popup signal is a [keybinding signal][`BindingSignal`] which gets emitted to popup the scale widget.",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup","","",698,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_value_changed","","The ::value-changed signal is emitted when the value field has changed. ## `value` the new value",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_adjustment_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icons_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScrollableExt","","Trait containing all `Scrollable` methods.",null,null],[10,"get_border","","Returns the size of a non-scrolling border around the outside of the scrollable. An example for this would be treeview headers. GTK+ can use this information to display overlayed graphics, like the overshoot indication, at the right position.",699,{"inputs":[{"name":"self"}],"output":{"generics":["border"],"name":"option"}}],[10,"get_hadjustment","","Retrieves the `Adjustment` used for horizontal scrolling.",699,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_hscroll_policy","","Gets the horizontal `ScrollablePolicy`.",699,{"inputs":[{"name":"self"}],"output":{"name":"scrollablepolicy"}}],[10,"get_vadjustment","","Retrieves the `Adjustment` used for vertical scrolling.",699,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_vscroll_policy","","Gets the vertical `ScrollablePolicy`.",699,{"inputs":[{"name":"self"}],"output":{"name":"scrollablepolicy"}}],[10,"set_hadjustment","","Sets the horizontal adjustment of the `Scrollable`. ## `hadjustment` a `Adjustment`",699,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_hscroll_policy","","Sets the `ScrollablePolicy` to determine whether horizontal scrolling should start below the minimum width or below the natural width. ## `policy` the horizontal `ScrollablePolicy`",699,{"inputs":[{"name":"self"},{"name":"scrollablepolicy"}],"output":null}],[10,"set_vadjustment","","Sets the vertical adjustment of the `Scrollable`. ## `vadjustment` a `Adjustment`",699,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_vscroll_policy","","Sets the `ScrollablePolicy` to determine whether vertical scrolling should start below the minimum height or below the natural height. ## `policy` the vertical `ScrollablePolicy`",699,{"inputs":[{"name":"self"},{"name":"scrollablepolicy"}],"output":null}],[10,"connect_property_hadjustment_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hscroll_policy_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vadjustment_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vscroll_policy_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScrolledWindowExt","","Trait containing all `ScrolledWindow` methods.",null,null],[10,"add_with_viewport","","Used to add children without native scrolling capabilities. This is simply a convenience function; it is equivalent to adding the unscrollable child to a viewport, then adding the viewport to the scrolled window. If a child has native scrolling, use `ContainerExt::add` instead of this function.",700,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_capture_button_press","","Return whether button presses are captured during kinetic scrolling. See `ScrolledWindowExt::set_capture_button_press`.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hadjustment","","Returns the horizontal scrollbar’s adjustment, used to connect the horizontal scrollbar to the child widget’s horizontal scroll functionality.",700,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_hscrollbar","","Returns the horizontal scrollbar of `self`.",700,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_kinetic_scrolling","","Returns the specified kinetic scrolling behavior.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_max_content_height","","Returns the maximum content height set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_content_width","","Returns the maximum content width set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_min_content_height","","Gets the minimal content height of `self`, or -1 if not set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_min_content_width","","Gets the minimum content width of `self`, or -1 if not set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_overlay_scrolling","","Returns whether overlay scrolling is enabled for this scrolled window.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_placement","","Gets the placement of the contents with respect to the scrollbars for the scrolled window. See `ScrolledWindowExt::set_placement`.",700,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[10,"get_policy","","Retrieves the current policy values for the horizontal and vertical scrollbars. See `ScrolledWindowExt::set_policy`. ## `hscrollbar_policy` location to store the policy  for the horizontal scrollbar, or `None` ## `vscrollbar_policy` location to store the policy  for the vertical scrollbar, or `None`",700,null],[10,"get_propagate_natural_height","","Reports whether the natural height of the child will be calculated and propagated through the scrolled windows requested natural height.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_propagate_natural_width","","Reports whether the natural width of the child will be calculated and propagated through the scrolled windows requested natural width.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_shadow_type","","Gets the shadow type of the scrolled window. See `ScrolledWindowExt::set_shadow_type`.",700,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"get_vadjustment","","Returns the vertical scrollbar’s adjustment, used to connect the vertical scrollbar to the child widget’s vertical scroll functionality.",700,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_vscrollbar","","Returns the vertical scrollbar of `self`.",700,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_capture_button_press","","Changes the behaviour of `self` with regard to the initial event that possibly starts kinetic scrolling. When `capture_button_press` is set to `true`, the event is captured by the scrolled window, and then later replayed if it is meant to go to the child widget.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hadjustment","","Sets the `Adjustment` for the horizontal scrollbar. ## `hadjustment` horizontal scroll adjustment",700,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_kinetic_scrolling","","Turns kinetic scrolling on or off. Kinetic scrolling only applies to devices with source `gdk::InputSource::Touchscreen`. ## `kinetic_scrolling` `true` to enable kinetic scrolling",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_content_height","","Sets the maximum height that `self` should keep visible. The `self` will grow up to this height before it starts scrolling the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_max_content_width","","Sets the maximum width that `self` should keep visible. The `self` will grow up to this width before it starts scrolling the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_min_content_height","","Sets the minimum height that `self` should keep visible. Note that this can and (usually will) be smaller than the minimum size of the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_min_content_width","","Sets the minimum width that `self` should keep visible. Note that this can and (usually will) be smaller than the minimum size of the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_overlay_scrolling","","Enables or disables overlay scrolling for this scrolled window.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_placement","","Sets the placement of the contents with respect to the scrollbars for the scrolled window.",700,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":null}],[10,"set_policy","","Sets the scrollbar policy for the horizontal and vertical scrollbars.",700,{"inputs":[{"name":"self"},{"name":"policytype"},{"name":"policytype"}],"output":null}],[10,"set_propagate_natural_height","","Sets whether the natural height of the child should be calculated and propagated through the scrolled windows requested natural height.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_propagate_natural_width","","Sets whether the natural width of the child should be calculated and propagated through the scrolled windows requested natural width.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_shadow_type","","Changes the type of shadow drawn around the contents of `self`. ## `type_` kind of shadow to draw around scrolled window contents",700,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"set_vadjustment","","Sets the `Adjustment` for the vertical scrollbar. ## `vadjustment` vertical scroll adjustment",700,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"unset_placement","","Unsets the placement of the contents with respect to the scrollbars for the scrolled window. If no window placement is set for a scrolled window, it defaults to `CornerType::TopLeft`.",700,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_hscrollbar_policy","","",700,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[10,"set_property_hscrollbar_policy","","",700,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":null}],[10,"get_property_vscrollbar_policy","","",700,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[10,"set_property_vscrollbar_policy","","",700,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":null}],[10,"get_property_window_placement","","",700,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[10,"set_property_window_placement","","",700,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":null}],[10,"get_property_window_placement_set","","",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_window_placement_set","","",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_edge_overshot","","The ::edge-overshot signal is emitted whenever user initiated scrolling makes the scrolledwindow firmly surpass (ie. with some edge resistance) the lower or upper limits defined by the adjustment in that orientation.",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_edge_reached","","The ::edge-reached signal is emitted whenever user-initiated scrolling makes the scrolledwindow exactly reaches the lower or upper limits defined by the adjustment in that orientation.",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_focus_out","","The ::move-focus-out signal is a [keybinding signal][`BindingSignal`] which gets emitted when focus is moved away from the scrolled window by a keybinding. The `Widget::move-focus` signal is emitted with `direction_type` on this scrolled windows toplevel parent in the container hierarchy. The default bindings for this signal are `Tab + Ctrl` and `Tab + Ctrl + Shift`. ## `direction_type` either `DirectionType::TabForward` or  `DirectionType::TabBackward`",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_focus_out","","",700,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_scroll_child","","The ::scroll-child signal is a [keybinding signal][`BindingSignal`] which gets emitted when a keybinding that scrolls is pressed. The horizontal or vertical adjustment is updated which triggers a signal that the scrolled windows child may listen to and scroll itself. ## `scroll` a `ScrollType` describing how much to scroll ## `horizontal` whether the keybinding scrolls the child  horizontally or not",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_scroll_child","","",700,{"inputs":[{"name":"self"},{"name":"scrolltype"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_property_hadjustment_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hscrollbar_policy_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_kinetic_scrolling_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_content_height_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_content_width_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_content_height_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_content_width_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_overlay_scrolling_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_propagate_natural_height_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_propagate_natural_width_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vadjustment_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vscrollbar_policy_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_placement_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_placement_set_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchBarExt","","Trait containing all `SearchBar` methods.",null,null],[10,"connect_entry","","Connects the `Entry` widget passed as the one to be used in this search bar. The entry should be a descendant of the search bar. This is only required if the entry isn’t the direct child of the search bar (as in our main example).",701,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_search_mode","","Returns whether the search mode is on or off.",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_close_button","","Returns whether the close button is shown.",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"handle_event","","This function should be called when the top-level window which contains the search bar received a key event.",701,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"set_search_mode","","Switches the search mode on or off.",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_close_button","","Shows or hides the close button. Applications that already have a “search” toggle button should not show a close button in their search bar, as it duplicates the role of the toggle button.",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_search_mode_enabled","","",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_search_mode_enabled","","",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_close_button","","",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_close_button","","",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_search_mode_enabled_notify","","",701,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_close_button_notify","","",701,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchEntryExt","","Trait containing all `SearchEntry` methods.",null,null],[10,"handle_event","","This function should be called when the top-level window which contains the search entry received a key event. If the entry is part of a `SearchBar`, it is preferable to call `SearchBarExt::handle_event` instead, which will reveal the entry in addition to passing the event to this function.",702,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"connect_next_match","","The ::next-match signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a move to the next match for the current search string.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_next_match","","",702,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_previous_match","","The ::previous-match signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a move to the previous match for the current search string.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_previous_match","","",702,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_search_changed","","The `SearchEntry::search-changed` signal is emitted with a short delay of 150 milliseconds after the last change to the entry text.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_stop_search","","The ::stop-search signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user stops a search via keyboard input.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_stop_search","","",702,{"inputs":[{"name":"self"}],"output":null}],[8,"SeparatorToolItemExt","","Trait containing all `SeparatorToolItem` methods.",null,null],[10,"get_draw","","Returns whether `self` is drawn as a line, or just blank. See `SeparatorToolItemExt::set_draw`.",703,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_draw","","Whether `self` is drawn as a vertical line, or just blank. Setting this to `false` along with `ToolItemExt::set_expand` is useful to create an item that forces following items to the end of the toolbar. ## `draw` whether `self` is drawn as a vertical line",703,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_draw_notify","","",703,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SettingsExt","","Trait containing all `Settings` methods.",null,null],[10,"reset_property","","Undoes the effect of calling `gobject::ObjectExt::set` to install an application-specific value for a setting. After this call, the setting will again follow the session-wide value for this setting.",704,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_double_property","","Deprecated since 3.16",704,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"str"}],"output":null}],[10,"set_long_property","","Deprecated since 3.16",704,{"inputs":[{"name":"self"},{"name":"str"},{"name":"c_long"},{"name":"str"}],"output":null}],[10,"set_string_property","","Deprecated since 3.16",704,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_property_gtk_alternative_button_order","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_alternative_button_order","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_alternative_sort_arrows","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_alternative_sort_arrows","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_application_prefer_dark_theme","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_application_prefer_dark_theme","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_auto_mnemonics","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_auto_mnemonics","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_button_images","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_button_images","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_can_change_accels","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_can_change_accels","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_color_palette","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_color_palette","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_color_scheme","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_color_scheme","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_cursor_blink","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_cursor_blink","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_cursor_blink_time","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_cursor_blink_time","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_cursor_blink_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_cursor_blink_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_cursor_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_cursor_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_cursor_theme_size","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_cursor_theme_size","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_decoration_layout","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_decoration_layout","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_dialogs_use_header","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_dialogs_use_header","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_dnd_drag_threshold","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_dnd_drag_threshold","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_double_click_distance","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_double_click_distance","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_double_click_time","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_double_click_time","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_enable_accels","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_accels","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_animations","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_animations","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_event_sounds","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_event_sounds","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_input_feedback_sounds","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_input_feedback_sounds","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_mnemonics","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_mnemonics","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_primary_paste","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_primary_paste","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_tooltips","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_tooltips","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_entry_password_hint_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_gtk_entry_password_hint_timeout","","",704,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_gtk_entry_select_on_focus","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_entry_select_on_focus","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_error_bell","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_error_bell","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_fallback_icon_theme","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_fallback_icon_theme","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_file_chooser_backend","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_file_chooser_backend","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_font_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_font_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_fontconfig_timestamp","","",704,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_gtk_fontconfig_timestamp","","",704,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_gtk_icon_sizes","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_icon_sizes","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_icon_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_icon_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_im_module","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_im_module","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_im_preedit_style","","",704,{"inputs":[{"name":"self"}],"output":{"name":"impreeditstyle"}}],[10,"set_property_gtk_im_preedit_style","","",704,{"inputs":[{"name":"self"},{"name":"impreeditstyle"}],"output":null}],[10,"get_property_gtk_im_status_style","","",704,{"inputs":[{"name":"self"}],"output":{"name":"imstatusstyle"}}],[10,"set_property_gtk_im_status_style","","",704,{"inputs":[{"name":"self"},{"name":"imstatusstyle"}],"output":null}],[10,"get_property_gtk_key_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_key_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_keynav_cursor_only","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_keynav_cursor_only","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_keynav_use_caret","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_keynav_use_caret","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_keynav_wrap_around","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_keynav_wrap_around","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_label_select_on_focus","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_label_select_on_focus","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_long_press_time","","",704,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_gtk_long_press_time","","",704,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_gtk_menu_bar_accel","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_menu_bar_accel","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_menu_bar_popup_delay","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_menu_bar_popup_delay","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_menu_images","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_menu_images","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_menu_popdown_delay","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_menu_popdown_delay","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_menu_popup_delay","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_menu_popup_delay","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_modules","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_modules","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_primary_button_warps_slider","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_primary_button_warps_slider","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_print_backends","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_print_backends","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_print_preview_command","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_print_preview_command","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_recent_files_enabled","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_recent_files_enabled","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_recent_files_limit","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_recent_files_limit","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_recent_files_max_age","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_recent_files_max_age","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_scrolled_window_placement","","",704,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[10,"set_property_gtk_scrolled_window_placement","","",704,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":null}],[10,"get_property_gtk_shell_shows_app_menu","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_shell_shows_app_menu","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_shell_shows_desktop","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_shell_shows_desktop","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_shell_shows_menubar","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_shell_shows_menubar","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_show_input_method_menu","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_show_input_method_menu","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_show_unicode_menu","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_show_unicode_menu","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_sound_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_sound_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_split_cursor","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_split_cursor","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_timeout_expand","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_timeout_expand","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_timeout_initial","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_timeout_initial","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_timeout_repeat","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_timeout_repeat","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_titlebar_double_click","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_titlebar_double_click","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_titlebar_middle_click","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_titlebar_middle_click","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_titlebar_right_click","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_titlebar_right_click","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_toolbar_icon_size","","",704,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"set_property_gtk_toolbar_icon_size","","",704,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"get_property_gtk_toolbar_style","","",704,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_property_gtk_toolbar_style","","",704,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"get_property_gtk_tooltip_browse_mode_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_tooltip_browse_mode_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_tooltip_browse_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_tooltip_browse_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_tooltip_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_tooltip_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_visible_focus","","",704,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[10,"set_property_gtk_visible_focus","","",704,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":null}],[10,"get_property_gtk_xft_antialias","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_xft_antialias","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_xft_dpi","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_xft_dpi","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_xft_hinting","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_xft_hinting","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_xft_hintstyle","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_xft_hintstyle","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_xft_rgba","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_xft_rgba","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_color_hash_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_alternative_button_order_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_alternative_sort_arrows_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_application_prefer_dark_theme_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_auto_mnemonics_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_button_images_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_can_change_accels_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_color_palette_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_color_scheme_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_blink_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_blink_time_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_blink_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_theme_size_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_decoration_layout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_dialogs_use_header_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_dnd_drag_threshold_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_double_click_distance_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_double_click_time_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_accels_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_animations_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_event_sounds_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_input_feedback_sounds_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_mnemonics_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_primary_paste_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_tooltips_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_entry_password_hint_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_entry_select_on_focus_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_error_bell_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_fallback_icon_theme_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_file_chooser_backend_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_font_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_fontconfig_timestamp_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_icon_sizes_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_icon_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_im_module_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_im_preedit_style_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_im_status_style_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_key_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_keynav_cursor_only_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_keynav_use_caret_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_keynav_wrap_around_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_label_select_on_focus_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_long_press_time_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_bar_accel_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_bar_popup_delay_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_images_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_popdown_delay_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_popup_delay_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_modules_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_primary_button_warps_slider_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_print_backends_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_print_preview_command_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_recent_files_enabled_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_recent_files_limit_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_recent_files_max_age_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_scrolled_window_placement_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_shell_shows_app_menu_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_shell_shows_desktop_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_shell_shows_menubar_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_show_input_method_menu_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_show_unicode_menu_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_sound_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_split_cursor_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_timeout_expand_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_timeout_initial_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_timeout_repeat_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_titlebar_double_click_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_titlebar_middle_click_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_titlebar_right_click_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_toolbar_icon_size_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_toolbar_style_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_tooltip_browse_mode_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_tooltip_browse_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_tooltip_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_visible_focus_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_antialias_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_dpi_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_hinting_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_hintstyle_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_rgba_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ShortcutsWindowExt","","Trait containing all `ShortcutsWindow` methods.",null,null],[10,"get_property_section_name","","",705,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_section_name","","",705,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_view_name","","",705,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_view_name","","",705,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_close","","The ::close signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to close the window.",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_close","","",705,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_search","","The ::search signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to start a search.",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_search","","",705,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_section_name_notify","","",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_view_name_notify","","",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SizeGroupExt","","Trait containing all `SizeGroup` methods.",null,null],[10,"add_widget","","Adds a widget to a `SizeGroup`. In the future, the requisition of the widget will be determined as the maximum of its requisition and the requisition of the other widgets in the size group. Whether this applies horizontally, vertically, or in both directions depends on the mode of the size group. See `SizeGroupExt::set_mode`.",706,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_ignore_hidden","","Returns if invisible widgets are ignored when calculating the size.",706,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mode","","Gets the current mode of the size group. See `SizeGroupExt::set_mode`.",706,{"inputs":[{"name":"self"}],"output":{"name":"sizegroupmode"}}],[10,"get_widgets","","Returns the list of widgets associated with `self`.",706,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[10,"remove_widget","","Removes a widget from a `SizeGroup`. ## `widget` the `Widget` to remove",706,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_ignore_hidden","","Sets whether unmapped widgets should be ignored when calculating the size.",706,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mode","","Sets the `SizeGroupMode` of the size group. The mode of the size group determines whether the widgets in the size group should all have the same horizontal requisition (`SizeGroupMode::Horizontal`) all have the same vertical requisition (`SizeGroupMode::Vertical`), or should all have the same requisition in both directions (`SizeGroupMode::Both`). ## `mode` the mode to set for the size group.",706,{"inputs":[{"name":"self"},{"name":"sizegroupmode"}],"output":null}],[10,"connect_property_ignore_hidden_notify","","",706,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",706,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketExt","","",null,null],[10,"add_id","","",707,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"get_id","","",707,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_plug_window","","",707,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"connect_plug_added","","",707,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_plug_removed","","",707,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpinButtonExt","","Trait containing all `SpinButton` methods.",null,null],[10,"configure","","Changes the properties of an existing spin button. The adjustment, climb rate, and number of decimal places are all changed accordingly, after this function call. ## `adjustment` a `Adjustment` ## `climb_rate` the new climb rate ## `digits` the number of decimal places to display in the spin button",708,{"inputs":[{"name":"self"},{"name":"p"},{"name":"f64"},{"name":"u32"}],"output":null}],[10,"get_adjustment","","Get the adjustment associated with a `SpinButton`",708,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[10,"get_digits","","Fetches the precision of `self`. See `SpinButtonExt::set_digits`.",708,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_increments","","Gets the current step and page the increments used by `self`. See `SpinButtonExt::set_increments`. ## `step` location to store step increment, or `None` ## `page` location to store page increment, or `None`",708,null],[10,"get_numeric","","Returns whether non-numeric text can be typed into the spin button. See `SpinButtonExt::set_numeric`.",708,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_range","","Gets the range allowed for `self`. See `SpinButtonExt::set_range`. ## `min` location to store minimum allowed value, or `None` ## `max` location to store maximum allowed value, or `None`",708,null],[10,"get_snap_to_ticks","","Returns whether the values are corrected to the nearest step. See `SpinButtonExt::set_snap_to_ticks`.",708,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_update_policy","","Gets the update behavior of a spin button. See `SpinButtonExt::set_update_policy`.",708,{"inputs":[{"name":"self"}],"output":{"name":"spinbuttonupdatepolicy"}}],[10,"get_value","","Get the value in the `self`.",708,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_value_as_int","","Get the value `self` represented as an integer.",708,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_wrap","","Returns whether the spin button’s value wraps around to the opposite limit when the upper or lower limit of the range is exceeded. See `SpinButtonExt::set_wrap`.",708,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_adjustment","","Replaces the `Adjustment` associated with `self`. ## `adjustment` a `Adjustment` to replace the existing adjustment",708,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_digits","","Set the precision to be displayed by `self`. Up to 20 digit precision is allowed. ## `digits` the number of digits after the decimal point to be displayed for the spin button’s value",708,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_increments","","Sets the step and page increments for spin_button. This affects how quickly the value changes when the spin button’s arrows are activated. ## `step` increment applied for a button 1 press. ## `page` increment applied for a button 2 press.",708,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_numeric","","Sets the flag that determines if non-numeric text can be typed into the spin button. ## `numeric` flag indicating if only numeric entry is allowed",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_range","","Sets the minimum and maximum allowable values for `self`.",708,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_snap_to_ticks","","Sets the policy as to whether values are corrected to the nearest step increment when a spin button is activated after providing an invalid value. ## `snap_to_ticks` a flag indicating if invalid values should be corrected",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_update_policy","","Sets the update behavior of a spin button. This determines whether the spin button is always updated or only when a valid value is set. ## `policy` a `SpinButtonUpdatePolicy` value",708,{"inputs":[{"name":"self"},{"name":"spinbuttonupdatepolicy"}],"output":null}],[10,"set_value","","Sets the value of `self`. ## `value` the new value",708,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_wrap","","Sets the flag that determines if a spin button value wraps around to the opposite limit when the upper or lower limit of the range is exceeded. ## `wrap` a flag indicating if wrapping behavior is performed",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"spin","","Increment or decrement a spin button’s value in a specified direction by a specified amount. ## `direction` a `SpinType` indicating the direction to spin ## `increment` step increment to apply in the specified direction",708,{"inputs":[{"name":"self"},{"name":"spintype"},{"name":"f64"}],"output":null}],[10,"update","","Manually force an update of the spin button.",708,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_climb_rate","","",708,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_climb_rate","","",708,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_property_adjustment_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_climb_rate_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_digits_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_numeric_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_snap_to_ticks_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_update_policy_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpinnerExt","","Trait containing all `Spinner` methods.",null,null],[10,"start","","Starts the animation of the spinner.",709,{"inputs":[{"name":"self"}],"output":null}],[10,"stop","","Stops the animation of the spinner.",709,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_active","","",709,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","",709,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_active_notify","","",709,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StackExt","","Trait containing all `Stack` methods.",null,null],[10,"add_named","","Adds a child to `self`. The child is identified by the `name`.",710,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"add_titled","","Adds a child to `self`. The child is identified by the `name`. The `title` will be used by `StackSwitcher` to represent `child` in a tab bar, so it should be short.",710,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_child_by_name","","Finds the child of the `Stack` with the name given as the argument. Returns `None` if there is no child with this name.",710,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_hhomogeneous","","Gets whether `self` is horizontally homogeneous. See `StackExt::set_hhomogeneous`.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_homogeneous","","Gets whether `self` is homogeneous. See `StackExt::set_homogeneous`.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_interpolate_size","","Returns wether the `Stack` is set up to interpolate between the sizes of children on page switch.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_transition_duration","","Returns the amount of time (in milliseconds) that transitions between pages in `self` will take.",710,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_transition_running","","Returns whether the `self` is currently in a transition from one page to another.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_transition_type","","Gets the type of animation that will be used for transitions between pages in `self`.",710,{"inputs":[{"name":"self"}],"output":{"name":"stacktransitiontype"}}],[10,"get_vhomogeneous","","Gets whether `self` is vertically homogeneous. See `StackExt::set_vhomogeneous`.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_child","","Gets the currently visible child of `self`, or `None` if there are no visible children.",710,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_visible_child_name","","Returns the name of the currently visible child of `self`, or `None` if there is no visible child.",710,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_hhomogeneous","","Sets the `Stack` to be horizontally homogeneous or not. If it is homogeneous, the `Stack` will request the same width for all its children. If it isn't, the stack may change width when a different child becomes visible.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_homogeneous","","Sets the `Stack` to be homogeneous or not. If it is homogeneous, the `Stack` will request the same size for all its children. If it isn't, the stack may change size when a different child becomes visible.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_interpolate_size","","Sets whether or not `self` will interpolate its size when changing the visible child. If the `Stack:interpolate-size` property is set to `true`, `self` will interpolate its size between the current one and the one it'll take after changing the visible child, according to the set transition duration.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_transition_duration","","Sets the duration that transitions between pages in `self` will take.",710,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_transition_type","","Sets the type of animation that will be used for transitions between pages in `self`. Available types include various kinds of fades and slides.",710,{"inputs":[{"name":"self"},{"name":"stacktransitiontype"}],"output":null}],[10,"set_vhomogeneous","","Sets the `Stack` to be vertically homogeneous or not. If it is homogeneous, the `Stack` will request the same height for all its children. If it isn't, the stack may change height when a different child becomes visible.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_child","","Makes `child` the visible child of `self`.",710,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_visible_child_full","","Makes the child with the given name visible.",710,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stacktransitiontype"}],"output":null}],[10,"set_visible_child_name","","Makes the child with the given name visible.",710,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_homogeneous","","",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_homogeneous","","",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_interpolate_size","","",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_interpolate_size","","",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_transition_duration","","",710,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_transition_duration","","",710,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_transition_running","","",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_transition_type","","",710,{"inputs":[{"name":"self"}],"output":{"name":"stacktransitiontype"}}],[10,"set_property_transition_type","","",710,{"inputs":[{"name":"self"},{"name":"stacktransitiontype"}],"output":null}],[10,"get_property_visible_child","","",710,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_property_visible_child","","",710,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_visible_child_name","","",710,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_visible_child_name","","",710,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_child_icon_name","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_icon_name","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"get_child_name","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_name","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"get_child_needs_attention","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_needs_attention","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_position","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_title","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_title","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"connect_property_hhomogeneous_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_homogeneous_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_interpolate_size_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_duration_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_running_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_type_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vhomogeneous_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_child_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_child_name_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StackSidebarExt","","Trait containing all `StackSidebar` methods.",null,null],[10,"get_stack","","Retrieves the stack. See `StackSidebarExt::set_stack`.",711,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_stack","","Set the `Stack` associated with this `StackSidebar`.",711,{"inputs":[{"name":"self"},{"name":"stack"}],"output":null}],[10,"get_property_stack","","",711,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_property_stack","","",711,{"inputs":[{"name":"self"},{"generics":["stack"],"name":"option"}],"output":null}],[10,"connect_property_stack_notify","","",711,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StackSwitcherExt","","Trait containing all `StackSwitcher` methods.",null,null],[10,"get_stack","","Retrieves the stack. See `StackSwitcherExt::set_stack`.",712,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_stack","","Sets the stack to control.",712,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_icon_size","","",712,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_icon_size","","",712,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_stack","","",712,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_property_stack","","",712,{"inputs":[{"name":"self"},{"generics":["stack"],"name":"option"}],"output":null}],[10,"connect_property_icon_size_notify","","",712,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stack_notify","","",712,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StatusIconExt","","`[Deprecated since 3.14]` Trait containing all `StatusIcon` methods.",null,null],[10,"get_geometry","","Obtains information about the location of the status icon on screen. This information can be used to e.g. position popups like notification bubbles.",713,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_gicon","","Retrieves the `gio::Icon` being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::Gicon` (see `StatusIconExt::get_storage_type`). The caller of this function does not own a reference to the returned `gio::Icon`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_has_tooltip","","Returns the current value of the has-tooltip property. See `StatusIcon:has-tooltip` for more information.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon_name","","Gets the name of the icon being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::IconName` (see `StatusIconExt::get_storage_type`). The returned string is owned by the `StatusIcon` and should not be freed or modified.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_pixbuf","","Gets the `gdk_pixbuf::Pixbuf` being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::Pixbuf` (see `StatusIconExt::get_storage_type`). The caller of this function does not own a reference to the returned pixbuf.",713,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_screen","","Returns the `gdk::Screen` associated with `self`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"get_size","","Gets the size in pixels that is available for the image. Stock icons and named icons adapt their size automatically if the size of the notification area changes. For other storage types, the size-changed signal can be used to react to size changes.",713,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_stock","","Gets the id of the stock icon being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::Stock` (see `StatusIconExt::get_storage_type`). The returned string is owned by the `StatusIcon` and should not be freed or modified.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_storage_type","","Gets the type of representation being used by the `StatusIcon` to store image data. If the `StatusIcon` has no image data, the return value will be `ImageType::Empty`.",713,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"get_title","","Gets the title of this tray icon. See `StatusIconExt::set_title`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_markup","","Gets the contents of the tooltip for `self`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_text","","Gets the contents of the tooltip for `self`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_visible","","Returns whether the status icon is visible or not. Note that being visible does not guarantee that the user can actually see the icon, see also `StatusIconExt::is_embedded`.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_x11_window_id","","This function is only useful on the X11/freedesktop.org platform. It returns a window ID for the widget in the underlying status icon implementation. This is useful for the Galago notification service, which can send a window ID in the protocol in order for the server to position notification windows pointing to a status icon reliably.",713,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"is_embedded","","Returns whether the status icon is embedded in a notification area.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_from_file","","Makes `self` display the file `filename`. See `StatusIcon::new_from_file` for details.",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_gicon","","Makes `self` display the `gio::Icon`. See `StatusIcon::new_from_gicon` for details.",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_icon_name","","Makes `self` display the icon named `icon_name` from the current icon theme. See `StatusIcon::new_from_icon_name` for details.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_from_pixbuf","","Makes `self` display `pixbuf`. See `StatusIcon::new_from_pixbuf` for details.",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_stock","","Makes `self` display the stock icon with the id `stock_id`. See `StatusIcon::new_from_stock` for details.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_has_tooltip","","Sets the has-tooltip property on `self` to `has_tooltip`. See `StatusIcon:has-tooltip` for more information.",713,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_name","","Sets the name of this tray icon. This should be a string identifying this icon. It is may be used for sorting the icons in the tray and will not be shown to the user.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_screen","","Sets the `gdk::Screen` where `self` is displayed; if the icon is already mapped, it will be unmapped, and then remapped on the new screen.",713,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_title","","Sets the title of this tray icon. This should be a short, human-readable, localized string describing the tray icon. It may be used by tools like screen readers to render the tray icon.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_tooltip_markup","","Sets `markup` as the contents of the tooltip, which is marked up with  the [Pango text markup language][PangoMarkupFormat].",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tooltip_text","","Sets `text` as the contents of the tooltip.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visible","","Shows or hides a status icon.",713,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_embedded","","`true` if the statusicon is embedded in a notification area.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_file","","",713,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_gicon","","The `gio::Icon` displayed in the `StatusIcon`. For themed icons, the image will be updated automatically if the theme changes.",713,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"set_property_icon_name","","",713,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_orientation","","The orientation of the tray in which the statusicon is embedded.",713,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"set_property_pixbuf","","",713,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"set_property_stock","","Deprecated since 3.10",713,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_activate","","Gets emitted when the user activates the status icon. If and how status icons can activated is platform-dependent.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",713,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_button_press_event","","The ::button-press-event signal will be emitted when a button (typically from a mouse) is pressed.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_button_release_event","","The ::button-release-event signal will be emitted when a button (typically from a mouse) is released.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_popup_menu","","Gets emitted when the user brings up the context menu of the status icon. Whether status icons can have context menus and how these are activated is platform-dependent.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup_menu","","",713,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"connect_query_tooltip","","Emitted when the hover timeout has expired with the cursor hovering above `status_icon`; or emitted when `status_icon` got focus in keyboard mode.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_scroll_event","","The ::scroll-event signal is emitted when a button in the 4 to 7 range is pressed. Wheel mice are usually configured to generate button press events for buttons 4 and 5 when the wheel is turned.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_size_changed","","Gets emitted when the size available for the image changes, e.g. because the notification area got resized. ## `size` the new size",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_embedded_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_file_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_tooltip_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_orientation_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_storage_type_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_markup_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_text_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StatusbarExt","","Trait containing all `Statusbar` methods.",null,null],[10,"get_context_id","","Returns a new context identifier, given a description of the actual context. Note that the description is not shown in the UI. ## `context_description` textual description of what context  the new message is being used in",714,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_message_area","","Retrieves the box containing the label widget.",714,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[10,"pop","","Removes the first message in the `Statusbar`’s stack with the given context id.",714,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"push","","Pushes a new message onto a statusbar’s stack. ## `context_id` the message’s context id, as returned by  `StatusbarExt::get_context_id` ## `text` the message to add to the statusbar",714,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[10,"remove","","Forces the removal of a message from a statusbar’s stack. The exact `context_id` and `message_id` must be specified. ## `context_id` a context identifier ## `message_id` a message identifier, as returned by `StatusbarExt::push`",714,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"remove_all","","Forces the removal of all messages from a statusbar's stack with the exact `context_id`. ## `context_id` a context identifier",714,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_text_popped","","Is emitted whenever a new message is popped off a statusbar's stack. ## `context_id` the context id of the relevant message/statusbar ## `text` the message that was just popped",714,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_text_pushed","","Is emitted whenever a new message gets pushed onto a statusbar's stack. ## `context_id` the context id of the relevant message/statusbar ## `text` the message that was pushed",714,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleContextExt","","Trait containing all `StyleContext` methods.",null,null],[10,"add_class","","Adds a style class to `self`, so posterior calls to `StyleContextExt::get` or any of the gtk_render_*() functions will make use of this new class for styling.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_provider","","Adds a style provider to `self`, to be used in style construction. Note that a style provider added by this function only affects the style of the widget to which `self` belongs. If you want to affect the style of all widgets, use `StyleContext::add_provider_for_screen`.",715,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u32"}],"output":null}],[10,"add_region","","Adds a region to `self`, so posterior calls to `StyleContextExt::get` or any of the gtk_render_*() functions will make use of this new region for styling.",715,{"inputs":[{"name":"self"},{"name":"str"},{"name":"regionflags"}],"output":null}],[10,"get_background_color","","Gets the background color for a given state.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"rgba"}}],[10,"get_border","","Gets the border for a given state as a `Border`.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"border"}}],[10,"get_border_color","","Gets the border color for a given state.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"rgba"}}],[10,"get_color","","Gets the foreground color for a given state.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"rgba"}}],[10,"get_direction","","Returns the widget direction used for rendering.",715,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[10,"get_frame_clock","","Returns the `gdk::FrameClock` to which `self` is attached.",715,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"get_junction_sides","","Returns the sides where rendered elements connect visually with others.",715,{"inputs":[{"name":"self"}],"output":{"name":"junctionsides"}}],[10,"get_margin","","Gets the margin for a given state as a `Border`. See `gtk_style_property_get` and `GTK_STYLE_PROPERTY_MARGIN` for details. ## `state` state to retrieve the border for ## `margin` return value for the margin settings",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"border"}}],[10,"get_padding","","Gets the padding for a given state as a `Border`. See `StyleContextExt::get` and `GTK_STYLE_PROPERTY_PADDING` for details. ## `state` state to retrieve the padding for ## `padding` return value for the padding settings",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"border"}}],[10,"get_parent","","Gets the parent context set via `StyleContextExt::set_parent`. See that function for details.",715,{"inputs":[{"name":"self"}],"output":{"generics":["stylecontext"],"name":"option"}}],[10,"get_path","","Returns the widget path used for style matching.",715,{"inputs":[{"name":"self"}],"output":{"generics":["widgetpath"],"name":"option"}}],[10,"get_scale","","Returns the scale used for assets.",715,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_screen","","Returns the `gdk::Screen` to which `self` is attached.",715,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"get_section","","Queries the location in the CSS where `property` was defined for the current `self`. Note that the state to be queried is taken from `StyleContextExt::get_state`.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["csssection"],"name":"option"}}],[10,"get_state","","Returns the state used for style matching.",715,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[10,"has_class","","Returns `true` if `self` currently has defined the given class name. ## `class_name` a class name",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"has_region","","Returns `true` if `self` has the region defined. If `flags_return` is not `None`, it is set to the flags affecting the region.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["regionflags"],"name":"option"}}],[10,"invalidate","","Invalidates `self` style information, so it will be reconstructed again. It is useful if you modify the `self` and need the new information immediately.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"list_classes","","Returns the list of classes currently defined in `self`.",715,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_regions","","Returns the list of regions currently defined in `self`.",715,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"lookup_color","","Looks up and resolves a color name in the `self` color map. ## `color_name` color name to lookup ## `color` Return location for the looked up color",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"lookup_icon_set","","Looks up `stock_id` in the icon factories associated to `self` and the default icon factory, returning an icon set if found, otherwise `None`.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["iconset"],"name":"option"}}],[10,"pop_animatable_region","","Pops an animatable region from `self`. See `StyleContextExt::push_animatable_region`.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_class","","Removes `class_name` from `self`. ## `class_name` class name to remove",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"remove_provider","","Removes `provider` from the style providers list in `self`. ## `provider` a `StyleProvider`",715,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_region","","Removes a region from `self`.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"restore","","Restores `self` state to a previous stage. See `StyleContextExt::save`.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"save","","Saves the `self` state, so temporary modifications done through `StyleContextExt::add_class`, `StyleContextExt::remove_class`, `StyleContextExt::set_state`, etc. can quickly be reverted in one go through `StyleContextExt::restore`.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"scroll_animations","","This function is analogous to `gdk::WindowExt::scroll`, and should be called together with it so the invalidation areas for any ongoing animation are scrolled together with it.",715,{"inputs":[{"name":"self"},{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_background","","Sets the background of `window` to the background pattern or color specified in `self` for its current state.",715,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"set_direction","","Sets the reading direction for rendering purposes.",715,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[10,"set_frame_clock","","Attaches `self` to the given frame clock.",715,{"inputs":[{"name":"self"},{"name":"frameclock"}],"output":null}],[10,"set_junction_sides","","Sets the sides where rendered elements (mostly through `gtk_render_frame`) will visually connect with other visual elements.",715,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[10,"set_parent","","Sets the parent style context for `self`. The parent style context is used to implement inheritance of properties.",715,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_path","","Sets the `WidgetPath` used for style matching. As a consequence, the style will be regenerated to match the new given path.",715,{"inputs":[{"name":"self"},{"name":"widgetpath"}],"output":null}],[10,"set_scale","","Sets the scale to use when getting image assets for the style.",715,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_screen","","Attaches `self` to the given screen.",715,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_state","","Sets the state to be used for style matching. ## `flags` state to represent",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[10,"state_is_running","","Returns `true` if there is a transition animation running for the current region (see `StyleContextExt::push_animatable_region`).",715,{"inputs":[{"name":"self"},{"name":"statetype"}],"output":{"generics":["f64"],"name":"option"}}],[10,"to_string","","Converts the style context into a string representation.",715,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"string"}}],[10,"get_property_paint_clock","","",715,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"set_property_paint_clock","","",715,{"inputs":[{"name":"self"},{"generics":["frameclock"],"name":"option"}],"output":null}],[10,"connect_changed","","The ::changed signal is emitted when there is a change in the `StyleContext`.",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paint_clock_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StylePropertiesExt","","`[Deprecated since 3.16]` Trait containing all `StyleProperties` methods.",null,null],[10,"clear","","Clears all style information from `self`.",716,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property","","Gets a style property from `self` for the given state. When done with `value`, `gobject::Value::unset` needs to be called to free any allocated memory.",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stateflags"}],"output":{"generics":["value"],"name":"option"}}],[10,"lookup_color","","Returns the symbolic color that is mapped to `name`.",716,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["symboliccolor"],"name":"option"}}],[10,"map_color","","Maps `color` so it can be referenced by `name`. See `StylePropertiesExt::lookup_color`",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"symboliccolor"}],"output":null}],[10,"merge","","Merges into `self` all the style information contained in `props_to_merge`. If `replace` is `true`, the values will be overwritten, if it is `false`, the older values will prevail.",716,{"inputs":[{"name":"self"},{"name":"styleproperties"},{"name":"bool"}],"output":null}],[10,"set_property","","Sets a styling property in `self`.",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stateflags"},{"name":"value"}],"output":null}],[10,"unset_property","","Unsets a style property in `self`.",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stateflags"}],"output":null}],[8,"StyleProviderExt","","Trait containing all `StyleProvider` methods.",null,null],[10,"get_icon_factory","","Returns the `IconFactory` defined to be in use for `path`, or `None` if none is defined.",717,{"inputs":[{"name":"self"},{"name":"widgetpath"}],"output":{"generics":["iconfactory"],"name":"option"}}],[10,"get_style","","Returns the style settings affecting a widget defined by `path`, or `None` if `self` doesn’t contemplate styling `path`.",717,{"inputs":[{"name":"self"},{"name":"widgetpath"}],"output":{"generics":["styleproperties"],"name":"option"}}],[8,"SwitchExt","","Trait containing all `Switch` methods.",null,null],[10,"get_active","","Gets whether the `Switch` is in its “on” or “off” state.",718,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_state","","Gets the underlying state of the `Switch`.",718,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Changes the state of `self` to the desired one. ## `is_active` `true` if `self` should be active, and `false` otherwise",718,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_state","","Sets the underlying state of the `Switch`.",718,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","The ::activate signal on `Switch` is an action signal and emitting it causes the switch to animate. Applications should never connect to this signal, but use the notify::active signal.",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",718,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_state_set","","The ::state-set signal on `Switch` is emitted to change the underlying state. It is emitted when the user changes the switch position. The default handler keeps the state in sync with the `Switch:active` property.",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_notify","","",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextBufferExt","","Trait containing all `TextBuffer` methods.",null,null],[10,"add_mark","","Adds the mark at position `where_`. The mark must not be added to another buffer, and if its name is not `None` then there must not be another mark in the buffer with the same name.",719,{"inputs":[{"name":"self"},{"name":"textmark"},{"name":"textiter"}],"output":null}],[10,"add_selection_clipboard","","Adds `clipboard` to the list of clipboards in which the selection contents of `self` are available. In most cases, `clipboard` will be the `Clipboard` of type `GDK_SELECTION_PRIMARY` for a view of `self`. ## `clipboard` a `Clipboard`",719,{"inputs":[{"name":"self"},{"name":"clipboard"}],"output":null}],[10,"apply_tag","","Emits the “apply-tag” signal on `self`. The default handler for the signal applies `tag` to the given range. `start` and `end` do not have to be in order. ## `tag` a `TextTag` ## `start` one bound of range to be tagged ## `end` other bound of range to be tagged",719,{"inputs":[{"name":"self"},{"name":"texttag"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"apply_tag_by_name","","Calls `TextTagTableExt::lookup` on the buffer’s tag table to get a `TextTag`, then calls `TextBufferExt::apply_tag`. ## `name` name of a named `TextTag` ## `start` one bound of range to be tagged ## `end` other bound of range to be tagged",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"backspace","","Performs the appropriate action as if the user hit the delete key with the cursor at the position specified by `iter`. In the normal case a single character will be deleted, but when combining accents are involved, more than one character can be deleted, and when precomposed character and accent combinations are involved, less than one character will be deleted.",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"begin_user_action","","Called to indicate that the buffer operations between here and a call to `TextBufferExt::end_user_action` are part of a single user-visible operation. The operations between `TextBufferExt::begin_user_action` and `TextBufferExt::end_user_action` can then be grouped when creating an undo stack. `TextBuffer` maintains a count of calls to `TextBufferExt::begin_user_action` that have not been closed with a call to `TextBufferExt::end_user_action`, and emits the “begin-user-action” and “end-user-action” signals only for the outermost pair of calls. This allows you to build user actions from other user actions.",719,{"inputs":[{"name":"self"}],"output":null}],[10,"copy_clipboard","","Copies the currently-selected text to a clipboard. ## `clipboard` the `Clipboard` object to copy to",719,{"inputs":[{"name":"self"},{"name":"clipboard"}],"output":null}],[10,"create_child_anchor","","This is a convenience function which simply creates a child anchor with `TextChildAnchor::new` and inserts it into the buffer with `TextBufferExt::insert_child_anchor`. The new anchor is owned by the buffer; no reference count is returned to the caller of `TextBufferExt::create_child_anchor`. ## `iter` location in the buffer",719,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["textchildanchor"],"name":"option"}}],[10,"create_mark","","Creates a mark at position `where_`. If `mark_name` is `None`, the mark is anonymous; otherwise, the mark can be retrieved by name using `TextBufferExt::get_mark`. If a mark has left gravity, and text is inserted at the mark’s current location, the mark will be moved to the left of the newly-inserted text. If the mark has right gravity (`left_gravity` = `false`), the mark will end up on the right of newly-inserted text. The standard left-to-right cursor is a mark with right gravity (when you type, the cursor stays on the right side of the text you’re typing).",719,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textiter"},{"name":"bool"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"cut_clipboard","","Copies the currently-selected text to a clipboard, then deletes said text if it’s editable. ## `clipboard` the `Clipboard` object to cut to ## `default_editable` default editability of the buffer",719,{"inputs":[{"name":"self"},{"name":"clipboard"},{"name":"bool"}],"output":null}],[10,"delete","","Deletes text between `start` and `end`. The order of `start` and `end` is not actually relevant; `TextBufferExt::delete` will reorder them. This function actually emits the “delete-range” signal, and the default handler of that signal deletes the text. Because the buffer is modified, all outstanding iterators become invalid after calling this function; however, the `start` and `end` will be re-initialized to point to the location where text was deleted. ## `start` a position in `self` ## `end` another position in `self`",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"delete_interactive","","Deletes all editable text in the given range. Calls `TextBufferExt::delete` for each editable sub-range of [`start`,`end`). `start` and `end` are revalidated to point to the location of the last deleted range, or left untouched if no text was deleted. ## `start_iter` start of range to delete ## `end_iter` end of range ## `default_editable` whether the buffer is editable by default",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"delete_mark","","Deletes `mark`, so that it’s no longer located anywhere in the buffer. Removes the reference the buffer holds to the mark, so if you haven’t called `gobject::ObjectExt::ref` on the mark, it will be freed. Even if the mark isn’t freed, most operations on `mark` become invalid, until it gets added to a buffer again with `TextBufferExt::add_mark`. Use `TextMarkExt::get_deleted` to find out if a mark has been removed from its buffer. The `TextBuffer::mark-deleted` signal will be emitted as notification after the mark is deleted. ## `mark` a `TextMark` in `self`",719,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":null}],[10,"delete_mark_by_name","","Deletes the mark named `name`; the mark must exist. See `TextBufferExt::delete_mark` for details. ## `name` name of a mark in `self`",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"delete_selection","","Deletes the range between the “insert” and “selection_bound” marks, that is, the currently-selected text. If `interactive` is `true`, the editability of the selection will be considered (users can’t delete uneditable text). ## `interactive` whether the deletion is caused by user interaction ## `default_editable` whether the buffer is editable by default",719,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"deserialize","","This function deserializes rich text in format `format` and inserts it at `iter`.",719,null],[10,"deserialize_get_can_create_tags","","This functions returns the value set with `TextBufferExt::deserialize_set_can_create_tags` ## `format` a `gdk::Atom` representing a registered rich text format",719,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[10,"deserialize_set_can_create_tags","","Use this function to allow a rich text deserialization function to create new tags in the receiving buffer. Note that using this function is almost always a bad idea, because the rich text functions you register should know how to map the rich text format they handler to your text buffers set of tags.",719,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"bool"}],"output":null}],[10,"end_user_action","","Should be paired with a call to `TextBufferExt::begin_user_action`. See that function for a full explanation.",719,{"inputs":[{"name":"self"}],"output":null}],[10,"get_bounds","","Retrieves the first and last iterators in the buffer, i.e. the entire buffer lies within the range [`start`,`end`). ## `start` iterator to initialize with first position in the buffer ## `end` iterator to initialize with the end iterator",719,null],[10,"get_char_count","","Gets the number of characters in the buffer; note that characters and bytes are not the same, you can’t e.g. expect the contents of the buffer in string form to be this many bytes long. The character count is cached, so this function is very fast.",719,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_copy_target_list","","This function returns the list of targets this text buffer can provide for copying and as DND source. The targets in the list are added with `info` values from the `TextBufferTargetInfo` enum, using `TargetList::add_rich_text_targets` and `TargetList::add_text_targets`.",719,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"get_deserialize_formats","","This function returns the rich text deserialize formats registered with `self` using `TextBufferExt::register_deserialize_format` or `TextBufferExt::register_deserialize_tagset` ## `n_formats` return location for the number of formats",719,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"get_end_iter","","Initializes `iter` with the “end iterator,” one past the last valid character in the text buffer. If dereferenced with `TextIter::get_char`, the end iterator has a character value of 0. The entire buffer lies in the range from the first position in the buffer (call `TextBufferExt::get_start_iter` to get character position 0) to the end iterator. ## `iter` iterator to initialize",719,{"inputs":[{"name":"self"}],"output":{"name":"textiter"}}],[10,"get_has_selection","","Indicates whether the buffer has some text currently selected.",719,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_insert","","Returns the mark that represents the cursor (insertion point). Equivalent to calling `TextBufferExt::get_mark` to get the mark named “insert”, but very slightly more efficient, and involves less typing.",719,{"inputs":[{"name":"self"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"get_iter_at_child_anchor","","Obtains the location of `anchor` within `self`. ## `iter` an iterator to be initialized ## `anchor` a child anchor that appears in `self`",719,{"inputs":[{"name":"self"},{"name":"textchildanchor"}],"output":{"name":"textiter"}}],[10,"get_iter_at_line","","Initializes `iter` to the start of the given line. If `line_number` is greater than the number of lines in the `self`, the end iterator is returned. ## `iter` iterator to initialize ## `line_number` line number counting from 0",719,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_iter_at_line_index","","Obtains an iterator pointing to `byte_index` within the given line. `byte_index` must be the start of a UTF-8 character. Note bytes, not characters; UTF-8 may encode one character as multiple bytes.",719,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_iter_at_line_offset","","Obtains an iterator pointing to `char_offset` within the given line. Note characters, not bytes; UTF-8 may encode one character as multiple bytes.",719,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_iter_at_mark","","Initializes `iter` with the current position of `mark`. ## `iter` iterator to initialize ## `mark` a `TextMark` in `self`",719,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":{"name":"textiter"}}],[10,"get_iter_at_offset","","Initializes `iter` to a position `char_offset` chars from the start of the entire buffer. If `char_offset` is -1 or greater than the number of characters in the buffer, `iter` is initialized to the end iterator, the iterator one past the last valid character in the buffer. ## `iter` iterator to initialize ## `char_offset` char offset from start of buffer, counting from 0, or -1",719,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_line_count","","Obtains the number of lines in the buffer. This value is cached, so the function is very fast.",719,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_mark","","Returns the mark named `name` in buffer `self`, or `None` if no such mark exists in the buffer. ## `name` a mark name",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"get_modified","","Indicates whether the buffer has been modified since the last call to `TextBufferExt::set_modified` set the modification flag to `false`. Used for example to enable a “save” function in a text editor.",719,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_paste_target_list","","This function returns the list of targets this text buffer supports for pasting and as DND destination. The targets in the list are added with `info` values from the `TextBufferTargetInfo` enum, using `TargetList::add_rich_text_targets` and `TargetList::add_text_targets`.",719,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"get_selection_bound","","Returns the mark that represents the selection bound. Equivalent to calling `TextBufferExt::get_mark` to get the mark named “selection_bound”, but very slightly more efficient, and involves less typing.",719,{"inputs":[{"name":"self"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"get_selection_bounds","","Returns `true` if some text is selected; places the bounds of the selection in `start` and `end` (if the selection has length 0, then `start` and `end` are filled in with the same value). `start` and `end` will be in ascending order. If `start` and `end` are NULL, then they are not filled in, but the return value still indicates whether text is selected. ## `start` iterator to initialize with selection start ## `end` iterator to initialize with selection end",719,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_serialize_formats","","This function returns the rich text serialize formats registered with `self` using `TextBufferExt::register_serialize_format` or `TextBufferExt::register_serialize_tagset` ## `n_formats` return location for the number of formats",719,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"get_slice","","Returns the text in the range [`start`,`end`). Excludes undisplayed text (text marked with tags that set the invisibility attribute) if `include_hidden_chars` is `false`. The returned string includes a 0xFFFC character whenever the buffer contains embedded images, so byte and character indexes into the returned string do correspond to byte and character indexes into the buffer. Contrast with `TextBufferExt::get_text`. Note that 0xFFFC can occur in normal text as well, so it is not a reliable indicator that a pixbuf or widget is in the buffer. ## `start` start of a range ## `end` end of a range ## `include_hidden_chars` whether to include invisible text",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_start_iter","","Initialized `iter` with the first position in the text buffer. This is the same as using `TextBufferExt::get_iter_at_offset` to get the iter at character offset 0. ## `iter` iterator to initialize",719,{"inputs":[{"name":"self"}],"output":{"name":"textiter"}}],[10,"get_tag_table","","Get the `TextTagTable` associated with this buffer.",719,{"inputs":[{"name":"self"}],"output":{"generics":["texttagtable"],"name":"option"}}],[10,"get_text","","Returns the text in the range [`start`,`end`). Excludes undisplayed text (text marked with tags that set the invisibility attribute) if `include_hidden_chars` is `false`. Does not include characters representing embedded images, so byte and character indexes into the returned string do not correspond to byte and character indexes into the buffer. Contrast with `TextBufferExt::get_slice`. ## `start` start of a range ## `end` end of a range ## `include_hidden_chars` whether to include invisible text",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[10,"insert","","Inserts `len` bytes of `text` at position `iter`. If `len` is -1, `text` must be nul-terminated and will be inserted in its entirety. Emits the “insert-text” signal; insertion actually occurs in the default handler for the signal. `iter` is invalidated when insertion occurs (because the buffer contents change), but the default signal handler revalidates it to point to the end of the inserted text. ## `iter` a position in the buffer ## `text` text in UTF-8 format ## `len` length of text in bytes, or -1",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":null}],[10,"insert_at_cursor","","Simply calls `TextBufferExt::insert`, using the current cursor position as the insertion point. ## `text` text in UTF-8 format ## `len` length of text, in bytes",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"insert_child_anchor","","Inserts a child widget anchor into the text buffer at `iter`. The anchor will be counted as one character in character counts, and when obtaining the buffer contents as a string, will be represented by the Unicode “object replacement character” 0xFFFC. Note that the “slice” variants for obtaining portions of the buffer as a string include this character for child anchors, but the “text” variants do not. E.g. see `TextBufferExt::get_slice` and `TextBufferExt::get_text`. Consider `TextBufferExt::create_child_anchor` as a more convenient alternative to this function. The buffer will add a reference to the anchor, so you can unref it after insertion. ## `iter` location to insert the anchor ## `anchor` a `TextChildAnchor`",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textchildanchor"}],"output":null}],[10,"insert_interactive","","Like `TextBufferExt::insert`, but the insertion will not occur if `iter` is at a non-editable location in the buffer. Usually you want to prevent insertions at ineditable locations if the insertion results from a user action (is interactive).",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"insert_interactive_at_cursor","","Calls `TextBufferExt::insert_interactive` at the cursor position.",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"insert_markup","","Inserts the text in `markup` at position `iter`. `markup` will be inserted in its entirety and must be nul-terminated and valid UTF-8. Emits the `TextBuffer::insert-text` signal, possibly multiple times; insertion actually occurs in the default handler for the signal. `iter` will point to the end of the inserted text on return.",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":null}],[10,"insert_pixbuf","","Inserts an image into the text buffer at `iter`. The image will be counted as one character in character counts, and when obtaining the buffer contents as a string, will be represented by the Unicode “object replacement character” 0xFFFC. Note that the “slice” variants for obtaining portions of the buffer as a string include this character for pixbufs, but the “text” variants do not. e.g. see `TextBufferExt::get_slice` and `TextBufferExt::get_text`. ## `iter` location to insert the pixbuf ## `pixbuf` a `gdk_pixbuf::Pixbuf`",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"pixbuf"}],"output":null}],[10,"insert_range","","Copies text, tags, and pixbufs between `start` and `end` (the order of `start` and `end` doesn’t matter) and inserts the copy at `iter`. Used instead of simply getting/inserting text because it preserves images and tags. If `start` and `end` are in a different buffer from `self`, the two buffers must share the same tag table.",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"insert_range_interactive","","Same as `TextBufferExt::insert_range`, but does nothing if the insertion point isn’t editable. The `default_editable` parameter indicates whether the text is editable at `iter` if no tags enclosing `iter` affect editability. Typically the result of `TextViewExt::get_editable` is appropriate here. ## `iter` a position in `self` ## `start` a position in a `TextBuffer` ## `end` another position in the same buffer as `start` ## `default_editable` default editability of the buffer",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"move_mark","","Moves `mark` to the new location `where_`. Emits the `TextBuffer::mark-set` signal as notification of the move. ## `mark` a `TextMark` ## `where_` new location for `mark` in `self`",719,{"inputs":[{"name":"self"},{"name":"textmark"},{"name":"textiter"}],"output":null}],[10,"move_mark_by_name","","Moves the mark named `name` (which must exist) to location `where_`. See `TextBufferExt::move_mark` for details. ## `name` name of a mark ## `where_` new location for mark",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textiter"}],"output":null}],[10,"paste_clipboard","","Pastes the contents of a clipboard. If `override_location` is `None`, the pasted text will be inserted at the cursor position, or the buffer selection will be replaced if the selection is non-empty.",719,{"inputs":[{"name":"self"},{"name":"clipboard"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"place_cursor","","This function moves the “insert” and “selection_bound” marks simultaneously. If you move them to the same place in two steps with `TextBufferExt::move_mark`, you will temporarily select a region in between their old and new locations, which can be pretty inefficient since the temporarily-selected region will force stuff to be recalculated. This function moves them as a unit, which can be optimized. ## `where_` where to put the cursor",719,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":null}],[10,"register_deserialize_tagset","","This function registers GTK+’s internal rich text serialization format with the passed `self`. See `TextBufferExt::register_serialize_tagset` for details. ## `tagset_name` an optional tagset name, on `None`",719,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"atom"}}],[10,"register_serialize_tagset","","This function registers GTK+’s internal rich text serialization format with the passed `self`. The internal format does not comply to any standard rich text format and only works between `TextBuffer` instances. It is capable of serializing all of a text buffer’s tags and embedded pixbufs.",719,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"atom"}}],[10,"remove_all_tags","","Removes all tags in the range between `start` and `end`. Be careful with this function; it could remove tags added in code unrelated to the code you’re currently writing. That is, using this function is probably a bad idea if you have two or more unrelated code sections that add tags. ## `start` one bound of range to be untagged ## `end` other bound of range to be untagged",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"remove_selection_clipboard","","Removes a `Clipboard` added with `TextBufferExt::add_selection_clipboard`. ## `clipboard` a `Clipboard` added to `self` by  `TextBufferExt::add_selection_clipboard`",719,{"inputs":[{"name":"self"},{"name":"clipboard"}],"output":null}],[10,"remove_tag","","Emits the “remove-tag” signal. The default handler for the signal removes all occurrences of `tag` from the given range. `start` and `end` don’t have to be in order. ## `tag` a `TextTag` ## `start` one bound of range to be untagged ## `end` other bound of range to be untagged",719,{"inputs":[{"name":"self"},{"name":"texttag"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"remove_tag_by_name","","Calls `TextTagTableExt::lookup` on the buffer’s tag table to get a `TextTag`, then calls `TextBufferExt::remove_tag`. ## `name` name of a `TextTag` ## `start` one bound of range to be untagged ## `end` other bound of range to be untagged",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"select_range","","This function moves the “insert” and “selection_bound” marks simultaneously. If you move them in two steps with `TextBufferExt::move_mark`, you will temporarily select a region in between their old and new locations, which can be pretty inefficient since the temporarily-selected region will force stuff to be recalculated. This function moves them as a unit, which can be optimized. ## `ins` where to put the “insert” mark ## `bound` where to put the “selection_bound” mark",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"serialize","","This function serializes the portion of text between `start` and `end` in the rich text format represented by `format`.",719,{"inputs":[{"name":"self"},{"name":"textbuffer"},{"name":"atom"},{"name":"textiter"},{"name":"textiter"}],"output":{"generics":["u8"],"name":"vec"}}],[10,"set_modified","","Used to keep track of whether the buffer has been modified since the last time it was saved. Whenever the buffer is saved to disk, call gtk_text_buffer_set_modified (`self`, FALSE). When the buffer is modified, it will automatically toggled on the modified bit again. When the modified bit flips, the buffer emits the `TextBuffer::modified-changed` signal. ## `setting` modification flag setting",719,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text","","Deletes current contents of `self`, and inserts `text` instead. If `len` is -1, `text` must be nul-terminated. `text` must be valid UTF-8. ## `text` UTF-8 text to insert ## `len` length of `text` in bytes",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"unregister_deserialize_format","","This function unregisters a rich text format that was previously registered using `TextBufferExt::register_deserialize_format` or `TextBufferExt::register_deserialize_tagset`. ## `format` a `gdk::Atom` representing a registered rich text format.",719,{"inputs":[{"name":"self"},{"name":"atom"}],"output":null}],[10,"unregister_serialize_format","","This function unregisters a rich text format that was previously registered using `TextBufferExt::register_serialize_format` or `TextBufferExt::register_serialize_tagset` ## `format` a `gdk::Atom` representing a registered rich text format.",719,{"inputs":[{"name":"self"},{"name":"atom"}],"output":null}],[10,"get_property_cursor_position","","",719,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_apply_tag","","The ::apply-tag signal is emitted to apply a tag to a range of text in a `TextBuffer`. Applying actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_begin_user_action","","The ::begin-user-action signal is emitted at the beginning of a single user-visible operation on a `TextBuffer`.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_changed","","The ::changed signal is emitted when the content of a `TextBuffer` has changed.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_range","","The ::delete-range signal is emitted to delete a range from a `TextBuffer`.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_end_user_action","","The ::end-user-action signal is emitted at the end of a single user-visible operation on the `TextBuffer`.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_child_anchor","","The ::insert-child-anchor signal is emitted to insert a `TextChildAnchor` in a `TextBuffer`. Insertion actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_pixbuf","","The ::insert-pixbuf signal is emitted to insert a `gdk_pixbuf::Pixbuf` in a `TextBuffer`. Insertion actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mark_deleted","","The ::mark-deleted signal is emitted as notification after a `TextMark` is deleted.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mark_set","","The ::mark-set signal is emitted as notification after a `TextMark` is set.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_modified_changed","","The ::modified-changed signal is emitted when the modified bit of a `TextBuffer` flips.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_paste_done","","The paste-done signal is emitted after paste operation has been completed. This is useful to properly scroll the view to the end of the pasted text. See `TextBufferExt::paste_clipboard` for more details. ## `clipboard` the `Clipboard` pasted from",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove_tag","","The ::remove-tag signal is emitted to remove all occurrences of `tag` from a range of text in a `TextBuffer`. Removal actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_copy_target_list_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_position_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_selection_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paste_target_list_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tag_table_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextChildAnchorExt","","Trait containing all `TextChildAnchor` methods.",null,null],[10,"get_deleted","","Determines whether a child anchor has been deleted from the buffer. Keep in mind that the child anchor will be unreferenced when removed from the buffer, so you need to hold your own reference (with `gobject::ObjectExt::ref`) if you plan to use this function — otherwise all deleted child anchors will also be finalized.",720,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_widgets","","Gets a list of all widgets anchored at this child anchor. The returned list should be freed with `glib::List::free`.",720,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[8,"TextMarkExt","","Trait containing all `TextMark` methods.",null,null],[10,"get_buffer","","Gets the buffer this mark is located inside, or `None` if the mark is deleted.",721,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[10,"get_deleted","","Returns `true` if the mark has been removed from its buffer with `TextBufferExt::delete_mark`. See `TextBufferExt::add_mark` for a way to add it to a buffer again.",721,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_left_gravity","","Determines whether the mark has left gravity.",721,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_name","","Returns the mark name; returns NULL for anonymous marks.",721,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_visible","","Returns `true` if the mark is visible (i.e. a cursor is displayed for it).",721,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_visible","","Sets the visibility of `self`; the insertion point is normally visible, i.e. you can see it as a vertical bar. Also, the text widget uses a visible mark to indicate where a drop will occur when dragging-and-dropping text. Most other marks are not visible. Marks are not visible by default. ## `setting` visibility of mark",721,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_left_gravity_notify","","",721,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",721,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextTagExt","","Trait containing all `TextTag` methods.",null,null],[10,"changed","","Emits the `TextTagTable::tag-changed` signal on the `TextTagTable` where the tag is included.",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"event","","Emits the “event” signal on the `TextTag`. ## `event_object` object that received the event, such as a widget ## `event` the event ## `iter` location where the event was received",722,{"inputs":[{"name":"self"},{"name":"p"},{"name":"event"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"get_priority","","Get the tag priority.",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_priority","","Sets the priority of a `TextTag`. Valid priorities start at 0 and go to one less than `TextTagTableExt::get_size`. Each tag in a table has a unique priority; setting the priority of one tag shifts the priorities of all the other tags in the table to maintain a unique priority for each tag. Higher priority tags “win” if two tags both set the same text attribute. When adding a tag to a tag table, it will be assigned the highest priority in the table by default; so normally the precedence of a set of tags is the order in which they were added to the table, or created with `TextBufferExt::create_tag`, which adds the tag to the buffer’s table automatically. ## `priority` the new priority",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_accumulative_margin","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_accumulative_margin","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_background","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_background_full_height","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_full_height","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_background_full_height_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_full_height_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_background_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_background_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_background_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_direction","","",722,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[10,"set_property_direction","","",722,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[10,"get_property_editable","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editable_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_fallback","","Whether font fallback is enabled.",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_fallback","","Whether font fallback is enabled.",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_fallback_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_fallback_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_family","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_family","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_family_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_family_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_font","","Font description as string, e.g. \"Sans Italic 12\".",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_font","","Font description as string, e.g. \"Sans Italic 12\".",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_font_features","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_font_features","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_font_features_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_font_features_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_foreground","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_foreground_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_foreground_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_foreground_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_foreground_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_indent","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_indent","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_indent_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_indent_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_invisible","","Whether this text is hidden.",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_invisible","","Whether this text is hidden.",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_invisible_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_invisible_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_justification","","",722,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[10,"set_property_justification","","",722,{"inputs":[{"name":"self"},{"name":"justification"}],"output":null}],[10,"get_property_justification_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_justification_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_language","","The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used.",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_language","","The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used.",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_language_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_language_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_left_margin","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_left_margin","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_left_margin_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_left_margin_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_letter_spacing","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_letter_spacing","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_letter_spacing_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_letter_spacing_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_name","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_paragraph_background","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_paragraph_background_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_paragraph_background_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_paragraph_background_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_paragraph_background_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pixels_above_lines","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pixels_above_lines","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_pixels_above_lines_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_pixels_above_lines_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pixels_below_lines","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pixels_below_lines","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_pixels_below_lines_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_pixels_below_lines_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pixels_inside_wrap","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pixels_inside_wrap","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_pixels_inside_wrap_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_pixels_inside_wrap_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_right_margin","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_right_margin","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_right_margin_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_right_margin_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_rise","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rise","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_rise_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_rise_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_scale","","",722,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_scale","","",722,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_scale_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_scale_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_size","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_size","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_size_points","","",722,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_size_points","","",722,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_size_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_size_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_stretch","","",722,{"inputs":[{"name":"self"}],"output":{"name":"stretch"}}],[10,"set_property_stretch","","",722,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":null}],[10,"get_property_stretch_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_stretch_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_strikethrough_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_strikethrough_rgba_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough_rgba_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_style","","",722,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[10,"set_property_style","","",722,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[10,"get_property_style_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_style_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_tabs_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_tabs_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_underline","","",722,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[10,"set_property_underline","","",722,{"inputs":[{"name":"self"},{"name":"underline"}],"output":null}],[10,"get_property_underline_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_underline_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_underline_rgba_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_underline_rgba_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_underline_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_underline_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_variant","","",722,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[10,"set_property_variant","","",722,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"get_property_variant_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_variant_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_weight","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_weight","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_weight_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_weight_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_wrap_mode","","",722,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_property_wrap_mode","","",722,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"get_property_wrap_mode_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_wrap_mode_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_event","","The ::event signal is emitted when an event occurs on a region of the buffer marked with this tag. ## `object` the object the event was fired from (typically a `TextView`) ## `event` the event which triggered the signal ## `iter` a `TextIter` pointing at the location the event occurred",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accumulative_margin_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_full_height_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_full_height_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fallback_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fallback_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_features_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_features_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justification_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justification_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_margin_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_margin_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_letter_spacing_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_letter_spacing_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paragraph_background_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paragraph_background_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paragraph_background_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_above_lines_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_above_lines_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_below_lines_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_below_lines_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_inside_wrap_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_inside_wrap_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_points_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_rgba_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tabs_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_rgba_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextTagTableExt","","Trait containing all `TextTagTable` methods.",null,null],[10,"add","","Add a tag to the table. The tag is assigned the highest priority in the table.",723,{"inputs":[{"name":"self"},{"name":"texttag"}],"output":{"name":"bool"}}],[10,"get_size","","Returns the size of the table (number of tags)",723,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"lookup","","Look up a named tag. ## `name` name of a tag",723,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["texttag"],"name":"option"}}],[10,"remove","","Remove a tag from the table. If a `TextBuffer` has `self` as its tag table, the tag is removed from the buffer. The table’s reference to the tag is removed, so the tag will end up destroyed if you don’t have a reference to it. ## `tag` a `TextTag`",723,{"inputs":[{"name":"self"},{"name":"texttag"}],"output":null}],[10,"connect_tag_added","","`tag` the added tag.",723,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tag_changed","","`tag` the changed tag. ## `size_changed` whether the change affects the `TextView` layout.",723,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tag_removed","","`tag` the removed tag.",723,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextViewExt","","Trait containing all `TextView` methods.",null,null],[10,"add_child_at_anchor","","Adds a child widget in the text buffer, at the given `anchor`. ## `child` a `Widget` ## `anchor` a `TextChildAnchor` in the `TextBuffer` for `self`",724,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textchildanchor"}],"output":null}],[10,"add_child_in_window","","Adds a child at fixed coordinates in one of the text widget's windows.",724,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textwindowtype"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"backward_display_line","","Moves the given `iter` backward by one display (wrapped) line. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"backward_display_line_start","","Moves the given `iter` backward to the next display line start. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"buffer_to_window_coords","","Converts coordinate (`buffer_x`, `buffer_y`) to coordinates for the window `win`, and stores the result in (`window_x`, `window_y`).",724,null],[10,"forward_display_line","","Moves the given `iter` forward by one display (wrapped) line. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"forward_display_line_end","","Moves the given `iter` forward to the next display line end. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"get_accepts_tab","","Returns whether pressing the Tab key inserts a tab characters. `TextViewExt::set_accepts_tab`.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_border_window_size","","Gets the width of the specified border window. See `TextViewExt::set_border_window_size`. ## `type_` window to return size from",724,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"name":"i32"}}],[10,"get_bottom_margin","","Gets the bottom margin for text in the `self`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_buffer","","Returns the `TextBuffer` being displayed by this text view. The reference count on the buffer is not incremented; the caller of this function won’t own a new reference.",724,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[10,"get_cursor_locations","","Given an `iter` within a text layout, determine the positions of the strong and weak cursors if the insertion point is at that iterator. The position of each cursor is stored as a zero-width rectangle. The strong cursor location is the location where characters of the directionality equal to the base direction of the paragraph are inserted. The weak cursor location is the location where characters of the directionality opposite to the base direction of the paragraph are inserted.",724,null],[10,"get_cursor_visible","","Find out whether the cursor should be displayed.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_default_attributes","","Obtains a copy of the default text attributes. These are the attributes used for text unless a tag overrides them. You’d typically pass the default attributes in to `TextIter::get_attributes` in order to get the attributes in effect at a given text position.",724,{"inputs":[{"name":"self"}],"output":{"name":"textattributes"}}],[10,"get_editable","","Returns the default editability of the `TextView`. Tags in the buffer may override this setting for some ranges of text.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_indent","","Gets the default indentation of paragraphs in `self`. Tags in the view’s buffer may override the default. The indentation may be negative.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_input_hints","","Gets the value of the `TextView:input-hints` property.",724,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[10,"get_input_purpose","","Gets the value of the `TextView:input-purpose` property.",724,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[10,"get_iter_at_location","","Retrieves the iterator at buffer coordinates `x` and `y`. Buffer coordinates are coordinates for the entire buffer, not just the currently-displayed portion. If you have coordinates from an event, you have to convert those to buffer coordinates with `TextViewExt::window_to_buffer_coords`. ## `iter` a `TextIter` ## `x` x position, in buffer coordinates ## `y` y position, in buffer coordinates",724,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["textiter"],"name":"option"}}],[10,"get_iter_at_position","","Retrieves the iterator pointing to the character at buffer coordinates `x` and `y`. Buffer coordinates are coordinates for the entire buffer, not just the currently-displayed portion. If you have coordinates from an event, you have to convert those to buffer coordinates with `TextViewExt::window_to_buffer_coords`.",724,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_iter_location","","Gets a rectangle which roughly contains the character at `iter`. The rectangle position is in buffer coordinates; use `TextViewExt::buffer_to_window_coords` to convert these coordinates to coordinates for one of the windows in the text view. ## `iter` a `TextIter` ## `location` bounds of the character at `iter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"rectangle"}}],[10,"get_justification","","Gets the default justification of paragraphs in `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[10,"get_left_margin","","Gets the default left margin size of paragraphs in the `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_line_at_y","","Gets the `TextIter` at the start of the line containing the coordinate `y`. `y` is in buffer coordinates, convert from window coordinates with `TextViewExt::window_to_buffer_coords`. If non-`None`, `line_top` will be filled with the coordinate of the top edge of the line. ## `target_iter` a `TextIter` ## `y` a y coordinate ## `line_top` return location for top coordinate of the line",724,null],[10,"get_line_yrange","","Gets the y coordinate of the top of the line containing `iter`, and the height of the line. The coordinate is a buffer coordinate; convert to window coordinates with `TextViewExt::buffer_to_window_coords`. ## `iter` a `TextIter` ## `y` return location for a y coordinate ## `height` return location for a height",724,null],[10,"get_monospace","","Gets the value of the `TextView:monospace` property.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_overwrite","","Returns whether the `TextView` is in overwrite mode or not.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pixels_above_lines","","Gets the default number of pixels to put above paragraphs. Adding this function with `TextViewExt::get_pixels_below_lines` is equal to the line space between each paragraph.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_pixels_below_lines","","Gets the value set by `TextViewExt::set_pixels_below_lines`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_pixels_inside_wrap","","Gets the value set by `TextViewExt::set_pixels_inside_wrap`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_right_margin","","Gets the default right margin for text in `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tabs","","Gets the default tabs for `self`. Tags in the buffer may override the defaults. The returned array will be `None` if “standard” (8-space) tabs are used. Free the return value with `pango::TabArray::free`.",724,{"inputs":[{"name":"self"}],"output":{"generics":["tabarray"],"name":"option"}}],[10,"get_top_margin","","Gets the top margin for text in the `self`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_visible_rect","","Fills `visible_rect` with the currently-visible region of the buffer, in buffer coordinates. Convert to window coordinates with `TextViewExt::buffer_to_window_coords`. ## `visible_rect` rectangle to fill",724,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_window","","Retrieves the `gdk::Window` corresponding to an area of the text view; possible windows include the overall widget window, child windows on the left, right, top, bottom, and the window that displays the text buffer. Windows are `None` and nonexistent if their width or height is 0, and are nonexistent before the widget has been realized. ## `win` window to get",724,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_window_type","","Usually used to find out which window an event corresponds to.",724,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"textwindowtype"}}],[10,"get_wrap_mode","","Gets the line wrapping for the view.",724,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"im_context_filter_keypress","","Allow the `TextView` input method to internally handle key press and release events. If this function returns `true`, then no further processing should be done for this key event. See `IMContextExt::filter_keypress`.",724,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"move_child","","Updates the position of a child, as for `TextViewExt::add_child_in_window`. ## `child` child widget already added to the text view ## `xpos` new X position in window coordinates ## `ypos` new Y position in window coordinates",724,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"move_mark_onscreen","","Moves a mark within the buffer so that it's located within the currently-visible text area. ## `mark` a `TextMark`",724,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":{"name":"bool"}}],[10,"move_visually","","Move the iterator a given number of characters visually, treating it as the strong cursor position. If `count` is positive, then the new strong cursor position will be `count` positions to the right of the old cursor position. If `count` is negative then the new strong cursor position will be `count` positions to the left of the old cursor position.",724,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"place_cursor_onscreen","","Moves the cursor to the currently visible region of the buffer, it it isn’t there already.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"reset_cursor_blink","","Ensures that the cursor is shown (i.e. not in an 'off' blink interval) and resets the time that it will stay blinking (or visible, in case blinking is disabled).",724,{"inputs":[{"name":"self"}],"output":null}],[10,"reset_im_context","","Reset the input method context of the text view if needed.",724,{"inputs":[{"name":"self"}],"output":null}],[10,"scroll_mark_onscreen","","Scrolls `self` the minimum distance such that `mark` is contained within the visible area of the widget. ## `mark` a mark in the buffer for `self`",724,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":null}],[10,"scroll_to_iter","","Scrolls `self` so that `iter` is on the screen in the position indicated by `xalign` and `yalign`. An alignment of 0.0 indicates left or top, 1.0 indicates right or bottom, 0.5 means center. If `use_align` is `false`, the text scrolls the minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size `within_margin`.",724,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"f64"},{"name":"bool"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[10,"scroll_to_mark","","Scrolls `self` so that `mark` is on the screen in the position indicated by `xalign` and `yalign`. An alignment of 0.0 indicates left or top, 1.0 indicates right or bottom, 0.5 means center. If `use_align` is `false`, the text scrolls the minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size `within_margin`. ## `mark` a `TextMark` ## `within_margin` margin as a [0.0,0.5) fraction of screen size ## `use_align` whether to use alignment arguments (if `false`, just  get the mark onscreen) ## `xalign` horizontal alignment of mark within visible area ## `yalign` vertical alignment of mark within visible area",724,{"inputs":[{"name":"self"},{"name":"textmark"},{"name":"f64"},{"name":"bool"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_accepts_tab","","Sets the behavior of the text widget when the Tab key is pressed. If `accepts_tab` is `true`, a tab character is inserted. If `accepts_tab` is `false` the keyboard focus is moved to the next widget in the focus chain. ## `accepts_tab` `true` if pressing the Tab key should insert a tab  character, `false`, if pressing the Tab key should move the  keyboard focus.",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_border_window_size","","Sets the width of `TextWindowType::Left` or `TextWindowType::Right`, or the height of `TextWindowType::Top` or `TextWindowType::Bottom`. Automatically destroys the corresponding window if the size is set to 0, and creates the window if the size is set to non-zero. This function can only be used for the “border windows”, and it won’t work with `TextWindowType::Widget`, `TextWindowType::Text`, or `TextWindowType::Private`. ## `type_` window to affect ## `size` width or height of the window",724,{"inputs":[{"name":"self"},{"name":"textwindowtype"},{"name":"i32"}],"output":null}],[10,"set_bottom_margin","","Sets the bottom margin for text in `self`.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_buffer","","Sets `buffer` as the buffer being displayed by `self`. The previous buffer displayed by the text view is unreferenced, and a reference is added to `buffer`. If you owned a reference to `buffer` before passing it to this function, you must remove that reference yourself; `TextView` will not “adopt” it. ## `buffer` a `TextBuffer`",724,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cursor_visible","","Toggles whether the insertion point should be displayed. A buffer with no editable text probably shouldn’t have a visible cursor, so you may want to turn the cursor off.",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_editable","","Sets the default editability of the `TextView`. You can override this default setting with tags in the buffer, using the “editable” attribute of tags. ## `setting` whether it’s editable",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_indent","","Sets the default indentation for paragraphs in `self`. Tags in the buffer may override the default. ## `indent` indentation in pixels",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_input_hints","","Sets the `TextView:input-hints` property, which allows input methods to fine-tune their behaviour.",724,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[10,"set_input_purpose","","Sets the `TextView:input-purpose` property which can be used by on-screen keyboards and other input methods to adjust their behaviour.",724,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":null}],[10,"set_justification","","Sets the default justification of text in `self`. Tags in the view’s buffer may override the default. ## `justification` justification",724,{"inputs":[{"name":"self"},{"name":"justification"}],"output":null}],[10,"set_left_margin","","Sets the default left margin for text in `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_monospace","","Sets the `TextView:monospace` property, which indicates that the text view should use monospace fonts.",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_overwrite","","Changes the `TextView` overwrite mode. ## `overwrite` `true` to turn on overwrite mode, `false` to turn it off",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pixels_above_lines","","Sets the default number of blank pixels above paragraphs in `self`. Tags in the buffer for `self` may override the defaults. ## `pixels_above_lines` pixels above paragraphs",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_pixels_below_lines","","Sets the default number of pixels of blank space to put below paragraphs in `self`. May be overridden by tags applied to `self`’s buffer. ## `pixels_below_lines` pixels below paragraphs",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_pixels_inside_wrap","","Sets the default number of pixels of blank space to leave between display/wrapped lines within a paragraph. May be overridden by tags in `self`’s buffer. ## `pixels_inside_wrap` default number of pixels between wrapped lines",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_right_margin","","Sets the default right margin for text in the text view. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tabs","","Sets the default tab stops for paragraphs in `self`. Tags in the buffer may override the default. ## `tabs` tabs as a `pango::TabArray`",724,{"inputs":[{"name":"self"},{"name":"tabarray"}],"output":null}],[10,"set_top_margin","","Sets the top margin for text in `self`.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_wrap_mode","","Sets the line wrapping for the view. ## `wrap_mode` a `WrapMode`",724,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"starts_display_line","","Determines whether `iter` is at the start of a display line. See `TextViewExt::forward_display_line` for an explanation of display lines vs. paragraphs. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"window_to_buffer_coords","","Converts coordinates on the window identified by `win` to buffer coordinates, storing the result in (`buffer_x`,`buffer_y`).",724,null],[10,"get_property_im_module","","",724,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_im_module","","",724,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_monospace","","",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_monospace","","",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_populate_all","","",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_populate_all","","",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_backspace","","The ::backspace signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_backspace","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_copy_clipboard","","The ::copy-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to copy the selection to the clipboard.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_copy_clipboard","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_cut_clipboard","","The ::cut-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to cut the selection to the clipboard.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cut_clipboard","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_delete_from_cursor","","The ::delete-from-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a text deletion.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_delete_from_cursor","","",724,{"inputs":[{"name":"self"},{"name":"deletetype"},{"name":"i32"}],"output":null}],[10,"connect_extend_selection","","The ::extend-selection signal is emitted when the selection needs to be extended at `location`.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_at_cursor","","The ::insert-at-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates the insertion of a fixed string at the cursor.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_insert_at_cursor","","",724,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_insert_emoji","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_insert_emoji","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement. If the cursor is not visible in `text_view`, this signal causes the viewport to be moved instead.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",724,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"connect_move_viewport","","The ::move-viewport signal is a [keybinding signal][`BindingSignal`] which can be bound to key combinations to allow the user to move the viewport, i.e. change what part of the text view is visible in a containing scrolled window.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_viewport","","",724,{"inputs":[{"name":"self"},{"name":"scrollstep"},{"name":"i32"}],"output":null}],[10,"connect_paste_clipboard","","The ::paste-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to paste the contents of the clipboard into the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_paste_clipboard","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_populate_popup","","The ::populate-popup signal gets emitted before showing the context menu of the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_changed","","If an input method is used, the typed text will not immediately be committed to the buffer. So if you are interested in the text, connect to this signal.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_preedit_changed","","",724,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_select_all","","The ::select-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to select or unselect the complete contents of the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_set_anchor","","The ::set-anchor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates setting the \"anchor\" mark. The \"anchor\" mark gets placed at the same position as the \"insert\" mark.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_set_anchor","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_toggle_cursor_visible","","The ::toggle-cursor-visible signal is a [keybinding signal][`BindingSignal`] which gets emitted to toggle the `TextView:cursor-visible` property.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_visible","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_toggle_overwrite","","The ::toggle-overwrite signal is a [keybinding signal][`BindingSignal`] which gets emitted to toggle the overwrite mode of the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_overwrite","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_accepts_tab_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_bottom_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_visible_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_im_module_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_hints_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_purpose_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justification_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_monospace_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_overwrite_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_above_lines_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_below_lines_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_inside_wrap_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_populate_all_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tabs_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_top_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToggleButtonExt","","Trait containing all `ToggleButton` methods.",null,null],[10,"get_active","","Queries a `ToggleButton` and returns its current state. Returns `true` if the toggle button is pressed in and `false` if it is raised.",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inconsistent","","Gets the value set by `ToggleButtonExt::set_inconsistent`.",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mode","","Retrieves whether the button is displayed as a separate indicator and label. See `ToggleButtonExt::set_mode`.",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Sets the status of the toggle button. Set to `true` if you want the `ToggleButton` to be “pressed in”, and `false` to raise it. This action causes the `ToggleButton::toggled` signal and the `Button::clicked` signal to be emitted. ## `is_active` `true` or `false`.",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_inconsistent","","If the user has selected a range of elements (such as some text or spreadsheet cells) that are affected by a toggle button, and the current values in that range are inconsistent, you may want to display the toggle in an “in between” state. This function turns on “in between” display. Normally you would turn off the inconsistent state again if the user toggles the toggle button. This has to be done manually, `ToggleButtonExt::set_inconsistent` only affects visual appearance, it doesn’t affect the semantics of the button. ## `setting` `true` if state is inconsistent",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mode","","Sets whether the button is displayed as a separate indicator and label. You can call this function on a checkbutton or a radiobutton with `draw_indicator` = `false` to make the button look like a normal button.",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toggled","","Emits the `ToggleButton::toggled` signal on the `ToggleButton`. There is no good reason for an application ever to call this function.",725,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_draw_indicator","","",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_draw_indicator","","",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_toggled","","Should be connected if you wish to perform an action whenever the `ToggleButton`'s state is changed.",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_indicator_notify","","",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inconsistent_notify","","",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToggleToolButtonExt","","Trait containing all `ToggleToolButton` methods.",null,null],[10,"get_active","","Queries a `ToggleToolButton` and returns its current state. Returns `true` if the toggle button is pressed in and `false` if it is raised.",726,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Sets the status of the toggle tool button. Set to `true` if you want the `ToggleButton` to be “pressed in”, and `false` to raise it. This action causes the toggled signal to be emitted. ## `is_active` whether `self` should be active",726,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_toggled","","Emitted whenever the toggle tool button changes state.",726,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",726,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolButtonExt","","Trait containing all `ToolButton` methods.",null,null],[10,"get_icon_name","","Returns the name of the themed icon for the tool button, see `ToolButtonExt::set_icon_name`.",727,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_widget","","Return the widget used as icon widget on `self`. See `ToolButtonExt::set_icon_widget`.",727,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_label","","Returns the label used by the tool button, or `None` if the tool button doesn’t have a label. or uses a the label from a stock item. The returned string is owned by GTK+, and must not be modified or freed.",727,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_widget","","Returns the widget used as label on `self`. See `ToolButtonExt::set_label_widget`.",727,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_stock_id","","Returns the name of the stock item. See `ToolButtonExt::set_stock_id`. The returned string is owned by GTK+ and must not be freed or modifed.",727,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_use_underline","","Returns whether underscores in the label property are used as mnemonics on menu items on the overflow menu. See `ToolButtonExt::set_use_underline`.",727,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_icon_name","","Sets the icon for the tool button from a named themed icon. See the docs for `IconTheme` for more details. The `ToolButton:icon-name` property only has an effect if not overridden by non-`None` `ToolButton:label-widget`, `ToolButton:icon-widget` and `ToolButton:stock-id` properties. ## `icon_name` the name of the themed icon",727,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_widget","","Sets `icon` as the widget used as icon on `self`. If `icon_widget` is `None` the icon is determined by the `ToolButton:stock-id` property. If the `ToolButton:stock-id` property is also `None`, `self` will not have an icon. ## `icon_widget` the widget used as icon, or `None`",727,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_label","","Sets `label` as the label used for the tool button. The `ToolButton:label` property only has an effect if not overridden by a non-`None` `ToolButton:label-widget` property. If both the `ToolButton:label-widget` and `ToolButton:label` properties are `None`, the label is determined by the `ToolButton:stock-id` property. If the `ToolButton:stock-id` property is also `None`, `self` will not have a label. ## `label` a string that will be used as label, or `None`.",727,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label_widget","","Sets `label_widget` as the widget that will be used as the label for `self`. If `label_widget` is `None` the `ToolButton:label` property is used as label. If `ToolButton:label` is also `None`, the label in the stock item determined by the `ToolButton:stock-id` property is used as label. If `ToolButton:stock-id` is also `None`, `self` does not have a label. ## `label_widget` the widget used as label, or `None`",727,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_stock_id","","Sets the name of the stock item. See `ToolButton::new_from_stock`. The stock_id property only has an effect if not overridden by non-`None` `ToolButton:label-widget` and `ToolButton:icon-widget` properties.",727,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_use_underline","","If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu. For example, if the label property is “_Open” and `use_underline` is `true`, the label on the tool button will be “Open” and the item on the overflow menu will have an underlined “O”.",727,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_clicked","","This signal is emitted when the tool button is clicked with the mouse or activated with the keyboard.",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_clicked","","",727,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_icon_name_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_widget_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolItemExt","","Trait containing all `ToolItem` methods.",null,null],[10,"get_ellipsize_mode","","Returns the ellipsize mode used for `self`. Custom subclasses of `ToolItem` should call this function to find out how text should be ellipsized.",728,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_expand","","Returns whether `self` is allocated extra space. See `ToolItemExt::set_expand`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_homogeneous","","Returns whether `self` is the same size as other homogeneous items. See `ToolItemExt::set_homogeneous`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon_size","","Returns the icon size used for `self`. Custom subclasses of `ToolItem` should call this function to find out what size icons they should use.",728,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_is_important","","Returns whether `self` is considered important. See `ToolItemExt::set_is_important`",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_orientation","","Returns the orientation used for `self`. Custom subclasses of `ToolItem` should call this function to find out what size icons they should use.",728,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_proxy_menu_item","","If `menu_item_id` matches the string passed to `ToolItemExt::set_proxy_menu_item` return the corresponding `MenuItem`.",728,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_relief_style","","Returns the relief style of `self`. See `ButtonExt::set_relief`. Custom subclasses of `ToolItem` should call this function in the handler of the `ToolItem::toolbar_reconfigured` signal to find out the relief style of buttons.",728,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_text_alignment","","Returns the text alignment used for `self`. Custom subclasses of `ToolItem` should call this function to find out how text should be aligned.",728,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_text_orientation","","Returns the text orientation used for `self`. Custom subclasses of `ToolItem` should call this function to find out how text should be orientated.",728,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_text_size_group","","Returns the size group used for labels in `self`. Custom subclasses of `ToolItem` should call this function and use the size group for labels.",728,{"inputs":[{"name":"self"}],"output":{"generics":["sizegroup"],"name":"option"}}],[10,"get_toolbar_style","","Returns the toolbar style used for `self`. Custom subclasses of `ToolItem` should call this function in the handler of the `ToolItem`::toolbar_reconfigured signal to find out in what style the toolbar is displayed and change themselves accordingly",728,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"get_use_drag_window","","Returns whether `self` has a drag window. See `ToolItemExt::set_use_drag_window`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_horizontal","","Returns whether the `self` is visible on toolbars that are docked horizontally.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_vertical","","Returns whether `self` is visible when the toolbar is docked vertically. See `ToolItemExt::set_visible_vertical`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"rebuild_menu","","Calling this function signals to the toolbar that the overflow menu item for `self` has changed. If the overflow menu is visible when this function it called, the menu will be rebuilt.",728,{"inputs":[{"name":"self"}],"output":null}],[10,"retrieve_proxy_menu_item","","Returns the `MenuItem` that was last set by `ToolItemExt::set_proxy_menu_item`, ie. the `MenuItem` that is going to appear in the overflow menu.",728,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_expand","","Sets whether `self` is allocated extra space when there is more room on the toolbar then needed for the items. The effect is that the item gets bigger when the toolbar gets bigger and smaller when the toolbar gets smaller. ## `expand` Whether `self` is allocated extra space",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_homogeneous","","Sets whether `self` is to be allocated the same size as other homogeneous items. The effect is that all homogeneous items will have the same width as the widest of the items. ## `homogeneous` whether `self` is the same size as other homogeneous items",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_is_important","","Sets whether `self` should be considered important. The `ToolButton` class uses this property to determine whether to show or hide its label when the toolbar style is `ToolbarStyle::BothHoriz`. The result is that only tool buttons with the “is_important” property set have labels, an effect known as “priority text” ## `is_important` whether the tool item should be considered important",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_proxy_menu_item","","Sets the `MenuItem` used in the toolbar overflow menu. The `menu_item_id` is used to identify the caller of this function and should also be used with `ToolItemExt::get_proxy_menu_item`. ## `menu_item_id` a string used to identify `menu_item` ## `menu_item` a `MenuItem` to be used in the overflow menu",728,{"inputs":[{"name":"self"},{"name":"str"},{"name":"q"}],"output":null}],[10,"set_use_drag_window","","Sets whether `self` has a drag window. When `true` the toolitem can be used as a drag source through `Widget::drag_source_set`. When `self` has a drag window it will intercept all events, even those that would otherwise be sent to a child of `self`. ## `use_drag_window` Whether `self` has a drag window.",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_horizontal","","Sets whether `self` is visible when the toolbar is docked horizontally. ## `visible_horizontal` Whether `self` is visible when in horizontal mode",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_vertical","","Sets whether `self` is visible when the toolbar is docked vertically. Some tool items, such as text entries, are too wide to be useful on a vertically docked toolbar. If `visible_vertical` is `false` `self` will not appear on toolbars that are docked vertically. ## `visible_vertical` whether `self` is visible when the toolbar is in vertical mode",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toolbar_reconfigured","","Emits the signal `ToolItem::toolbar_reconfigured` on `self`. `Toolbar` and other `ToolShell` implementations use this function to notify children, when some aspect of their configuration changes.",728,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_create_menu_proxy","","This signal is emitted when the toolbar needs information from `tool_item` about whether the item should appear in the toolbar overflow menu. In response the tool item should either",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toolbar_reconfigured","","This signal is emitted when some property of the toolbar that the item is a child of changes. For custom subclasses of `ToolItem`, the default handler of this signal use the functions - `ToolShell::get_orientation` - `ToolShell::get_style` - `ToolShell::get_icon_size` - `ToolShell::get_relief_style` to find out what the toolbar should look like and change themselves accordingly.",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_important_notify","","",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_horizontal_notify","","",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_vertical_notify","","",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolItemGroupExt","","Trait containing all `ToolItemGroup` methods.",null,null],[10,"get_collapsed","","Gets whether `self` is collapsed or expanded.",729,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_drop_item","","Gets the tool item at position (x, y). ## `x` the x position ## `y` the y position",729,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"get_ellipsize","","Gets the ellipsization mode of `self`.",729,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_header_relief","","Gets the relief mode of the header button of `self`.",729,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_item_position","","Gets the position of `item` in `self` as index. ## `item` a `ToolItem`",729,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_label","","Gets the label of `self`.",729,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_widget","","Gets the label widget of `self`. See `ToolItemGroupExt::set_label_widget`.",729,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_n_items","","Gets the number of tool items in `self`.",729,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_nth_item","","Gets the tool item at `index` in group. ## `index` the index",729,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"insert","","Inserts `item` at `position` in the list of children of `self`. ## `item` the `ToolItem` to insert into `self` ## `position` the position of `item` in `self`, starting with 0.  The position -1 means end of list.",729,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_collapsed","","Sets whether the `self` should be collapsed or expanded. ## `collapsed` whether the `self` should be collapsed or expanded",729,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_ellipsize","","Sets the ellipsization mode which should be used by labels in `self`. ## `ellipsize` the `pango::EllipsizeMode` labels in `self` should use",729,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_header_relief","","Set the button relief of the group header. See `ButtonExt::set_relief` for details. ## `style` the `ReliefStyle`",729,{"inputs":[{"name":"self"},{"name":"reliefstyle"}],"output":null}],[10,"set_item_position","","Sets the position of `item` in the list of children of `self`. ## `item` the `ToolItem` to move to a new position, should  be a child of `self`. ## `position` the new position of `item` in `self`, starting with 0.  The position -1 means end of list.",729,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_label","","Sets the label of the tool item group. The label is displayed in the header of the group. ## `label` the new human-readable label of of the group",729,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_label_widget","","Sets the label of the tool item group. The label widget is displayed in the header of the group, in place of the usual label. ## `label_widget` the widget to be displayed in place of the usual label",729,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_item_expand","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_expand","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_fill","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_fill","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_homogeneous","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_homogeneous","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_new_row","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_new_row","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"connect_property_collapsed_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_header_relief_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolPaletteExt","","Trait containing all `ToolPalette` methods.",null,null],[10,"add_drag_dest","","Sets `self` as drag source (see `ToolPaletteExt::set_drag_source`) and sets `widget` as a drag destination for drags from `self`. See `Widget::drag_dest_set`. ## `widget` a `Widget` which should be a drag destination for `self` ## `flags` the flags that specify what actions GTK+ should take for drops  on that widget ## `targets` the `ToolPaletteDragTargets` which the widget  should support ## `actions` the `GdkDragActions` which the widget should suppport",730,{"inputs":[{"name":"self"},{"name":"p"},{"name":"destdefaults"},{"name":"toolpalettedragtargets"},{"name":"dragaction"}],"output":null}],[10,"get_drag_item","","Get the dragged item from the selection. This could be a `ToolItem` or a `ToolItemGroup`. ## `selection` a `SelectionData`",730,{"inputs":[{"name":"self"},{"name":"selectiondata"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_drop_group","","Gets the group at position (x, y). ## `x` the x position ## `y` the y position",730,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["toolitemgroup"],"name":"option"}}],[10,"get_drop_item","","Gets the item at position (x, y). See `ToolPaletteExt::get_drop_group`. ## `x` the x position ## `y` the y position",730,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"get_exclusive","","Gets whether `group` is exclusive or not. See `ToolPaletteExt::set_exclusive`. ## `group` a `ToolItemGroup` which is a child of palette",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"}],"output":{"name":"bool"}}],[10,"get_expand","","Gets whether group should be given extra space. See `ToolPaletteExt::set_expand`. ## `group` a `ToolItemGroup` which is a child of palette",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"}],"output":{"name":"bool"}}],[10,"get_group_position","","Gets the position of `group` in `self` as index. See `ToolPaletteExt::set_group_position`. ## `group` a `ToolItemGroup`",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"}],"output":{"name":"i32"}}],[10,"get_icon_size","","Gets the size of icons in the tool palette. See `ToolPaletteExt::set_icon_size`.",730,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_style","","Gets the style (icons, text or both) of items in the tool palette.",730,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_drag_source","","Sets the tool palette as a drag source. Enables all groups and items in the tool palette as drag sources on button 1 and button 3 press with copy and move actions. See `Widget::drag_source_set`. ## `targets` the `ToolPaletteDragTargets`  which the widget should support",730,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[10,"set_exclusive","","Sets whether the group should be exclusive or not. If an exclusive group is expanded all other groups are collapsed. ## `group` a `ToolItemGroup` which is a child of palette ## `exclusive` whether the group should be exclusive or not",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"},{"name":"bool"}],"output":null}],[10,"set_expand","","Sets whether the group should be given extra space. ## `group` a `ToolItemGroup` which is a child of palette ## `expand` whether the group should be given extra space",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"},{"name":"bool"}],"output":null}],[10,"set_group_position","","Sets the position of the group as an index of the tool palette. If position is 0 the group will become the first child, if position is -1 it will become the last child. ## `group` a `ToolItemGroup` which is a child of palette ## `position` a new index for group",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"},{"name":"i32"}],"output":null}],[10,"set_icon_size","","Sets the size of icons in the tool palette. ## `icon_size` the `IconSize` that icons in the tool  palette shall have",730,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_style","","Sets the style (text, icons or both) of items in the tool palette. ## `style` the `ToolbarStyle` that items in the tool palette shall have",730,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"unset_icon_size","","Unsets the tool palette icon size set with `ToolPaletteExt::set_icon_size`, so that user preferences will be used to determine the icon size.",730,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_style","","Unsets a toolbar style set with `ToolPaletteExt::set_style`, so that user preferences will be used to determine the toolbar style.",730,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_icon_size_set","","",730,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_icon_size_set","","",730,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_toolbar_style","","",730,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_property_toolbar_style","","",730,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"connect_property_icon_size_notify","","",730,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_set_notify","","",730,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_toolbar_style_notify","","",730,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolShellExt","","Trait containing all `ToolShell` methods.",null,null],[10,"get_ellipsize_mode","","Retrieves the current ellipsize mode for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_ellipsize_mode` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_icon_size","","Retrieves the icon size for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_icon_size` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_orientation","","Retrieves the current orientation for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_orientation` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_relief_style","","Returns the relief style of buttons on `self`. Tool items must not call this function directly, but rely on `ToolItemExt::get_relief_style` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_style","","Retrieves whether the tool shell has text, icons, or both. Tool items must not call this function directly, but rely on `ToolItemExt::get_toolbar_style` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"get_text_alignment","","Retrieves the current text alignment for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_text_alignment` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_text_orientation","","Retrieves the current text orientation for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_text_orientation` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_text_size_group","","Retrieves the current text size group for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_text_size_group` instead.",731,{"inputs":[{"name":"self"}],"output":{"generics":["sizegroup"],"name":"option"}}],[10,"rebuild_menu","","Calling this function signals the tool shell that the overflow menu item for tool items have changed. If there is an overflow menu and if it is visible when this function it called, the menu will be rebuilt.",731,{"inputs":[{"name":"self"}],"output":null}],[8,"ToolbarExt","","Trait containing all `Toolbar` methods.",null,null],[10,"get_drop_index","","Returns the position corresponding to the indicated point on `self`. This is useful when dragging items to the toolbar: this function returns the position a new item should be inserted.",732,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_icon_size","","Retrieves the icon size for the toolbar. See `ToolbarExt::set_icon_size`.",732,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"get_item_index","","Returns the position of `item` on the toolbar, starting from 0. It is an error if `item` is not a child of the toolbar. ## `item` a `ToolItem` that is a child of `self`",732,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_n_items","","Returns the number of items on the toolbar.",732,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_nth_item","","Returns the `n`'th item on `self`, or `None` if the toolbar does not contain an `n`'th item. ## `n` A position on the toolbar",732,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"get_show_arrow","","Returns whether the toolbar has an overflow menu. See `ToolbarExt::set_show_arrow`.",732,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"insert","","Insert a `ToolItem` into the toolbar at position `pos`. If `pos` is 0 the item is prepended to the start of the toolbar. If `pos` is negative, the item is appended to the end of the toolbar. ## `item` a `ToolItem` ## `pos` the position of the new item",732,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_drop_highlight_item","","Highlights `self` to give an idea of what it would look like if `item` was added to `self` at the position indicated by `index_`. If `item` is `None`, highlighting is turned off. In that case `index_` is ignored.",732,{"inputs":[{"name":"self"},{"name":"q"},{"name":"i32"}],"output":null}],[10,"set_icon_size","","This function sets the size of stock icons in the toolbar. You can call it both before you add the icons and after they’ve been added. The size you set will override user preferences for the default icon size.",732,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"set_show_arrow","","Sets whether to show an overflow menu when `self` doesn’t have room for all items on it. If `true`, items that there are not room are available through an overflow menu. ## `show_arrow` Whether to show an overflow menu",732,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_style","","Alters the view of `self` to display either icons only, text only, or both. ## `style` the new style for `self`.",732,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"unset_icon_size","","Unsets toolbar icon size set with `ToolbarExt::set_icon_size`, so that user preferences will be used to determine the icon size.",732,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_style","","Unsets a toolbar style set with `ToolbarExt::set_style`, so that user preferences will be used to determine the toolbar style.",732,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_icon_size_set","","",732,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_icon_size_set","","",732,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_toolbar_style","","",732,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_property_toolbar_style","","",732,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"get_item_expand","","",732,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_expand","","",732,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_homogeneous","","",732,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_homogeneous","","",732,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"connect_focus_home_or_end","","A keybinding signal used internally by GTK+. This signal can't be used in application code ## `focus_home` `true` if the first item should be focused",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_focus_home_or_end","","",732,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_orientation_changed","","Emitted when the orientation of the toolbar changes. ## `orientation` the new `Orientation` of the toolbar",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_popup_context_menu","","Emitted when the user right-clicks the toolbar or uses the keybinding to display a popup menu.",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_style_changed","","Emitted when the style of the toolbar changes. ## `style` the new `ToolbarStyle` of the toolbar",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_set_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_arrow_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_toolbar_style_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TooltipExt","","Trait containing all `Tooltip` methods.",null,null],[10,"set_custom","","Replaces the widget packed into the tooltip with `custom_widget`. `custom_widget` does not get destroyed when the tooltip goes away. By default a box with a `Image` and `Label` is embedded in the tooltip, which can be configured using `TooltipExt::set_markup` and `TooltipExt::set_icon`. ## `custom_widget` a `Widget`, or `None` to unset the old custom widget.",733,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon","","Sets the icon of the tooltip (which is in front of the text) to be `pixbuf`. If `pixbuf` is `None`, the image will be hidden. ## `pixbuf` a `gdk_pixbuf::Pixbuf`, or `None`",733,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_from_gicon","","Sets the icon of the tooltip (which is in front of the text) to be the icon indicated by `gicon` with the size indicated by `size`. If `gicon` is `None`, the image will be hidden. ## `gicon` a `gio::Icon` representing the icon, or `None` ## `size` a stock icon size (`IconSize`)",733,{"inputs":[{"name":"self"},{"name":"q"},{"name":"i32"}],"output":null}],[10,"set_icon_from_icon_name","","Sets the icon of the tooltip (which is in front of the text) to be the icon indicated by `icon_name` with the size indicated by `size`. If `icon_name` is `None`, the image will be hidden. ## `icon_name` an icon name, or `None` ## `size` a stock icon size (`IconSize`)",733,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_icon_from_stock","","Sets the icon of the tooltip (which is in front of the text) to be the stock item indicated by `stock_id` with the size indicated by `size`. If `stock_id` is `None`, the image will be hidden.",733,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_markup","","Sets the text of the tooltip to be `markup`, which is marked up with the [Pango text markup language][PangoMarkupFormat]. If `markup` is `None`, the label will be hidden. ## `markup` a markup string (see [Pango markup format][PangoMarkupFormat]) or `None`",733,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_text","","Sets the text of the tooltip to be `text`. If `text` is `None`, the label will be hidden. See also `TooltipExt::set_markup`. ## `text` a text string or `None`",733,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tip_area","","Sets the area of the widget, where the contents of this tooltip apply, to be `rect` (in widget coordinates). This is especially useful for properly setting tooltips on `TreeView` rows and cells, `GtkIconViews`, etc.",733,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[8,"TreeModelExt","","Trait containing all `TreeModel` methods.",null,null],[10,"get_column_type","","Returns the type of the column. ## `index_` the column index",734,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"type"}}],[10,"get_flags","","Returns a set of flags supported by this interface.",734,{"inputs":[{"name":"self"}],"output":{"name":"treemodelflags"}}],[10,"get_iter","","Sets `iter` to a valid iterator pointing to `path`. If `path` does not exist, `iter` is set to an invalid iterator and `false` is returned. ## `iter` the uninitialized `TreeIter`-struct ## `path` the `TreePath`-struct",734,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_iter_first","","Initializes `iter` with the first iterator in the tree (the one at the path \"0\") and returns `true`. Returns `false` if the tree is empty. ## `iter` the uninitialized `TreeIter`-struct",734,{"inputs":[{"name":"self"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_iter_from_string","","Sets `iter` to a valid iterator pointing to `path_string`, if it exists. Otherwise, `iter` is left invalid and `false` is returned. ## `iter` an uninitialized `TreeIter`-struct ## `path_string` a string representation of a `TreePath`-struct",734,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_n_columns","","Returns the number of columns supported by `self`.",734,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_path","","Returns a newly-created `TreePath`-struct referenced by `iter`.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_string_from_iter","","Generates a string representation of the iter.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_value","","Initializes and sets `value` to that at `column`.",734,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"i32"}],"output":{"name":"value"}}],[10,"iter_children","","Sets `iter` to point to the first child of `parent`.",734,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"iter_has_child","","Returns `true` if `iter` has children, `false` otherwise. ## `iter` the `TreeIter`-struct to test for children",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"iter_n_children","","Returns the number of children that `iter` has.",734,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"iter_next","","Sets `iter` to point to the node following it at the current level.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"iter_nth_child","","Sets `iter` to be the child of `parent`, using the given index.",734,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"iter_parent","","Sets `iter` to be the parent of `child`.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"iter_previous","","Sets `iter` to point to the previous node at the current level.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"row_changed","","Emits the `TreeModel::row-changed` signal on `self`. ## `path` a `TreePath`-struct pointing to the changed row ## `iter` a valid `TreeIter`-struct pointing to the changed row",734,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeiter"}],"output":null}],[10,"row_deleted","","Emits the `TreeModel::row-deleted` signal on `self`.",734,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"row_has_child_toggled","","Emits the `TreeModel::row-has-child-toggled` signal on `self`. This should be called by models after the child state of a node changes. ## `path` a `TreePath`-struct pointing to the changed row ## `iter` a valid `TreeIter`-struct pointing to the changed row",734,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeiter"}],"output":null}],[10,"row_inserted","","Emits the `TreeModel::row-inserted` signal on `self`. ## `path` a `TreePath`-struct pointing to the inserted row ## `iter` a valid `TreeIter`-struct pointing to the inserted row",734,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeiter"}],"output":null}],[10,"rows_reordered_with_length","","Emits the `TreeModel::rows-reordered` signal on `self`.",734,null],[10,"sort_new_with_model","","Creates a new `TreeModel`, with `self` as the child model.",734,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"connect_row_changed","","This signal is emitted when a row in the model has changed. ## `path` a `TreePath`-struct identifying the changed row ## `iter` a valid `TreeIter`-struct pointing to the changed row",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_deleted","","This signal is emitted when a row has been deleted.",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_has_child_toggled","","This signal is emitted when a row has gotten the first child row or lost its last child row. ## `path` a `TreePath`-struct identifying the row ## `iter` a valid `TreeIter`-struct pointing to the row",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_inserted","","This signal is emitted when a new row has been inserted in the model.",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeModelFilterExt","","Trait containing all `TreeModelFilter` methods.",null,null],[10,"clear_cache","","This function should almost never be called. It clears the `self` of any cached iterators that haven’t been reffed with `TreeModel::ref_node`. This might be useful if the child model being filtered is static (and doesn’t change often) and there has been a lot of unreffed access to nodes. As a side effect of this function, all unreffed iters will be invalid.",735,{"inputs":[{"name":"self"}],"output":null}],[10,"convert_child_iter_to_iter","","Sets `filter_iter` to point to the row in `self` that corresponds to the row pointed at by `child_iter`. If `filter_iter` was not set, `false` is returned. ## `filter_iter` An uninitialized `TreeIter`. ## `child_iter` A valid `TreeIter` pointing to a row on the child model.",735,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"convert_child_path_to_path","","Converts `child_path` to a path relative to `self`. That is, `child_path` points to a path in the child model. The rerturned path will point to the same row in the filtered model. If `child_path` isn’t a valid path on the child model or points to a row which is not visible in `self`, then `None` is returned. ## `child_path` A `TreePath` to convert.",735,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"convert_iter_to_child_iter","","Sets `child_iter` to point to the row pointed to by `filter_iter`. ## `child_iter` An uninitialized `TreeIter`. ## `filter_iter` A valid `TreeIter` pointing to a row on `self`.",735,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"treeiter"}}],[10,"convert_path_to_child_path","","Converts `filter_path` to a path on the child model of `self`. That is, `filter_path` points to a location in `self`. The returned path will point to the same location in the model not being filtered. If `filter_path` does not point to a location in the child model, `None` is returned. ## `filter_path` A `TreePath` to convert.",735,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_model","","Returns a pointer to the child model of `self`.",735,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"refilter","","Emits ::row_changed for each row in the child model, which causes the filter to re-evaluate whether a row is visible or not.",735,{"inputs":[{"name":"self"}],"output":null}],[10,"set_visible_column","","Sets `column` of the child_model to be the column where `self` should look for visibility information. `columns` should be a column of type `G_TYPE_BOOLEAN`, where `true` means that a row is visible, and `false` if not.",735,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_child_model","","",735,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"connect_property_child_model_notify","","",735,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeSelectionExt","","Trait containing all `TreeSelection` methods.",null,null],[10,"count_selected_rows","","Returns the number of rows that have been selected in `tree`.",736,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_mode","","Gets the selection mode for `self`. See `TreeSelectionExt::set_mode`.",736,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"get_selected","","Sets `iter` to the currently selected node if `self` is set to `SelectionMode::Single` or `SelectionMode::Browse`. `iter` may be NULL if you just want to test if `self` has any selected nodes. `model` is filled with the current model as a convenience. This function will not work if you use `self` is `SelectionMode::Multiple`. ## `model` A pointer to set to the `TreeModel`, or NULL. ## `iter` The `TreeIter`, or NULL.",736,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_selected_rows","","Creates a list of path of all selected rows. Additionally, if you are planning on modifying the model after calling this function, you may want to convert the returned list into a list of `GtkTreeRowReferences`. To do this, you can use `TreeRowReference::new`.",736,null],[10,"get_tree_view","","Returns the tree view associated with `self`.",736,{"inputs":[{"name":"self"}],"output":{"generics":["treeview"],"name":"option"}}],[10,"iter_is_selected","","Returns `true` if the row at `iter` is currently selected. ## `iter` A valid `TreeIter`",736,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"path_is_selected","","Returns `true` if the row pointed to by `path` is currently selected. If `path` does not point to a valid location, `false` is returned ## `path` A `TreePath` to check selection on.",736,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"select_all","","Selects all the nodes. `self` must be set to `SelectionMode::Multiple` mode.",736,{"inputs":[{"name":"self"}],"output":null}],[10,"select_iter","","Selects the specified iterator. ## `iter` The `TreeIter` to be selected.",736,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":null}],[10,"select_path","","Select the row at `path`. ## `path` The `TreePath` to be selected.",736,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"select_range","","Selects a range of nodes, determined by `start_path` and `end_path` inclusive. `self` must be set to `SelectionMode::Multiple` mode. ## `start_path` The initial node of the range. ## `end_path` The final node of the range.",736,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treepath"}],"output":null}],[10,"set_mode","","Sets the selection mode of the `self`. If the previous type was `SelectionMode::Multiple`, then the anchor is kept selected, if it was previously selected. ## `type_` The selection mode",736,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"unselect_all","","Unselects all the nodes.",736,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_iter","","Unselects the specified iterator. ## `iter` The `TreeIter` to be unselected.",736,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":null}],[10,"unselect_path","","Unselects the row at `path`. ## `path` The `TreePath` to be unselected.",736,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"unselect_range","","Unselects a range of nodes, determined by `start_path` and `end_path` inclusive. ## `start_path` The initial node of the range. ## `end_path` The initial node of the range.",736,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treepath"}],"output":null}],[10,"connect_changed","","Emitted whenever the selection has (possibly) changed. Please note that this signal is mostly a hint. It may only be emitted once when a range of rows are selected, and it may occasionally be emitted when nothing has happened.",736,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",736,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeSortableExt","","Trait containing all `TreeSortable` methods.",null,null],[10,"has_default_sort_func","","Returns `true` if the model has a default sort function. This is used primarily by `GtkTreeViewColumns` in order to determine if a model can go back to the default state, or not.",737,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"sort_column_changed","","Emits a `TreeSortable::sort-column-changed` signal on `self`.",737,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_sort_column_changed","","The ::sort-column-changed signal is emitted when the sort column or sort order of `sortable` is changed. The signal is emitted before the contents of `sortable` are resorted.",737,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeStoreExt","","Trait containing all `TreeStore` methods.",null,null],[10,"append","","Appends a new row to `self`. If `parent` is non-`None`, then it will append the new row after the last child of `parent`, otherwise it will append a row to the top level. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `TreeStoreExt::set` or `TreeStore::set_value`. ## `iter` An unset `TreeIter` to set to the appended row ## `parent` A valid `TreeIter`, or `None`",738,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"clear","","Removes all rows from `self`",738,{"inputs":[{"name":"self"}],"output":null}],[10,"insert","","Creates a new row at `position`. If parent is non-`None`, then the row will be made a child of `parent`. Otherwise, the row will be created at the toplevel. If `position` is -1 or is larger than the number of rows at that level, then the new row will be inserted to the end of the list. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `TreeStoreExt::set` or `TreeStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `parent` A valid `TreeIter`, or `None` ## `position` position to insert the new row, or -1 for last",738,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"name":"treeiter"}}],[10,"insert_after","","Inserts a new row after `sibling`. If `sibling` is `None`, then the row will be prepended to `parent` ’s children. If `parent` and `sibling` are `None`, then the row will be prepended to the toplevel. If both `sibling` and `parent` are set, then `parent` must be the parent of `sibling`. When `sibling` is set, `parent` is optional.",738,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"treeiter"}}],[10,"insert_before","","Inserts a new row before `sibling`. If `sibling` is `None`, then the row will be appended to `parent` ’s children. If `parent` and `sibling` are `None`, then the row will be appended to the toplevel. If both `sibling` and `parent` are set, then `parent` must be the parent of `sibling`. When `sibling` is set, `parent` is optional.",738,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"treeiter"}}],[10,"is_ancestor","","Returns `true` if `iter` is an ancestor of `descendant`. That is, `iter` is the parent (or grandparent or great-grandparent) of `descendant`. ## `iter` A valid `TreeIter` ## `descendant` A valid `TreeIter`",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"iter_depth","","Returns the depth of `iter`. This will be 0 for anything on the root level, 1 for anything down a level, etc. ## `iter` A valid `TreeIter`",738,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"i32"}}],[10,"iter_is_valid","","WARNING: This function is slow. Only use it for debugging and/or testing purposes.",738,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"move_after","","Moves `iter` in `self` to the position after `position`. `iter` and `position` should be in the same level. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the start of the level. ## `iter` A `TreeIter`. ## `position` A `TreeIter`.",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"move_before","","Moves `iter` in `self` to the position before `position`. `iter` and `position` should be in the same level. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the end of the level. ## `iter` A `TreeIter`. ## `position` A `TreeIter` or `None`.",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"prepend","","Prepends a new row to `self`. If `parent` is non-`None`, then it will prepend the new row before the first child of `parent`, otherwise it will prepend a row to the top level. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `TreeStoreExt::set` or `TreeStore::set_value`. ## `iter` An unset `TreeIter` to set to the prepended row ## `parent` A valid `TreeIter`, or `None`",738,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"remove","","Removes `iter` from `self`. After being removed, `iter` is set to the next valid row at that level, or invalidated if it previously pointed to the last one. ## `iter` A valid `TreeIter`",738,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"swap","","Swaps `a` and `b` in the same level of `self`. Note that this function only works with unsorted stores. ## `a` A `TreeIter`. ## `b` Another `TreeIter`.",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"treeiter"}],"output":null}],[8,"TreeViewExt","","Trait containing all `TreeView` methods.",null,null],[10,"append_column","","Appends `column` to the list of columns. If `self` has “fixed_height” mode enabled, then `column` must have its “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED. ## `column` The `TreeViewColumn` to add.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"}],"output":{"name":"i32"}}],[10,"collapse_all","","Recursively collapses all visible, expanded nodes in `self`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"collapse_row","","Collapses a row (hides its child rows, if they exist). ## `path` path to a row in the `self`",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"columns_autosize","","Resizes all columns to their optimal width. Only works after the treeview has been realized.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"convert_bin_window_to_tree_coords","","Converts bin_window coordinates to coordinates for the tree (the full scrollable area of the tree). ## `bx` X coordinate relative to bin_window ## `by` Y coordinate relative to bin_window ## `tx` return location for tree X coordinate ## `ty` return location for tree Y coordinate",739,null],[10,"convert_bin_window_to_widget_coords","","Converts bin_window coordinates (see `TreeViewExt::get_bin_window`) to widget relative coordinates. ## `bx` bin_window X coordinate ## `by` bin_window Y coordinate ## `wx` return location for widget X coordinate ## `wy` return location for widget Y coordinate",739,null],[10,"convert_tree_to_bin_window_coords","","Converts tree coordinates (coordinates in full scrollable area of the tree) to bin_window coordinates. ## `tx` tree X coordinate ## `ty` tree Y coordinate ## `bx` return location for X coordinate relative to bin_window ## `by` return location for Y coordinate relative to bin_window",739,null],[10,"convert_tree_to_widget_coords","","Converts tree coordinates (coordinates in full scrollable area of the tree) to widget coordinates. ## `tx` X coordinate relative to the tree ## `ty` Y coordinate relative to the tree ## `wx` return location for widget X coordinate ## `wy` return location for widget Y coordinate",739,null],[10,"convert_widget_to_bin_window_coords","","Converts widget coordinates to coordinates for the bin_window (see `TreeViewExt::get_bin_window`). ## `wx` X coordinate relative to the widget ## `wy` Y coordinate relative to the widget ## `bx` return location for bin_window X coordinate ## `by` return location for bin_window Y coordinate",739,null],[10,"convert_widget_to_tree_coords","","Converts widget coordinates to coordinates for the tree (the full scrollable area of the tree). ## `wx` X coordinate relative to the widget ## `wy` Y coordinate relative to the widget ## `tx` return location for tree X coordinate ## `ty` return location for tree Y coordinate",739,null],[10,"create_row_drag_icon","","Creates a `cairo::Surface` representation of the row at `path`. This image is used for a drag icon. ## `path` a `TreePath` in `self`",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["surface"],"name":"option"}}],[10,"expand_all","","Recursively expands all nodes in the `self`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"expand_row","","Opens the row so its children are visible. ## `path` path to a row ## `open_all` whether to recursively expand, or just expand immediate children",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"expand_to_path","","Expands the row at `path`. This will also expand all parent rows of `path` as necessary. ## `path` path to a row.",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"get_activate_on_single_click","","Gets the setting set by `TreeViewExt::set_activate_on_single_click`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_background_area","","Fills the bounding rectangle in bin_window coordinates for the cell at the row specified by `path` and the column specified by `column`. If `path` is `None`, or points to a node not found in the tree, the `y` and `height` fields of the rectangle will be filled with 0. If `column` is `None`, the `x` and `width` fields will be filled with 0. The returned rectangle is equivalent to the `background_area` passed to `CellRendererExt::render`. These background areas tile to cover the entire bin window. Contrast with the `cell_area`, returned by `TreeViewExt::get_cell_area`, which returns only the cell itself, excluding surrounding borders and the tree expander area. ## `path` a `TreePath` for the row, or `None` to get only horizontal coordinates ## `column` a `TreeViewColumn` for the column, or `None` to get only vertical coordiantes ## `rect` rectangle to fill with cell background rect",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"rectangle"}}],[10,"get_bin_window","","Returns the window that `self` renders to. This is used primarily to compare to `event->window` to confirm that the event on `self` is on the right window.",739,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_cell_area","","Fills the bounding rectangle in bin_window coordinates for the cell at the row specified by `path` and the column specified by `column`. If `path` is `None`, or points to a path not currently displayed, the `y` and `height` fields of the rectangle will be filled with 0. If `column` is `None`, the `x` and `width` fields will be filled with 0. The sum of all cell rects does not cover the entire tree; there are extra pixels in between rows, for example. The returned rectangle is equivalent to the `cell_area` passed to `CellRendererExt::render`. This function is only valid if `self` is realized. ## `path` a `TreePath` for the row, or `None` to get only horizontal coordinates ## `column` a `TreeViewColumn` for the column, or `None` to get only vertical coordinates ## `rect` rectangle to fill with cell rect",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"rectangle"}}],[10,"get_column","","Gets the `TreeViewColumn` at the given position in the `tree_view`. ## `n` The position of the column, counting from 0.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["treeviewcolumn"],"name":"option"}}],[10,"get_columns","","Returns a `glib::List` of all the `TreeViewColumn` s currently in `self`. The returned list must be freed with g_list_free ().",739,{"inputs":[{"name":"self"}],"output":{"generics":["treeviewcolumn"],"name":"vec"}}],[10,"get_cursor","","Fills in `path` and `focus_column` with the current path and focus column. If the cursor isn’t currently set, then *`path` will be `None`. If no column currently has focus, then *`focus_column` will be `None`.",739,null],[10,"get_dest_row_at_pos","","Determines the destination row for a given position. `drag_x` and `drag_y` are expected to be in widget coordinates. This function is only meaningful if `self` is realized. Therefore this function will always return `false` if `self` is not realized or does not have a model. ## `drag_x` the position to determine the destination row for ## `drag_y` the position to determine the destination row for ## `path` Return location for the path of  the highlighted row, or `None`. ## `pos` Return location for the drop position, or  `None`",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_drag_dest_row","","Gets information about the row that is highlighted for feedback. ## `path` Return location for the path of the highlighted row, or `None`. ## `pos` Return location for the drop position, or `None`",739,null],[10,"get_enable_search","","Returns whether or not the tree allows to start interactive searching by typing in text.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_enable_tree_lines","","Returns whether or not tree lines are drawn in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_expander_column","","Returns the column that is the current expander column. This column has the expander arrow drawn next to it.",739,{"inputs":[{"name":"self"}],"output":{"generics":["treeviewcolumn"],"name":"option"}}],[10,"get_fixed_height_mode","","Returns whether fixed height mode is turned on for `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_grid_lines","","Returns which grid lines are enabled in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"treeviewgridlines"}}],[10,"get_headers_clickable","","Returns whether all header columns are clickable.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_headers_visible","","Returns `true` if the headers on the `self` are visible.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hover_expand","","Returns whether hover expansion mode is turned on for `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hover_selection","","Returns whether hover selection mode is turned on for `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_level_indentation","","Returns the amount, in pixels, of extra indentation for child levels in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the model the `TreeView` is based on. Returns `None` if the model is unset.",739,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_n_columns","","Queries the number of columns in the given `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_path_at_pos","","Finds the path at the point (`x`, `y`), relative to bin_window coordinates (please see `TreeViewExt::get_bin_window`). That is, `x` and `y` are relative to an events coordinates. `x` and `y` must come from an event on the `self` only where `event->window == gtk_tree_view_get_bin_window ()`. It is primarily for things like popup menus. If `path` is non-`None`, then it will be filled with the `TreePath` at that point. This path should be freed with `TreePath::free`. If `column` is non-`None`, then it will be filled with the column at that point. `cell_x` and `cell_y` return the coordinates relative to the cell background (i.e. the `background_area` passed to `CellRendererExt::render`). This function is only meaningful if `self` is realized. Therefore this function will always return `false` if `self` is not realized or does not have a model.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_reorderable","","Retrieves whether the user can reorder the tree via drag-and-drop. See `TreeViewExt::set_reorderable`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_rubber_banding","","Returns whether rubber banding is turned on for `self`. If the selection mode is `SelectionMode::Multiple`, rubber banding will allow the user to select multiple rows by dragging the mouse.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_rules_hint","","Gets the setting set by `TreeViewExt::set_rules_hint`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_search_column","","Gets the column searched on by the interactive search code.",739,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_search_entry","","Returns the `Entry` which is currently in use as interactive search entry for `self`. In case the built-in entry is being used, `None` will be returned.",739,{"inputs":[{"name":"self"}],"output":{"generics":["entry"],"name":"option"}}],[10,"get_selection","","Gets the `TreeSelection` associated with `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"treeselection"}}],[10,"get_show_expanders","","Returns whether or not expanders are drawn in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tooltip_column","","Returns the column of `self`’s model which is being used for displaying tooltips on `self`’s rows.",739,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tooltip_context","","This function is supposed to be used in a `Widget::query-tooltip` signal handler for `TreeView`. The `x`, `y` and `keyboard_tip` values which are received in the signal handler, should be passed to this function without modification.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"option"}}],[10,"get_visible_range","","Sets `start_path` and `end_path` to be the first and last visible path. Note that there may be invisible paths in between.",739,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_visible_rect","","Fills `visible_rect` with the currently-visible region of the buffer, in tree coordinates. Convert to bin_window coordinates with `TreeViewExt::convert_tree_to_bin_window_coords`. Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire scrollable area of the tree. ## `visible_rect` rectangle to fill",739,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"insert_column","","This inserts the `column` into the `self` at `position`. If `position` is -1, then the column is inserted at the end. If `self` has “fixed_height” mode enabled, then `column` must have its “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED. ## `column` The `TreeViewColumn` to be inserted. ## `position` The position to insert `column` in.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"is_blank_at_pos","","Determine whether the point (`x`, `y`) in `self` is blank, that is no cell content nor an expander arrow is drawn at the location. If so, the location can be considered as the background. You might wish to take special action on clicks on the background, such as clearing a current selection, having a custom context menu or starting rubber banding.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"is_rubber_banding_active","","Returns whether a rubber banding operation is currently being done in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"move_column_after","","Moves `column` to be after to `base_column`. If `base_column` is `None`, then `column` is placed in the first position. ## `column` The `TreeViewColumn` to be moved. ## `base_column` The `TreeViewColumn` to be moved relative to, or `None`.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"},{"name":"p"}],"output":null}],[10,"remove_column","","Removes `column` from `self`. ## `column` The `TreeViewColumn` to remove.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"}],"output":{"name":"i32"}}],[10,"row_activated","","Activates the cell determined by `path` and `column`. ## `path` The `TreePath` to be activated. ## `column` The `TreeViewColumn` to be activated.",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeviewcolumn"}],"output":null}],[10,"row_expanded","","Returns `true` if the node pointed to by `path` is expanded in `self`. ## `path` A `TreePath` to test expansion state.",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"scroll_to_cell","","Moves the alignments of `self` to the position specified by `column` and `path`. If `column` is `None`, then no horizontal scrolling occurs. Likewise, if `path` is `None` no vertical scrolling occurs. At a minimum, one of `column` or `path` need to be non-`None`. `row_align` determines where the row is placed, and `col_align` determines where `column` is placed. Both are expected to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means center.",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"bool"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"scroll_to_point","","Scrolls the tree view such that the top-left corner of the visible area is `tree_x`, `tree_y`, where `tree_x` and `tree_y` are specified in tree coordinates. The `self` must be realized before this function is called. If it isn't, you probably want to be using `TreeViewExt::scroll_to_cell`.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_activate_on_single_click","","Cause the `TreeView::row-activated` signal to be emitted on a single click instead of a double click.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_cursor","","Sets the current keyboard focus to be at `path`, and selects it. This is useful when you want to focus the user’s attention on a particular row. If `focus_column` is not `None`, then focus is given to the column specified by it. Additionally, if `focus_column` is specified, and `start_editing` is `true`, then editing should be started in the specified cell. This function is often followed by `WidgetExt::grab_focus` (`self`) in order to give keyboard focus to the widget. Please note that editing can only happen when the widget is realized.",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_cursor_on_cell","","Sets the current keyboard focus to be at `path`, and selects it. This is useful when you want to focus the user’s attention on a particular row. If `focus_column` is not `None`, then focus is given to the column specified by it. If `focus_column` and `focus_cell` are not `None`, and `focus_column` contains 2 or more editable or activatable cells, then focus is given to the cell specified by `focus_cell`. Additionally, if `focus_column` is specified, and `start_editing` is `true`, then editing should be started in the specified cell. This function is often followed by `WidgetExt::grab_focus` (`self`) in order to give keyboard focus to the widget. Please note that editing can only happen when the widget is realized.",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"p"},{"name":"r"},{"name":"bool"}],"output":null}],[10,"set_drag_dest_row","","Sets the row that is highlighted for feedback. If `path` is `None`, an existing highlight is removed. ## `path` The path of the row to highlight, or `None` ## `pos` Specifies whether to drop before, after or into the row",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"treeviewdropposition"}],"output":null}],[10,"set_enable_search","","If `enable_search` is set, then the user can type in text to search through the tree interactively (this is sometimes called \"typeahead find\").",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_enable_tree_lines","","Sets whether to draw lines interconnecting the expanders in `self`. This does not have any visible effects for lists. ## `enabled` `true` to enable tree line drawing, `false` otherwise.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_expander_column","","Sets the column to draw the expander arrow at. It must be in `self`. If `column` is `None`, then the expander arrow is always at the first visible column.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"}],"output":null}],[10,"set_fixed_height_mode","","Enables or disables the fixed height mode of `self`. Fixed height mode speeds up `TreeView` by assuming that all rows have the same height. Only enable this option if all rows are the same height and all columns are of type `TreeViewColumnSizing::Fixed`. ## `enable` `true` to enable fixed height mode",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_grid_lines","","Sets which grid lines to draw in `self`. ## `grid_lines` a `TreeViewGridLines` value indicating which grid lines to enable.",739,{"inputs":[{"name":"self"},{"name":"treeviewgridlines"}],"output":null}],[10,"set_headers_clickable","","Allow the column title buttons to be clicked. ## `setting` `true` if the columns are clickable.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_headers_visible","","Sets the visibility state of the headers. ## `headers_visible` `true` if the headers are visible",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hover_expand","","Enables or disables the hover expansion mode of `self`. Hover expansion makes rows expand or collapse if the pointer moves over them. ## `expand` `true` to enable hover selection mode",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hover_selection","","Enables or disables the hover selection mode of `self`. Hover selection makes the selected row follow the pointer. Currently, this works only for the selection modes `SelectionMode::Single` and `SelectionMode::Browse`. ## `hover` `true` to enable hover selection mode",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_level_indentation","","Sets the amount of extra indentation for child levels to use in `self` in addition to the default indentation. The value should be specified in pixels, a value of 0 disables this feature and in this case only the default indentation will be used. This does not have any visible effects for lists. ## `indentation` the amount, in pixels, of extra indentation in `self`.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model for a `TreeView`. If the `self` already has a model set, it will remove it before setting the new model. If `model` is `None`, then it will unset the old model. ## `model` The model.",739,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_reorderable","","This function is a convenience function to allow you to reorder models that support the `TreeDragSourceIface` and the `TreeDragDestIface`. Both `TreeStore` and `ListStore` support these. If `reorderable` is `true`, then the user can reorder the model by dragging and dropping rows. The developer can listen to these changes by connecting to the model’s `TreeModel::row-inserted` and `TreeModel::row-deleted` signals. The reordering is implemented by setting up the tree view as a drag source and destination. Therefore, drag and drop can not be used in a reorderable view for any other purpose.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_rubber_banding","","Enables or disables rubber banding in `self`. If the selection mode is `SelectionMode::Multiple`, rubber banding will allow the user to select multiple rows by dragging the mouse. ## `enable` `true` to enable rubber banding",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_rules_hint","","Sets a hint for the theme to draw even/odd rows in the `self` with different colors, also known as \"zebra striping\".",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_search_column","","Sets `column` as the column where the interactive search code should search in for the current model.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_search_entry","","Sets the entry which the interactive search code will use for this `self`. This is useful when you want to provide a search entry in our interface at all time at a fixed position. Passing `None` for `entry` will make the interactive search code use the built-in popup entry again. ## `entry` the entry the interactive search code of `self` should use or `None`",739,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_show_expanders","","Sets whether to draw and enable expanders and indent child rows in `self`. When disabled there will be no expanders visible in trees and there will be no way to expand and collapse rows by default. Also note that hiding the expanders will disable the default indentation. You can set a custom indentation in this case using `TreeViewExt::set_level_indentation`. This does not have any visible effects for lists. ## `enabled` `true` to enable expander drawing, `false` otherwise.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tooltip_cell","","Sets the tip area of `tooltip` to the area `path`, `column` and `cell` have in common. For example if `path` is `None` and `column` is set, the tip area will be set to the full area covered by `column`. See also `TooltipExt::set_tip_area`.",739,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"p"},{"name":"q"},{"name":"s"}],"output":null}],[10,"set_tooltip_column","","If you only plan to have simple (text-only) tooltips on full rows, you can use this function to have `TreeView` handle these automatically for you. `column` should be set to the column in `self`’s model containing the tooltip texts, or -1 to disable this feature.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tooltip_row","","Sets the tip area of `tooltip` to be the area covered by the row at `path`. See also `TreeViewExt::set_tooltip_column` for a simpler alternative. See also `TooltipExt::set_tip_area`. ## `tooltip` a `Tooltip` ## `path` a `TreePath`",739,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"treepath"}],"output":null}],[10,"unset_rows_drag_dest","","Undoes the effect of `TreeView::enable_model_drag_dest`. Calling this method sets `TreeView:reorderable` to `false`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_rows_drag_source","","Undoes the effect of `TreeView::enable_model_drag_source`. Calling this method sets `TreeView:reorderable` to `false`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_enable_grid_lines","","",739,{"inputs":[{"name":"self"}],"output":{"name":"treeviewgridlines"}}],[10,"set_property_enable_grid_lines","","",739,{"inputs":[{"name":"self"},{"name":"treeviewgridlines"}],"output":null}],[10,"set_property_ubuntu_almost_fixed_height_mode","","",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_columns_changed","","The number of columns of the treeview has changed.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cursor_changed","","The position of the cursor (focused cell) has changed.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_expand_collapse_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_expand_collapse_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_move_cursor","","The `TreeView::move-cursor` signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user presses one of the cursor keys.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",739,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_row_activated","","The \"row-activated\" signal is emitted when the method `TreeViewExt::row_activated` is called, when the user double clicks a treeview row with the \"activate-on-single-click\" property set to `false`, or when the user single clicks a row when the \"activate-on-single-click\" property set to `true`. It is also emitted when a non-editable row is selected and one of the keys: Space, Shift+Space, Return or Enter is pressed.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_row_activated","","",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeviewcolumn"}],"output":null}],[10,"connect_row_collapsed","","The given row has been collapsed (child nodes are hidden). ## `iter` the tree iter of the collapsed row ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_expanded","","The given row has been expanded (child nodes are shown). ## `iter` the tree iter of the expanded row ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_select_all","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_select_cursor_parent","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_cursor_parent","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_select_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_start_interactive_search","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_start_interactive_search","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_test_collapse_row","","The given row is about to be collapsed (hide its children nodes). Use this signal if you need to control the collapsibility of individual rows. ## `iter` the tree iter of the row to collapse ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_test_expand_row","","The given row is about to be expanded (show its children nodes). Use this signal if you need to control the expandability of individual rows. ## `iter` the tree iter of the row to expand ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_row","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_unselect_all","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_activate_on_single_click_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_grid_lines_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_search_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_tree_lines_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_expander_column_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fixed_height_mode_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_headers_clickable_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_headers_visible_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hover_expand_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hover_selection_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_level_indentation_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reorderable_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rubber_banding_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rules_hint_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_column_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_expanders_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_column_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ubuntu_almost_fixed_height_mode_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeViewColumnExt","","Trait containing all `TreeViewColumn` methods.",null,null],[10,"cell_get_position","","Obtains the horizontal position and size of a cell in a column. If the cell is not found in the column, `start_pos` and `width` are not changed and `false` is returned. ## `cell_renderer` a `CellRenderer` ## `x_offset` return location for the horizontal  position of `cell` within `self`, may be `None` ## `width` return location for the width of `cell`,  may be `None`",740,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"cell_get_size","","Obtains the width and height needed to render the column. This is used primarily by the `TreeView`. ## `cell_area` The area a cell in the column will be allocated, or `None` ## `x_offset` location to return x offset of a cell relative to `cell_area`, or `None` ## `y_offset` location to return y offset of a cell relative to `cell_area`, or `None` ## `width` location to return width needed to render a cell, or `None` ## `height` location to return height needed to render a cell, or `None`",740,null],[10,"cell_is_visible","","Returns `true` if any of the cells packed into the `self` are visible. For this to be meaningful, you must first initialize the cells with `TreeViewColumnExt::cell_set_cell_data`",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cell_set_cell_data","","Sets the cell renderer based on the `tree_model` and `iter`. That is, for every attribute mapping in `self`, it will get a value from the set column on the `iter`, and use that value to set the attribute on the cell renderer. This is used primarily by the `TreeView`. ## `tree_model` The `TreeModel` to to get the cell renderers attributes from. ## `iter` The `TreeIter` to to get the cell renderer’s attributes from. ## `is_expander` `true`, if the row has children ## `is_expanded` `true`, if the row has visible children",740,{"inputs":[{"name":"self"},{"name":"p"},{"name":"treeiter"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"clicked","","Emits the “clicked” signal on the column. This function will only work if `self` is clickable.",740,{"inputs":[{"name":"self"}],"output":null}],[10,"focus_cell","","Sets the current keyboard focus to be at `cell`, if the column contains 2 or more editable and activatable cells. ## `cell` A `CellRenderer`",740,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_alignment","","Returns the current x alignment of `self`. This value can range between 0.0 and 1.0.",740,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_button","","Returns the button used in the treeview column header",740,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_clickable","","Returns `true` if the user can click on the header for the column.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_expand","","Returns `true` if the column expands to fill available space.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_fixed_width","","Gets the fixed width of the column. This may not be the actual displayed width of the column; for that, use `TreeViewColumnExt::get_width`.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_width","","Returns the maximum width in pixels of the `self`, or -1 if no maximum width is set.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_min_width","","Returns the minimum width in pixels of the `self`, or -1 if no minimum width is set.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reorderable","","Returns `true` if the `self` can be reordered by the user.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_resizable","","Returns `true` if the `self` can be resized by the end user.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_sizing","","Returns the current type of `self`.",740,{"inputs":[{"name":"self"}],"output":{"name":"treeviewcolumnsizing"}}],[10,"get_sort_column_id","","Gets the logical `sort_column_id` that the model sorts on when this column is selected for sorting. See `TreeViewColumnExt::set_sort_column_id`.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_sort_indicator","","Gets the value set by `TreeViewColumnExt::set_sort_indicator`.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_sort_order","","Gets the value set by `TreeViewColumnExt::set_sort_order`.",740,{"inputs":[{"name":"self"}],"output":{"name":"sorttype"}}],[10,"get_spacing","","Returns the spacing of `self`.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_title","","Returns the title of the widget.",740,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tree_view","","Returns the `TreeView` wherein `self` has been inserted. If `column` is currently not inserted in any tree view, `None` is returned.",740,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_visible","","Returns `true` if `self` is visible.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_widget","","Returns the `Widget` in the button on the column header. If a custom widget has not been set then `None` is returned.",740,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_width","","Returns the current size of `self` in pixels.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_x_offset","","Returns the current X offset of `self` in pixels.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"queue_resize","","Flags the column, and the cell renderers added to this column, to have their sizes renegotiated.",740,{"inputs":[{"name":"self"}],"output":null}],[10,"set_alignment","","Sets the alignment of the title or custom widget inside the column header. The alignment determines its location inside the button -- 0.0 for left, 0.5 for center, 1.0 for right. ## `xalign` The alignment, which is between [0.0 and 1.0] inclusive.",740,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"set_clickable","","Sets the header to be active if `clickable` is `true`. When the header is active, then it can take keyboard focus, and can be clicked. ## `clickable` `true` if the header is active.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_expand","","Sets the column to take available extra space. This space is shared equally amongst all columns that have the expand set to `true`. If no column has this option set, then the last column gets all extra space. By default, every column is created with this `false`.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_fixed_width","","If `fixed_width` is not -1, sets the fixed width of `self`; otherwise unsets it. The effective value of `fixed_width` is clamped between the minimum and maximum width of the column; however, the value stored in the “fixed-width” property is not clamped. If the column sizing is `TreeViewColumnSizing::GrowOnly` or `TreeViewColumnSizing::Autosize`, setting a fixed width overrides the automatically calculated width. Note that `fixed_width` is only a hint to GTK+; the width actually allocated to the column may be greater or less than requested.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_max_width","","Sets the maximum width of the `self`. If `max_width` is -1, then the maximum width is unset. Note, the column can actually be wider than max width if it’s the last column in a view. In this case, the column expands to fill any extra space. ## `max_width` The maximum width of the column in pixels, or -1.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_min_width","","Sets the minimum width of the `self`. If `min_width` is -1, then the minimum width is unset. ## `min_width` The minimum width of the column in pixels, or -1.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_reorderable","","If `reorderable` is `true`, then the column can be reordered by the end user dragging the header. ## `reorderable` `true`, if the column can be reordered.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_resizable","","If `resizable` is `true`, then the user can explicitly resize the column by grabbing the outer edge of the column button. If resizable is `true` and sizing mode of the column is `TreeViewColumnSizing::Autosize`, then the sizing mode is changed to `TreeViewColumnSizing::GrowOnly`. ## `resizable` `true`, if the column can be resized",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sizing","","Sets the growth behavior of `self` to `type_`. ## `type_` The `TreeViewColumnSizing`.",740,{"inputs":[{"name":"self"},{"name":"treeviewcolumnsizing"}],"output":null}],[10,"set_sort_column_id","","Sets the logical `sort_column_id` that this column sorts on when this column is selected for sorting. Doing so makes the column header clickable. ## `sort_column_id` The `sort_column_id` of the model to sort on.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_sort_indicator","","Call this function with a `setting` of `true` to display an arrow in the header button indicating the column is sorted. Call `TreeViewColumnExt::set_sort_order` to change the direction of the arrow. ## `setting` `true` to display an indicator that the column is sorted",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sort_order","","Changes the appearance of the sort indicator.",740,{"inputs":[{"name":"self"},{"name":"sorttype"}],"output":null}],[10,"set_spacing","","Sets the spacing field of `self`, which is the number of pixels to place between cell renderers packed into it. ## `spacing` distance between cell renderers in pixels.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_title","","Sets the title of the `self`. If a custom widget has been set, then this value is ignored. ## `title` The title of the `self`.",740,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visible","","Sets the visibility of `self`. ## `visible` `true` if the `self` is visible.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_widget","","Sets the widget in the header to be `widget`. If widget is `None`, then the header button is set with a `Label` set to the title of `self`. ## `widget` A child `Widget`, or `None`.",740,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_property_cell_area","","",740,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"connect_clicked","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alignment_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_clickable_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_expand_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fixed_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reorderable_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resizable_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sizing_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_column_id_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_indicator_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_order_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_widget_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_x_offset_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ViewportExt","","Trait containing all `Viewport` methods.",null,null],[10,"get_bin_window","","Gets the bin window of the `Viewport`.",741,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_shadow_type","","Gets the shadow type of the `Viewport`. See `ViewportExt::set_shadow_type`.",741,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"get_view_window","","Gets the view window of the `Viewport`.",741,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"set_shadow_type","","Sets the shadow type of the viewport. ## `type_` the new shadow type.",741,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"connect_property_shadow_type_notify","","",741,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"VolumeButtonExt","","Trait containing all `VolumeButton` methods.",null,null],[10,"get_property_use_symbolic","","",742,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_use_symbolic","","",742,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_use_symbolic_notify","","",742,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"WidgetExt","","Trait containing all `Widget` methods.",null,null],[10,"activate","","For widgets that can be “activated” (buttons, menu items, etc.) this function activates them. Activation is what happens when you press Enter on a widget during key navigation. If `self` isn't activatable, the function returns `false`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"add_accelerator","","Installs an accelerator for this `self` in `accel_group` that causes `accel_signal` to be emitted if the accelerator is activated. The `accel_group` needs to be added to the widget’s toplevel via `GtkWindowExt::add_accel_group`, and the signal must be of type `gobject::SignalFlags::Action`. Accelerators added through this function are not user changeable during runtime. If you want to support accelerators that can be changed by the user, use `AccelMap::add_entry` and `WidgetExt::set_accel_path` or `MenuItemExt::set_accel_path` instead. ## `accel_signal` widget signal to emit on accelerator activation ## `accel_group` accel group for this widget, added to its toplevel ## `accel_key` GDK keyval of the accelerator ## `accel_mods` modifier key combination of the accelerator ## `accel_flags` flag accelerators, e.g. `AccelFlags::Visible`",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"accelgroup"},{"name":"u32"},{"name":"modifiertype"},{"name":"accelflags"}],"output":null}],[10,"add_device_events","","Adds the device events in the bitfield `events` to the event mask for `self`. See `WidgetExt::set_device_events` for details. ## `device` a `gdk::Device` ## `events` an event mask, see `gdk::EventMask`",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"eventmask"}],"output":null}],[10,"add_events","","Adds the events in the bitfield `events` to the event mask for `self`. See `WidgetExt::set_events` and the [input handling overview][event-masks] for details. ## `events` an event mask, see `gdk::EventMask`",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"add_mnemonic_label","","Adds a widget to the list of mnemonic labels for this widget. (See `WidgetExt::list_mnemonic_labels`). Note the list of mnemonic labels for the widget is cleared when the widget is destroyed, so the caller must make sure to update its internal state at this point as well, by using a connection to the `Widget::destroy` signal or a weak notifier. ## `label` a `Widget` that acts as a mnemonic label for `self`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"can_activate_accel","","Determines whether an accelerator that activates the signal identified by `signal_id` can currently be activated. This is done by emitting the `Widget::can-activate-accel` signal on `self`; if the signal isn’t overridden by a handler or in a derived widget, then the default check is that the widget must be sensitive, and the widget and all its ancestors mapped. ## `signal_id` the ID of a signal installed on `self`",743,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"child_focus","","This function is used by custom widget implementations; if you're writing an app, you’d use `WidgetExt::grab_focus` to move the focus to a particular widget, and `ContainerExt::set_focus_chain` to change the focus tab order. So you may want to investigate those functions instead.",743,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[10,"child_notify","","Emits a `Widget::child-notify` signal for the [child property][child-properties] `child_property` on `self`.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"compute_expand","","Computes whether a container should give this widget extra space when possible. Containers should check this, rather than looking at `WidgetExt::get_hexpand` or `WidgetExt::get_vexpand`.",743,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[10,"create_pango_context","","Creates a new `pango::Context` with the appropriate font map, font options, font description, and base direction for drawing text for this widget. See also `WidgetExt::get_pango_context`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"create_pango_layout","","Creates a new `pango::Layout` with the appropriate font map, font description, and base direction for drawing text for this widget.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["layout"],"name":"option"}}],[10,"destroy","","Destroys a widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"device_is_shadowed","","Returns `true` if `device` has been shadowed by a GTK+ device grab on another widget, so it would stop sending events to `self`. This may be used in the `Widget::grab-notify` signal to check for specific devices. See `gtk_device_grab_add`. ## `device` a `gdk::Device`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"drag_begin","","This function is equivalent to `WidgetExt::drag_begin_with_coordinates`, passing -1, -1 as coordinates.",743,{"inputs":[{"name":"self"},{"name":"targetlist"},{"name":"dragaction"},{"name":"i32"},{"name":"p"}],"output":{"generics":["dragcontext"],"name":"option"}}],[10,"drag_begin_with_coordinates","","Initiates a drag on the source side. The function only needs to be used when the application is starting drags itself, and is not needed when `Widget::drag_source_set` is used.",743,{"inputs":[{"name":"self"},{"name":"targetlist"},{"name":"dragaction"},{"name":"i32"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["dragcontext"],"name":"option"}}],[10,"drag_check_threshold","","Checks to see if a mouse drag starting at (`start_x`, `start_y`) and ending at (`current_x`, `current_y`) has passed the GTK+ drag threshold, and thus should trigger the beginning of a drag-and-drop operation. ## `start_x` X coordinate of start of drag ## `start_y` Y coordinate of start of drag ## `current_x` current X coordinate ## `current_y` current Y coordinate",743,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"drag_dest_add_image_targets","","Add the image targets supported by `SelectionData` to the target list of the drag destination. The targets are added with `info` = 0. If you need another value, use `TargetList::add_image_targets` and `WidgetExt::drag_dest_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_dest_add_text_targets","","Add the text targets supported by `SelectionData` to the target list of the drag destination. The targets are added with `info` = 0. If you need another value, use `TargetList::add_text_targets` and `WidgetExt::drag_dest_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_dest_add_uri_targets","","Add the URI targets supported by `SelectionData` to the target list of the drag destination. The targets are added with `info` = 0. If you need another value, use `TargetList::add_uri_targets` and `WidgetExt::drag_dest_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_dest_find_target","","Looks for a match between the supported targets of `context` and the `dest_target_list`, returning the first matching target, otherwise returning `GDK_NONE`. `dest_target_list` should usually be the return value from `WidgetExt::drag_dest_get_target_list`, but some widgets may have different valid targets for different parts of the widget; in that case, they will have to implement a drag_motion handler that passes the correct target list to this function. ## `context` drag context ## `target_list` list of droppable targets, or `None` to use  gtk_drag_dest_get_target_list (`self`).",743,{"inputs":[{"name":"self"},{"name":"dragcontext"},{"name":"p"}],"output":{"generics":["atom"],"name":"option"}}],[10,"drag_dest_get_target_list","","Returns the list of targets this widget can accept from drag-and-drop.",743,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"drag_dest_get_track_motion","","Returns whether the widget has been configured to always emit `Widget::drag-motion` signals.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"drag_dest_set_proxy","","Sets this widget as a proxy for drops to another window.",743,{"inputs":[{"name":"self"},{"name":"window"},{"name":"dragprotocol"},{"name":"bool"}],"output":null}],[10,"drag_dest_set_target_list","","Sets the target types that this widget can accept from drag-and-drop. The widget must first be made into a drag destination with `Widget::drag_dest_set`. ## `target_list` list of droppable targets, or `None` for none",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"drag_dest_set_track_motion","","Tells the widget to emit `Widget::drag-motion` and `Widget::drag-leave` events regardless of the targets and the `DestDefaults::Motion` flag.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"drag_dest_unset","","Clears information about a drop destination set with `Widget::drag_dest_set`. The widget will no longer receive notification of drags.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_get_data","","Gets the data associated with a drag. When the data is received or the retrieval fails, GTK+ will emit a `Widget::drag-data-received` signal. Failure of the retrieval is indicated by the length field of the `selection_data` signal parameter being negative. However, when `WidgetExt::drag_get_data` is called implicitely because the `DestDefaults::Drop` was set, then the widget will not receive notification of failed drops. ## `context` the drag context ## `target` the target (form of the data) to retrieve ## `time_` a timestamp for retrieving the data. This will  generally be the time received in a `Widget::drag-motion`  or `Widget::drag-drop` signal",743,{"inputs":[{"name":"self"},{"name":"dragcontext"},{"name":"atom"},{"name":"u32"}],"output":null}],[10,"drag_highlight","","Highlights a widget as a currently hovered drop target. To end the highlight, call `WidgetExt::drag_unhighlight`. GTK+ calls this automatically if `DestDefaults::Highlight` is set.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_add_image_targets","","Add the writable image targets supported by `SelectionData` to the target list of the drag source. The targets are added with `info` = 0. If you need another value, use `TargetList::add_image_targets` and `WidgetExt::drag_source_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_add_text_targets","","Add the text targets supported by `SelectionData` to the target list of the drag source. The targets are added with `info` = 0. If you need another value, use `TargetList::add_text_targets` and `WidgetExt::drag_source_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_add_uri_targets","","Add the URI targets supported by `SelectionData` to the target list of the drag source. The targets are added with `info` = 0. If you need another value, use `TargetList::add_uri_targets` and `WidgetExt::drag_source_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_get_target_list","","Gets the list of targets this widget can provide for drag-and-drop.",743,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"drag_source_set_icon_gicon","","Sets the icon that will be used for drags from a particular source to `icon`. See the docs for `IconTheme` for more details. ## `icon` A `gio::Icon`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"drag_source_set_icon_name","","Sets the icon that will be used for drags from a particular source to a themed icon. See the docs for `IconTheme` for more details. ## `icon_name` name of icon to use",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"drag_source_set_icon_pixbuf","","Sets the icon that will be used for drags from a particular widget from a `gdk_pixbuf::Pixbuf`. GTK+ retains a reference for `pixbuf` and will release it when it is no longer needed. ## `pixbuf` the `gdk_pixbuf::Pixbuf` for the drag icon",743,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"drag_source_set_icon_stock","","Sets the icon that will be used for drags from a particular source to a stock icon.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"drag_source_set_target_list","","Changes the target types that this widget offers for drag-and-drop. The widget must first be made into a drag source with `Widget::drag_source_set`. ## `target_list` list of draggable targets, or `None` for none",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"drag_source_unset","","Undoes the effects of `Widget::drag_source_set`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_unhighlight","","Removes a highlight set by `WidgetExt::drag_highlight` from a widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"draw","","Draws `self` to `cr`. The top left corner of the widget will be drawn to the currently set origin point of `cr`.",743,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[10,"error_bell","","Notifies the user about an input-related error on this widget. If the `Settings:gtk-error-bell` setting is `true`, it calls `gdk::WindowExt::beep`, otherwise it does nothing.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"event","","Rarely-used function. This function is used to emit the event signals on a widget (those signals should never be emitted without using this function to do so). If you want to synthesize an event though, don’t use this function; instead, use `gtk_main_do_event` so the event will behave as if it were in the event queue. Don’t synthesize expose events; instead, use `gdk::WindowExt::invalidate_rect` to invalidate a region of the window. ## `event` a `GdkEvent`",743,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"freeze_child_notify","","Stops emission of `Widget::child-notify` signals on `self`. The signals are queued until `WidgetExt::thaw_child_notify` is called on `self`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"get_action_group","","Retrieves the `gio::ActionGroup` that was registered using `prefix`. The resulting `gio::ActionGroup` may have been registered to `self` or any `Widget` in its ancestry.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["actiongroup"],"name":"option"}}],[10,"get_allocated_baseline","","Returns the baseline that has currently been allocated to `self`. This function is intended to be used when implementing handlers for the `Widget::draw` function, and when allocating child widgets in `Widget::size_allocate`.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_allocated_height","","Returns the height that has currently been allocated to `self`. This function is intended to be used when implementing handlers for the `Widget::draw` function.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_allocated_size","","Retrieves the widget’s allocated size.",743,null],[10,"get_allocated_width","","Returns the width that has currently been allocated to `self`. This function is intended to be used when implementing handlers for the `Widget::draw` function.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_allocation","","Retrieves the widget’s allocation.",743,{"inputs":[{"name":"self"}],"output":{"name":"allocation"}}],[10,"get_ancestor","","Gets the first ancestor of `self` with type `widget_type`. For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets the first `Box` that’s an ancestor of `self`. No reference will be added to the returned widget; it should not be unreferenced. See note about checking for a toplevel `Window` in the docs for `WidgetExt::get_toplevel`.",743,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_app_paintable","","Determines whether the application intends to draw on the widget in an `Widget::draw` handler.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_default","","Determines whether `self` can be a default widget. See `WidgetExt::set_can_default`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_focus","","Determines whether `self` can own the input focus. See `WidgetExt::set_can_focus`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_child_visible","","Gets the value set with `WidgetExt::set_child_visible`. If you feel a need to use this function, your code probably needs reorganization.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_clip","","Retrieves the widget’s clip area.",743,{"inputs":[{"name":"self"}],"output":{"name":"allocation"}}],[10,"get_clipboard","","Returns the clipboard object for the given selection to be used with `self`. `self` must have a `gdk::Display` associated with it, so must be attached to a toplevel window. ## `selection` a `gdk::Atom` which identifies the clipboard  to use. `GDK_SELECTION_CLIPBOARD` gives the  default clipboard. Another common value  is `GDK_SELECTION_PRIMARY`, which gives  the primary X selection.",743,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"clipboard"}}],[10,"get_composite_name","","Obtains the composite name of a widget.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_device_enabled","","Returns whether `device` can interact with `self` and its children. See `WidgetExt::set_device_enabled`. ## `device` a `gdk::Device`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_device_events","","Returns the events mask for the widget corresponding to an specific device. These are the events that the widget will receive when `device` operates on it. ## `device` a `gdk::Device`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"eventmask"}}],[10,"get_direction","","Gets the reading direction for a particular widget. See `WidgetExt::set_direction`.",743,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[10,"get_display","","Get the `gdk::Display` for the toplevel window associated with this widget. This function can only be called after the widget has been added to a widget hierarchy with a `Window` at the top.",743,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_double_buffered","","Determines whether the widget is double buffered.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_events","","Returns the event mask (see `gdk::EventMask`) for the widget. These are the events that the widget will receive.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_focus_on_click","","Returns whether the widget should grab focus when it is clicked with the mouse. See `WidgetExt::set_focus_on_click`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_font_map","","Gets the font map that has been set with `WidgetExt::set_font_map`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_frame_clock","","Obtains the frame clock for a widget. The frame clock is a global “ticker” that can be used to drive animations and repaints. The most common reason to get the frame clock is to call `gdk::FrameClockExt::get_frame_time`, in order to get a time to use for animating. For example you might record the start of the animation with an initial value from `gdk::FrameClockExt::get_frame_time`, and then update the animation by calling `gdk::FrameClockExt::get_frame_time` again during each repaint.",743,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"get_halign","","Gets the value of the `Widget:halign` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[10,"get_has_tooltip","","Returns the current value of the has-tooltip property. See `Widget:has-tooltip` for more information.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_window","","Determines whether `self` has a `gdk::Window` of its own. See `WidgetExt::set_has_window`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hexpand","","Gets whether the widget would like any available extra horizontal space. When a user resizes a `Window`, widgets with expand=TRUE generally receive the extra space. For example, a list or scrollable area or document in your window would often be set to expand.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hexpand_set","","Gets whether `WidgetExt::set_hexpand` has been used to explicitly set the expand flag on this widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mapped","","Whether the widget is mapped.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_margin_bottom","","Gets the value of the `Widget:margin-bottom` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_end","","Gets the value of the `Widget:margin-end` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_left","","Gets the value of the `Widget:margin-left` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_right","","Gets the value of the `Widget:margin-right` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_start","","Gets the value of the `Widget:margin-start` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_top","","Gets the value of the `Widget:margin-top` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_modifier_mask","","Returns the modifier mask the `self`’s windowing system backend uses for a particular purpose.",743,{"inputs":[{"name":"self"},{"name":"modifierintent"}],"output":{"name":"modifiertype"}}],[10,"get_name","","Retrieves the name of a widget. See `WidgetExt::set_name` for the significance of widget names.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_no_show_all","","Returns the current value of the `Widget:no-show-all` property, which determines whether calls to `WidgetExt::show_all` will affect this widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_opacity","","Fetches the requested opacity for this widget. See `WidgetExt::set_opacity`.",743,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_pango_context","","Gets a `pango::Context` with the appropriate font map, font description, and base direction for this widget. Unlike the context returned by `WidgetExt::create_pango_context`, this context is owned by the widget (it can be used until the screen for the widget changes or the widget is removed from its toplevel), and will be updated to match any changes to the widget’s attributes. This can be tracked by using the `Widget::screen-changed` signal on the widget.",743,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_parent","","Returns the parent container of `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_parent_window","","Gets `self`’s parent window, or `None` if it does not have one.",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_path","","Returns the `WidgetPath` representing `self`, if the widget is not connected to a toplevel widget, a partial path will be created.",743,{"inputs":[{"name":"self"}],"output":{"name":"widgetpath"}}],[10,"get_preferred_height","","Retrieves a widget’s initial minimum and natural height.",743,null],[10,"get_preferred_height_and_baseline_for_width","","Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given the specified `width`, or the default height if `width` is -1. The baselines may be -1 which means that no baseline is requested for this widget.",743,null],[10,"get_preferred_height_for_width","","Retrieves a widget’s minimum and natural height if it would be given the specified `width`.",743,null],[10,"get_preferred_size","","Retrieves the minimum and natural size of a widget, taking into account the widget’s preference for height-for-width management.",743,null],[10,"get_preferred_width","","Retrieves a widget’s initial minimum and natural width.",743,null],[10,"get_preferred_width_for_height","","Retrieves a widget’s minimum and natural width if it would be given the specified `height`.",743,null],[10,"get_realized","","Determines whether `self` is realized.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_receives_default","","Determines whether `self` is always treated as the default widget within its toplevel when it has the focus, even if another widget is the default.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_request_mode","","Gets whether the widget prefers a height-for-width layout or a width-for-height layout.",743,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[10,"get_root_window","","Get the root window where this widget is located. This function can only be called after the widget has been added to a widget hierarchy with `Window` at the top.",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_scale_factor","","Retrieves the internal scale factor that maps from window coordinates to the actual device pixels. On traditional systems this is 1, on high density outputs, it can be a higher value (typically 2).",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_screen","","Get the `gdk::Screen` from the toplevel window associated with this widget. This function can only be called after the widget has been added to a widget hierarchy with a `Window` at the top.",743,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"get_sensitive","","Returns the widget’s sensitivity (in the sense of returning the value that has been set using `WidgetExt::set_sensitive`).",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_settings","","Gets the settings object holding the settings used for this widget.",743,{"inputs":[{"name":"self"}],"output":{"generics":["settings"],"name":"option"}}],[10,"get_size_request","","Gets the size request that was explicitly set for the widget using `WidgetExt::set_size_request`. A value of -1 stored in `width` or `height` indicates that that dimension has not been set explicitly and the natural requisition of the widget will be used instead. See `WidgetExt::set_size_request`. To get the size a widget will actually request, call `WidgetExt::get_preferred_size` instead of this function. ## `width` return location for width, or `None` ## `height` return location for height, or `None`",743,null],[10,"get_state_flags","","Returns the widget state as a flag set. It is worth mentioning that the effective `StateFlags::Insensitive` state will be returned, that is, also based on parent insensitivity, even if `self` itself is sensitive.",743,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[10,"get_style_context","","Returns the style context associated to `self`. The returned object is guaranteed to be the same for the lifetime of `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["stylecontext"],"name":"option"}}],[10,"get_support_multidevice","","Returns `true` if `self` is multiple pointer aware. See `WidgetExt::set_support_multidevice` for more information.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_template_child","","Fetch an object build from the template XML for `widget_type` in this `self` instance.",743,{"inputs":[{"name":"self"},{"name":"type"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_tooltip_markup","","Gets the contents of the tooltip for `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_text","","Gets the contents of the tooltip for `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_window","","Returns the `Window` of the current tooltip. This can be the `Window` created by default, or the custom tooltip window set using `WidgetExt::set_tooltip_window`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_toplevel","","This function returns the topmost widget in the container hierarchy `self` is a part of. If `self` has no parent widgets, it will be returned as the topmost widget. No reference will be added to the returned widget; it should not be unreferenced.",743,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_valign","","Gets the value of the `Widget:valign` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[10,"get_valign_with_baseline","","Gets the value of the `Widget:valign` property, including `Align::Baseline`.",743,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[10,"get_vexpand","","Gets whether the widget would like any available extra vertical space.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_vexpand_set","","Gets whether `WidgetExt::set_vexpand` has been used to explicitly set the expand flag on this widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible","","Determines whether the widget is visible. If you want to take into account whether the widget’s parent is also marked as visible, use `WidgetExt::is_visible` instead.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visual","","Gets the visual that will be used to render `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"option"}}],[10,"get_window","","Returns the widget’s window if it is realized, `None` otherwise",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"grab_add","","Makes `self` the current grabbed widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"grab_default","","Causes `self` to become the default widget. `self` must be able to be a default widget; typically you would ensure this yourself by calling `WidgetExt::set_can_default` with a `true` value. The default widget is activated when the user presses Enter in a window. Default widgets must be activatable, that is, `WidgetExt::activate` should affect them. Note that `Entry` widgets require the “activates-default” property set to `true` before they activate the default widget when Enter is pressed and the `Entry` is focused.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"grab_focus","","Causes `self` to have the keyboard focus for the `Window` it's inside. `self` must be a focusable widget, such as a `Entry`; something like `Frame` won’t work.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"grab_remove","","Removes the grab from the given widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"has_default","","Determines whether `self` is the current default widget within its toplevel. See `WidgetExt::set_can_default`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_focus","","Determines if the widget has the global input focus. See `WidgetExt::is_focus` for the difference between having the global input focus, and only having the focus within a toplevel.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_grab","","Determines whether the widget is currently grabbing events, so it is the only widget receiving input events (keyboard and mouse).",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_screen","","Checks whether there is a `gdk::Screen` is associated with this widget. All toplevel widgets have an associated screen, and all widgets added into a hierarchy with a toplevel window at the top.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_visible_focus","","Determines if the widget should show a visible indication that it has the global input focus. This is a convenience function for use in ::draw handlers that takes into account whether focus indication should currently be shown in the toplevel window of `self`. See `GtkWindowExt::get_focus_visible` for more information about focus indication.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"hide","","Reverses the effects of `WidgetExt::show`, causing the widget to be hidden (invisible to the user).",743,{"inputs":[{"name":"self"}],"output":null}],[10,"hide_on_delete","","Utility function; intended to be connected to the `Widget::delete-event` signal on a `Window`. The function calls `WidgetExt::hide` on its argument, then returns `true`. If connected to ::delete-event, the result is that clicking the close button for a window (on the window frame, top right corner usually) will hide but not destroy the window. By default, GTK+ destroys windows when ::delete-event is received.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"in_destruction","","Returns whether the widget is currently being destroyed. This information can sometimes be used to avoid doing unnecessary work.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"init_template","","Creates and initializes child widgets defined in templates. This function must be called in the instance initializer for any class which assigned itself a template using `WidgetClass::set_template`",743,{"inputs":[{"name":"self"}],"output":null}],[10,"input_shape_combine_region","","Sets an input shape for this widget’s GDK window. This allows for windows which react to mouse click in a nonrectangular region, see `gdk::WindowExt::input_shape_combine_region` for more information. ## `region` shape to be added, or `None` to remove an existing shape",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"insert_action_group","","Inserts `group` into `self`. Children of `self` that implement `Actionable` can then be associated with actions in `group` by setting their “action-name” to `prefix`.`action-name`.",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"q"}],"output":null}],[10,"is_ancestor","","Determines whether `self` is somewhere inside `ancestor`, possibly with intermediate containers. ## `ancestor` another `Widget`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"is_composited","","Whether `self` can rely on having its alpha channel drawn correctly. On X11 this function returns whether a compositing manager is running for `self`’s screen.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_drawable","","Determines whether `self` can be drawn to. A widget can be drawn to if it is mapped and visible.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_focus","","Determines if the widget is the focus widget within its toplevel. (This does not mean that the `Widget:has-focus` property is necessarily set; `Widget:has-focus` will only be set if the toplevel widget additionally has the global input focus.)",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sensitive","","Returns the widget’s effective sensitivity, which means it is sensitive itself and also its parent widget is sensitive",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_toplevel","","Determines whether `self` is a toplevel widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_visible","","Determines whether the widget and all its parents are marked as visible.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"keynav_failed","","This function should be called whenever keyboard navigation within a single widget hits a boundary. The function emits the `Widget::keynav-failed` signal on the widget and its return value should be interpreted in a way similar to the return value of `WidgetExt::child_focus`:",743,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[10,"list_action_prefixes","","Retrieves a `None`-terminated array of strings containing the prefixes of `gio::ActionGroup`'s available to `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_mnemonic_labels","","Returns a newly allocated list of the widgets, normally labels, for which this widget is the target of a mnemonic (see for example, `LabelExt::set_mnemonic_widget`).",743,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[10,"map","","This function is only for use in widget implementations. Causes a widget to be mapped if it isn’t already.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"mnemonic_activate","","Emits the `Widget::mnemonic-activate` signal. ## `group_cycling` `true` if there are other widgets with the same mnemonic",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"override_background_color","","Sets the background color to use for a widget.",743,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"p"}],"output":null}],[10,"override_color","","Sets the color to use for a widget.",743,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"p"}],"output":null}],[10,"override_cursor","","Sets the cursor color to use in a widget, overriding the cursor-color and secondary-cursor-color style properties. All other style values are left untouched. See also `Widget::modify_style`.",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"override_font","","Sets the font to use for a widget. All other style values are left untouched. See `WidgetExt::override_color`.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"override_symbolic_color","","Sets a symbolic color for a widget.",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"queue_allocate","","This function is only for use in widget implementations.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_compute_expand","","Mark `self` as needing to recompute its expand flags. Call this function when setting legacy expand child properties on the child of a container.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_draw","","Equivalent to calling `WidgetExt::queue_draw_area` for the entire area of a widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_draw_area","","Convenience function that calls `WidgetExt::queue_draw_region` on the region created from the given coordinates.",743,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"queue_draw_region","","Invalidates the area of `self` defined by `region` by calling `gdk::WindowExt::invalidate_region` on the widget’s window and all its child windows. Once the main loop becomes idle (after the current batch of events has been processed, roughly), the window will receive expose events for the union of all regions that have been invalidated.",743,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[10,"queue_resize","","This function is only for use in widget implementations. Flags a widget to have its size renegotiated; should be called when a widget for some reason has a new size request. For example, when you change the text in a `Label`, `Label` queues a resize to ensure there’s enough space for the new text.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_resize_no_redraw","","This function works like `WidgetExt::queue_resize`, except that the widget is not invalidated.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"realize","","Creates the GDK (windowing system) resources associated with a widget. For example, `self`->window will be created when a widget is realized. Normally realization happens implicitly; if you show a widget and all its parent containers, then the widget will be realized and mapped automatically.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"region_intersect","","Computes the intersection of a `self`’s area and `region`, returning the intersection. The result may be empty, use `cairo_region_is_empty` to check.",743,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"generics":["region"],"name":"option"}}],[10,"register_window","","Registers a `gdk::Window` with the widget and sets it up so that the widget receives events for it. Call `WidgetExt::unregister_window` when destroying the window.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"remove_accelerator","","Removes an accelerator from `self`, previously installed with `WidgetExt::add_accelerator`. ## `accel_group` accel group for this widget ## `accel_key` GDK keyval of the accelerator ## `accel_mods` modifier key combination of the accelerator",743,{"inputs":[{"name":"self"},{"name":"accelgroup"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[10,"remove_mnemonic_label","","Removes a widget from the list of mnemonic labels for this widget. (See `WidgetExt::list_mnemonic_labels`). The widget must have previously been added to the list with `WidgetExt::add_mnemonic_label`. ## `label` a `Widget` that was previously set as a mnemonic label for  `self` with `WidgetExt::add_mnemonic_label`.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_tick_callback","","Removes a tick callback previously registered with `WidgetExt::add_tick_callback`.",743,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"render_icon_pixbuf","","A convenience function that uses the theme engine and style settings for `self` to look up `stock_id` and render it to a pixbuf. `stock_id` should be a stock icon ID such as `GTK_STOCK_OPEN` or `GTK_STOCK_OK`. `size` should be a size such as `IconSize::Menu`.",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"reparent","","Moves a widget from one `Container` to another, handling reference count issues to avoid destroying the widget.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"reset_style","","Updates the style context of `self` and all descendants by updating its widget path. `GtkContainers` may want to use this on a child when reordering it in a way that a different style might apply to it. See also `ContainerExt::get_path_for_child`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"send_expose","","Very rarely-used function. This function is used to emit an expose event on a widget. This function is not normally used directly. The only time it is used is when propagating an expose event to a windowless child widget (`WidgetExt::get_has_window` is `false`), and that is normally done using `ContainerExt::propagate_draw`.",743,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"i32"}}],[10,"send_focus_change","","Sends the focus change `event` to `self`",743,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"set_accel_path","","Given an accelerator group, `accel_group`, and an accelerator path, `accel_path`, sets up an accelerator in `accel_group` so whenever the key binding that is defined for `accel_path` is pressed, `self` will be activated. This removes any accelerators (for any accelerator group) installed by previous calls to `WidgetExt::set_accel_path`. Associating accelerators with paths allows them to be modified by the user and the modifications to be saved for future use. (See `AccelMap::save`.)",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_allocation","","Sets the widget’s allocation. This should not be used directly, but from within a widget’s size_allocate method.",743,{"inputs":[{"name":"self"},{"name":"allocation"}],"output":null}],[10,"set_app_paintable","","Sets whether the application intends to draw on the widget in an `Widget::draw` handler.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_can_default","","Specifies whether `self` can be a default widget. See `WidgetExt::grab_default` for details about the meaning of “default”. ## `can_default` whether or not `self` can be a default widget.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_can_focus","","Specifies whether `self` can own the input focus. See `WidgetExt::grab_focus` for actually setting the input focus on a widget. ## `can_focus` whether or not `self` can own the input focus.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_child_visible","","Sets whether `self` should be mapped along with its when its parent is mapped and `self` has been shown with `WidgetExt::show`.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_clip","","Sets the widget’s clip. This must not be used directly, but from within a widget’s size_allocate method. It must be called after `WidgetExt::set_allocation` (or after chaining up to the parent class), because that function resets the clip.",743,{"inputs":[{"name":"self"},{"name":"allocation"}],"output":null}],[10,"set_composite_name","","Sets a widgets composite name. The widget must be a composite child of its parent; see `Widget::push_composite_child`.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_device_enabled","","Enables or disables a `gdk::Device` to interact with `self` and all its children.",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_device_events","","Sets the device event mask (see `gdk::EventMask`) for a widget. The event mask determines which events a widget will receive from `device`. Keep in mind that different widgets have different default event masks, and by changing the event mask you may disrupt a widget’s functionality, so be careful. This function must be called while a widget is unrealized. Consider `WidgetExt::add_device_events` for widgets that are already realized, or if you want to preserve the existing event mask. This function can’t be used with windowless widgets (which return `false` from `WidgetExt::get_has_window`); to get events on those widgets, place them inside a `EventBox` and receive events on the event box. ## `device` a `gdk::Device` ## `events` event mask",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"eventmask"}],"output":null}],[10,"set_direction","","Sets the reading direction on a particular widget. This direction controls the primary direction for widgets containing text, and also the direction in which the children of a container are packed. The ability to set the direction is present in order so that correct localization into languages with right-to-left reading directions can be done. Generally, applications will let the default reading direction present, except for containers where the containers are arranged in an order that is explicitly visual rather than logical (such as buttons for text justification).",743,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[10,"set_double_buffered","","Widgets are double buffered by default; you can use this function to turn off the buffering. “Double buffered” simply means that `gdk::WindowExt::begin_draw_frame` and `gdk::WindowExt::end_draw_frame` are called automatically around expose events sent to the widget. `gdk::WindowExt::begin_draw_frame` diverts all drawing to a widget's window to an offscreen buffer, and `gdk::WindowExt::end_draw_frame` draws the buffer to the screen. The result is that users see the window update in one smooth step, and don’t see individual graphics primitives being rendered.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_events","","Sets the event mask (see `gdk::EventMask`) for a widget. The event mask determines which events a widget will receive. Keep in mind that different widgets have different default event masks, and by changing the event mask you may disrupt a widget’s functionality, so be careful. This function must be called while a widget is unrealized. Consider `WidgetExt::add_events` for widgets that are already realized, or if you want to preserve the existing event mask. This function can’t be used with widgets that have no window. (See `WidgetExt::get_has_window`). To get events on those widgets, place them inside a `EventBox` and receive events on the event box. ## `events` event mask",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_focus_on_click","","Sets whether the widget should grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_font_map","","Sets the font map to use for Pango rendering. When not set, the widget will inherit the font map from its parent.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_halign","","Sets the horizontal alignment of `self`. See the `Widget:halign` property. ## `align` the horizontal alignment",743,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[10,"set_has_tooltip","","Sets the has-tooltip property on `self` to `has_tooltip`. See `Widget:has-tooltip` for more information. ## `has_tooltip` whether or not `self` has a tooltip.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_window","","Specifies whether `self` has a `gdk::Window` of its own. Note that all realized widgets have a non-`None` “window” pointer (`WidgetExt::get_window` never returns a `None` window when a widget is realized), but for many of them it’s actually the `gdk::Window` of one of its parent widgets. Widgets that do not create a `window` for themselves in `Widget::realize` must announce this by calling this function with `has_window` = `false`.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hexpand","","Sets whether the widget would like any available extra horizontal space. When a user resizes a `Window`, widgets with expand=TRUE generally receive the extra space. For example, a list or scrollable area or document in your window would often be set to expand.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hexpand_set","","Sets whether the hexpand flag (see `WidgetExt::get_hexpand`) will be used.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mapped","","Marks the widget as being realized.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_margin_bottom","","Sets the bottom margin of `self`. See the `Widget:margin-bottom` property. ## `margin` the bottom margin",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_end","","Sets the end margin of `self`. See the `Widget:margin-end` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_left","","Sets the left margin of `self`. See the `Widget:margin-left` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_right","","Sets the right margin of `self`. See the `Widget:margin-right` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_start","","Sets the start margin of `self`. See the `Widget:margin-start` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_top","","Sets the top margin of `self`. See the `Widget:margin-top` property. ## `margin` the top margin",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_name","","Widgets can be named, which allows you to refer to them from a CSS file. You can apply a style to widgets with a particular name in the CSS file. See the documentation for the CSS syntax (on the same page as the docs for `StyleContext`).",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_no_show_all","","Sets the `Widget:no-show-all` property, which determines whether calls to `WidgetExt::show_all` will affect this widget.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_opacity","","Request the `self` to be rendered partially transparent, with opacity 0 being fully transparent and 1 fully opaque. (Opacity values are clamped to the [0,1] range.). This works on both toplevel widget, and child widgets, although there are some limitations:",743,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_parent","","This function is useful only when implementing subclasses of `Container`. Sets the container as the parent of `self`, and takes care of some details such as updating the state and style of the child to reflect its new location. The opposite function is `WidgetExt::unparent`. ## `parent` parent container",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_parent_window","","Sets a non default parent window for `self`.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"set_realized","","Marks the widget as being realized. This function must only be called after all `GdkWindows` for the `self` have been created and registered.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_receives_default","","Specifies whether `self` will be treated as the default widget within its toplevel when it has the focus, even if another widget is the default.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_redraw_on_allocate","","Sets whether the entire widget is queued for drawing when its size allocation changes. By default, this setting is `true` and the entire widget is redrawn on every size change. If your widget leaves the upper left unchanged when made bigger, turning this setting off will improve performance.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sensitive","","Sets the sensitivity of a widget. A widget is sensitive if the user can interact with it. Insensitive widgets are “grayed out” and the user can’t interact with them. Insensitive widgets are known as “inactive”, “disabled”, or “ghosted” in some other toolkits. ## `sensitive` `true` to make the widget sensitive",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_size_request","","Sets the minimum size of a widget; that is, the widget’s size request will be at least `width` by `height`. You can use this function to force a widget to be larger than it normally would be.",743,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_state_flags","","This function is for use in widget implementations. Turns on flag values in the current widget state (insensitive, prelighted, etc.).",743,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"bool"}],"output":null}],[10,"set_support_multidevice","","Enables or disables multiple pointer awareness. If this setting is `true`, `self` will start receiving multiple, per device enter/leave events. Note that if custom `GdkWindows` are created in `Widget::realize`, `gdk::WindowExt::set_support_multidevice` will have to be called manually on them. ## `support_multidevice` `true` to support input from multiple devices.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tooltip_markup","","Sets `markup` as the contents of the tooltip, which is marked up with  the Pango text markup language.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tooltip_text","","Sets `text` as the contents of the tooltip. This function will take care of setting `Widget:has-tooltip` to `true` and of the default handler for the `Widget::query-tooltip` signal.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tooltip_window","","Replaces the default window used for displaying tooltips with `custom_window`. GTK+ will take care of showing and hiding `custom_window` at the right moment, to behave likewise as the default tooltip window. If `custom_window` is `None`, the default tooltip window will be used. ## `custom_window` a `Window`, or `None`",743,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_valign","","Sets the vertical alignment of `self`. See the `Widget:valign` property. ## `align` the vertical alignment",743,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[10,"set_vexpand","","Sets whether the widget would like any available extra vertical space.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_vexpand_set","","Sets whether the vexpand flag (see `WidgetExt::get_vexpand`) will be used.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible","","Sets the visibility state of `self`. Note that setting this to `true` doesn’t mean the widget is actually viewable, see `WidgetExt::get_visible`.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visual","","Sets the visual that should be used for by widget and its children for creating `GdkWindows`. The visual must be on the same `gdk::Screen` as returned by `WidgetExt::get_screen`, so handling the `Widget::screen-changed` signal is necessary.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_window","","Sets a widget’s window. This function should only be used in a widget’s `Widget::realize` implementation. The `window` passed is usually either new window created with `gdk::Window::new`, or the window of its parent widget as returned by `WidgetExt::get_parent_window`.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"shape_combine_region","","Sets a shape for this widget’s GDK window. This allows for transparent windows etc., see `gdk::WindowExt::shape_combine_region` for more information. ## `region` shape to be added, or `None` to remove an existing shape",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"show","","Flags a widget to be displayed. Any widget that isn’t shown will not appear on the screen. If you want to show all the widgets in a container, it’s easier to call `WidgetExt::show_all` on the container, instead of individually showing the widgets.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"show_all","","Recursively shows a widget, and any child widgets (if the widget is a container).",743,{"inputs":[{"name":"self"}],"output":null}],[10,"show_now","","Shows a widget. If the widget is an unmapped toplevel widget (i.e. a `Window` that has not yet been shown), enter the main loop and wait for the window to actually be mapped. Be careful; because the main loop is running, anything can happen during this function.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"size_allocate","","This function is only used by `Container` subclasses, to assign a size and position to their child widgets.",743,{"inputs":[{"name":"self"},{"name":"allocation"}],"output":null}],[10,"size_allocate_with_baseline","","This function is only used by `Container` subclasses, to assign a size, position and (optionally) baseline to their child widgets.",743,{"inputs":[{"name":"self"},{"name":"allocation"},{"name":"i32"}],"output":null}],[10,"thaw_child_notify","","Reverts the effect of a previous call to `WidgetExt::freeze_child_notify`. This causes all queued `Widget::child-notify` signals on `self` to be emitted.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"translate_coordinates","","Translate coordinates relative to `self`’s allocation to coordinates relative to `dest_widget`’s allocations. In order to perform this operation, both widgets must be realized, and must share a common toplevel. ## `dest_widget` a `Widget` ## `src_x` X position relative to `self` ## `src_y` Y position relative to `self` ## `dest_x` location to store X position relative to `dest_widget` ## `dest_y` location to store Y position relative to `dest_widget`",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"trigger_tooltip_query","","Triggers a tooltip query on the display where the toplevel of `self` is located. See `Tooltip::trigger_tooltip_query` for more information.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unmap","","This function is only for use in widget implementations. Causes a widget to be unmapped if it’s currently mapped.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unparent","","This function is only for use in widget implementations. Should be called by implementations of the remove method on `Container`, to dissociate a child from the container.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unrealize","","This function is only useful in widget implementations. Causes a widget to be unrealized (frees all GDK resources associated with the widget, such as `self`->window).",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unregister_window","","Unregisters a `gdk::Window` from the widget that was previously set up with `WidgetExt::register_window`. You need to call this when the window is no longer used by the widget, such as when you destroy it.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"unset_state_flags","","This function is for use in widget implementations. Turns off flag values for the current widget state (insensitive, prelighted, etc.). See `WidgetExt::set_state_flags`. ## `flags` State flags to turn off",743,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[10,"get_property_composite_child","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_expand","","Whether to expand in both directions. Setting this sets both `Widget:hexpand` and `Widget:vexpand`",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_expand","","Whether to expand in both directions. Setting this sets both `Widget:hexpand` and `Widget:vexpand`",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_has_default","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_default","","",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_has_focus","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_focus","","",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_height_request","","",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_height_request","","",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_is_focus","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_is_focus","","",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_margin","","Sets all four sides' margin at once. If read, returns max margin on any side.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_margin","","Sets all four sides' margin at once. If read, returns max margin on any side.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_width_request","","",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_width_request","","",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_accel_closures_changed","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_button_press_event","","The ::button-press-event signal will be emitted when a button (typically from a mouse) is pressed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_button_release_event","","The ::button-release-event signal will be emitted when a button (typically from a mouse) is released.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_can_activate_accel","","Determines whether an accelerator that activates the signal identified by `signal_id` can currently be activated. This signal is present to allow applications and derived widgets to override the default `Widget` handling for determining whether an accelerator can be activated. ## `signal_id` the ID of a signal installed on `widget`",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_composited_changed","","The ::composited-changed signal is emitted when the composited status of `widgets` screen changes. See `gdk::ScreenExt::is_composited`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_composited_changed","","",743,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_configure_event","","The ::configure-event signal will be emitted when the size, position or stacking of the `widget`'s window has changed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_damage_event","","Emitted when a redirected window belonging to `widget` gets drawn into. The region/area members of the event shows what area of the redirected drawable was drawn into. ## `event` the `gdk::EventExpose` event",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_event","","The ::delete-event signal is emitted if a user requests that a toplevel window is closed. The default handler for this signal destroys the window. Connecting `WidgetExt::hide_on_delete` to this signal will cause the window to be hidden instead, so that it can later be shown again without reconstructing it. ## `event` the event which triggered this signal",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_destroy","","Signals that all holders of a reference to the widget should release the reference that they hold. May result in finalization of the widget if all references are released.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_destroy_event","","The ::destroy-event signal is emitted when a `gdk::Window` is destroyed. You rarely get this signal, because most widgets disconnect themselves from their window before they destroy it, so no widget owns the window at destroy time.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_direction_changed","","The ::direction-changed signal is emitted when the text direction of a widget changes. ## `previous_direction` the previous text direction of `widget`",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_begin","","The ::drag-begin signal is emitted on the drag source when a drag is started. A typical reason to connect to this signal is to set up a custom drag icon with e.g. `WidgetExt::drag_source_set_icon_pixbuf`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_data_delete","","The ::drag-data-delete signal is emitted on the drag source when a drag with the action `gdk::DragAction::Move` is successfully completed. The signal handler is responsible for deleting the data that has been dropped. What \"delete\" means depends on the context of the drag operation. ## `context` the drag context",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_data_get","","The ::drag-data-get signal is emitted on the drag source when the drop site requests the data which is dragged. It is the responsibility of the signal handler to fill `data` with the data in the format which is indicated by `info`. See `SelectionData::set` and `SelectionData::set_text`. ## `context` the drag context ## `data` the `SelectionData` to be filled with the dragged data ## `info` the info that has been registered with the target in the  `TargetList` ## `time` the timestamp at which the data was requested",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_data_received","","The ::drag-data-received signal is emitted on the drop site when the dragged data has been received. If the data was received in order to determine whether the drop will be accepted, the handler is expected to call `gdk_drag_status` and not finish the drag. If the data was received in response to a `Widget::drag-drop` signal (and this is the last target to be received), the handler for this signal is expected to process the received data and then call `gtk_drag_finish`, setting the `success` parameter depending on whether the data was processed successfully.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_drop","","The ::drag-drop signal is emitted on the drop site when the user drops the data onto the widget. The signal handler must determine whether the cursor position is in a drop zone or not. If it is not in a drop zone, it returns `false` and no further processing is necessary. Otherwise, the handler returns `true`. In this case, the handler must ensure that `gtk_drag_finish` is called to let the source know that the drop is done. The call to `gtk_drag_finish` can be done either directly or in a `Widget::drag-data-received` handler which gets triggered by calling `WidgetExt::drag_get_data` to receive the data for one or more of the supported targets. ## `context` the drag context ## `x` the x coordinate of the current cursor position ## `y` the y coordinate of the current cursor position ## `time` the timestamp of the motion event",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_end","","The ::drag-end signal is emitted on the drag source when a drag is finished. A typical reason to connect to this signal is to undo things done in `Widget::drag-begin`. ## `context` the drag context",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_failed","","The ::drag-failed signal is emitted on the drag source when a drag has failed. The signal handler may hook custom code to handle a failed DnD operation based on the type of error, it returns `true` is the failure has been already handled (not showing the default \"drag operation failed\" animation), otherwise it returns `false`. ## `context` the drag context ## `result` the result of the drag operation",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_leave","","The ::drag-leave signal is emitted on the drop site when the cursor leaves the widget. A typical reason to connect to this signal is to undo things done in `Widget::drag-motion`, e.g. undo highlighting with `WidgetExt::drag_unhighlight`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_motion","","The ::drag-motion signal is emitted on the drop site when the user moves the cursor over the widget during a drag. The signal handler must determine whether the cursor position is in a drop zone or not. If it is not in a drop zone, it returns `false` and no further processing is necessary. Otherwise, the handler returns `true`. In this case, the handler is responsible for providing the necessary information for displaying feedback to the user, by calling `gdk_drag_status`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_draw","","This signal is emitted when a widget is supposed to render itself. The `widget`'s top left corner must be painted at the origin of the passed in context and be sized to the values returned by `WidgetExt::get_allocated_width` and `WidgetExt::get_allocated_height`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_enter_notify_event","","The ::enter-notify-event will be emitted when the pointer enters the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_event","","The GTK+ main loop will emit three signals for each GDK event delivered to a widget: one generic ::event signal, another, more specific, signal that matches the type of event delivered (e.g. `Widget::key-press-event`) and finally a generic `Widget::event-after` signal. ## `event` the `GdkEvent` which triggered this signal",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_event_after","","After the emission of the `Widget::event` signal and (optionally) the second more specific signal, ::event-after will be emitted regardless of the previous two signals handlers return values. ## `event` the `GdkEvent` which triggered this signal",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus","","Returns",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_in_event","","The ::focus-in-event signal will be emitted when the keyboard focus enters the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_out_event","","The ::focus-out-event signal will be emitted when the keyboard focus leaves the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_grab_broken_event","","Emitted when a pointer or keyboard grab on a window belonging to `widget` gets broken.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_grab_focus","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_grab_focus","","",743,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_grab_notify","","The ::grab-notify signal is emitted when a widget becomes shadowed by a GTK+ grab (not a pointer or keyboard grab) on another widget, or when it becomes unshadowed due to a grab being removed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_hide","","The ::hide signal is emitted when `widget` is hidden, for example with `WidgetExt::hide`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_hierarchy_changed","","The ::hierarchy-changed signal is emitted when the anchored state of a widget changes. A widget is “anchored” when its toplevel ancestor is a `Window`. This signal is emitted when a widget changes from un-anchored to anchored or vice-versa. ## `previous_toplevel` the previous toplevel ancestor, or `None`  if the widget was previously unanchored",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_key_press_event","","The ::key-press-event signal is emitted when a key is pressed. The signal emission will reoccur at the key-repeat rate when the key is kept pressed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_key_release_event","","The ::key-release-event signal is emitted when a key is released.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_keynav_failed","","Gets emitted if keyboard navigation fails. See `WidgetExt::keynav_failed` for details. ## `direction` the direction of movement",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_leave_notify_event","","The ::leave-notify-event will be emitted when the pointer leaves the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_map","","The ::map signal is emitted when `widget` is going to be mapped, that is when the widget is visible (which is controlled with `WidgetExt::set_visible`) and all its parents up to the toplevel widget are also visible. Once the map has occurred, `Widget::map-event` will be emitted.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mnemonic_activate","","The default handler for this signal activates `widget` if `group_cycling` is `false`, or just makes `widget` grab focus if `group_cycling` is `true`. ## `group_cycling` `true` if there are other widgets with the same mnemonic",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_motion_notify_event","","The ::motion-notify-event signal is emitted when the pointer moves over the widget's `gdk::Window`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_focus","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_focus","","",743,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_parent_set","","The ::parent-set signal is emitted when a new parent has been set on a widget. ## `old_parent` the previous parent, or `None` if the widget  just got its initial parent.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_popup_menu","","This signal gets emitted whenever a widget should pop up a context menu. This usually happens through the standard key binding mechanism; by pressing a certain key while a widget is focused, the user can cause the widget to pop up a menu. For example, the `Entry` widget creates a menu with clipboard commands. See the [Popup Menu Migration Checklist][checklist-popup-menu] for an example of how to use this signal.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup_menu","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_notify_event","","The ::property-notify-event signal will be emitted when a property on the `widget`'s window has been changed or deleted.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_proximity_in_event","","To receive this signal the `gdk::Window` associated to the widget needs to enable the `gdk::EventMask::ProximityInMask` mask.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_proximity_out_event","","To receive this signal the `gdk::Window` associated to the widget needs to enable the `gdk::EventMask::ProximityOutMask` mask.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_tooltip","","Emitted when `Widget:has-tooltip` is `true` and the hover timeout has expired with the cursor hovering \"above\" `widget`; or emitted when `widget` got focus in keyboard mode.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_realize","","The ::realize signal is emitted when `widget` is associated with a `gdk::Window`, which means that `WidgetExt::realize` has been called or the widget has been mapped (that is, it is going to be drawn).",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_screen_changed","","The ::screen-changed signal gets emitted when the screen of a widget has changed. ## `previous_screen` the previous screen, or `None` if the  widget was not associated with a screen before",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_scroll_event","","The ::scroll-event signal is emitted when a button in the 4 to 7 range is pressed. Wheel mice are usually configured to generate button press events for buttons 4 and 5 when the wheel is turned.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_clear_event","","The ::selection-clear-event signal will be emitted when the the `widget`'s window has lost ownership of a selection. ## `event` the `gdk::EventSelection` which triggered  this signal.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_get","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_notify_event","","Returns",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_received","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_request_event","","The ::selection-request-event signal will be emitted when another client requests ownership of the selection owned by the `widget`'s window. ## `event` the `gdk::EventSelection` which triggered  this signal.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show","","The ::show signal is emitted when `widget` is shown, for example with `WidgetExt::show`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_help","","Returns",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show_help","","",743,{"inputs":[{"name":"self"},{"name":"widgethelptype"}],"output":{"name":"bool"}}],[10,"connect_size_allocate","","`allocation` the region which has been  allocated to the widget.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_state_flags_changed","","The ::state-flags-changed signal is emitted when the widget state changes, see `WidgetExt::get_state_flags`. ## `flags` The previous state flags.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_style_updated","","The ::style-updated signal is a convenience signal that is emitted when the `StyleContext::changed` signal is emitted on the `widget`'s associated `StyleContext` as returned by `WidgetExt::get_style_context`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_touch_event","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unmap","","The ::unmap signal is emitted when `widget` is going to be unmapped, which means that either it or any of its parents up to the toplevel widget have been set as hidden.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unrealize","","The ::unrealize signal is emitted when the `gdk::Window` associated with `widget` is destroyed, which means that `WidgetExt::unrealize` has been called or the widget has been unmapped (that is, it is going to be hidden).",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_visibility_notify_event","","The ::visibility-notify-event will be emitted when the `widget`'s window is obscured or unobscured.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_window_state_event","","The ::window-state-event will be emitted when the state of the toplevel window associated to the `widget` changes.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_app_paintable_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_default_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_focus_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_composite_child_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_double_buffered_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_events_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_expand_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_on_click_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_halign_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_default_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_focus_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_tooltip_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_request_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hexpand_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hexpand_set_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_focus_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_bottom_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_end_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_left_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_right_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_start_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_top_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_no_show_all_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_opacity_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_receives_default_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_factor_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sensitive_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_markup_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_text_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_valign_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vexpand_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vexpand_set_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_request_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GtkWindowExt","","Trait containing all `Window` methods.",null,null],[10,"activate_default","","Activates the default widget for the window, unless the current focused widget has been configured to receive the default action (see `WidgetExt::set_receives_default`), in which case the focused widget is activated.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"activate_focus","","Activates the current focused widget within the window.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"activate_key","","Activates mnemonics and accelerators for this `Window`. This is normally called by the default ::key_press_event handler for toplevel windows, however in some cases it may be useful to call this directly when overriding the standard key handling for a toplevel window. ## `event` a `gdk::EventKey`",744,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"add_accel_group","","Associate `accel_group` with `self`, such that calling `gtk_accel_groups_activate` on `self` will activate accelerators in `accel_group`. ## `accel_group` a `AccelGroup`",744,{"inputs":[{"name":"self"},{"name":"accelgroup"}],"output":null}],[10,"add_mnemonic","","Adds a mnemonic to this window. ## `keyval` the mnemonic ## `target` the widget that gets activated by the mnemonic",744,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"p"}],"output":null}],[10,"begin_move_drag","","Starts moving a window. This function is used if an application has window movement grips. When GDK can support it, the window movement will be done using the standard mechanism for the [window manager][gtk-X11-arch] or windowing system. Otherwise, GDK will try to emulate window movement, potentially not all that well, depending on the windowing system. ## `button` mouse button that initiated the drag ## `root_x` X position where the user clicked to initiate the drag, in root window coordinates ## `root_y` Y position where the user clicked to initiate the drag ## `timestamp` timestamp from the click event that initiated the drag",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_resize_drag","","Starts resizing a window. This function is used if an application has window resizing controls. When GDK can support it, the resize will be done using the standard mechanism for the [window manager][gtk-X11-arch] or windowing system. Otherwise, GDK will try to emulate window resizing, potentially not all that well, depending on the windowing system. ## `edge` position of the resize control ## `button` mouse button that initiated the drag ## `root_x` X position where the user clicked to initiate the drag, in root window coordinates ## `root_y` Y position where the user clicked to initiate the drag ## `timestamp` timestamp from the click event that initiated the drag",744,{"inputs":[{"name":"self"},{"name":"windowedge"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"close","","Requests that the window is closed, similar to what happens when a window manager close button is clicked.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"deiconify","","Asks to deiconify (i.e. unminimize) the specified `self`. Note that you shouldn’t assume the window is definitely deiconified afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch])) could iconify it again before your code which assumes deiconification gets to run.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen","","Asks to place `self` in the fullscreen state. Note that you shouldn’t assume the window is definitely full screen afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could unfullscreen it again, and not all window managers honor requests to fullscreen windows. But normally the window will end up fullscreen. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen_on_monitor","","Asks to place `self` in the fullscreen state. Note that you shouldn't assume the window is definitely full screen afterward.",744,{"inputs":[{"name":"self"},{"name":"screen"},{"name":"i32"}],"output":null}],[10,"get_accept_focus","","Gets the value set by `GtkWindowExt::set_accept_focus`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_application","","Gets the `Application` associated with the window (if any).",744,{"inputs":[{"name":"self"}],"output":{"generics":["application"],"name":"option"}}],[10,"get_attached_to","","Fetches the attach widget for this window. See `GtkWindowExt::set_attached_to`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_decorated","","Returns whether the window has been set to have decorations such as a title bar via `GtkWindowExt::set_decorated`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_default_size","","Gets the default size of the window. A value of -1 for the width or height indicates that a default size has not been explicitly set for that dimension, so the “natural” size of the window will be used. ## `width` location to store the default width, or `None` ## `height` location to store the default height, or `None`",744,null],[10,"get_default_widget","","Returns the default widget for `self`. See `GtkWindowExt::set_default` for more details.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_deletable","","Returns whether the window has been set to have a close button via `GtkWindowExt::set_deletable`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_destroy_with_parent","","Returns whether the window will be destroyed with its transient parent. See gtk_window_set_destroy_with_parent ().",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_focus","","Retrieves the current focused widget within the window. Note that this is the widget that would have the focus if the toplevel window focused; if the toplevel window is not focused then `gtk_widget_has_focus (widget)` will not be `true` for the widget.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_focus_on_map","","Gets the value set by `GtkWindowExt::set_focus_on_map`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_focus_visible","","Gets the value of the `Window:focus-visible` property.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_gravity","","Gets the value set by `GtkWindowExt::set_gravity`.",744,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[10,"get_group","","Returns the group for `self` or the default group, if `self` is `None` or if `self` does not have an explicit window group.",744,{"inputs":[{"name":"self"}],"output":{"generics":["windowgroup"],"name":"option"}}],[10,"get_has_resize_grip","","Determines whether the window may have a resize grip.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hide_titlebar_when_maximized","","Returns whether the window has requested to have its titlebar hidden when maximized. See gtk_window_set_hide_titlebar_when_maximized ().",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon","","Gets the value set by `GtkWindowExt::set_icon` (or if you've called `GtkWindowExt::set_icon_list`, gets the first icon in the icon list).",744,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_list","","Retrieves the list of icons set by `GtkWindowExt::set_icon_list`. The list is copied, but the reference count on each member won’t be incremented.",744,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"vec"}}],[10,"get_icon_name","","Returns the name of the themed icon for the window, see `GtkWindowExt::set_icon_name`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mnemonic_modifier","","Returns the mnemonic modifier for this window. See `GtkWindowExt::set_mnemonic_modifier`.",744,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[10,"get_mnemonics_visible","","Gets the value of the `Window:mnemonics-visible` property.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_modal","","Returns whether the window is modal. See `GtkWindowExt::set_modal`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_opacity","","Fetches the requested opacity for this window. See `GtkWindowExt::set_opacity`.",744,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_position","","This function returns the position you need to pass to `GtkWindowExt::move` to keep `self` in its current position. This means that the meaning of the returned value varies with window gravity. See `GtkWindowExt::move` for more details.",744,null],[10,"get_resizable","","Gets the value set by `GtkWindowExt::set_resizable`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_resize_grip_area","","If a window has a resize grip, this will retrieve the grip position, width and height into the specified `gdk::Rectangle`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_role","","Returns the role of the window. See `GtkWindowExt::set_role` for further explanation.",744,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_size","","Obtains the current size of `self`.",744,null],[10,"get_skip_pager_hint","","Gets the value set by `GtkWindowExt::set_skip_pager_hint`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_skip_taskbar_hint","","Gets the value set by `GtkWindowExt::set_skip_taskbar_hint`",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Retrieves the title of the window. See `GtkWindowExt::set_title`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_titlebar","","Returns the custom titlebar that has been set with `GtkWindowExt::set_titlebar`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_transient_for","","Fetches the transient parent for this window. See `GtkWindowExt::set_transient_for`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_type_hint","","Gets the type hint for this window. See `GtkWindowExt::set_type_hint`.",744,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[10,"get_urgency_hint","","Gets the value set by `GtkWindowExt::set_urgency_hint`",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_window_type","","Gets the type of the window. See `WindowType`.",744,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[10,"has_group","","Returns whether `self` has an explicit window group.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_toplevel_focus","","Returns whether the input focus is within this `Window`. For real toplevel windows, this is identical to `GtkWindowExt::is_active`, but for embedded windows, like `Plug`, the results will differ.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"iconify","","Asks to iconify (i.e. minimize) the specified `self`. Note that you shouldn’t assume the window is definitely iconified afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could deiconify it again, or there may not be a window manager in which case iconification isn’t possible, etc. But normally the window will end up iconified. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"is_active","","Returns whether the window is part of the current active toplevel. (That is, the toplevel window receiving keystrokes.) The return value is `true` if the window is active toplevel itself, but also if it is, say, a `Plug` embedded in the active toplevel. You might use this function if you wanted to draw a widget differently in an active window from a widget in an inactive window. See `GtkWindowExt::has_toplevel_focus`",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_maximized","","Retrieves the current maximized state of `self`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"maximize","","Asks to maximize `self`, so that it becomes full-screen. Note that you shouldn’t assume the window is definitely maximized afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could unmaximize it again, and not all window managers support maximization. But normally the window will end up maximized. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"mnemonic_activate","","Activates the targets associated with the mnemonic. ## `keyval` the mnemonic ## `modifier` the modifiers",744,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[10,"move_","","",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"parse_geometry","","Parses a standard X Window System geometry string - see the manual page for X (type “man X”) for details on this. `GtkWindowExt::parse_geometry` does work on all GTK+ ports including Win32 but is primarily intended for an X environment.",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"present","","Presents a window to the user. This may mean raising the window in the stacking order, deiconifying it, moving it to the current desktop, and/or giving it the keyboard focus, possibly dependent on the user’s platform, window manager, and preferences.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"present_with_time","","Presents a window to the user in response to a user interaction. If you need to present a window without a timestamp, use `GtkWindowExt::present`. See `GtkWindowExt::present` for details. ## `timestamp` the timestamp of the user interaction (typically a  button or key press event) which triggered this call",744,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"propagate_key_event","","Propagate a key press or release event to the focus widget and up the focus container chain until a widget handles `event`. This is normally called by the default ::key_press_event and ::key_release_event handlers for toplevel windows, however in some cases it may be useful to call this directly when overriding the standard key handling for a toplevel window. ## `event` a `gdk::EventKey`",744,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"remove_accel_group","","Reverses the effects of `GtkWindowExt::add_accel_group`. ## `accel_group` a `AccelGroup`",744,{"inputs":[{"name":"self"},{"name":"accelgroup"}],"output":null}],[10,"remove_mnemonic","","Removes a mnemonic from this window. ## `keyval` the mnemonic ## `target` the widget that gets activated by the mnemonic",744,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"p"}],"output":null}],[10,"reshow_with_initial_size","","Hides `self`, then reshows it, resetting the default size and position of the window. Used by GUI builders only.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"resize","","Resizes the window as if the user had done so, obeying geometry constraints. The default geometry constraint is that windows may not be smaller than their size request; to override this constraint, call `WidgetExt::set_size_request` to set the window's request to a smaller value.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"resize_grip_is_visible","","Determines whether a resize grip is visible for the specified window.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"resize_to_geometry","","Like `GtkWindowExt::resize`, but `width` and `height` are interpreted in terms of the base size and increment set with gtk_window_set_geometry_hints.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_accept_focus","","Windows may set a hint asking the desktop environment not to receive the input focus. This function sets this hint. ## `setting` `true` to let this window receive input focus",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_application","","Sets or unsets the `Application` associated with the window.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_attached_to","","Marks `self` as attached to `attach_widget`. This creates a logical binding between the window and the widget it belongs to, which is used by GTK+ to propagate information such as styling or accessibility to `self` as if it was a children of `attach_widget`.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_decorated","","By default, windows are decorated with a title bar, resize controls, etc. Some [window managers][gtk-X11-arch] allow GTK+ to disable these decorations, creating a borderless window. If you set the decorated property to `false` using this function, GTK+ will do its best to convince the window manager not to decorate the window. Depending on the system, this function may not have any effect when called on a window that is already visible, so you should call it before calling `WidgetExt::show`.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_default","","The default widget is the widget that’s activated when the user presses Enter in a dialog (for example). This function sets or unsets the default widget for a `Window`. When setting (rather than unsetting) the default widget it’s generally easier to call `WidgetExt::grab_default` on the widget. Before making a widget the default widget, you must call `WidgetExt::set_can_default` on the widget you’d like to make the default. ## `default_widget` widget to be the default, or `None`  to unset the default widget for the toplevel",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_default_geometry","","Like `GtkWindowExt::set_default_size`, but `width` and `height` are interpreted in terms of the base size and increment set with gtk_window_set_geometry_hints.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_default_size","","Sets the default size of a window. If the window’s “natural” size (its size request) is larger than the default, the default will be ignored. More generally, if the default size does not obey the geometry hints for the window (`GtkWindowExt::set_geometry_hints` can be used to set these explicitly), the default size will be clamped to the nearest permitted size.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_deletable","","By default, windows have a close button in the window frame. Some [window managers][gtk-X11-arch] allow GTK+ to disable this button. If you set the deletable property to `false` using this function, GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible, so you should call it before calling `WidgetExt::show`.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_destroy_with_parent","","If `setting` is `true`, then destroying the transient parent of `self` will also destroy `self` itself. This is useful for dialogs that shouldn’t persist beyond the lifetime of the main window they're associated with, for example. ## `setting` whether to destroy `self` with its transient parent",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_focus","","If `focus` is not the current focus widget, and is focusable, sets it as the focus widget for the window. If `focus` is `None`, unsets the focus widget for this window. To set the focus to a particular widget in the toplevel, it is usually more convenient to use `WidgetExt::grab_focus` instead of this function. ## `focus` widget to be the new focus widget, or `None` to unset  any focus widget for the toplevel window.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_focus_on_map","","Windows may set a hint asking the desktop environment not to receive the input focus when the window is mapped. This function sets this hint. ## `setting` `true` to let this window receive input focus on map",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_focus_visible","","Sets the `Window:focus-visible` property. ## `setting` the new value",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_gravity","","Window gravity defines the meaning of coordinates passed to `GtkWindowExt::move`. See `GtkWindowExt::move` and `gdk::Gravity` for more details.",744,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[10,"set_has_resize_grip","","Sets whether `self` has a corner resize grip.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_user_ref_count","","Tells GTK+ whether to drop its extra reference to the window when `WidgetExt::destroy` is called.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hide_titlebar_when_maximized","","If `setting` is `true`, then `self` will request that it’s titlebar should be hidden when maximized. This is useful for windows that don’t convey any information other than the application name in the titlebar, to put the available screen space to better use. If the underlying window system does not support the request, the setting will not have any effect.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_icon","","Sets up the icon representing a `Window`. This icon is used when the window is minimized (also known as iconified). Some window managers or desktop environments may also place it in the window frame, or display it in other contexts. On others, the icon is not used at all, so your mileage may vary.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_from_file","","Sets the icon for `self`. Warns on failure if `err` is `None`.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_icon_list","","Sets up the icon representing a `Window`. The icon is used when the window is minimized (also known as iconified). Some window managers or desktop environments may also place it in the window frame, or display it in other contexts. On others, the icon is not used at all, so your mileage may vary.",744,null],[10,"set_icon_name","","Sets the icon for the window from a named themed icon. See the docs for `IconTheme` for more details. On some platforms, the window icon is not used at all.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_keep_above","","Asks to keep `self` above, so that it stays on top. Note that you shouldn’t assume the window is definitely above afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could not keep it above, and not all window managers support keeping windows above. But normally the window will end kept above. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_keep_below","","Asks to keep `self` below, so that it stays in bottom. Note that you shouldn’t assume the window is definitely below afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could not keep it below, and not all window managers support putting windows below. But normally the window will be kept below. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mnemonic_modifier","","Sets the mnemonic modifier for this window. ## `modifier` the modifier mask used to activate  mnemonics on this window.",744,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[10,"set_mnemonics_visible","","Sets the `Window:mnemonics-visible` property. ## `setting` the new value",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_modal","","Sets a window modal or non-modal. Modal windows prevent interaction with other windows in the same application. To keep modal dialogs on top of main application windows, use `GtkWindowExt::set_transient_for` to make the dialog transient for the parent; most [window managers][gtk-X11-arch] will then disallow lowering the dialog below the parent. ## `modal` whether the window is modal",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_opacity","","Request the windowing system to make `self` partially transparent, with opacity 0 being fully transparent and 1 fully opaque. (Values of the opacity parameter are clamped to the [0,1] range.) On X11 this has any effect only on X screens with a compositing manager running. See `WidgetExt::is_composited`. On Windows it should work always.",744,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_position","","Sets a position constraint for this window. If the old or new constraint is `WindowPosition::CenterAlways`, this will also cause the window to be repositioned to satisfy the new constraint. ## `position` a position constraint.",744,{"inputs":[{"name":"self"},{"name":"windowposition"}],"output":null}],[10,"set_resizable","","Sets whether the user can resize a window. Windows are user resizable by default. ## `resizable` `true` if the user can resize this window",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_role","","This function is only useful on X11, not with other GTK+ targets.",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_screen","","Sets the `gdk::Screen` where the `self` is displayed; if the window is already mapped, it will be unmapped, and then remapped on the new screen. ## `screen` a `gdk::Screen`.",744,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_skip_pager_hint","","Windows may set a hint asking the desktop environment not to display the window in the pager. This function sets this hint. (A \"pager\" is any desktop navigation tool such as a workspace switcher that displays a thumbnail representation of the windows on the screen.) ## `setting` `true` to keep this window from appearing in the pager",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_skip_taskbar_hint","","Windows may set a hint asking the desktop environment not to display the window in the task bar. This function sets this hint. ## `setting` `true` to keep this window from appearing in the task bar",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_startup_id","","Startup notification identifiers are used by desktop environment to track application startup, to provide user feedback and other features. This function changes the corresponding property on the underlying `gdk::Window`. Normally, startup identifier is managed automatically and you should only use this function in special cases like transferring focus from other processes. You should use this function before calling `GtkWindowExt::present` or any equivalent function generating a window map event.",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_title","","Sets the title of the `Window`. The title of a window will be displayed in its title bar; on the X Window System, the title bar is rendered by the [window manager][gtk-X11-arch], so exactly how the title appears to users may vary according to a user’s exact configuration. The title should help a user distinguish this window from other windows they may have open. A good title might include the application name and current document filename, for example. ## `title` title of the window",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_titlebar","","Sets a custom titlebar for `self`.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_transient_for","","Dialog windows should be set transient for the main application window they were spawned from. This allows [window managers][gtk-X11-arch] to e.g. keep the dialog on top of the main window, or center the dialog over the main window. `Dialog::new_with_buttons` and other convenience functions in GTK+ will sometimes call `GtkWindowExt::set_transient_for` on your behalf.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_type_hint","","By setting the type hint for the window, you allow the window manager to decorate and handle the window in a way which is suitable to the function of the window in your application.",744,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":null}],[10,"set_urgency_hint","","Windows may set a hint asking the desktop environment to draw the users attention to the window. This function sets this hint. ## `setting` `true` to mark this window as urgent",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_wmclass","","Don’t use this function. It sets the X Window System “class” and “name” hints for a window. According to the ICCCM, you should always set these to the same value for all windows in an application, and GTK+ sets them to that value by default, so calling this function is sort of pointless. However, you may want to call `GtkWindowExt::set_role` on each window in your application, for the benefit of the session manager. Setting the role allows the window manager to restore window positions when loading a saved session.",744,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"stick","","Asks to stick `self`, which means that it will appear on all user desktops. Note that you shouldn’t assume the window is definitely stuck afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch] could unstick it again, and some window managers do not support sticking windows. But normally the window will end up stuck. Just don't write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"unfullscreen","","Asks to toggle off the fullscreen state for `self`. Note that you shouldn’t assume the window is definitely not full screen afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could fullscreen it again, and not all window managers honor requests to unfullscreen windows. But normally the window will end up restored to its normal state. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"unmaximize","","Asks to unmaximize `self`. Note that you shouldn’t assume the window is definitely unmaximized afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could maximize it again, and not all window managers honor requests to unmaximize. But normally the window will end up unmaximized. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"unstick","","Asks to unstick `self`, which means that it will appear on only one of the user’s desktops. Note that you shouldn’t assume the window is definitely unstuck afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could stick it again. But normally the window will end up stuck. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_default_height","","",744,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_default_height","","",744,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_default_width","","",744,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_default_width","","",744,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_has_toplevel_focus","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_is_active","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_is_maximized","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_resize_grip_visible","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_type","","",744,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[10,"get_property_window_position","","",744,{"inputs":[{"name":"self"}],"output":{"name":"windowposition"}}],[10,"set_property_window_position","","",744,{"inputs":[{"name":"self"},{"name":"windowposition"}],"output":null}],[10,"connect_activate_default","","The ::activate-default signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user activates the default widget of `window`.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_default","","",744,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_activate_focus","","The ::activate-focus signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user activates the currently focused widget of `window`.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_focus","","",744,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_enable_debugging","","The ::enable-debugging signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user enables or disables interactive debugging. When `toggle` is `true`, interactive debugging is toggled on or off, when it is `false`, the debugger will be pointed at the widget under the pointer.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_enable_debugging","","",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_keys_changed","","The ::keys-changed signal gets emitted when the set of accelerators or mnemonics that are associated with `window` changes.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_set_focus","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accept_focus_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_application_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attached_to_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_decorated_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_height_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_width_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_deletable_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_destroy_with_parent_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_on_map_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_visible_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gravity_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_resize_grip_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_toplevel_focus_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hide_titlebar_when_maximized_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_active_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_maximized_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mnemonics_visible_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modal_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resizable_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resize_grip_visible_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_role_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_skip_pager_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_skip_taskbar_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_startup_id_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transient_for_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_urgency_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_position_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"WindowGroupExt","","Trait containing all `WindowGroup` methods.",null,null],[10,"add_window","","Adds a window to a `WindowGroup`. ## `window` the `Window` to add",745,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_current_device_grab","","Returns the current grab widget for `device`, or `None` if none. ## `device` a `gdk::Device`",745,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_current_grab","","Gets the current grab widget of the given group, see `WidgetExt::grab_add`.",745,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"list_windows","","Returns a list of the `GtkWindows` that belong to `self`.",745,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"remove_window","","Removes a window from a `WindowGroup`. ## `window` the `Window` to remove",745,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"AppChooserExt","","Trait containing all `AppChooser` methods.",null,null],[10,"get_app_info","","Returns the currently selected application.",746,{"inputs":[{"name":"self"}],"output":{"generics":["appinfo"],"name":"option"}}],[10,"get_content_type","","Returns the current value of the `AppChooser:content-type` property.",746,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"refresh","","Reloads the list of applications.",746,{"inputs":[{"name":"self"}],"output":null}],[8,"AssistantExtManual","","",null,null],[10,"set_forward_page_func","","",747,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"BuildableExtManual","","",null,null],[10,"get_name","","",748,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_name","","",748,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"ClipboardExtManual","","",null,null],[10,"set_with_data","","",749,null],[8,"ColorButtonExtManual","","",null,null],[10,"new_with_color","","",750,{"inputs":[{"name":"color"}],"output":{"name":"colorbutton"}}],[10,"get_color","","",750,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[10,"set_color","","",750,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[8,"ColorChooserExtManual","","",null,null],[10,"add_palette","","",751,null],[8,"DialogExtManual","","",null,null],[10,"add_buttons","","",752,null],[8,"DragContextExtManual","","",null,null],[10,"drag_finish","","",753,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"drag_cancel","","",753,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_get_source_widget","","",753,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"drag_set_icon_default","","",753,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_set_icon_gicon","","",753,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"drag_set_icon_name","","",753,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"drag_set_icon_pixbuf","","",753,{"inputs":[{"name":"self"},{"name":"pixbuf"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"drag_set_icon_stock","","",753,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"drag_set_icon_surface","","",753,{"inputs":[{"name":"self"},{"name":"surface"}],"output":null}],[10,"drag_set_icon_widget","","",753,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[8,"FixedExtManual","","",null,null],[10,"get_child_x","","",754,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_x","","",754,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_y","","",754,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_y","","",754,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[8,"InvisibleExtManual","","",null,null],[10,"get_screen","","",755,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[8,"ListStoreExtManual","","",null,null],[10,"insert_with_values","","",756,null],[10,"reorder","","",756,null],[10,"set","","",756,null],[10,"set_value","","",756,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"u32"},{"name":"value"}],"output":null}],[8,"MenuExtManual","","",null,null],[10,"popup","","",757,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"popup_easy","","",757,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[8,"NotebookExtManual","","",null,null],[10,"append_page","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"name":"option"}],"output":{"name":"u32"}}],[10,"append_page_menu","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"name":"option"},{"name":"option"}],"output":{"name":"u32"}}],[10,"get_current_page","","",758,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"get_n_pages","","",758,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_nth_page","","",758,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"generics":["widget"],"name":"option"}}],[10,"insert_page","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"name":"option"},{"generics":["u32"],"name":"option"}],"output":{"name":"u32"}}],[10,"insert_page_menu","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"name":"option"},{"name":"option"},{"generics":["u32"],"name":"option"}],"output":{"name":"u32"}}],[10,"page_num","","",758,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["u32"],"name":"option"}}],[10,"prepend_page","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"name":"option"}],"output":{"name":"u32"}}],[10,"prepend_page_menu","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"name":"option"},{"name":"option"}],"output":{"name":"u32"}}],[10,"remove_page","","",758,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":null}],[10,"reorder_child","","",758,{"inputs":[{"name":"self"},{"name":"t"},{"generics":["u32"],"name":"option"}],"output":null}],[10,"set_current_page","","",758,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":null}],[8,"SwitchExtManual","","",null,null],[10,"connect_changed_active","","",759,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextBufferExtManual","","",null,null],[10,"connect_insert_text","","",760,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeModelFilterExtManual","","",null,null],[10,"set_visible_func","","",761,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"TreeSortableExtManual","","",null,null],[10,"set_default_sort_func","","",762,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"set_sort_func","","",762,{"inputs":[{"name":"self"},{"name":"sortcolumn"},{"name":"f"}],"output":null}],[10,"get_sort_column_id","","",762,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"set_sort_column_id","","",762,{"inputs":[{"name":"self"},{"name":"sortcolumn"},{"name":"sorttype"}],"output":null}],[10,"set_unsorted","","",762,{"inputs":[{"name":"self"}],"output":null}],[8,"TreeStoreExtManual","","",null,null],[10,"insert_with_values","","",763,null],[10,"reorder","","",763,null],[10,"set","","",763,null],[10,"set_value","","",763,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"u32"},{"name":"value"}],"output":null}],[8,"WidgetExtManual","","",null,null],[10,"drag_dest_set","","",764,null],[10,"drag_source_set","","",764,null],[10,"intersect","","",764,{"inputs":[{"name":"self"},{"name":"rectangle"},{"generics":["rectangle"],"name":"option"}],"output":{"name":"bool"}}],[10,"override_font","","",764,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":null}],[10,"add_tick_callback","","",764,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u32"}}],[10,"connect_map_event","","",764,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unmap_event","","",764,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EditableSignals","","",null,null],[10,"connect_changed","","",765,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_text","","",765,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_text","","",765,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpinButtonSignals","","",null,null],[10,"connect_change_value","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_input","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_output","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_value_changed","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_wrapped","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"OverlaySignals","","",null,null],[10,"connect_get_child_position","","",767,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[0,"functions","gtk","",null,null],[5,"accel_groups_activate","gtk::functions","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"accel_groups_from_object","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["accelgroup"],"name":"vec"}}],[5,"accelerator_get_default_mod_mask","","",null,{"inputs":[],"output":{"name":"modifiertype"}}],[5,"accelerator_get_label","","",null,{"inputs":[{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_get_label_with_keycode","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_name","","",null,{"inputs":[{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_name_with_keycode","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"u32"},{"name":"modifiertype"}],"output":{"generics":["string"],"name":"option"}}],[5,"accelerator_parse","","",null,null],[5,"accelerator_set_default_mod_mask","","",null,{"inputs":[{"name":"modifiertype"}],"output":null}],[5,"accelerator_valid","","",null,{"inputs":[{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"alternative_dialog_button_order","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"bindings_activate","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"bindings_activate_event","","",null,{"inputs":[{"name":"p"},{"name":"eventkey"}],"output":{"name":"bool"}}],[5,"cairo_should_draw_window","","",null,{"inputs":[{"name":"context"},{"name":"window"}],"output":{"name":"bool"}}],[5,"cairo_transform_to_window","","",null,{"inputs":[{"name":"context"},{"name":"p"},{"name":"window"}],"output":null}],[5,"device_grab_add","","",null,{"inputs":[{"name":"p"},{"name":"q"},{"name":"bool"}],"output":null}],[5,"device_grab_remove","","",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":null}],[5,"disable_setlocale","","",null,{"inputs":[],"output":null}],[5,"events_pending","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"false_","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"get_current_event","","",null,{"inputs":[],"output":{"generics":["event"],"name":"option"}}],[5,"get_current_event_device","","",null,{"inputs":[],"output":{"generics":["device"],"name":"option"}}],[5,"get_current_event_state","","",null,{"inputs":[],"output":{"generics":["modifiertype"],"name":"option"}}],[5,"get_current_event_time","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_debug_flags","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"get_default_language","","",null,{"inputs":[],"output":{"generics":["language"],"name":"option"}}],[5,"get_event_widget","","",null,{"inputs":[{"name":"event"}],"output":{"generics":["widget"],"name":"option"}}],[5,"get_locale_direction","","",null,{"inputs":[],"output":{"name":"textdirection"}}],[5,"grab_get_current","","",null,{"inputs":[],"output":{"generics":["widget"],"name":"option"}}],[5,"main","","",null,{"inputs":[],"output":null}],[5,"main_do_event","","",null,{"inputs":[{"name":"event"}],"output":null}],[5,"main_iteration","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"main_iteration_do","","",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"main_level","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"print_run_page_setup_dialog","","",null,{"inputs":[{"name":"q"},{"name":"r"},{"name":"printsettings"}],"output":{"generics":["pagesetup"],"name":"option"}}],[5,"propagate_event","","",null,{"inputs":[{"name":"p"},{"name":"event"}],"output":null}],[5,"render_activity","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_arrow","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_background","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_background_get_clip","","",null,{"inputs":[{"name":"stylecontext"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"rectangle"}}],[5,"render_check","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_expander","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_extension","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"positiontype"}],"output":null}],[5,"render_focus","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_frame","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_frame_gap","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"positiontype"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_handle","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_icon","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"pixbuf"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_icon_pixbuf","","",null,{"inputs":[{"name":"stylecontext"},{"name":"iconsource"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[5,"render_icon_surface","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"surface"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_insertion_cursor","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"layout"},{"name":"i32"},{"name":"direction"}],"output":null}],[5,"render_layout","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"layout"}],"output":null}],[5,"render_line","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_option","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"render_slider","","",null,{"inputs":[{"name":"stylecontext"},{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"orientation"}],"output":null}],[5,"rgb_to_hsv","","",null,null],[5,"selection_add_target","","",null,{"inputs":[{"name":"p"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":null}],[5,"selection_clear_targets","","",null,{"inputs":[{"name":"p"},{"name":"atom"}],"output":null}],[5,"selection_convert","","",null,{"inputs":[{"name":"p"},{"name":"atom"},{"name":"atom"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"selection_owner_set","","",null,{"inputs":[{"name":"q"},{"name":"atom"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"selection_owner_set_for_display","","",null,{"inputs":[{"name":"display"},{"name":"q"},{"name":"atom"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"selection_remove_all","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"set_debug_flags","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"show_uri","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[5,"show_uri_on_window","","",null,{"inputs":[{"name":"q"},{"name":"str"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[5,"stock_list_ids","","",null,{"inputs":[],"output":{"generics":["string"],"name":"vec"}}],[5,"targets_include_image","","",null,null],[5,"targets_include_rich_text","","",null,null],[5,"targets_include_text","","",null,null],[5,"targets_include_uri","","",null,null],[5,"test_create_simple_window","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_find_label","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_find_sibling","","",null,{"inputs":[{"name":"p"},{"name":"type"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_find_widget","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"type"}],"output":{"generics":["widget"],"name":"option"}}],[5,"test_register_all_types","","",null,{"inputs":[],"output":null}],[5,"test_slider_get_value","","",null,{"inputs":[{"name":"p"}],"output":{"name":"f64"}}],[5,"test_slider_set_perc","","",null,{"inputs":[{"name":"p"},{"name":"f64"}],"output":null}],[5,"test_spin_button_click","","",null,{"inputs":[{"name":"spinbutton"},{"name":"u32"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"test_text_get","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[5,"test_text_set","","",null,{"inputs":[{"name":"p"},{"name":"str"}],"output":null}],[5,"test_widget_click","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"test_widget_send_key","","",null,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[5,"test_widget_wait_for_draw","","",null,{"inputs":[{"name":"p"}],"output":null}],[5,"tree_get_row_drag_data","","",null,{"inputs":[{"name":"selectiondata"}],"output":{"name":"option"}}],[5,"tree_set_row_drag_data","","",null,{"inputs":[{"name":"selectiondata"},{"name":"p"},{"name":"treepath"}],"output":{"name":"bool"}}],[5,"true_","","",null,{"inputs":[],"output":{"name":"bool"}}],[17,"STYLE_PROVIDER_PRIORITY_FALLBACK","gtk","",null,null],[17,"STYLE_PROVIDER_PRIORITY_THEME","","",null,null],[17,"STYLE_PROVIDER_PRIORITY_SETTINGS","","",null,null],[17,"STYLE_PROVIDER_PRIORITY_APPLICATION","","",null,null],[17,"STYLE_PROVIDER_PRIORITY_USER","","",null,null],[8,"AboutDialogExt","","Trait containing all `AboutDialog` methods.",null,null],[10,"add_credit_section","","Creates a new section in the Credits page. ## `section_name` The name of the section ## `people` The people who belong to that section",568,null],[10,"get_artists","","Returns the string which are displayed in the artists tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_authors","","Returns the string which are displayed in the authors tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_comments","","Returns the comments string.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_copyright","","Returns the copyright string.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_documenters","","Returns the string which are displayed in the documenters tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_license","","Returns the license information.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_license_type","","Retrieves the license set using `AboutDialogExt::set_license_type`",568,{"inputs":[{"name":"self"}],"output":{"name":"license"}}],[10,"get_logo","","Returns the pixbuf displayed as logo in the about dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_logo_icon_name","","Returns the icon name displayed as logo in the about dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_program_name","","Returns the program name displayed in the about dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_translator_credits","","Returns the translator credits string which is displayed in the translators tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_version","","Returns the version string.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_website","","Returns the website URL.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_website_label","","Returns the label used for the website link.",568,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_wrap_license","","Returns whether the license text in `self` is automatically wrapped.",568,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_artists","","Sets the strings which are displayed in the artists tab of the secondary credits dialog. ## `artists` a `None`-terminated array of strings",568,null],[10,"set_authors","","Sets the strings which are displayed in the authors tab of the secondary credits dialog. ## `authors` a `None`-terminated array of strings",568,null],[10,"set_comments","","Sets the comments string to display in the about dialog. This should be a short string of one or two lines. ## `comments` a comments string",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_copyright","","Sets the copyright string to display in the about dialog. This should be a short string of one or two lines. ## `copyright` the copyright string",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_documenters","","Sets the strings which are displayed in the documenters tab of the secondary credits dialog. ## `documenters` a `None`-terminated array of strings",568,null],[10,"set_license","","Sets the license information to be displayed in the secondary license dialog. If `license` is `None`, the license button is hidden. ## `license` the license information or `None`",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_license_type","","Sets the license of the application showing the `self` dialog from a list of known licenses.",568,{"inputs":[{"name":"self"},{"name":"license"}],"output":null}],[10,"set_logo","","Sets the pixbuf to be displayed as logo in the about dialog. If it is `None`, the default window icon set with `Window::set_default_icon` will be used. ## `logo` a `gdk_pixbuf::Pixbuf`, or `None`",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_logo_icon_name","","Sets the pixbuf to be displayed as logo in the about dialog. If it is `None`, the default window icon set with `Window::set_default_icon` will be used. ## `icon_name` an icon name, or `None`",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_program_name","","Sets the name to display in the about dialog. If this is not set, it defaults to `g_get_application_name`. ## `name` the program name",568,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_translator_credits","","Sets the translator credits string which is displayed in the translators tab of the secondary credits dialog.",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_version","","Sets the version string to display in the about dialog. ## `version` the version string",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_website","","Sets the URL to use for the website link. ## `website` a URL string starting with \"http://\"",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_website_label","","Sets the label to be used for the website link. ## `website_label` the label used for the website link",568,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_wrap_license","","Sets whether the license text in `self` is automatically wrapped. ## `wrap_license` whether to wrap the license",568,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_link","","The signal which gets emitted to activate a URI. Applications may connect to it to override the default behaviour, which is to call `gtk_show_uri_on_window`. ## `uri` the URI that is activated",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_artists_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_authors_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_comments_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_copyright_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_documenters_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_license_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_license_type_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_logo_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_logo_icon_name_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_program_name_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_translator_credits_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_version_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_website_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_website_label_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_license_notify","","",568,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AccelGroupExt","","Trait containing all `AccelGroup` methods.",null,null],[10,"disconnect_key","","Removes an accelerator previously installed through `AccelGroupExt::connect`. ## `accel_key` key value of the accelerator ## `accel_mods` modifier combination of the accelerator",569,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[10,"get_is_locked","","Locks are added and removed using `AccelGroupExt::lock` and `AccelGroupExt::unlock`.",569,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_modifier_mask","","Gets a `gdk::ModifierType` representing the mask for this `self`. For example, `gdk::ModifierType::ControlMask`, `gdk::ModifierType::ShiftMask`, etc.",569,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[10,"lock","","Locks the given accelerator group.",569,{"inputs":[{"name":"self"}],"output":null}],[10,"unlock","","Undoes the last call to `AccelGroupExt::lock` on this `self`.",569,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_accel_activate","","The accel-activate signal is an implementation detail of `AccelGroup` and not meant to be used by applications. ## `acceleratable` the object on which the accelerator was activated ## `keyval` the accelerator keyval ## `modifier` the modifier combination of the accelerator",569,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_locked_notify","","",569,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modifier_mask_notify","","",569,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ActionBarExt","","Trait containing all `ActionBar` methods.",null,null],[10,"get_center_widget","","Retrieves the center bar widget of the bar.",570,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"pack_end","","Adds `child` to `self`, packed with reference to the end of the `self`.",570,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"pack_start","","Adds `child` to `self`, packed with reference to the start of the `self`.",570,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_center_widget","","Sets the center widget for the `ActionBar`.",570,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_child_pack_type","","",570,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"packtype"}}],[10,"set_child_pack_type","","",570,{"inputs":[{"name":"self"},{"name":"t"},{"name":"packtype"}],"output":null}],[10,"get_child_position","","",570,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",570,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[8,"ActionableExt","","Trait containing all `Actionable` methods.",null,null],[10,"get_action_name","","Gets the action name for `self`.",571,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_action_target_value","","Gets the current target value of `self`.",571,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"set_action_name","","Specifies the name of the action with which this widget should be associated. If `action_name` is `None` then the widget will be unassociated from any previous action.",571,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_action_target_value","","Sets the target value of an actionable widget.",571,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"set_detailed_action_name","","Sets the action-name and associated string target value of an actionable widget.",571,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_property_action_name_notify","","",571,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AdjustmentExt","","Trait containing all `Adjustment` methods.",null,null],[10,"changed","","Emits a `Adjustment::changed` signal from the `Adjustment`. This is typically called by the owner of the `Adjustment` after it has changed any of the `Adjustment` properties other than the value.",572,{"inputs":[{"name":"self"}],"output":null}],[10,"clamp_page","","Updates the `Adjustment:value` property to ensure that the range between `lower` and `upper` is in the current page (i.e. between `Adjustment:value` and `Adjustment:value` + `Adjustment:page-size`). If the range is larger than the page size, then only the start of it will be in the current page.",572,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"configure","","Sets all properties of the adjustment at once.",572,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"get_lower","","Retrieves the minimum value of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_minimum_increment","","Gets the smaller of step increment and page increment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_page_increment","","Retrieves the page increment of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_page_size","","Retrieves the page size of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_step_increment","","Retrieves the step increment of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_upper","","Retrieves the maximum value of the adjustment.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_value","","Gets the current value of the adjustment. See `AdjustmentExt::set_value`.",572,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_lower","","Sets the minimum value of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_page_increment","","Sets the page increment of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_page_size","","Sets the page size of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_step_increment","","Sets the step increment of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_upper","","Sets the maximum value of the adjustment.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_value","","Sets the `Adjustment` value. The value is clamped to lie between `Adjustment:lower` and `Adjustment:upper`.",572,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"value_changed","","Emits a `Adjustment::value-changed` signal from the `Adjustment`. This is typically called by the owner of the `Adjustment` after it has changed the `Adjustment:value` property.",572,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_changed","","Emitted when one or more of the `Adjustment` properties have been changed, other than the `Adjustment:value` property.",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_value_changed","","Emitted when the `Adjustment:value` property has been changed.",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_lower_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_page_increment_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_page_size_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_step_increment_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_upper_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",572,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AlignmentExt","","`[Deprecated since 3.14]` Trait containing all `Alignment` methods.",null,null],[10,"get_padding","","Gets the padding on the different sides of the widget. See gtk_alignment_set_padding ().",573,null],[10,"set","","Sets the `Alignment` values.",573,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_padding","","Sets the padding on the different sides of the widget. The padding adds blank space to the sides of the widget. For instance, this can be used to indent the child widget towards the right by adding padding on the left.",573,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_property_bottom_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_bottom_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_left_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_left_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_right_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_right_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_top_padding","","",573,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_top_padding","","",573,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_xalign","","Horizontal position of child in available space. A value of 0.0 will flush the child left (or right, in RTL locales); a value of 1.0 will flush the child right (or left, in RTL locales).",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","Horizontal position of child in available space. A value of 0.0 will flush the child left (or right, in RTL locales); a value of 1.0 will flush the child right (or left, in RTL locales).",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xscale","","If available horizontal space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xscale","","If available horizontal space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yalign","","Vertical position of child in available space. A value of 0.0 will flush the child to the top; a value of 1.0 will flush the child to the bottom.",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","Vertical position of child in available space. A value of 0.0 will flush the child to the top; a value of 1.0 will flush the child to the bottom.",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yscale","","If available vertical space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yscale","","If available vertical space is bigger than needed, how much of it to use for the child. A value of 0.0 means none; a value of 1.0 means all.",573,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_property_bottom_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_top_padding_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xscale_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yscale_notify","","",573,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AppChooserButtonExt","","",null,null],[10,"append_custom_item","","",574,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":null}],[10,"append_separator","","",574,{"inputs":[{"name":"self"}],"output":null}],[10,"get_heading","","",574,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_default_item","","",574,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_dialog_item","","",574,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active_custom_item","","",574,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_heading","","",574,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_show_default_item","","",574,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_dialog_item","","",574,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_custom_item_activated","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_heading_notify","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_default_item_notify","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_dialog_item_notify","","",574,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AppChooserDialogExt","","Trait containing all `AppChooserDialog` methods.",null,null],[10,"get_heading","","Returns the text to display at the top of the dialog.",575,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_widget","","Returns the `AppChooserWidget` of this dialog.",575,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[10,"set_heading","","Sets the text to display at the top of the dialog. If the heading is not set, the dialog displays a default text. ## `heading` a string containing Pango markup",575,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_gfile","","The GFile used by the `AppChooserDialog`. The dialog's `AppChooserWidget` content type will be guessed from the file, if present.",575,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"connect_property_gfile_notify","","",575,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_heading_notify","","",575,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AppChooserWidgetExt","","Trait containing all `AppChooserWidget` methods.",null,null],[10,"get_default_text","","Returns the text that is shown if there are not applications that can handle the content type.",576,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_all","","Returns the current value of the `AppChooserWidget:show-all` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_default","","Returns the current value of the `AppChooserWidget:show-default` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_fallback","","Returns the current value of the `AppChooserWidget:show-fallback` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_other","","Returns the current value of the `AppChooserWidget:show-other` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_recommended","","Returns the current value of the `AppChooserWidget:show-recommended` property.",576,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_default_text","","Sets the text that is shown if there are not applications that can handle the content type. ## `text` the new value for `AppChooserWidget:default-text`",576,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_show_all","","Sets whether the app chooser should show all applications in a flat list. ## `setting` the new value for `AppChooserWidget:show-all`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_default","","Sets whether the app chooser should show the default handler for the content type in a separate section. ## `setting` the new value for `AppChooserWidget:show-default`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_fallback","","Sets whether the app chooser should show related applications for the content type in a separate section. ## `setting` the new value for `AppChooserWidget:show-fallback`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_other","","Sets whether the app chooser should show applications which are unrelated to the content type. ## `setting` the new value for `AppChooserWidget:show-other`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_recommended","","Sets whether the app chooser should show recommended applications for the content type in a separate section. ## `setting` the new value for `AppChooserWidget:show-recommended`",576,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_application_activated","","Emitted when an application item is activated from the widget's list.",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_application_selected","","Emitted when an application item is selected from the widget's list. ## `application` the selected `gio::AppInfo`",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_populate_popup","","Emitted when a context menu is about to popup over an application item. Clients can insert menu items into the provided `Menu` object in the callback of this signal; the context menu will be shown over the item if at least one item has been added to the menu. ## `menu` the `Menu` to populate ## `application` the current `gio::AppInfo`",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_text_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_all_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_default_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_fallback_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_other_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_recommended_notify","","",576,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GtkApplicationExt","","Trait containing all `Application` methods.",null,null],[10,"add_accelerator","","Installs an accelerator that will cause the named action to be activated when the key combination specificed by `accelerator` is pressed.",577,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"p"}],"output":null}],[10,"add_window","","Adds a window to `self`.",577,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_accels_for_action","","Gets the accelerators that are currently associated with the given action.",577,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_actions_for_accel","","Returns the list of actions (possibly empty) that `accel` maps to. Each item in the list is a detailed action name in the usual form.",577,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_active_window","","Gets the “active” window for the application.",577,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_app_menu","","Returns the menu model that has been set with `GtkApplicationExt::set_app_menu`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_menu_by_id","","Gets a menu from automatically loaded resources. See [Automatic resources][automatic-resources] for more information.",577,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["menu"],"name":"option"}}],[10,"get_menubar","","Returns the menu model that has been set with `GtkApplicationExt::set_menubar`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_window_by_id","","Returns the `ApplicationWindow` with the given ID.",577,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_windows","","Gets a list of the `GtkWindows` associated with `self`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"inhibit","","Inform the session manager that certain types of actions should be inhibited. This is not guaranteed to work on all platforms and for all types of actions.",577,{"inputs":[{"name":"self"},{"name":"q"},{"name":"applicationinhibitflags"},{"name":"r"}],"output":{"name":"u32"}}],[10,"is_inhibited","","Determines if any of the actions specified in `flags` are currently inhibited (possibly by another application). ## `flags` what types of actions should be queried",577,{"inputs":[{"name":"self"},{"name":"applicationinhibitflags"}],"output":{"name":"bool"}}],[10,"list_action_descriptions","","Lists the detailed action names which have associated accelerators. See `GtkApplicationExt::set_accels_for_action`.",577,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"prefers_app_menu","","Determines if the desktop environment in which the application is running would prefer an application menu be shown.",577,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remove_accelerator","","Removes an accelerator that has been previously added with `GtkApplicationExt::add_accelerator`.",577,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"remove_window","","Remove a window from `self`.",577,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_accels_for_action","","Sets zero or more keyboard accelerators that will trigger the given action. The first item in `accels` will be the primary accelerator, which may be displayed in the UI.",577,null],[10,"set_app_menu","","Sets or unsets the application menu for `self`.",577,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_menubar","","Sets or unsets the menubar for windows of `self`.",577,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"uninhibit","","Removes an inhibitor that has been established with `GtkApplicationExt::inhibit`. Inhibitors are also cleared when the application exits. ## `cookie` a cookie that was returned by `GtkApplicationExt::inhibit`",577,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_active_window","","",577,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_property_register_session","","",577,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_register_session","","",577,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_window_added","","Emitted when a `Window` is added to `application` through `GtkApplicationExt::add_window`. ## `window` the newly-added `Window`",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_window_removed","","Emitted when a `Window` is removed from `application`, either as a side-effect of being destroyed or explicitly through `GtkApplicationExt::remove_window`. ## `window` the `Window` that is being removed",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_window_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_app_menu_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menubar_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_register_session_notify","","",577,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ApplicationWindowExt","","Trait containing all `ApplicationWindow` methods.",null,null],[10,"get_help_overlay","","Gets the `ShortcutsWindow` that has been set up with a prior call to `ApplicationWindowExt::set_help_overlay`.",578,{"inputs":[{"name":"self"}],"output":{"generics":["shortcutswindow"],"name":"option"}}],[10,"get_id","","Returns the unique ID of the window. If the window has not yet been added to a `Application`, returns `0`.",578,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_show_menubar","","Returns whether the window will display a menubar for the app menu and menubar as needed.",578,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_help_overlay","","Associates a shortcuts window with the application window, and sets up an action with the name win.show-help-overlay to present it.",578,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_show_menubar","","Sets whether the window will display a menubar for the app menu and menubar as needed. ## `show_menubar` whether to show a menubar when needed",578,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_menubar_notify","","",578,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ArrowExt","","`[Deprecated since 3.14]` Trait containing all `Arrow` methods.",null,null],[10,"set","","Sets the direction and style of the `Arrow`, `self`.",579,{"inputs":[{"name":"self"},{"name":"arrowtype"},{"name":"shadowtype"}],"output":null}],[10,"get_property_arrow_type","","",579,{"inputs":[{"name":"self"}],"output":{"name":"arrowtype"}}],[10,"set_property_arrow_type","","",579,{"inputs":[{"name":"self"},{"name":"arrowtype"}],"output":null}],[10,"get_property_shadow_type","","",579,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"set_property_shadow_type","","",579,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"connect_property_arrow_type_notify","","",579,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",579,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AspectFrameExt","","Trait containing all `AspectFrame` methods.",null,null],[10,"set","","Set parameters for an existing `AspectFrame`. ## `xalign` Horizontal alignment of the child within the allocation of  the `AspectFrame`. This ranges from 0.0 (left aligned)  to 1.0 (right aligned) ## `yalign` Vertical alignment of the child within the allocation of  the `AspectFrame`. This ranges from 0.0 (top aligned)  to 1.0 (bottom aligned) ## `ratio` The desired aspect ratio. ## `obey_child` If `true`, `ratio` is ignored, and the aspect  ratio is taken from the requistion of the child.",580,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"bool"}],"output":null}],[10,"get_property_obey_child","","",580,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_obey_child","","",580,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_ratio","","",580,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_ratio","","",580,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xalign","","",580,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","",580,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yalign","","",580,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","",580,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_property_obey_child_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ratio_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",580,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"AssistantExt","","Trait containing all `Assistant` methods.",null,null],[10,"add_action_widget","","Adds a widget to the action area of a `Assistant`. ## `child` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"append_page","","Appends a page to the `self`. ## `page` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"commit","","Erases the visited page history so the back button is not shown on the current page, and removes the cancel button from subsequent pages.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"get_current_page","","Returns the page number of the current page.",581,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_n_pages","","Returns the number of pages in the `self`",581,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_nth_page","","Returns the child widget contained in page number `page_num`. ## `page_num` the index of a page in the `self`,  or -1 to get the last page",581,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_page_complete","","Gets whether `page` is complete. ## `page` a page of `self`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_page_has_padding","","Gets whether page has padding.",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_page_title","","Gets the title for `page`. ## `page` a page of `self`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_page_type","","Gets the page type of `page`. ## `page` a page of `self`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"assistantpagetype"}}],[10,"insert_page","","Inserts a page in the `self` at a given position. ## `page` a `Widget` ## `position` the index (starting at 0) at which to insert the page,  or -1 to append the page to the `self`",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"next_page","","Navigate to the next page.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"prepend_page","","Prepends a page to the `self`. ## `page` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"previous_page","","Navigate to the previous visited page.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_action_widget","","Removes a widget from the action area of a `Assistant`. ## `child` a `Widget`",581,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_page","","Removes the `page_num`’s page from `self`. ## `page_num` the index of a page in the `self`,  or -1 to remove the last page",581,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_current_page","","Switches the page to `page_num`.",581,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_page_complete","","Sets whether `page` contents are complete.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_page_has_padding","","Sets whether the assistant is adding padding around the page.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_page_title","","Sets a title for `page`.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"set_page_type","","Sets the page type for `page`.",581,{"inputs":[{"name":"self"},{"name":"p"},{"name":"assistantpagetype"}],"output":null}],[10,"update_buttons_state","","Forces `self` to recompute the buttons state.",581,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_use_header_bar","","",581,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_child_complete","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_complete","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_has_padding","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_has_padding","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_page_type","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"assistantpagetype"}}],[10,"set_child_page_type","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"assistantpagetype"}],"output":null}],[10,"get_child_title","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_title","","",581,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"connect_apply","","The ::apply signal is emitted when the apply button is clicked.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cancel","","The ::cancel signal is emitted when then the cancel button is clicked.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_close","","The ::close signal is emitted either when the close button of a summary page is clicked, or when the apply button in the last page in the flow (of type `AssistantPageType::Confirm`) is clicked.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_escape","","",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_escape","","",581,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_prepare","","The ::prepare signal is emitted when a new page is set as the assistant's current page, before making the new page visible.",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_header_bar_notify","","",581,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BinExt","","Trait containing all `Bin` methods.",null,null],[10,"get_child","","Gets the child of the `Bin`, or `None` if the bin contains no child widget. The returned widget does not have a reference added, so you do not need to unref it.",582,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[8,"BoxExt","","Trait containing all `Box` methods.",null,null],[10,"get_baseline_position","","Gets the value set by `BoxExt::set_baseline_position`.",583,{"inputs":[{"name":"self"}],"output":{"name":"baselineposition"}}],[10,"get_center_widget","","Retrieves the center widget of the box.",583,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_homogeneous","","Returns whether the box is homogeneous (all children are the same size). See `BoxExt::set_homogeneous`.",583,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_spacing","","Gets the value set by `BoxExt::set_spacing`.",583,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"pack_end","","Adds `child` to `self`, packed with reference to the end of `self`. The `child` is packed after (away from end of) any other child packed with reference to the end of `self`. ## `child` the `Widget` to be added to `self` ## `expand` `true` if the new child is to be given extra space allocated  to `self`. The extra space will be divided evenly between all children  of `self` that use this option ## `fill` `true` if space given to `child` by the `expand` option is  actually allocated to `child`, rather than just padding it. This  parameter has no effect if `expand` is set to `false`. A child is  always allocated the full height of a horizontal `Box` and the full width  of a vertical `Box`. This option affects the other dimension ## `padding` extra space in pixels to put between this child and its  neighbors, over and above the global amount specified by  `Box:spacing` property. If `child` is a widget at one of the  reference ends of `self`, then `padding` pixels are also put between  `child` and the reference edge of `self`",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"pack_start","","Adds `child` to `self`, packed with reference to the start of `self`. The `child` is packed after any other child packed with reference to the start of `self`. ## `child` the `Widget` to be added to `self` ## `expand` `true` if the new child is to be given extra space allocated  to `self`. The extra space will be divided evenly between all children  that use this option ## `fill` `true` if space given to `child` by the `expand` option is  actually allocated to `child`, rather than just padding it. This  parameter has no effect if `expand` is set to `false`. A child is  always allocated the full height of a horizontal `Box` and the full width  of a vertical `Box`. This option affects the other dimension ## `padding` extra space in pixels to put between this child and its  neighbors, over and above the global amount specified by  `Box:spacing` property. If `child` is a widget at one of the  reference ends of `self`, then `padding` pixels are also put between  `child` and the reference edge of `self`",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"u32"}],"output":null}],[10,"query_child_packing","","Obtains information about how `child` is packed into `self`. ## `child` the `Widget` of the child to query ## `expand` pointer to return location for expand child  property ## `fill` pointer to return location for fill child  property ## `padding` pointer to return location for padding  child property ## `pack_type` pointer to return location for pack-type  child property",583,null],[10,"reorder_child","","Moves `child` to a new `position` in the list of `self` children. The list contains widgets packed `PackType::Start` as well as widgets packed `PackType::End`, in the order that these widgets were added to `self`.",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_baseline_position","","Sets the baseline position of a box. This affects only horizontal boxes with at least one baseline aligned child. If there is more vertical space available than requested, and the baseline is not allocated by the parent then `position` is used to allocate the baseline wrt the extra space available.",583,{"inputs":[{"name":"self"},{"name":"baselineposition"}],"output":null}],[10,"set_center_widget","","Sets a center widget; that is a child widget that will be centered with respect to the full width of the box, even if the children at either side take up different amounts of space.",583,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_child_packing","","Sets the way `child` is packed into `self`. ## `child` the `Widget` of the child to set ## `expand` the new value of the expand child property ## `fill` the new value of the fill child property ## `padding` the new value of the padding child property ## `pack_type` the new value of the pack-type child property",583,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"u32"},{"name":"packtype"}],"output":null}],[10,"set_homogeneous","","Sets the `Box:homogeneous` property of `self`, controlling whether or not all children of `self` are given equal space in the box. ## `homogeneous` a boolean value, `true` to create equal allotments,  `false` for variable allotments",583,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_spacing","","Sets the `Box:spacing` property of `self`, which is the number of pixels to place between children of `self`. ## `spacing` the number of pixels to put between children",583,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_child_position","","",583,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",583,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_baseline_position_notify","","",583,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_homogeneous_notify","","",583,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",583,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"BuildableExt","","Trait containing all `Buildable` methods.",null,null],[10,"add_child","","Adds a child to `self`. `type_` is an optional string describing how the child should be added. ## `builder` a `Builder` ## `child` child to add ## `type_` kind of child or `None`",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"p"},{"name":"q"}],"output":null}],[10,"construct_child","","Constructs a child of `self` with the name `name`.",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_internal_child","","Get the internal child called `childname` of the `self` object. ## `builder` a `Builder` ## `childname` name of child",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"parser_finished","","Called when the builder finishes the parsing of a [`Builder` UI definition][BUILDER-UI]. Note that this will be called once for each time `Builder::add_from_file` or `BuilderExt::add_from_string` is called on a builder. ## `builder` a `Builder`",584,{"inputs":[{"name":"self"},{"name":"builder"}],"output":null}],[10,"set_buildable_property","","Sets the property name `name` to `value` on the `self` object. ## `builder` a `Builder` ## `name` name of property ## `value` value of property",584,{"inputs":[{"name":"self"},{"name":"builder"},{"name":"str"},{"name":"value"}],"output":null}],[8,"BuilderExt","","Trait containing all `Builder` methods.",null,null],[10,"add_from_resource","","Parses a resource file containing a [`Builder` UI definition][BUILDER-UI] and merges it with the current contents of `self`.",585,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_from_string","","Parses a string containing a [`Builder` UI definition][BUILDER-UI] and merges it with the current contents of `self`.",585,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_objects_from_resource","","Parses a resource file containing a [`Builder` UI definition][BUILDER-UI] building only the requested objects and merges them with the current contents of `self`.",585,null],[10,"add_objects_from_string","","Parses a string containing a [`Builder` UI definition][BUILDER-UI] building only the requested objects and merges them with the current contents of `self`.",585,null],[10,"expose_object","","Add `object` to the `self` object pool so it can be referenced just like any other object built by builder.",585,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"extend_with_template","","Main private entry point for building composite container components from template XML.",585,{"inputs":[{"name":"self"},{"name":"p"},{"name":"type"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_application","","Gets the `Application` associated with the builder.",585,{"inputs":[{"name":"self"}],"output":{"generics":["application"],"name":"option"}}],[10,"get_objects","","Gets all objects that have been constructed by `self`. Note that this function does not increment the reference counts of the returned objects.",585,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"vec"}}],[10,"get_translation_domain","","Gets the translation domain of `self`.",585,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_type_from_name","","Looks up a type by name, using the virtual function that `Builder` has for that purpose. This is mainly used when implementing the `Buildable` interface on a type. ## `type_name` type name to lookup",585,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"type"}}],[10,"set_application","","Sets the application associated with `self`.",585,{"inputs":[{"name":"self"},{"name":"application"}],"output":null}],[10,"set_translation_domain","","Sets the translation domain of `self`. See `Builder:translation-domain`. ## `domain` the translation domain or `None`",585,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"value_from_string_type","","Like `BuilderExt::value_from_string`, this function demarshals a value from a string, but takes a `glib::Type` instead of `gobject::ParamSpec`. This function calls `gobject::Value::init` on the `value` argument, so it need not be initialised beforehand.",585,{"inputs":[{"name":"self"},{"name":"type"},{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[10,"connect_property_translation_domain_notify","","",585,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ButtonExt","","Trait containing all `Button` methods.",null,null],[10,"clicked","","Emits a `Button::clicked` signal to the given `Button`.",586,{"inputs":[{"name":"self"}],"output":null}],[10,"get_alignment","","Gets the alignment of the child in the button.",586,null],[10,"get_always_show_image","","Returns whether the button will ignore the `Settings:gtk-button-images` setting and always show the image, if available.",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_event_window","","Returns the button’s event window if it is realized, `None` otherwise. This function should be rarely needed.",586,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_focus_on_click","","Returns whether the button grabs focus when it is clicked with the mouse. See `ButtonExt::set_focus_on_click`.",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_image","","Gets the widget that is currenty set as the image of `self`. This may have been explicitly set by `ButtonExt::set_image` or constructed by `Button::new_from_stock`.",586,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_image_position","","Gets the position of the image relative to the text inside the button.",586,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"get_label","","Fetches the text from the label of the button, as set by `ButtonExt::set_label`. If the label text has not been set the return value will be `None`. This will be the case if you create an empty button with `Button::new` to use as a container.",586,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_relief","","Returns the current relief style of the given `Button`.",586,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_use_stock","","Returns whether the button label is a stock item.",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_underline","","Returns whether an embedded underline in the button label indicates a mnemonic. See gtk_button_set_use_underline ().",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_alignment","","Sets the alignment of the child. This property has no effect unless the child is a `Misc` or a `Alignment`.",586,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_always_show_image","","If `true`, the button will ignore the `Settings:gtk-button-images` setting and always show the image, if available.",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_focus_on_click","","Sets whether the button will grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_image","","Set the image of `self` to the given widget. The image will be displayed if the label text is `None` or if `Button:always-show-image` is `true`. You don’t have to call `WidgetExt::show` on `image` yourself. ## `image` a widget to set as the image for the button",586,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_image_position","","Sets the position of the image relative to the text inside the button. ## `position` the position",586,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"set_label","","Sets the text of the label of the button to `str`. This text is also used to select the stock item if `ButtonExt::set_use_stock` is used.",586,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_relief","","Sets the relief style of the edges of the given `Button` widget. Two styles exist, `ReliefStyle::Normal` and `ReliefStyle::None`. The default style is, as one can guess, `ReliefStyle::Normal`. The deprecated value `ReliefStyle::Half` behaves the same as `ReliefStyle::Normal`. ## `relief` The `ReliefStyle` as described above",586,{"inputs":[{"name":"self"},{"name":"reliefstyle"}],"output":null}],[10,"set_use_stock","","If `true`, the label set on the button is used as a stock id to select the stock item for the button.",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text of the button label indicates the next character should be used for the mnemonic accelerator key. ## `use_underline` `true` if underlines in the text indicate mnemonics",586,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_xalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its horizontal alignment. 0.0 is left aligned, 1.0 is right aligned.",586,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its horizontal alignment. 0.0 is left aligned, 1.0 is right aligned.",586,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_yalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its vertical alignment. 0.0 is top aligned, 1.0 is bottom aligned.",586,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","If the child of the button is a `Misc` or `Alignment`, this property can be used to control its vertical alignment. 0.0 is top aligned, 1.0 is bottom aligned.",586,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_activate","","The ::activate signal on `Button` is an action signal and emitting it causes the button to animate press then release. Applications should never connect to this signal, but use the `Button::clicked` signal.",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",586,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_clicked","","Emitted when the button has been activated (pressed and released).",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_clicked","","",586,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_always_show_image_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_position_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_relief_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_stock_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",586,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ButtonBoxExt","","Trait containing all `ButtonBox` methods.",null,null],[10,"get_child_non_homogeneous","","Returns whether the child is exempted from homogenous sizing. ## `child` a child of `self`",587,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_child_secondary","","Returns whether `child` should appear in a secondary group of children. ## `child` a child of `self`",587,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_layout","","Retrieves the method being used to arrange the buttons in a button box.",587,{"inputs":[{"name":"self"}],"output":{"name":"buttonboxstyle"}}],[10,"set_child_non_homogeneous","","Sets whether the child is exempted from homogeous sizing. ## `child` a child of `self` ## `non_homogeneous` the new value",587,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_child_secondary","","Sets whether `child` should appear in a secondary group of children. A typical use of a secondary child is the help button in a dialog.",587,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_layout","","Changes the way buttons are arranged in their container. ## `layout_style` the new layout style",587,{"inputs":[{"name":"self"},{"name":"buttonboxstyle"}],"output":null}],[10,"get_property_layout_style","","",587,{"inputs":[{"name":"self"}],"output":{"name":"buttonboxstyle"}}],[10,"set_property_layout_style","","",587,{"inputs":[{"name":"self"},{"name":"buttonboxstyle"}],"output":null}],[10,"connect_property_layout_style_notify","","",587,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CalendarExt","","Trait containing all `Calendar` methods.",null,null],[10,"clear_marks","","Remove all visual markers.",588,{"inputs":[{"name":"self"}],"output":null}],[10,"get_date","","Obtains the selected date from a `Calendar`. ## `year` location to store the year as a decimal  number (e.g. 2011), or `None` ## `month` location to store the month number  (between 0 and 11), or `None` ## `day` location to store the day number (between  1 and 31), or `None`",588,null],[10,"get_day_is_marked","","Returns if the `day` of the `self` is already marked. ## `day` the day number between 1 and 31.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_detail_height_rows","","Queries the height of detail cells, in rows. See `Calendar:detail-width-chars`.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_detail_width_chars","","Queries the width of detail cells, in characters. See `Calendar:detail-width-chars`.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_display_options","","Returns the current display options of `self`.",588,{"inputs":[{"name":"self"}],"output":{"name":"calendardisplayoptions"}}],[10,"mark_day","","Places a visual marker on a particular day. ## `day` the day number to mark between 1 and 31.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"select_day","","Selects a day from the current month. ## `day` the day number between 1 and 31, or 0 to unselect  the currently selected day.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"select_month","","Shifts the calendar to a different month. ## `month` a month number between 0 and 11. ## `year` the year the month is in.",588,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"set_detail_height_rows","","Updates the height of detail cells. See `Calendar:detail-height-rows`. ## `rows` detail height in rows.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_detail_width_chars","","Updates the width of detail cells. See `Calendar:detail-width-chars`. ## `chars` detail width in characters.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_display_options","","Sets display options (whether to display the heading and the month headings). ## `flags` the display options to set",588,{"inputs":[{"name":"self"},{"name":"calendardisplayoptions"}],"output":null}],[10,"unmark_day","","Removes the visual marker from a particular day. ## `day` the day number to unmark between 1 and 31.",588,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_day","","The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day). This property gets initially set to the current day.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_day","","The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day). This property gets initially set to the current day.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_month","","The selected month (as a number between 0 and 11). This property gets initially set to the current month.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_month","","The selected month (as a number between 0 and 11). This property gets initially set to the current month.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_no_month_change","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_no_month_change","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_day_names","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_day_names","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_details","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_details","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_heading","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_heading","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_week_numbers","","",588,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_week_numbers","","",588,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_year","","The selected year. This property gets initially set to the current year.",588,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_year","","The selected year. This property gets initially set to the current year.",588,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_day_selected","","Emitted when the user selects a day.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_day_selected_double_click","","Emitted when the user double-clicks a day.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_month_changed","","Emitted when the user clicks a button to change the selected month on a calendar.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_next_month","","Emitted when the user switched to the next month.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_next_year","","Emitted when user switched to the next year.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_prev_month","","Emitted when the user switched to the previous month.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_prev_year","","Emitted when user switched to the previous year.",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_day_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_detail_height_rows_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_detail_width_chars_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_month_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_no_month_change_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_day_names_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_details_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_heading_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_week_numbers_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_year_notify","","",588,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellAreaExt","","Trait containing all `CellArea` methods.",null,null],[10,"activate","","Activates `self`, usually by activating the currently focused cell, however some subclasses which embed widgets in the area can also activate a widget if it currently has the focus. ## `context` the `CellAreaContext` in context with the current row data ## `widget` the `Widget` that `self` is rendering on ## `cell_area` the size and location of `self` relative to `widget`’s allocation ## `flags` the `CellRendererState` flags for `self` for this row of data. ## `edit_only` if `true` then only cell renderers that are `CellRendererMode::Editable`  will be activated.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"rectangle"},{"name":"cellrendererstate"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"activate_cell","","This is used by `CellArea` subclasses when handling events to activate cells, the base `CellArea` class activates cells for keyboard events for free in its own `CellArea`->`activate` implementation. ## `widget` the `Widget` that `self` is rendering onto ## `renderer` the `CellRenderer` in `self` to activate ## `event` the `GdkEvent` for which cell activation should occur ## `cell_area` the `gdk::Rectangle` in `widget` relative coordinates  of `renderer` for the current row. ## `flags` the `CellRendererState` for `renderer`",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"event"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[10,"add","","Adds `renderer` to `self` with the default child cell properties. ## `renderer` the `CellRenderer` to add to `self`",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add_focus_sibling","","Adds `sibling` to `renderer`’s focusable area, focus will be drawn around `renderer` and all of its siblings if `renderer` can focus for a given row.",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"apply_attributes","","Applies any connected attributes to the renderers in `self` by pulling the values from `tree_model`. ## `tree_model` the `TreeModel` to pull values from ## `iter` the `TreeIter` in `tree_model` to apply values for ## `is_expander` whether `iter` has children ## `is_expanded` whether `iter` is expanded in the view and  children are visible",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"treeiter"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"attribute_connect","","Connects an `attribute` to apply values from `column` for the `TreeModel` in use. ## `renderer` the `CellRenderer` to connect an attribute for ## `attribute` the attribute name ## `column` the `TreeModel` column to fetch attribute values from",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"attribute_disconnect","","Disconnects `attribute` for the `renderer` in `self` so that attribute will no longer be updated with values from the model. ## `renderer` the `CellRenderer` to disconnect an attribute for ## `attribute` the attribute name",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"attribute_get_column","","Returns the model column that an attribute has been mapped to, or -1 if the attribute is not mapped.",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"name":"i32"}}],[10,"copy_context","","This is sometimes needed for cases where rows need to share alignments in one orientation but may be separately grouped in the opposing orientation.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"}],"output":{"generics":["cellareacontext"],"name":"option"}}],[10,"create_context","","Creates a `CellAreaContext` to be used with `self` for all purposes. `CellAreaContext` stores geometry information for rows for which it was operated on, it is important to use the same context for the same row of data at all times (i.e. one should render and handle events with the same `CellAreaContext` which was used to request the size of those rows of data).",589,{"inputs":[{"name":"self"}],"output":{"generics":["cellareacontext"],"name":"option"}}],[10,"event","","Delegates event handling to a `CellArea`. ## `context` the `CellAreaContext` for this row of data. ## `widget` the `Widget` that `self` is rendering to ## `event` the `GdkEvent` to handle ## `cell_area` the `widget` relative coordinates for `self` ## `flags` the `CellRendererState` for `self` in this row.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"event"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"name":"i32"}}],[10,"focus","","This should be called by the `self`’s owning layout widget when focus is to be passed to `self`, or moved within `self` for a given `direction` and row data.",589,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[10,"get_cell_allocation","","Derives the allocation of `renderer` inside `self` if `self` were to be renderered in `cell_area`. ## `context` the `CellAreaContext` used to hold sizes for `self`. ## `widget` the `Widget` that `self` is rendering on ## `renderer` the `CellRenderer` to get the allocation for ## `cell_area` the whole allocated area for `self` in `widget`  for this row ## `allocation` where to store the allocation for `renderer`",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"q"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[10,"get_cell_at_position","","Gets the `CellRenderer` at `x` and `y` coordinates inside `self` and optionally returns the full cell allocation for it inside `cell_area`. ## `context` the `CellAreaContext` used to hold sizes for `self`. ## `widget` the `Widget` that `self` is rendering on ## `cell_area` the whole allocated area for `self` in `widget`  for this row ## `x` the x position ## `y` the y position ## `alloc_area` where to store the inner allocated area of the  returned cell renderer, or `None`.",589,null],[10,"get_current_path_string","","Gets the current `TreePath` string for the currently applied `TreeIter`, this is implicitly updated when `CellAreaExt::apply_attributes` is called and can be used to interact with renderers from `CellArea` subclasses.",589,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_edit_widget","","Gets the `CellEditable` widget currently used to edit the currently edited cell.",589,{"inputs":[{"name":"self"}],"output":{"generics":["celleditable"],"name":"option"}}],[10,"get_edited_cell","","Gets the `CellRenderer` in `self` that is currently being edited.",589,{"inputs":[{"name":"self"}],"output":{"generics":["cellrenderer"],"name":"option"}}],[10,"get_focus_cell","","Retrieves the currently focused cell for `self`",589,{"inputs":[{"name":"self"}],"output":{"generics":["cellrenderer"],"name":"option"}}],[10,"get_focus_from_sibling","","Gets the `CellRenderer` which is expected to be focusable for which `renderer` is, or may be a sibling.",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["cellrenderer"],"name":"option"}}],[10,"get_focus_siblings","","Gets the focus sibling cell renderers for `renderer`. ## `renderer` the `CellRenderer` expected to have focus",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["cellrenderer"],"name":"vec"}}],[10,"get_preferred_height","","Retrieves a cell area’s initial minimum and natural height.",589,null],[10,"get_preferred_height_for_width","","Retrieves a cell area’s minimum and natural height if it would be given the specified `width`.",589,null],[10,"get_preferred_width","","Retrieves a cell area’s initial minimum and natural width.",589,null],[10,"get_preferred_width_for_height","","Retrieves a cell area’s minimum and natural width if it would be given the specified `height`.",589,null],[10,"get_request_mode","","Gets whether the area prefers a height-for-width layout or a width-for-height layout.",589,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[10,"has_renderer","","Checks if `self` contains `renderer`. ## `renderer` the `CellRenderer` to check",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"inner_cell_area","","This is a convenience function for `CellArea` implementations to get the inner area where a given `CellRenderer` will be rendered. It removes any padding previously added by `CellAreaExt::request_renderer`. ## `widget` the `Widget` that `self` is rendering onto ## `cell_area` the `widget` relative coordinates where one of `self`’s cells  is to be placed ## `inner_area` the return location for the inner cell area",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[10,"is_activatable","","Returns whether the area can do anything when activated, after applying new attributes to `self`.",589,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_focus_sibling","","Returns whether `sibling` is one of `renderer`’s focus siblings (see `CellAreaExt::add_focus_sibling`). ## `renderer` the `CellRenderer` expected to have focus ## `sibling` the `CellRenderer` to check against `renderer`’s sibling list",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"bool"}}],[10,"remove","","Removes `renderer` from `self`. ## `renderer` the `CellRenderer` to remove from `self`",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_focus_sibling","","Removes `sibling` from `renderer`’s focus sibling list (see `CellAreaExt::add_focus_sibling`). ## `renderer` the `CellRenderer` expected to have focus ## `sibling` the `CellRenderer` to remove from `renderer`’s focus area",589,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"render","","Renders `self`’s cells according to `self`’s layout onto `widget` at the given coordinates. ## `context` the `CellAreaContext` for this row of data. ## `widget` the `Widget` that `self` is rendering to ## `cr` the `cairo::Context` to render with ## `background_area` the `widget` relative coordinates for `self`’s background ## `cell_area` the `widget` relative coordinates for `self` ## `flags` the `CellRendererState` for `self` in this row. ## `paint_focus` whether `self` should paint focus on focused cells for focused rows or not.",589,{"inputs":[{"name":"self"},{"name":"cellareacontext"},{"name":"p"},{"name":"context"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"},{"name":"bool"}],"output":null}],[10,"request_renderer","","This is a convenience function for `CellArea` implementations to request size for cell renderers. It’s important to use this function to request size and then use `CellAreaExt::inner_cell_area` at render and event time since this function will add padding around the cell for focus painting. ## `renderer` the `CellRenderer` to request size for ## `orientation` the `Orientation` in which to request size ## `widget` the `Widget` that `self` is rendering onto ## `for_size` the allocation contextual size to request for, or -1 if the base request for the orientation is to be returned. ## `minimum_size` location to store the minimum size, or `None` ## `natural_size` location to store the natural size, or `None`",589,null],[10,"set_focus_cell","","Explicitly sets the currently focused cell to `renderer`.",589,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"stop_editing","","Explicitly stops the editing of the currently edited cell.",589,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_add_editable","","Indicates that editing has started on `renderer` and that `editable` should be added to the owning cell-layouting widget at `cell_area`. ## `renderer` the `CellRenderer` that started the edited ## `editable` the `CellEditable` widget to add ## `cell_area` the `Widget` relative `gdk::Rectangle` coordinates  where `editable` should be added ## `path` the `TreePath` string this edit was initiated for",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_apply_attributes","","This signal is emitted whenever applying attributes to `area` from `model` ## `model` the `TreeModel` to apply the attributes from ## `iter` the `TreeIter` indicating which row to apply the attributes of ## `is_expander` whether the view shows children for this row ## `is_expanded` whether the view is currently showing the children of this row",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_changed","","Indicates that focus changed on this `area`. This signal is emitted either as a result of focus handling or event handling.",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove_editable","","Indicates that editing finished on `renderer` and that `editable` should be removed from the owning cell-layouting widget. ## `renderer` the `CellRenderer` that finished editeding ## `editable` the `CellEditable` widget to remove",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_edit_widget_notify","","",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_edited_cell_notify","","",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_cell_notify","","",589,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellAreaBoxExt","","Trait containing all `CellAreaBox` methods.",null,null],[10,"get_spacing","","Gets the spacing added between cell renderers.",590,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"pack_end","","Adds `renderer` to `self`, packed with reference to the end of `self`.",590,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"pack_start","","Adds `renderer` to `self`, packed with reference to the start of `self`.",590,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"set_spacing","","Sets the spacing to add between cell renderers in `self`. ## `spacing` the space to add between `GtkCellRenderers`",590,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_spacing_notify","","",590,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellAreaContextExt","","Trait containing all `CellAreaContext` methods.",null,null],[10,"allocate","","Allocates a width and/or a height for all rows which are to be rendered with `self`.",591,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_allocation","","Fetches the current allocation size for `self`.",591,null],[10,"get_area","","Fetches the `CellArea` this `self` was created by.",591,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_preferred_height","","Gets the accumulative preferred height for all rows which have been requested with this context.",591,null],[10,"get_preferred_height_for_width","","Gets the accumulative preferred height for `width` for all rows which have been requested for the same said `width` with this context.",591,null],[10,"get_preferred_width","","Gets the accumulative preferred width for all rows which have been requested with this context.",591,null],[10,"get_preferred_width_for_height","","Gets the accumulative preferred width for `height` for all rows which have been requested for the same said `height` with this context.",591,null],[10,"push_preferred_height","","Causes the minimum and/or natural height to grow if the new proposed sizes exceed the current minimum and natural height.",591,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"push_preferred_width","","Causes the minimum and/or natural width to grow if the new proposed sizes exceed the current minimum and natural width.",591,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"reset","","Resets any previously cached request and allocation data.",591,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_minimum_height","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_minimum_width","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_natural_height","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_natural_width","","",591,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_property_area_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_height_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_width_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_natural_height_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_natural_width_notify","","",591,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellEditableExt","","Trait containing all `CellEditable` methods.",null,null],[10,"editing_done","","Emits the `CellEditable::editing-done` signal.",592,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_widget","","Emits the `CellEditable::remove-widget` signal.",592,{"inputs":[{"name":"self"}],"output":null}],[10,"start_editing","","Begins editing on a `self`. `event` is the `GdkEvent` that began the editing process. It may be `None`, in the instance that editing was initiated through programatic means. ## `event` A `GdkEvent`, or `None`",592,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_editing_canceled","","",592,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editing_canceled","","",592,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_editing_done","","This signal is a sign for the cell renderer to update its value from the `cell_editable`.",592,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove_widget","","This signal is meant to indicate that the cell is finished editing, and the widget may now be destroyed.",592,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editing_canceled_notify","","",592,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellLayoutExt","","Trait containing all `CellLayout` methods.",null,null],[10,"add_attribute","","Adds an attribute mapping to the list in `self`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"clear","","Unsets all the mappings on all renderers on `self` and removes all renderers from `self`.",593,{"inputs":[{"name":"self"}],"output":null}],[10,"clear_attributes","","Clears all existing attributes previously set with `CellLayout::set_attributes`. ## `cell` a `CellRenderer` to clear the attribute mapping on",593,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_area","","Returns the underlying `CellArea` which might be `self` if called on a `CellArea` or might be `None` if no `CellArea` is used by `self`.",593,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_cells","","Returns the cell renderers which have been added to `self`.",593,{"inputs":[{"name":"self"}],"output":{"generics":["cellrenderer"],"name":"vec"}}],[10,"pack_end","","Adds the `cell` to the end of `self`. If `expand` is `false`, then the `cell` is allocated no more space than it needs. Any unused space is divided evenly between cells for which `expand` is `true`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"pack_start","","Packs the `cell` into the beginning of `self`. If `expand` is `false`, then the `cell` is allocated no more space than it needs. Any unused space is divided evenly between cells for which `expand` is `true`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"reorder","","Re-inserts `cell` at `position`.",593,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[8,"CellRendererExt","","Trait containing all `CellRenderer` methods.",null,null],[10,"activate","","Passes an activate event to the cell renderer for possible processing. Some cell renderers may use events; for example, `CellRendererToggle` toggles when it gets a mouse click. ## `event` a `GdkEvent` ## `widget` widget that received the event ## `path` widget-dependent string representation of the event location;  e.g. for `TreeView`, a string representation of `TreePath` ## `background_area` background area as passed to `CellRendererExt::render` ## `cell_area` cell area as passed to `CellRendererExt::render` ## `flags` render flags",594,{"inputs":[{"name":"self"},{"name":"event"},{"name":"p"},{"name":"str"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"name":"bool"}}],[10,"get_aligned_area","","Gets the aligned area used by `self` inside `cell_area`. Used for finding the appropriate edit and focus rectangle. ## `widget` the `Widget` this cell will be rendering to ## `flags` render flags ## `cell_area` cell area which would be passed to `CellRendererExt::render` ## `aligned_area` the return location for the space inside `cell_area`  that would acually be used to render.",594,{"inputs":[{"name":"self"},{"name":"p"},{"name":"cellrendererstate"},{"name":"rectangle"}],"output":{"name":"rectangle"}}],[10,"get_alignment","","Fills in `xalign` and `yalign` with the appropriate values of `self`. ## `xalign` location to fill in with the x alignment of the cell, or `None` ## `yalign` location to fill in with the y alignment of the cell, or `None`",594,null],[10,"get_fixed_size","","Fills in `width` and `height` with the appropriate size of `self`. ## `width` location to fill in with the fixed width of the cell, or `None` ## `height` location to fill in with the fixed height of the cell, or `None`",594,null],[10,"get_padding","","Fills in `xpad` and `ypad` with the appropriate values of `self`. ## `xpad` location to fill in with the x padding of the cell, or `None` ## `ypad` location to fill in with the y padding of the cell, or `None`",594,null],[10,"get_preferred_height","","Retreives a renderer’s natural size when rendered to `widget`. ## `widget` the `Widget` this cell will be rendering to ## `minimum_size` location to store the minimum size, or `None` ## `natural_size` location to store the natural size, or `None`",594,null],[10,"get_preferred_height_for_width","","Retreives a cell renderers’s minimum and natural height if it were rendered to `widget` with the specified `width`. ## `widget` the `Widget` this cell will be rendering to ## `width` the size which is available for allocation ## `minimum_height` location for storing the minimum size, or `None` ## `natural_height` location for storing the preferred size, or `None`",594,null],[10,"get_preferred_size","","Retrieves the minimum and natural size of a cell taking into account the widget’s preference for height-for-width management. ## `widget` the `Widget` this cell will be rendering to ## `minimum_size` location for storing the minimum size, or `None` ## `natural_size` location for storing the natural size, or `None`",594,null],[10,"get_preferred_width","","Retreives a renderer’s natural size when rendered to `widget`. ## `widget` the `Widget` this cell will be rendering to ## `minimum_size` location to store the minimum size, or `None` ## `natural_size` location to store the natural size, or `None`",594,null],[10,"get_preferred_width_for_height","","Retreives a cell renderers’s minimum and natural width if it were rendered to `widget` with the specified `height`. ## `widget` the `Widget` this cell will be rendering to ## `height` the size which is available for allocation ## `minimum_width` location for storing the minimum size, or `None` ## `natural_width` location for storing the preferred size, or `None`",594,null],[10,"get_request_mode","","Gets whether the cell renderer prefers a height-for-width layout or a width-for-height layout.",594,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[10,"get_sensitive","","Returns the cell renderer’s sensitivity.",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_state","","Translates the cell renderer state to `StateFlags`, based on the cell renderer and widget sensitivity, and the given `CellRendererState`. ## `widget` a `Widget`, or `None` ## `cell_state` cell renderer state",594,{"inputs":[{"name":"self"},{"name":"q"},{"name":"cellrendererstate"}],"output":{"name":"stateflags"}}],[10,"get_visible","","Returns the cell renderer’s visibility.",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_activatable","","Checks whether the cell renderer can do something when activated.",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"render","","Invokes the virtual render function of the `CellRenderer`. The three passed-in rectangles are areas in `cr`. Most renderers will draw within `cell_area`; the xalign, yalign, xpad, and ypad fields of the `CellRenderer` should be honored with respect to `cell_area`. `background_area` includes the blank space around the cell, and also the area containing the tree expander; so the `background_area` rectangles for all cells tile to cover the entire `window`. ## `cr` a cairo context to draw to ## `widget` the widget owning `window` ## `background_area` entire cell area (including tree expanders and maybe  padding on the sides) ## `cell_area` area normally rendered by a cell renderer ## `flags` flags that affect rendering",594,{"inputs":[{"name":"self"},{"name":"context"},{"name":"p"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":null}],[10,"set_alignment","","Sets the renderer’s alignment within its available space. ## `xalign` the x alignment of the cell renderer ## `yalign` the y alignment of the cell renderer",594,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_fixed_size","","Sets the renderer size to be explicit, independent of the properties set. ## `width` the width of the cell renderer, or -1 ## `height` the height of the cell renderer, or -1",594,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_padding","","Sets the renderer’s padding. ## `xpad` the x padding of the cell renderer ## `ypad` the y padding of the cell renderer",594,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_sensitive","","Sets the cell renderer’s sensitivity. ## `sensitive` the sensitivity of the cell",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible","","Sets the cell renderer’s visibility. ## `visible` the visibility of the cell",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"start_editing","","Passes an activate event to the cell renderer for possible processing. ## `event` a `GdkEvent` ## `widget` widget that received the event ## `path` widget-dependent string representation of the event location;  e.g. for `TreeView`, a string representation of `TreePath` ## `background_area` background area as passed to `CellRendererExt::render` ## `cell_area` cell area as passed to `CellRendererExt::render` ## `flags` render flags",594,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"str"},{"name":"rectangle"},{"name":"rectangle"},{"name":"cellrendererstate"}],"output":{"generics":["celleditable"],"name":"option"}}],[10,"stop_editing","","Informs the cell renderer that the editing is stopped. If `canceled` is `true`, the cell renderer will emit the `CellRenderer::editing-canceled` signal.",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_cell_background","","",594,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_cell_background_rgba","","",594,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_cell_background_rgba","","",594,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_cell_background_set","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_cell_background_set","","",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editing","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_height","","",594,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_height","","",594,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_is_expanded","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_is_expanded","","",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_is_expander","","",594,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_is_expander","","",594,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_mode","","",594,{"inputs":[{"name":"self"}],"output":{"name":"cellrenderermode"}}],[10,"set_property_mode","","",594,{"inputs":[{"name":"self"},{"name":"cellrenderermode"}],"output":null}],[10,"get_property_width","","",594,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_width","","",594,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_xalign","","",594,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","",594,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xpad","","",594,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_xpad","","",594,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_yalign","","",594,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","",594,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_ypad","","",594,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_ypad","","",594,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_editing_canceled","","This signal gets emitted when the user cancels the process of editing a cell. For example, an editable cell renderer could be written to cancel editing when the user presses Escape.",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_editing_started","","This signal gets emitted when a cell starts to be edited. The intended use of this signal is to do special setup on `editable`, e.g. adding a `EntryCompletion` or setting up additional columns in a `ComboBox`.",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_background_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_background_rgba_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_background_set_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editing_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_expanded_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_expander_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sensitive_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",594,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererAccelExt","","Trait containing all `CellRendererAccel` methods.",null,null],[10,"get_property_accel_key","","",595,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_accel_key","","",595,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_accel_mode","","",595,{"inputs":[{"name":"self"}],"output":{"name":"cellrendereraccelmode"}}],[10,"set_property_accel_mode","","",595,{"inputs":[{"name":"self"},{"name":"cellrendereraccelmode"}],"output":null}],[10,"get_property_accel_mods","","",595,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[10,"set_property_accel_mods","","",595,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[10,"get_property_keycode","","The hardware keycode of the accelerator. Note that the hardware keycode is only relevant if the key does not have a keyval. Normally, the keyboard configuration should assign keyvals to all keys.",595,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_keycode","","The hardware keycode of the accelerator. Note that the hardware keycode is only relevant if the key does not have a keyval. Normally, the keyboard configuration should assign keyvals to all keys.",595,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_accel_cleared","","Gets emitted when the user has removed the accelerator. ## `path_string` the path identifying the row of the edited cell",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_accel_edited","","Gets emitted when the user has selected a new accelerator. ## `path_string` the path identifying the row of the edited cell ## `accel_key` the new accelerator keyval ## `accel_mods` the new acclerator modifier mask ## `hardware_keycode` the keycode of the new accelerator",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_key_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_mode_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_mods_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_keycode_notify","","",595,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererComboExt","","Trait containing all `CellRendererCombo` methods.",null,null],[10,"get_property_has_entry","","",596,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_entry","","",596,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_model","","Holds a tree model containing the possible values for the combo box. Use the text_column property to specify the column holding the values.",596,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"set_property_model","","Holds a tree model containing the possible values for the combo box. Use the text_column property to specify the column holding the values.",596,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_text_column","","",596,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_text_column","","",596,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_changed","","This signal is emitted each time after the user selected an item in the combo box, either by using the mouse or the arrow keys. Contrary to `ComboBox`, `CellRendererCombo`::changed is not emitted for changes made to a selected item in the entry. The argument `new_iter` corresponds to the newly selected item in the combo box and it is relative to the `TreeModel` set via the model property on `CellRendererCombo`.",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_entry_notify","","",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_column_notify","","",596,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererPixbufExt","","Trait containing all `CellRendererPixbuf` methods.",null,null],[10,"get_property_follow_state","","",597,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_follow_state","","",597,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gicon","","The GIcon representing the icon to display. If the icon theme is changed, the image will be updated automatically.",597,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_gicon","","The GIcon representing the icon to display. If the icon theme is changed, the image will be updated automatically.",597,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_icon_name","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_icon_name","","",597,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_pixbuf","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_pixbuf","","",597,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_pixbuf_expander_closed","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_pixbuf_expander_closed","","",597,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_pixbuf_expander_open","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_pixbuf_expander_open","","",597,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_stock_detail","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_stock_detail","","",597,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_stock_id","","",597,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_stock_id","","",597,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_stock_size","","",597,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_stock_size","","",597,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_property_follow_state_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_expander_closed_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_expander_open_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_detail_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_size_notify","","",597,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererProgressExt","","Trait containing all `CellRendererProgress` methods.",null,null],[10,"get_property_inverted","","",598,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_inverted","","",598,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pulse","","Setting this to a non-negative value causes the cell renderer to enter \"activity mode\", where a block bounces back and forth to indicate that some progress is made, without specifying exactly how much.",598,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pulse","","Setting this to a non-negative value causes the cell renderer to enter \"activity mode\", where a block bounces back and forth to indicate that some progress is made, without specifying exactly how much.",598,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_text","","The \"text\" property determines the label which will be drawn over the progress bar. Setting this property to `None` causes the default label to be displayed. Setting this property to an empty string causes no label to be displayed.",598,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","The \"text\" property determines the label which will be drawn over the progress bar. Setting this property to `None` causes the default label to be displayed. Setting this property to an empty string causes no label to be displayed.",598,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_text_xalign","","",598,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_text_xalign","","",598,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_text_yalign","","",598,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_text_yalign","","",598,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_value","","The \"value\" property determines the percentage to which the progress bar will be \"filled in\".",598,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_value","","The \"value\" property determines the percentage to which the progress bar will be \"filled in\".",598,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_inverted_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pulse_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_xalign_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_yalign_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",598,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererSpinExt","","Trait containing all `CellRendererSpin` methods.",null,null],[10,"get_property_adjustment","","The adjustment that holds the value of the spinbutton. This must be non-`None` for the cell renderer to be editable.",599,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"set_property_adjustment","","The adjustment that holds the value of the spinbutton. This must be non-`None` for the cell renderer to be editable.",599,{"inputs":[{"name":"self"},{"generics":["adjustment"],"name":"option"}],"output":null}],[10,"get_property_climb_rate","","",599,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_climb_rate","","",599,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_digits","","The number of decimal places to display.",599,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_digits","","The number of decimal places to display.",599,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_property_adjustment_notify","","",599,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_climb_rate_notify","","",599,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_digits_notify","","",599,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererSpinnerExt","","Trait containing all `CellRendererSpinner` methods.",null,null],[10,"get_property_active","","",600,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","",600,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pulse","","Pulse of the spinner. Increment this value to draw the next frame of the spinner animation. Usually, you would update this value in a timeout.",600,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_pulse","","Pulse of the spinner. Increment this value to draw the next frame of the spinner animation. Usually, you would update this value in a timeout.",600,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_size","","The `IconSize` value that specifies the size of the rendered spinner.",600,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"set_property_size","","The `IconSize` value that specifies the size of the rendered spinner.",600,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"connect_property_active_notify","","",600,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pulse_notify","","",600,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",600,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererTextExt","","Trait containing all `CellRendererText` methods.",null,null],[10,"set_fixed_height_from_font","","Sets the height of a renderer to explicitly be determined by the “font” and “y_pad” property set on it. Further changes in these properties do not affect the height, so they must be accompanied by a subsequent call to this function. Using this function is unflexible, and should really only be used if calculating the size of a cell is too slow (ie, a massive number of cells displayed). If `number_of_rows` is -1, then the fixed height is unset, and the height is determined by the properties again. ## `number_of_rows` Number of rows of text each cell renderer is allocated, or -1",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_align_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_align_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_alignment","","Specifies how to align the lines of text with respect to each other.",601,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[10,"set_property_alignment","","Specifies how to align the lines of text with respect to each other.",601,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":null}],[10,"set_property_background","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_background_rgba","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_background_rgba","","",601,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_background_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editable","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editable_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_ellipsize","","Specifies the preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string. Setting it to `pango::EllipsizeMode::None` turns off ellipsizing. See the wrap-width property for another way of making the text fit into a given width.",601,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"set_property_ellipsize","","Specifies the preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string. Setting it to `pango::EllipsizeMode::None` turns off ellipsizing. See the wrap-width property for another way of making the text fit into a given width.",601,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"get_property_ellipsize_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_ellipsize_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_family","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_family","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_family_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_family_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_font","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_font","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_foreground","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_foreground_rgba","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_foreground_rgba","","",601,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_foreground_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_foreground_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_language","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_language","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_language_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_language_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_markup","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_max_width_chars","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_max_width_chars","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_placeholder_text","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_placeholder_text","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_rise","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rise","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_rise_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_rise_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_scale","","",601,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_scale","","",601,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_scale_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_scale_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_single_paragraph_mode","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_single_paragraph_mode","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_size","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_size","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_size_points","","",601,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_size_points","","",601,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_size_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_size_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_stretch","","",601,{"inputs":[{"name":"self"}],"output":{"name":"stretch"}}],[10,"set_property_stretch","","",601,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":null}],[10,"get_property_stretch_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_stretch_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_style","","",601,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[10,"set_property_style","","",601,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[10,"get_property_style_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_style_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_text","","",601,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","",601,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_underline","","",601,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[10,"set_property_underline","","",601,{"inputs":[{"name":"self"},{"name":"underline"}],"output":null}],[10,"get_property_underline_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_underline_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_variant","","",601,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[10,"set_property_variant","","",601,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"get_property_variant_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_variant_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_weight","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_weight","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_weight_set","","",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_weight_set","","",601,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_width_chars","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_width_chars","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_wrap_mode","","",601,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_property_wrap_mode","","",601,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"get_property_wrap_width","","",601,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_wrap_width","","",601,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_edited","","This signal is emitted after `renderer` has been edited.",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_align_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alignment_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_rgba_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_markup_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_chars_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_placeholder_text_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_single_paragraph_mode_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_points_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_set_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_width_notify","","",601,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellRendererToggleExt","","Trait containing all `CellRendererToggle` methods.",null,null],[10,"get_activatable","","Returns whether the cell renderer is activatable. See `CellRendererToggleExt::set_activatable`.",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_active","","Returns whether the cell renderer is active. See `CellRendererToggleExt::set_active`.",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_radio","","Returns whether we’re rendering radio toggles rather than checkboxes.",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_activatable","","Makes the cell renderer activatable. ## `setting` the value to set.",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_active","","Activates or deactivates a cell renderer. ## `setting` the value to set.",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_radio","","If `radio` is `true`, the cell renderer renders a radio toggle (i.e. a toggle in a group of mutually-exclusive toggles). If `false`, it renders a check toggle (a standalone boolean option). This can be set globally for the cell renderer, or changed just before rendering each cell in the model (for `TreeView`, you set up a per-row setting using `TreeViewColumn` to associate model columns with cell renderer properties). ## `radio` `true` to make the toggle look like a radio button",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_inconsistent","","",602,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_inconsistent","","",602,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_indicator_size","","",602,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_indicator_size","","",602,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_toggled","","The ::toggled signal is emitted when the cell is toggled.",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_activatable_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inconsistent_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indicator_size_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_radio_notify","","",602,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CellViewExt","","",null,null],[10,"get_displayed_row","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_draw_sensitive","","",603,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_fit_model","","",603,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_model","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"set_background_rgba","","",603,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_displayed_row","","",603,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"set_draw_sensitive","","",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_fit_model","","",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_model","","",603,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_property_background","","",603,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_background_rgba","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"get_property_background_set","","",603,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_cell_area","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_property_cell_area_context","","",603,{"inputs":[{"name":"self"}],"output":{"generics":["cellareacontext"],"name":"option"}}],[10,"connect_property_background_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_context_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_sensitive_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fit_model_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",603,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CheckMenuItemExt","","Trait containing all `CheckMenuItem` methods.",null,null],[10,"get_active","","Returns whether the check menu item is active. See gtk_check_menu_item_set_active ().",604,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_draw_as_radio","","Returns whether `self` looks like a `RadioMenuItem`",604,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inconsistent","","Retrieves the value set by `CheckMenuItemExt::set_inconsistent`.",604,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Sets the active state of the menu item’s check box. ## `is_active` boolean value indicating whether the check box is active.",604,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_draw_as_radio","","Sets whether `self` is drawn like a `RadioMenuItem` ## `draw_as_radio` whether `self` is drawn like a `RadioMenuItem`",604,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_inconsistent","","If the user has selected a range of elements (such as some text or spreadsheet cells) that are affected by a boolean setting, and the current values in that range are inconsistent, you may want to display the check in an “in between” state. This function turns on “in between” display. Normally you would turn off the inconsistent state again if the user explicitly selects a setting. This has to be done manually, `CheckMenuItemExt::set_inconsistent` only affects visual appearance, it doesn’t affect the semantics of the widget. ## `setting` `true` to display an “inconsistent” third state check",604,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toggled","","Emits the `CheckMenuItem::toggled` signal.",604,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_toggled","","This signal is emitted when the state of the check box is changed.",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_as_radio_notify","","",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inconsistent_notify","","",604,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ClipboardExt","","Trait containing all `Clipboard` methods.",null,null],[10,"clear","","Clears the contents of the clipboard. Generally this should only be called between the time you call `ClipboardExt::set_with_owner` or `ClipboardExt::set_with_data`, and when the `clear_func` you supplied is called. Otherwise, the clipboard may be owned by someone else.",605,{"inputs":[{"name":"self"}],"output":null}],[10,"get_display","","Gets the `gdk::Display` associated with `self`",605,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_owner","","If the clipboard contents callbacks were set with `ClipboardExt::set_with_owner`, and the `ClipboardExt::set_with_data` or `ClipboardExt::clear` has not subsequently called, returns the owner set by `ClipboardExt::set_with_owner`.",605,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_selection","","Gets the selection that this clipboard is for.",605,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"option"}}],[10,"set_image","","Sets the contents of the clipboard to the given `gdk_pixbuf::Pixbuf`. GTK+ will take responsibility for responding for requests for the image, and for converting the image into the requested format. ## `pixbuf` a `gdk_pixbuf::Pixbuf`",605,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"set_text","","Sets the contents of the clipboard to the given UTF-8 string. GTK+ will make a copy of the text and take responsibility for responding for requests for the text, and for converting the text into the requested format. ## `text` a UTF-8 string. ## `len` length of `text`, in bytes, or -1, in which case  the length will be determined with `strlen`.",605,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"store","","Stores the current clipboard data somewhere so that it will stay around after the application has quit.",605,{"inputs":[{"name":"self"}],"output":null}],[10,"wait_for_contents","","Requests the contents of the clipboard using the given target. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait. ## `target` an atom representing the form into which the clipboard  owner should convert the selection.",605,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"generics":["selectiondata"],"name":"option"}}],[10,"wait_for_image","","Requests the contents of the clipboard as image and converts the result to a `gdk_pixbuf::Pixbuf`. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"wait_for_rich_text","","Requests the contents of the clipboard as rich text. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait. ## `buffer` a `TextBuffer` ## `format` return location for the format of the returned data ## `length` return location for the length of the returned data",605,null],[10,"wait_for_targets","","Returns a list of targets that are present on the clipboard, or `None` if there aren’t any targets available. The returned list must be freed with `g_free`. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait. ## `targets` location  to store an array of targets. The result stored here must  be freed with `g_free`. ## `n_targets` location to store number of items in `targets`.",605,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[10,"wait_for_text","","Requests the contents of the clipboard as text and converts the result to UTF-8 if necessary. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"wait_for_uris","","Requests the contents of the clipboard as URIs. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"wait_is_image_available","","Test to see if there is an image available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported image targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"wait_is_rich_text_available","","Test to see if there is rich text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported rich text targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"},{"name":"textbuffer"}],"output":{"name":"bool"}}],[10,"wait_is_target_available","","Checks if a clipboard supports pasting data of a given type. This function can be used to determine if a “Paste” menu item should be insensitive or not.",605,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[10,"wait_is_text_available","","Test to see if there is text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported text targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"wait_is_uris_available","","Test to see if there is a list of URIs available to be pasted This is done by requesting the TARGETS atom and checking if it contains the URI targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.",605,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ColorButtonExt","","Trait containing all `ColorButton` methods.",null,null],[10,"get_title","","Gets the title of the color selection dialog.",606,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_title","","Sets the title for the color selection dialog. ## `title` String containing new window title",606,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_alpha","","The selected opacity value (0 fully transparent, 65535 fully opaque).",606,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_alpha","","The selected opacity value (0 fully transparent, 65535 fully opaque).",606,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_show_editor","","",606,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_editor","","",606,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_color_set","","The ::color-set signal is emitted when the user selects a color. When handling this signal, use `ColorButton::get_rgba` to find out which color was just selected.",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alpha_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rgba_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_editor_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_alpha_notify","","",606,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ColorChooserExt","","Trait containing all `ColorChooser` methods.",null,null],[10,"get_rgba","","Gets the currently-selected color. ## `color` a `gdk::RGBA` to fill in with the current color",607,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"get_use_alpha","","Returns whether the color chooser shows the alpha channel.",607,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_rgba","","Sets the color. ## `color` the new color",607,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[10,"set_use_alpha","","Sets whether or not the color chooser should use the alpha channel. ## `use_alpha` `true` if color chooser should use alpha channel, `false` if not",607,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_color_activated","","Emitted when a color is activated from the color chooser. This usually happens when the user clicks a color swatch, or a color is selected and the user presses one of the keys Space, Shift+Space, Return or Enter. ## `color` the color",607,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rgba_notify","","",607,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_alpha_notify","","",607,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ColorChooserDialogExt","","Trait containing all `ColorChooserDialog` methods.",null,null],[10,"get_property_show_editor","","",608,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_editor","","",608,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_editor_notify","","",608,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ColorChooserWidgetExt","","Trait containing all `ColorChooserWidget` methods.",null,null],[10,"get_property_show_editor","","",609,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_editor","","",609,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_show_editor_notify","","",609,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ComboBoxExt","","Trait containing all `ComboBox` methods.",null,null],[10,"get_active","","Returns the index of the currently active item, or -1 if there’s no active item. If the model is a non-flat treemodel, and the active item is not an immediate child of the root of the tree, this function returns `gtk_tree_path_get_indices (path)[0]`, where `path` is the `TreePath` of the active item.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_active_id","","Returns the ID of the active row of `self`. This value is taken from the active row and the column specified by the `ComboBox:id-column` property of `self` (see `ComboBoxExt::set_id_column`).",610,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_active_iter","","Sets `iter` to point to the current active item, if it exists. ## `iter` The uninitialized `TreeIter`",610,{"inputs":[{"name":"self"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_add_tearoffs","","Gets the current value of the :add-tearoffs property.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_button_sensitivity","","Returns whether the combo box sets the dropdown button sensitive or not when there are no items in the model.",610,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[10,"get_column_span_column","","Returns the column with column span information for `self`.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_entry_text_column","","Returns the column which `self` is using to get the strings from to display in the internal entry.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_focus_on_click","","Returns whether the combo box grabs focus when it is clicked with the mouse. See `ComboBoxExt::set_focus_on_click`.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_entry","","Returns whether the combo box has an entry.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_id_column","","Returns the column which `self` is using to get string IDs for values from.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the `TreeModel` which is acting as data source for `self`.",610,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_popup_fixed_width","","Gets whether the popup uses a fixed width matching the allocated width of the combo box.",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_row_span_column","","Returns the column with row span information for `self`.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_title","","Gets the current title of the menu in tearoff mode. See `ComboBoxExt::set_add_tearoffs`.",610,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_wrap_width","","Returns the wrap width which is used to determine the number of columns for the popup menu. If the wrap width is larger than 1, the combo box is in table mode.",610,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"popdown","","Hides the menu or dropdown list of `self`.",610,{"inputs":[{"name":"self"}],"output":null}],[10,"popup","","Pops up the menu or dropdown list of `self`.",610,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_for_device","","Pops up the menu or dropdown list of `self`, the popup window will be grabbed so only `device` and its associated pointer/keyboard are the only `GdkDevices` able to send events to it. ## `device` a `gdk::Device`",610,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_active","","Sets the active item of `self` to be the item at `index`. ## `index_` An index in the model passed during construction, or -1 to have no active item",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_active_id","","Changes the active row of `self` to the one that has an ID equal to `active_id`, or unsets the active row if `active_id` is `None`. Rows having a `None` ID string cannot be made active by this function.",610,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_active_iter","","Sets the current active item to be the one referenced by `iter`, or unsets the active item if `iter` is `None`. ## `iter` The `TreeIter`, or `None`",610,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_add_tearoffs","","Sets whether the popup menu should have a tearoff menu item.",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_button_sensitivity","","Sets whether the dropdown button of the combo box should be always sensitive (`SensitivityType::On`), never sensitive (`SensitivityType::Off`) or only if there is at least one item to display (`SensitivityType::Auto`). ## `sensitivity` specify the sensitivity of the dropdown button",610,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":null}],[10,"set_column_span_column","","Sets the column with column span information for `self` to be `column_span`. The column span column contains integers which indicate how many columns an item should span. ## `column_span` A column in the model passed during construction",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_entry_text_column","","Sets the model column which `self` should use to get strings from to be `text_column`. The column `text_column` in the model of `self` must be of type `G_TYPE_STRING`.",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_focus_on_click","","Sets whether the combo box will grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_id_column","","Sets the model column which `self` should use to get string IDs for values from. The column `id_column` in the model of `self` must be of type `G_TYPE_STRING`. ## `id_column` A column in `model` to get string IDs for values from",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model used by `self` to be `model`. Will unset a previously set model (if applicable). If model is `None`, then it will unset the model.",610,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popup_fixed_width","","Specifies whether the popup’s width should be a fixed width matching the allocated width of the combo box. ## `fixed` whether to use a fixed popup width",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_row_span_column","","Sets the column with row span information for `self` to be `row_span`. The row span column contains integers which indicate how many rows an item should span. ## `row_span` A column in the model passed during construction.",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_title","","Sets the menu’s title in tearoff mode.",610,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_wrap_width","","Sets the wrap width of `self` to be `width`. The wrap width is basically the preferred number of columns when you want the popup to be layed out in a table. ## `width` Preferred number of columns",610,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_cell_area","","",610,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"get_property_has_frame","","",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_frame","","",610,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_popup_shown","","",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_tearoff_title","","",610,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tearoff_title","","",610,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_changed","","The changed signal is emitted when the active item is changed. The can be due to the user selecting a different item from the list, or due to a call to `ComboBoxExt::set_active_iter`. It will also be emitted while typing into the entry of a combo box with an entry.",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_format_entry_text","","For combo boxes that are created with an entry (See `ComboBox`:has-entry).",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_active","","The ::move-active signal is a [keybinding signal][`BindingSignal`] which gets emitted to move the active selection. ## `scroll_type` a `ScrollType`",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_active","","",610,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":null}],[10,"connect_popdown","","The ::popdown signal is a [keybinding signal][`BindingSignal`] which gets emitted to popdown the combo box list.",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popdown","","",610,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_popup","","The ::popup signal is a [keybinding signal][`BindingSignal`] which gets emitted to popup the combo box list.",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup","","",610,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_active_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_id_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_add_tearoffs_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_button_sensitivity_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_span_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_entry_text_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_entry_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_frame_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_id_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_fixed_width_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_shown_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_span_column_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tearoff_title_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_width_notify","","",610,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ComboBoxTextExt","","Trait containing all `ComboBoxText` methods.",null,null],[10,"append","","Appends `text` to the list of strings stored in `self`. If `id` is non-`None` then it is used as the ID of the row.",611,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"append_text","","Appends `text` to the list of strings stored in `self`.",611,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_active_text","","Returns the currently active string in `self`, or `None` if none is selected. If `self` contains an entry, this function will return its contents (which will not necessarily be an item from the list).",611,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"insert","","Inserts `text` at `position` in the list of strings stored in `self`. If `id` is non-`None` then it is used as the ID of the row. See `ComboBox:id-column`.",611,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"},{"name":"str"}],"output":null}],[10,"insert_text","","Inserts `text` at `position` in the list of strings stored in `self`.",611,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[10,"prepend","","Prepends `text` to the list of strings stored in `self`. If `id` is non-`None` then it is used as the ID of the row.",611,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"prepend_text","","Prepends `text` to the list of strings stored in `self`.",611,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"remove","","Removes the string at `position` from `self`. ## `position` Index of the item to remove",611,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_all","","Removes all the text entries from the combo box.",611,{"inputs":[{"name":"self"}],"output":null}],[8,"ContainerExt","","Trait containing all `Container` methods.",null,null],[10,"add","","Adds `widget` to `self`. Typically used for simple containers such as `Window`, `Frame`, or `Button`; for more complicated layout containers such as `Box` or `Grid`, this function will pick default packing parameters that may not be correct. So consider functions such as `BoxExt::pack_start` and `GridExt::attach` as an alternative to `ContainerExt::add` in those cases. A widget may be added to only one container at a time; you can’t place the same widget inside two different containers.",612,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"check_resize","","",612,{"inputs":[{"name":"self"}],"output":null}],[10,"child_notify","","Emits a `Widget::child-notify` signal for the child property `child_property` on widget.",612,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"child_type","","Returns the type of the children supported by the container.",612,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[10,"get_border_width","","Retrieves the border width of the container. See `ContainerExt::set_border_width`.",612,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_children","","Returns the container’s non-internal children. See `ContainerExt::forall` for details on what constitutes an \"internal\" child.",612,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[10,"get_focus_child","","Returns the current focus child widget inside `self`. This is not the currently focused widget. That can be obtained by calling `GtkWindowExt::get_focus`.",612,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_focus_hadjustment","","Retrieves the horizontal focus adjustment for the container. See gtk_container_set_focus_hadjustment ().",612,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_focus_vadjustment","","Retrieves the vertical focus adjustment for the container. See `ContainerExt::set_focus_vadjustment`.",612,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_path_for_child","","Returns a newly created widget path representing all the widget hierarchy from the toplevel down to and including `child`. ## `child` a child of `self`",612,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widgetpath"],"name":"option"}}],[10,"get_resize_mode","","Returns the resize mode for the container. See gtk_container_set_resize_mode ().",612,{"inputs":[{"name":"self"}],"output":{"name":"resizemode"}}],[10,"propagate_draw","","When a container receives a call to the draw function, it must send synthetic `Widget::draw` calls to all children that don’t have their own `GdkWindows`. This function provides a convenient way of doing this. A container, when it receives a call to its `Widget::draw` function, calls `ContainerExt::propagate_draw` once for each child, passing in the `cr` the container received.",612,{"inputs":[{"name":"self"},{"name":"p"},{"name":"context"}],"output":null}],[10,"remove","","Removes `widget` from `self`. `widget` must be inside `self`. Note that `self` will own a reference to `widget`, and that this may be the last reference held; so removing a widget from its container can destroy that widget. If you want to use `widget` again, you need to add a reference to it before removing it from a container, using `gobject::ObjectExt::ref`. If you don’t want to use `widget` again it’s usually more efficient to simply destroy it directly using `WidgetExt::destroy` since this will remove it from the container and help break any circular reference count cycles. ## `widget` a current child of `self`",612,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"resize_children","","Deprecated since 3.10",612,{"inputs":[{"name":"self"}],"output":null}],[10,"set_border_width","","Sets the border width of the container.",612,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_focus_chain","","Sets a focus chain, overriding the one computed automatically by GTK+.",612,null],[10,"set_focus_child","","Sets, or unsets if `child` is `None`, the focused child of `self`.",612,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_focus_hadjustment","","Hooks up an adjustment to focus handling in a container, so when a child of the container is focused, the adjustment is scrolled to show that widget. This function sets the horizontal alignment. See `ScrolledWindowExt::get_hadjustment` for a typical way of obtaining the adjustment and `ContainerExt::set_focus_vadjustment` for setting the vertical adjustment.",612,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_focus_vadjustment","","Hooks up an adjustment to focus handling in a container, so when a child of the container is focused, the adjustment is scrolled to show that widget. This function sets the vertical alignment. See `ScrolledWindowExt::get_vadjustment` for a typical way of obtaining the adjustment and `ContainerExt::set_focus_hadjustment` for setting the horizontal adjustment.",612,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_reallocate_redraws","","Sets the `reallocate_redraws` flag of the container to the given value.",612,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_resize_mode","","Sets the resize mode for the container.",612,{"inputs":[{"name":"self"},{"name":"resizemode"}],"output":null}],[10,"unset_focus_chain","","Removes a focus chain explicitly set with `ContainerExt::set_focus_chain`.",612,{"inputs":[{"name":"self"}],"output":null}],[10,"set_property_child","","",612,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"connect_add","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_check_resize","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_set_focus_child","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_border_width_notify","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_child_notify","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resize_mode_notify","","",612,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"CssProviderExt","","Trait containing all `CssProvider` methods.",null,null],[10,"load_from_data","","Loads `data` into `self`, and by doing so clears any previously loaded information. ## `data` CSS data loaded in memory ## `length` the length of `data` in bytes, or -1 for NUL terminated strings. If  `length` is not -1, the code will assume it is not NUL terminated and will  potentially do a copy.",613,null],[10,"load_from_file","","Loads the data contained in `file` into `self`, making it clear any previously loaded information. ## `file` `gio::File` pointing to a file to load",613,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_from_path","","Loads the data contained in `path` into `self`, making it clear any previously loaded information. ## `path` the path of a filename to load, in the GLib filename encoding",613,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_from_resource","","Loads the data contained in the resource at `resource_path` into the `CssProvider`, clearing any previously loaded information.",613,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"to_string","","Converts the `self` into a string representation in CSS format.",613,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"connect_parsing_error","","Signals that a parsing error occurred. the `path`, `line` and `position` describe the actual location of the error as accurately as possible.",613,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"DialogExt","","Trait containing all `Dialog` methods.",null,null],[10,"add_action_widget","","Adds an activatable widget to the action area of a `Dialog`, connecting a signal handler that will emit the `Dialog::response` signal on the dialog when the widget is activated. The widget is appended to the end of the dialog’s action area. If you want to add a non-activatable widget, simply pack it into the `action_area` field of the `Dialog` struct. ## `child` an activatable widget ## `response_id` response ID for `child`",614,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"add_button","","Adds a button with the given text and sets things up so that clicking the button will emit the `Dialog::response` signal with the given `response_id`. The button is appended to the end of the dialog’s action area. The button widget is returned, but usually you don’t need it. ## `button_text` text of button ## `response_id` response ID for the button",614,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"widget"}}],[10,"get_action_area","","Returns the action area of `self`.",614,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[10,"get_content_area","","Returns the content area of `self`.",614,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"get_header_bar","","Returns the header bar of `self`. Note that the headerbar is only used by the dialog if the `Dialog:use-header-bar` property is `true`.",614,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_response_for_widget","","Gets the response id of a widget in the action area of a dialog. ## `widget` a widget in the action area of `self`",614,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_widget_for_response","","Gets the widget button that uses the given response ID in the action area of a dialog. ## `response_id` the response ID used by the `self` widget",614,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["widget"],"name":"option"}}],[10,"response","","Emits the `Dialog::response` signal with the given response ID. Used to indicate that the user has responded to the dialog in some way; typically either you or `DialogExt::run` will be monitoring the ::response signal and take appropriate action. ## `response_id` response ID",614,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"run","","Blocks in a recursive main loop until the `self` either emits the `Dialog::response` signal, or is destroyed. If the dialog is destroyed during the call to `DialogExt::run`, `DialogExt::run` returns `ResponseType::None`. Otherwise, it returns the response ID from the ::response signal emission.",614,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_alternative_button_order_from_array","","Sets an alternative button order. If the `Settings:gtk-alternative-button-order` setting is set to `true`, the dialog buttons are reordered according to the order of the response ids in `new_order`.",614,null],[10,"set_default_response","","Sets the last widget in the dialog’s action area with the given `response_id` as the default widget for the dialog. Pressing “Enter” normally activates the default widget. ## `response_id` a response ID",614,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_response_sensitive","","Calls `gtk_widget_set_sensitive (widget, @setting)` for each widget in the dialog’s action area with the given `response_id`. A convenient way to sensitize/desensitize dialog buttons. ## `response_id` a response ID ## `setting` `true` for sensitive",614,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"get_property_use_header_bar","","",614,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_close","","The ::close signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to close the dialog.",614,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_close","","",614,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_response","","Emitted when an action widget is clicked, the dialog receives a delete event, or the application programmer calls `DialogExt::response`. On a delete event, the response ID is `ResponseType::DeleteEvent`. Otherwise, it depends on which action widget was clicked. ## `response_id` the response ID",614,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_header_bar_notify","","",614,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EditableExt","","Trait containing all `Editable` methods.",null,null],[10,"copy_clipboard","","Copies the contents of the currently selected content in the editable and puts it on the clipboard.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"cut_clipboard","","Removes the contents of the currently selected content in the editable and puts it on the clipboard.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"delete_selection","","Deletes the currently selected text of the editable. This call doesn’t do anything if there is no selected text.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"delete_text","","Deletes a sequence of characters. The characters that are deleted are those characters at positions from `start_pos` up to, but not including `end_pos`. If `end_pos` is negative, then the characters deleted are those from `start_pos` to the end of the text.",615,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_chars","","Retrieves a sequence of characters. The characters that are retrieved are those characters at positions from `start_pos` up to, but not including `end_pos`. If `end_pos` is negative, then the characters retrieved are those characters from `start_pos` to the end of the text.",615,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_editable","","Retrieves whether `self` is editable. See `Editable::set_editable`.",615,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_position","","Retrieves the current position of the cursor relative to the start of the content of the editable.",615,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_selection_bounds","","Retrieves the selection bound of the editable. start_pos will be filled with the start of the selection and `end_pos` with end. If no text was selected both will be identical and `false` will be returned.",615,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"insert_text","","Inserts `new_text_length` bytes of `new_text` into the contents of the widget, at position `position`.",615,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"paste_clipboard","","Pastes the content of the clipboard to the current position of the cursor in the editable.",615,{"inputs":[{"name":"self"}],"output":null}],[10,"select_region","","Selects a region of text. The characters that are selected are those characters at positions from `start_pos` up to, but not including `end_pos`. If `end_pos` is negative, then the characters selected are those characters from `start_pos` to the end of the text.",615,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_editable","","Determines if the user can edit the text in the editable widget or not. ## `is_editable` `true` if the user is allowed to edit the text  in the widget",615,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_position","","Sets the cursor position in the editable to the given value.",615,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[8,"EntryExt","","Trait containing all `Entry` methods.",null,null],[10,"get_activates_default","","Retrieves the value set by `EntryExt::set_activates_default`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_alignment","","Gets the value set by `EntryExt::set_alignment`.",616,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_attributes","","Gets the attribute list that was set on the entry using `EntryExt::set_attributes`, if any.",616,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[10,"get_buffer","","Get the `EntryBuffer` object which holds the text for this widget.",616,{"inputs":[{"name":"self"}],"output":{"name":"entrybuffer"}}],[10,"get_completion","","Returns the auxiliary completion object currently in use by `self`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["entrycompletion"],"name":"option"}}],[10,"get_current_icon_drag_source","","Returns the index of the icon which is the source of the current DND operation, or -1.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_cursor_hadjustment","","Retrieves the horizontal cursor adjustment for the entry. See `EntryExt::set_cursor_hadjustment`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_has_frame","","Gets the value set by `EntryExt::set_has_frame`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon_activatable","","Returns whether the icon is activatable. ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"bool"}}],[10,"get_icon_area","","Gets the area where entry’s icon at `icon_pos` is drawn. This function is useful when drawing something to the entry in a draw callback.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"rectangle"}}],[10,"get_icon_at_pos","","Finds the icon at the given position and return its index. The position’s coordinates are relative to the `self`’s top left corner. If `x`, `y` doesn’t lie inside an icon, -1 is returned. This function is intended for use in a `Widget::query-tooltip` signal handler. ## `x` the x coordinate of the position to find ## `y` the y coordinate of the position to find",616,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_icon_gicon","","Retrieves the `gio::Icon` used for the icon, or `None` if there is no icon or if the icon was set by some other method (e.g., by stock, pixbuf, or icon name). ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_icon_name","","Retrieves the icon name used for the icon, or `None` if there is no icon or if the icon was set by some other method (e.g., by pixbuf, stock or gicon). ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_pixbuf","","Retrieves the image used for the icon.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_sensitive","","Returns whether the icon appears sensitive or insensitive. ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"bool"}}],[10,"get_icon_stock","","Retrieves the stock id used for the icon, or `None` if there is no icon or if the icon was set by some other method (e.g., by pixbuf, icon name or gicon).",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_storage_type","","Gets the type of representation being used by the icon to store image data. If the icon has no image data, the return value will be `ImageType::Empty`. ## `icon_pos` Icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"name":"imagetype"}}],[10,"get_icon_tooltip_markup","","Gets the contents of the tooltip on the icon at the specified position in `self`. ## `icon_pos` the icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_tooltip_text","","Gets the contents of the tooltip on the icon at the specified position in `self`. ## `icon_pos` the icon position",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_input_hints","","Gets the value of the `Entry:input-hints` property.",616,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[10,"get_input_purpose","","Gets the value of the `Entry:input-purpose` property.",616,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[10,"get_invisible_char","","Retrieves the character displayed in place of the real characters for entries with visibility set to false. See `EntryExt::set_invisible_char`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[10,"get_layout","","Gets the `pango::Layout` used to display the entry. The layout is useful to e.g. convert text positions to pixel positions, in combination with `EntryExt::get_layout_offsets`. The returned layout is owned by the entry and must not be modified or freed by the caller.",616,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_offsets","","Obtains the position of the `pango::Layout` used to render text in the entry, in widget coordinates. Useful if you want to line up the text in an entry with some other text, e.g. when using the entry to implement editable cells in a sheet widget.",616,null],[10,"get_max_length","","Retrieves the maximum allowed length of the text in `self`. See `EntryExt::set_max_length`.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_width_chars","","Retrieves the desired maximum width of `self`, in characters. See `EntryExt::set_max_width_chars`.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_overwrite_mode","","Gets the value set by `EntryExt::set_overwrite_mode`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_placeholder_text","","Retrieves the text that will be displayed when `self` is empty and unfocused",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_progress_fraction","","Returns the current fraction of the task that’s been completed. See `EntryExt::set_progress_fraction`.",616,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_progress_pulse_step","","Retrieves the pulse step set with `EntryExt::set_progress_pulse_step`.",616,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_tabs","","Gets the tabstops that were set on the entry using `EntryExt::set_tabs`, if any.",616,{"inputs":[{"name":"self"}],"output":{"generics":["tabarray"],"name":"option"}}],[10,"get_text","","Retrieves the contents of the entry widget. See also `Editable::get_chars`.",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_text_area","","Gets the area where the entry’s text is drawn. This function is useful when drawing something to the entry in a draw callback.",616,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_text_length","","Retrieves the current length of the text in `self`.",616,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[10,"get_visibility","","Retrieves whether the text in `self` is visible. See `EntryExt::set_visibility`.",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_width_chars","","Gets the value set by `EntryExt::set_width_chars`.",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"grab_focus_without_selecting","","Causes `self` to have keyboard focus.",616,{"inputs":[{"name":"self"}],"output":null}],[10,"im_context_filter_keypress","","Allow the `Entry` input method to internally handle key press and release events. If this function returns `true`, then no further processing should be done for this key event. See `IMContextExt::filter_keypress`.",616,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"layout_index_to_text_index","","Converts from a position in the entry’s `pango::Layout` (returned by `EntryExt::get_layout`) to a position in the entry contents (returned by `EntryExt::get_text`). ## `layout_index` byte index into the entry layout text",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"progress_pulse","","Indicates that some progress is made, but you don’t know how much. Causes the entry’s progress indicator to enter “activity mode,” where a block bounces back and forth. Each call to `EntryExt::progress_pulse` causes the block to move by a little bit (the amount of movement per pulse is determined by `EntryExt::set_progress_pulse_step`).",616,{"inputs":[{"name":"self"}],"output":null}],[10,"reset_im_context","","Reset the input method context of the entry if needed.",616,{"inputs":[{"name":"self"}],"output":null}],[10,"set_activates_default","","If `setting` is `true`, pressing Enter in the `self` will activate the default widget for the window containing the entry. This usually means that the dialog box containing the entry will be closed, since the default widget is usually one of the dialog buttons.",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_alignment","","Sets the alignment for the contents of the entry. This controls the horizontal positioning of the contents when the displayed text is shorter than the width of the entry. ## `xalign` The horizontal alignment, from 0 (left) to 1 (right).  Reversed for RTL layouts",616,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"set_attributes","","Sets a `pango::AttrList`; the attributes in the list are applied to the entry text.",616,{"inputs":[{"name":"self"},{"name":"attrlist"}],"output":null}],[10,"set_buffer","","Set the `EntryBuffer` object which holds the text for this widget. ## `buffer` a `EntryBuffer`",616,{"inputs":[{"name":"self"},{"name":"entrybuffer"}],"output":null}],[10,"set_completion","","Sets `completion` to be the auxiliary completion object to use with `self`. All further configuration of the completion mechanism is done on `completion` using the `EntryCompletion` API. Completion is disabled if `completion` is set to `None`. ## `completion` The `EntryCompletion` or `None`",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cursor_hadjustment","","Hooks up an adjustment to the cursor position in an entry, so that when the cursor is moved, the adjustment is scrolled to show that position. See `ScrolledWindowExt::get_hadjustment` for a typical way of obtaining the adjustment.",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_frame","","Sets whether the entry has a beveled frame around it. ## `setting` new value",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_icon_activatable","","Sets whether the icon is activatable. ## `icon_pos` Icon position ## `activatable` `true` if the icon should be activatable",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"bool"}],"output":null}],[10,"set_icon_drag_source","","Sets up the icon at the given position so that GTK+ will start a drag operation when the user clicks and drags the icon.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"targetlist"},{"name":"dragaction"}],"output":null}],[10,"set_icon_from_gicon","","Sets the icon shown in the entry at the specified position from the current icon theme. If the icon isn’t known, a “broken image” icon will be displayed instead.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"q"}],"output":null}],[10,"set_icon_from_icon_name","","Sets the icon shown in the entry at the specified position from the current icon theme.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_from_pixbuf","","Sets the icon shown in the specified position using a pixbuf.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_from_stock","","Sets the icon shown in the entry at the specified position from a stock image.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_sensitive","","Sets the sensitivity for the specified icon. ## `icon_pos` Icon position ## `sensitive` Specifies whether the icon should appear  sensitive or insensitive",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"bool"}],"output":null}],[10,"set_icon_tooltip_markup","","Sets `tooltip` as the contents of the tooltip for the icon at the specified position. `tooltip` is assumed to be marked up with the [Pango text markup language][PangoMarkupFormat].",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_icon_tooltip_text","","Sets `tooltip` as the contents of the tooltip for the icon at the specified position.",616,{"inputs":[{"name":"self"},{"name":"entryiconposition"},{"name":"p"}],"output":null}],[10,"set_input_hints","","Sets the `Entry:input-hints` property, which allows input methods to fine-tune their behaviour.",616,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[10,"set_input_purpose","","Sets the `Entry:input-purpose` property which can be used by on-screen keyboards and other input methods to adjust their behaviour.",616,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":null}],[10,"set_invisible_char","","Sets the character to use in place of the actual text when `EntryExt::set_visibility` has been called to set text visibility to `false`. i.e. this is the character used in “password mode” to show the user how many characters have been typed. By default, GTK+ picks the best invisible char available in the current font. If you set the invisible char to 0, then the user will get no feedback at all; there will be no text on the screen as they type. ## `ch` a Unicode character",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_max_length","","Sets the maximum allowed length of the contents of the widget. If the current contents are longer than the given length, then they will be truncated to fit.",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_max_width_chars","","Sets the desired maximum width in characters of `self`.",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_overwrite_mode","","Sets whether the text is overwritten when typing in the `Entry`. ## `overwrite` new value",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_placeholder_text","","Sets text to be displayed in `self` when it is empty and unfocused. This can be used to give a visual hint of the expected contents of the `Entry`.",616,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_progress_fraction","","Causes the entry’s progress indicator to “fill in” the given fraction of the bar. The fraction should be between 0.0 and 1.0, inclusive. ## `fraction` fraction of the task that’s been completed",616,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_progress_pulse_step","","Sets the fraction of total entry width to move the progress bouncing block for each call to `EntryExt::progress_pulse`. ## `fraction` fraction between 0.0 and 1.0",616,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_tabs","","Sets a `pango::TabArray`; the tabstops in the array are applied to the entry text.",616,{"inputs":[{"name":"self"},{"name":"tabarray"}],"output":null}],[10,"set_text","","Sets the text in the widget to the given value, replacing the current contents.",616,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visibility","","Sets whether the contents of the entry are visible or not. When visibility is set to `false`, characters are displayed as the invisible char, and will also appear that way when the text in the entry widget is copied elsewhere.",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_width_chars","","Changes the size request of the entry to be about the right size for `n_chars` characters. Note that it changes the size request, the size can still be affected by how you pack the widget into containers. If `n_chars` is -1, the size reverts to the default entry size. ## `n_chars` width in chars",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"text_index_to_layout_index","","Converts from a position in the entry contents (returned by `EntryExt::get_text`) to a position in the entry’s `pango::Layout` (returned by `EntryExt::get_layout`, with text retrieved via `pango::LayoutExt::get_text`). ## `text_index` byte index into the entry contents",616,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"unset_invisible_char","","Unsets the invisible char previously set with `EntryExt::set_invisible_char`. So that the default invisible char is used again.",616,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_caps_lock_warning","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_caps_lock_warning","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_cursor_position","","",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_im_module","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_im_module","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_invisible_char_set","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_invisible_char_set","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_populate_all","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_populate_all","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_primary_icon_activatable","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_primary_icon_activatable","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_primary_icon_gicon","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_primary_icon_gicon","","",616,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_primary_icon_name","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_name","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_pixbuf","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_primary_icon_pixbuf","","",616,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_sensitive","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_primary_icon_sensitive","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_primary_icon_stock","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_stock","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_storage_type","","",616,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"get_property_primary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_primary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_primary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_scroll_offset","","",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_secondary_icon_activatable","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_secondary_icon_activatable","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_secondary_icon_gicon","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_secondary_icon_gicon","","",616,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_secondary_icon_name","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_name","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_pixbuf","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"set_property_secondary_icon_pixbuf","","",616,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_sensitive","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_secondary_icon_sensitive","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_secondary_icon_stock","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_stock","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_storage_type","","",616,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"get_property_secondary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_tooltip_markup","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_icon_tooltip_text","","",616,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_selection_bound","","",616,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_shadow_type","","",616,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"set_property_shadow_type","","",616,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"get_property_show_emoji_icon","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_emoji_icon","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_truncate_multiline","","",616,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_truncate_multiline","","",616,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_xalign","","The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.",616,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.",616,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_activate","","The ::activate signal is emitted when the user hits the Enter key.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_backspace","","The ::backspace signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_backspace","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_copy_clipboard","","The ::copy-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to copy the selection to the clipboard.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_copy_clipboard","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_cut_clipboard","","The ::cut-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to cut the selection to the clipboard.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cut_clipboard","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_delete_from_cursor","","The ::delete-from-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a text deletion.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_delete_from_cursor","","",616,{"inputs":[{"name":"self"},{"name":"deletetype"},{"name":"i32"}],"output":null}],[10,"connect_icon_press","","The ::icon-press signal is emitted when an activatable icon is clicked. ## `icon_pos` The position of the clicked icon ## `event` the button press event",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_icon_release","","The ::icon-release signal is emitted on the button release from a mouse click over an activatable icon. ## `icon_pos` The position of the clicked icon ## `event` the button release event",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_at_cursor","","The ::insert-at-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates the insertion of a fixed string at the cursor.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_insert_at_cursor","","",616,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement. If the cursor is not visible in `entry`, this signal causes the viewport to be moved instead.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",616,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"connect_paste_clipboard","","The ::paste-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to paste the contents of the clipboard into the text view.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_paste_clipboard","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_populate_popup","","The ::populate-popup signal gets emitted before showing the context menu of the entry.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_changed","","If an input method is used, the typed text will not immediately be committed to the buffer. So if you are interested in the text, connect to this signal. ## `preedit` the current preedit string",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_preedit_changed","","",616,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_toggle_overwrite","","The ::toggle-overwrite signal is a [keybinding signal][`BindingSignal`] which gets emitted to toggle the overwrite mode of the entry.",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_overwrite","","",616,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activates_default_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attributes_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_caps_lock_warning_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_completion_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_position_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_frame_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_im_module_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_hints_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_purpose_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_char_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_char_set_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_length_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_chars_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_overwrite_mode_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_placeholder_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_populate_all_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_activatable_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_gicon_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_name_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_pixbuf_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_sensitive_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_stock_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_storage_type_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_tooltip_markup_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_primary_icon_tooltip_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_progress_fraction_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_progress_pulse_step_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scroll_offset_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_activatable_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_gicon_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_name_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_pixbuf_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_sensitive_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_stock_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_storage_type_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_tooltip_markup_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_icon_tooltip_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_bound_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_emoji_icon_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_length_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_truncate_multiline_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visibility_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",616,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EntryCompletionExt","","Trait containing all `EntryCompletion` methods.",null,null],[10,"complete","","Requests a completion operation, or in other words a refiltering of the current list with completions, using the current key. The completion list view will be updated accordingly.",617,{"inputs":[{"name":"self"}],"output":null}],[10,"compute_prefix","","Computes the common prefix that is shared by all rows in `self` that start with `key`. If no row matches `key`, `None` will be returned. Note that a text column must have been set for this function to work, see `EntryCompletionExt::set_text_column` for details. ## `key` The text to complete for",617,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"delete_action","","Deletes the action at `index_` from `self`’s action list.",617,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_completion_prefix","","Get the original text entered by the user that triggered the completion or `None` if there’s no completion ongoing.",617,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_entry","","Gets the entry `self` has been attached to.",617,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_inline_completion","","Returns whether the common prefix of the possible completions should be automatically inserted in the entry.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inline_selection","","Returns `true` if inline-selection mode is turned on.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_minimum_key_length","","Returns the minimum key length as set for `self`.",617,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the model the `EntryCompletion` is using as data source. Returns `None` if the model is unset.",617,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_popup_completion","","Returns whether the completions should be presented in a popup window.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_popup_set_width","","Returns whether the completion popup window will be resized to the width of the entry.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_popup_single_match","","Returns whether the completion popup window will appear even if there is only a single match.",617,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_text_column","","Returns the column in the model of `self` to get strings from.",617,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"insert_action_markup","","Inserts an action in `self`’s action item list at position `index_` with markup `markup`. ## `index_` the index of the item to insert ## `markup` markup of the item to insert",617,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[10,"insert_action_text","","Inserts an action in `self`’s action item list at position `index_` with text `text`. If you want the action item to have markup, use `EntryCompletionExt::insert_action_markup`.",617,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":null}],[10,"insert_prefix","","Requests a prefix insertion.",617,{"inputs":[{"name":"self"}],"output":null}],[10,"set_inline_completion","","Sets whether the common prefix of the possible completions should be automatically inserted in the entry. ## `inline_completion` `true` to do inline completion",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_inline_selection","","Sets whether it is possible to cycle through the possible completions inside the entry. ## `inline_selection` `true` to do inline selection",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_minimum_key_length","","Requires the length of the search key for `self` to be at least `length`. This is useful for long lists, where completing using a small key takes a lot of time and will come up with meaningless results anyway (ie, a too large dataset). ## `length` the minimum length of the key in order to start completing",617,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model for a `EntryCompletion`. If `self` already has a model set, it will remove it before setting the new model. If model is `None`, then it will unset the model. ## `model` the `TreeModel`",617,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popup_completion","","Sets whether the completions should be presented in a popup window. ## `popup_completion` `true` to do popup completion",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_popup_set_width","","Sets whether the completion popup window will be resized to be the same width as the entry. ## `popup_set_width` `true` to make the width of the popup the same as the entry",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_popup_single_match","","Sets whether the completion popup window will appear even if there is only a single match. You may want to set this to `false` if you are using [inline completion][`EntryCompletion`--inline-completion]. ## `popup_single_match` `true` if the popup should appear even for a single  match",617,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text_column","","Convenience function for setting up the most used case of this code: a completion list with just strings. This function will set up `self` to have a list displaying all (and just) strings in the completion list, and to get those strings from `column` in the model of `self`.",617,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_cell_area","","",617,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"connect_action_activated","","Gets emitted when an action is activated. ## `index` the index of the activated action",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cursor_on_match","","Gets emitted when a match from the cursor is on a match of the list. The default behaviour is to replace the contents of the entry with the contents of the text column in the row pointed to by `iter`.",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_prefix","","Gets emitted when the inline autocompletion is triggered. The default behaviour is to make the entry display the whole prefix and select the newly inserted part.",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_match_selected","","Gets emitted when a match from the list is selected. The default behaviour is to replace the contents of the entry with the contents of the text column in the row pointed to by `iter`.",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_no_matches","","Gets emitted when the filter model has zero number of rows in completion_complete method. (In other words when `EntryCompletion` is out of  suggestions)",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inline_completion_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inline_selection_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_minimum_key_length_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_completion_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_set_width_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_single_match_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_column_notify","","",617,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EventBoxExt","","Trait containing all `EventBox` methods.",null,null],[10,"get_above_child","","Returns whether the event box window is above or below the windows of its child. See `EventBoxExt::set_above_child` for details.",618,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_window","","Returns whether the event box has a visible window. See `EventBoxExt::set_visible_window` for details.",618,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_above_child","","Set whether the event box window is positioned above the windows of its child, as opposed to below it. If the window is above, all events inside the event box will go to the event box. If the window is below, events in windows of child widgets will first got to that widget, and then to its parents.",618,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_window","","Set whether the event box uses a visible or invisible child window. The default is to use visible windows.",618,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_above_child_notify","","",618,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_window_notify","","",618,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"EventControllerExt","","Trait containing all `EventController` methods.",null,null],[10,"get_propagation_phase","","Gets the propagation phase at which `self` handles events.",619,{"inputs":[{"name":"self"}],"output":{"name":"propagationphase"}}],[10,"get_widget","","Returns the `Widget` this controller relates to.",619,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"handle_event","","Feeds an events into `self`, so it can be interpreted and the controller actions triggered.",619,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"reset","","Resets the `self` to a clean state. Every interaction the controller did through `EventController::handle-event` will be dropped at this point.",619,{"inputs":[{"name":"self"}],"output":null}],[10,"set_propagation_phase","","Sets the propagation phase at which a controller handles events.",619,{"inputs":[{"name":"self"},{"name":"propagationphase"}],"output":null}],[10,"connect_property_propagation_phase_notify","","",619,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_widget_notify","","",619,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ExpanderExt","","Trait containing all `Expander` methods.",null,null],[10,"get_expanded","","Queries a `Expander` and returns its current state. Returns `true` if the child widget is revealed.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_label","","Fetches the text from a label widget including any embedded underlines indicating mnemonics and Pango markup, as set by `ExpanderExt::set_label`. If the label text has not been set the return value will be `None`. This will be the case if you create an empty button with `Button::new` to use as a container.",620,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_fill","","Returns whether the label widget will fill all available horizontal space allocated to `self`.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_label_widget","","Retrieves the label widget for the frame. See `ExpanderExt::set_label_widget`.",620,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_resize_toplevel","","Returns whether the expander will resize the toplevel widget containing the expander upon resizing and collpasing.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_spacing","","Gets the value set by `ExpanderExt::set_spacing`.",620,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_use_markup","","Returns whether the label’s text is interpreted as marked up with the [Pango text markup language][PangoMarkupFormat]. See `ExpanderExt::set_use_markup`.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_underline","","Returns whether an embedded underline in the expander label indicates a mnemonic. See `ExpanderExt::set_use_underline`.",620,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_expanded","","Sets the state of the expander. Set to `true`, if you want the child widget to be revealed, and `false` if you want the child widget to be hidden. ## `expanded` whether the child widget is revealed",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_label","","Sets the text of the label of the expander to `label`.",620,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label_fill","","Sets whether the label widget should fill all available horizontal space allocated to `self`. ## `label_fill` `true` if the label should should fill  all available horizontal space",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_label_widget","","Set the label widget for the expander. This is the widget that will appear embedded alongside the expander arrow. ## `label_widget` the new label widget",620,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_resize_toplevel","","Sets whether the expander will resize the toplevel widget containing the expander upon resizing and collpasing. ## `resize_toplevel` whether to resize the toplevel",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_spacing","","Sets the spacing field of `self`, which is the number of pixels to place between expander and the child.",620,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_use_markup","","Sets whether the text of the label contains markup in [Pango’s text markup language][PangoMarkupFormat]. See `LabelExt::set_markup`. ## `use_markup` `true` if the label’s text should be parsed for markup",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text of the expander label indicates the next character should be used for the mnemonic accelerator key. ## `use_underline` `true` if underlines in the text indicate mnemonics",620,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",620,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_expanded_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_fill_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resize_toplevel_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_markup_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",620,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserExt","","Trait containing all `FileChooser` methods.",null,null],[10,"add_filter","","Adds `filter` to the list of filters that the user can select between. When a filter is selected, only files that are passed by that filter are displayed.",621,{"inputs":[{"name":"self"},{"name":"filefilter"}],"output":null}],[10,"add_shortcut_folder","","Adds a folder to be displayed with the shortcut folders in a file chooser. Note that shortcut folders do not get saved, as they are provided by the application. For example, you can use this to add a “/usr/share/mydrawprogram/Clipart” folder to the volume list. ## `folder` filename of the folder to add",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"add_shortcut_folder_uri","","Adds a folder URI to be displayed with the shortcut folders in a file chooser. Note that shortcut folders do not get saved, as they are provided by the application. For example, you can use this to add a “file:///usr/share/mydrawprogram/Clipart” folder to the volume list. ## `uri` URI of the folder to add",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_action","","Gets the type of operation that the file chooser is performing; see `FileChooser::set_action`.",621,{"inputs":[{"name":"self"}],"output":{"name":"filechooseraction"}}],[10,"get_choice","","Gets the currently selected option in the 'choice' with the given ID.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_create_folders","","Gets whether file choser will offer to create new folders. See `FileChooser::set_create_folders`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_current_folder","","Gets the current folder of `self` as a local filename. See `FileChooser::set_current_folder`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_current_folder_file","","Gets the current folder of `self` as `gio::File`. See `FileChooser::get_current_folder_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_current_folder_uri","","Gets the current folder of `self` as an URI. See `FileChooser::set_current_folder_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_current_name","","Gets the current name in the file selector, as entered by the user in the text entry for “Name”.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_do_overwrite_confirmation","","Queries whether a file chooser is set to confirm for overwriting when the user types a file name that already exists.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_extra_widget","","Gets the current extra widget; see `FileChooser::set_extra_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_file","","Gets the `gio::File` for the currently selected file in the file selector. If multiple files are selected, one of the files will be returned at random.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_filename","","Gets the filename for the currently selected file in the file selector. The filename is returned as an absolute path. If multiple files are selected, one of the filenames will be returned at random.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_filenames","","Lists all the selected files and subfolders in the current folder of `self`. The returned names are full absolute paths. If files in the current folder cannot be represented as local filenames they will be ignored. (See `FileChooser::get_uris`)",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[10,"get_files","","Lists all the selected files and subfolders in the current folder of `self` as `gio::File`. An internal function, see `FileChooser::get_uris`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"vec"}}],[10,"get_filter","","Gets the current filter; see `FileChooser::set_filter`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["filefilter"],"name":"option"}}],[10,"get_local_only","","Gets whether only local files can be selected in the file selector. See `FileChooser::set_local_only`",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_preview_file","","Gets the `gio::File` that should be previewed in a custom preview Internal function, see `FileChooser::get_preview_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_preview_filename","","Gets the filename that should be previewed in a custom preview widget. See `FileChooser::set_preview_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"get_preview_uri","","Gets the URI that should be previewed in a custom preview widget. See `FileChooser::set_preview_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_preview_widget","","Gets the current preview widget; see `FileChooser::set_preview_widget`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_preview_widget_active","","Gets whether the preview widget set by `FileChooser::set_preview_widget` should be shown for the current filename. See `FileChooser::set_preview_widget_active`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_select_multiple","","Gets whether multiple files can be selected in the file selector. See `FileChooser::set_select_multiple`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_hidden","","Gets whether hidden files and folders are displayed in the file selector. See `FileChooser::set_show_hidden`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_uri","","Gets the URI for the currently selected file in the file selector. If multiple files are selected, one of the filenames will be returned at random.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_uris","","Lists all the selected files and subfolders in the current folder of `self`. The returned names are full absolute URIs.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_use_preview_label","","Gets whether a stock label should be drawn with the name of the previewed file. See `FileChooser::set_use_preview_label`.",621,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_filters","","Lists the current set of user-selectable filters; see `FileChooser::add_filter`, `FileChooser::remove_filter`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["filefilter"],"name":"vec"}}],[10,"list_shortcut_folder_uris","","Queries the list of shortcut folders in the file chooser, as set by `FileChooser::add_shortcut_folder_uri`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_shortcut_folders","","Queries the list of shortcut folders in the file chooser, as set by `FileChooser::add_shortcut_folder`.",621,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[10,"remove_choice","","Removes a 'choice' that has been added with `FileChooser::add_choice`.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"remove_filter","","Removes `filter` from the list of filters that the user can select between. ## `filter` a `FileFilter`",621,{"inputs":[{"name":"self"},{"name":"filefilter"}],"output":null}],[10,"remove_shortcut_folder","","Removes a folder from a file chooser’s list of shortcut folders. ## `folder` filename of the folder to remove",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"remove_shortcut_folder_uri","","Removes a folder URI from a file chooser’s list of shortcut folders. ## `uri` URI of the folder to remove",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"select_all","","Selects all the files in the current folder of a file chooser.",621,{"inputs":[{"name":"self"}],"output":null}],[10,"select_file","","Selects the file referred to by `file`. An internal function. See `_gtk_file_chooser_select_uri`. ## `file` the file to select",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"select_filename","","Selects a filename. If the file name isn’t in the current folder of `self`, then the current folder of `self` will be changed to the folder containing `filename`. ## `filename` the filename to select",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"select_uri","","Selects the file to by `uri`. If the URI doesn’t refer to a file in the current folder of `self`, then the current folder of `self` will be changed to the folder containing `filename`. ## `uri` the URI to select",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_action","","Sets the type of operation that the chooser is performing; the user interface is adapted to suit the selected action. For example, an option to create a new folder might be shown if the action is `FileChooserAction::Save` but not if the action is `FileChooserAction::Open`. ## `action` the action that the file selector is performing",621,{"inputs":[{"name":"self"},{"name":"filechooseraction"}],"output":null}],[10,"set_choice","","Selects an option in a 'choice' that has been added with `FileChooser::add_choice`. For a boolean choice, the possible options are \"true\" and \"false\".",621,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_create_folders","","Sets whether file choser will offer to create new folders. This is only relevant if the action is not set to be `FileChooserAction::Open`. ## `create_folders` `true` if the Create Folder button should be displayed",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_current_folder","","Sets the current folder for `self` from a local filename. The user will be shown the full contents of the current folder, plus user interface elements for navigating to other folders.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_current_folder_file","","Sets the current folder for `self` from a `gio::File`. Internal function, see `FileChooser::set_current_folder_uri`. ## `file` the `gio::File` for the new folder",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_current_folder_uri","","Sets the current folder for `self` from an URI. The user will be shown the full contents of the current folder, plus user interface elements for navigating to other folders.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_current_name","","Sets the current name in the file selector, as if entered by the user. Note that the name passed in here is a UTF-8 string rather than a filename. This function is meant for such uses as a suggested name in a “Save As...” dialog. You can pass “Untitled.doc” or a similarly suitable suggestion for the `name`.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_do_overwrite_confirmation","","Sets whether a file chooser in `FileChooserAction::Save` mode will present a confirmation dialog if the user types a file name that already exists. This is `false` by default.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_extra_widget","","Sets an application-supplied widget to provide extra options to the user. ## `extra_widget` widget for extra options",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_file","","Sets `file` as the current filename for the file chooser, by changing to the file’s parent folder and actually selecting the file in list. If the `self` is in `FileChooserAction::Save` mode, the file’s base name will also appear in the dialog’s file name entry.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_filename","","Sets `filename` as the current filename for the file chooser, by changing to the file’s parent folder and actually selecting the file in list; all other files will be unselected. If the `self` is in `FileChooserAction::Save` mode, the file’s base name will also appear in the dialog’s file name entry.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"set_filter","","Sets the current filter; only the files that pass the filter will be displayed. If the user-selectable list of filters is non-empty, then the filter should be one of the filters in that list. Setting the current filter when the list of filters is empty is useful if you want to restrict the displayed set of files without letting the user change it. ## `filter` a `FileFilter`",621,{"inputs":[{"name":"self"},{"name":"filefilter"}],"output":null}],[10,"set_local_only","","Sets whether only local files can be selected in the file selector. If `local_only` is `true` (the default), then the selected file or files are guaranteed to be accessible through the operating systems native file system and therefore the application only needs to worry about the filename functions in `FileChooser`, like `FileChooser::get_filename`, rather than the URI functions like `FileChooser::get_uri`,",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_preview_widget","","Sets an application-supplied widget to use to display a custom preview of the currently selected file. To implement a preview, after setting the preview widget, you connect to the `FileChooser::update-preview` signal, and call `FileChooser::get_preview_filename` or `FileChooser::get_preview_uri` on each change. If you can display a preview of the new file, update your widget and set the preview active using `FileChooser::set_preview_widget_active`. Otherwise, set the preview inactive.",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_preview_widget_active","","Sets whether the preview widget set by `FileChooser::set_preview_widget` should be shown for the current filename. When `active` is set to false, the file chooser may display an internally generated preview of the current file or it may display no preview at all. See `FileChooser::set_preview_widget` for more details. ## `active` whether to display the user-specified preview widget",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_select_multiple","","Sets whether multiple files can be selected in the file selector. This is only relevant if the action is set to be `FileChooserAction::Open` or `FileChooserAction::SelectFolder`. ## `select_multiple` `true` if multiple files can be selected.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_hidden","","Sets whether hidden files and folders are displayed in the file selector. ## `show_hidden` `true` if hidden files and folders should be displayed.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_uri","","Sets the file referred to by `uri` as the current file for the file chooser, by changing to the URI’s parent folder and actually selecting the URI in the list. If the `self` is `FileChooserAction::Save` mode, the URI’s base name will also appear in the dialog’s file name entry.",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_use_preview_label","","Sets whether the file chooser should display a stock label with the name of the file that is being previewed; the default is `true`. Applications that want to draw the whole preview area themselves should set this to `false` and display the name themselves in their preview widget.",621,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"unselect_all","","Unselects all the files in the current folder of a file chooser.",621,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_file","","Unselects the file referred to by `file`. If the file is not in the current directory, does not exist, or is otherwise not currently selected, does nothing. ## `file` a `gio::File`",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unselect_filename","","Unselects a currently selected filename. If the filename is not in the current directory, does not exist, or is otherwise not currently selected, does nothing. ## `filename` the filename to unselect",621,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"unselect_uri","","Unselects the file referred to by `uri`. If the file is not in the current directory, does not exist, or is otherwise not currently selected, does nothing. ## `uri` the URI to unselect",621,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_confirm_overwrite","","This signal gets emitted whenever it is appropriate to present a confirmation dialog when the user has selected a file name that already exists. The signal only gets emitted when the file chooser is in `FileChooserAction::Save` mode.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_current_folder_changed","","This signal is emitted when the current folder in a `FileChooser` changes. This can happen due to the user performing some action that changes folders, such as selecting a bookmark or visiting a folder on the file list. It can also happen as a result of calling a function to explicitly change the current folder in a file chooser.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_file_activated","","This signal is emitted when the user \"activates\" a file in the file chooser. This can happen by double-clicking on a file in the file list, or by pressing `Enter`.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_changed","","This signal is emitted when there is a change in the set of selected files in a `FileChooser`. This can happen when the user modifies the selection with the mouse or the keyboard, or when explicitly calling functions to change the selection.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_update_preview","","This signal is emitted when the preview in a file chooser should be regenerated. For example, this can happen when the currently selected file changes. You should use this signal if you want your file chooser to have a preview widget.",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_action_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_create_folders_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_do_overwrite_confirmation_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_extra_widget_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filter_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_only_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_preview_widget_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_preview_widget_active_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_select_multiple_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_hidden_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_preview_label_notify","","",621,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserButtonExt","","Trait containing all `FileChooserButton` methods.",null,null],[10,"get_focus_on_click","","Returns whether the button grabs focus when it is clicked with the mouse. See `FileChooserButtonExt::set_focus_on_click`.",622,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Retrieves the title of the browse dialog used by `self`. The returned value should not be modified or freed.",622,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_width_chars","","Retrieves the width in characters of the `self` widget’s entry and/or label.",622,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_focus_on_click","","Sets whether the button will grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",622,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Modifies the `title` of the browse dialog used by `self`. ## `title` the new browse dialog title.",622,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_width_chars","","Sets the width (in characters) that `self` will use to `n_chars`. ## `n_chars` the new width, in characters.",622,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_file_set","","The ::file-set signal is emitted when the user selects a file.",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_dialog_notify","","",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",622,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserNativeExt","","",null,null],[10,"get_accept_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_cancel_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_accept_label","","",623,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cancel_label","","",623,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_accept_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_accept_label","","",623,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_cancel_label","","",623,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_cancel_label","","",623,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_accept_label_notify","","",623,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cancel_label_notify","","",623,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileChooserWidgetExt","","Trait containing all `FileChooserWidget` methods.",null,null],[10,"get_property_search_mode","","",624,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_search_mode","","",624,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_subtitle","","",624,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"connect_desktop_folder","","The ::desktop-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_desktop_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_down_folder","","The ::down-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_down_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_home_folder","","The ::home-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_home_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_location_popup","","The ::location-popup signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_location_popup","","",624,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_location_popup_on_paste","","The ::location-popup-on-paste signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_location_popup_on_paste","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_location_toggle_popup","","The ::location-toggle-popup signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_location_toggle_popup","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_places_shortcut","","The ::places-shortcut signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_places_shortcut","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_quick_bookmark","","The ::quick-bookmark signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_quick_bookmark","","",624,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_recent_shortcut","","The ::recent-shortcut signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_recent_shortcut","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_search_shortcut","","The ::search-shortcut signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_search_shortcut","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_show_hidden","","The ::show-hidden signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show_hidden","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_up_folder","","The ::up-folder signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_up_folder","","",624,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_search_mode_notify","","",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_subtitle_notify","","",624,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FileFilterExt","","Trait containing all `FileFilter` methods.",null,null],[10,"add_mime_type","","Adds a rule allowing a given mime type to `self`. ## `mime_type` name of a MIME type",625,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pattern","","Adds a rule allowing a shell style glob to a filter. ## `pattern` a shell style glob",625,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pixbuf_formats","","Adds a rule allowing image files in the formats supported by `gdk_pixbuf::Pixbuf`.",625,{"inputs":[{"name":"self"}],"output":null}],[10,"get_name","","Gets the human-readable name for the filter. See `FileFilterExt::set_name`.",625,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_needed","","Gets the fields that need to be filled in for the `FileFilterInfo` passed to `FileFilterExt::filter`",625,{"inputs":[{"name":"self"}],"output":{"name":"filefilterflags"}}],[10,"set_name","","Sets the human-readable name of the filter; this is the string that will be displayed in the file selector user interface if there is a selectable list of filters. ## `name` the human-readable-name for the filter, or `None`  to remove any existing name.",625,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"to_gvariant","","Serialize a file filter to an a{sv} variant.",625,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[8,"FixedExt","","Trait containing all `Fixed` methods.",null,null],[10,"move_","","",626,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"put","","Adds a widget to a `Fixed` container at the given position. ## `widget` the widget to add. ## `x` the horizontal position to place the widget at. ## `y` the vertical position to place the widget at.",626,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[8,"FlowBoxExt","","Trait containing all `FlowBox` methods.",null,null],[10,"get_activate_on_single_click","","Returns whether children activate on single clicks.",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_child_at_index","","Gets the nth child in the `self`.",627,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["flowboxchild"],"name":"option"}}],[10,"get_child_at_pos","","Gets the child in the (`x`, `y`) position.",627,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["flowboxchild"],"name":"option"}}],[10,"get_column_spacing","","Gets the horizontal spacing.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_homogeneous","","Returns whether the box is homogeneous (all children are the same size). See `BoxExt::set_homogeneous`.",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_max_children_per_line","","Gets the maximum number of children per line.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_min_children_per_line","","Gets the minimum number of children per line.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_row_spacing","","Gets the vertical spacing.",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_selected_children","","Creates a list of all selected children.",627,{"inputs":[{"name":"self"}],"output":{"generics":["flowboxchild"],"name":"vec"}}],[10,"get_selection_mode","","Gets the selection mode of `self`.",627,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"insert","","Inserts the `widget` into `self` at `position`.",627,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"invalidate_filter","","Updates the filtering for all children.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"invalidate_sort","","Updates the sorting for all children.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"select_all","","Select all children of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"select_child","","Selects a single child of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"},{"name":"flowboxchild"}],"output":null}],[10,"set_activate_on_single_click","","If `single` is `true`, children will be activated when you click on them, otherwise you need to double-click.",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_column_spacing","","Sets the horizontal space to add between children. See the `FlowBox:column-spacing` property.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_hadjustment","","Hooks up an adjustment to focus handling in `self`. The adjustment is also used for autoscrolling during rubberband selection. See `ScrolledWindowExt::get_hadjustment` for a typical way of obtaining the adjustment, and `FlowBoxExt::set_vadjustment`for setting the vertical adjustment.",627,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_homogeneous","","Sets the `FlowBox:homogeneous` property of `self`, controlling whether or not all children of `self` are given equal space in the box.",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_children_per_line","","Sets the maximum number of children to request and allocate space for in `self`’s orientation.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_min_children_per_line","","Sets the minimum number of children to line up in `self`’s orientation before flowing.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_row_spacing","","Sets the vertical space to add between children. See the `FlowBox:row-spacing` property.",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_selection_mode","","Sets how selection works in `self`. See `SelectionMode` for details.",627,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"set_vadjustment","","Hooks up an adjustment to focus handling in `self`. The adjustment is also used for autoscrolling during rubberband selection. See `ScrolledWindowExt::get_vadjustment` for a typical way of obtaining the adjustment, and `FlowBoxExt::set_hadjustment`for setting the horizontal adjustment.",627,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"unselect_all","","Unselect all children of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_child","","Unselects a single child of `self`, if the selection mode allows it.",627,{"inputs":[{"name":"self"},{"name":"flowboxchild"}],"output":null}],[10,"get_property_activate_on_single_click","","",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_activate_on_single_click","","",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_column_spacing","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_column_spacing","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_homogeneous","","Determines whether all children should be allocated the same size.",627,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_homogeneous","","Determines whether all children should be allocated the same size.",627,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_max_children_per_line","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_max_children_per_line","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_min_children_per_line","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_min_children_per_line","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_row_spacing","","",627,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_row_spacing","","",627,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_selection_mode","","",627,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"set_property_selection_mode","","",627,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"connect_activate_cursor_child","","The ::activate-cursor-child signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user activates the `box_`.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_cursor_child","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_child_activated","","The ::child-activated signal is emitted when a child has been activated by the user. ## `child` the child that is activated",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",627,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_select_all","","The ::select-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to select all children of the box, if the selection mode permits it.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_selected_children_changed","","The ::selected-children-changed signal is emitted when the set of selected children changes.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_child","","The ::toggle-cursor-child signal is a [keybinding signal][`BindingSignal`] which toggles the selection of the child that has the focus.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_child","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_unselect_all","","The ::unselect-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to unselect all children of the box, if the selection mode permits it.",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",627,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activate_on_single_click_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_spacing_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_homogeneous_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_children_per_line_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_children_per_line_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_spacing_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_mode_notify","","",627,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FlowBoxChildExt","","Trait containing all `FlowBoxChild` methods.",null,null],[10,"changed","","Marks `self` as changed, causing any state that depends on this to be updated. This affects sorting and filtering.",628,{"inputs":[{"name":"self"}],"output":null}],[10,"get_index","","Gets the current index of the `self` in its `FlowBox` container.",628,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"is_selected","","Returns whether the `self` is currently selected in its `FlowBox` container.",628,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_activate","","The ::activate signal is emitted when the user activates a child widget in a `FlowBox`, either by clicking or double-clicking, or by using the Space or Enter key.",628,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",628,{"inputs":[{"name":"self"}],"output":null}],[8,"FontButtonExt","","Trait containing all `FontButton` methods.",null,null],[10,"get_font_name","","Retrieves the name of the currently selected font. This name includes style and size information as well. If you want to render something with the font, use this string with `pango::FontDescription::from_string` . If you’re interested in peeking certain values (family name, style, size, weight) just query these properties from the `pango::FontDescription` object.",629,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_size","","Returns whether the font size will be shown in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_style","","Returns whether the name of the font style will be shown in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Retrieves the title of the font chooser dialog.",629,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_use_font","","Returns whether the selected font is used in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_size","","Returns whether the selected size is used in the label.",629,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_font_name","","Sets or updates the currently-displayed font in font picker dialog. ## `fontname` Name of font to display in font chooser dialog",629,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_show_size","","If `show_size` is `true`, the font size will be displayed along with the name of the selected font. ## `show_size` `true` if font size should be displayed in dialog.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_style","","If `show_style` is `true`, the font style will be displayed along with name of the selected font. ## `show_style` `true` if font style should be displayed in label.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Sets the title for the font chooser dialog. ## `title` a string containing the font chooser dialog title",629,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_use_font","","If `use_font` is `true`, the font name will be written using the selected font. ## `use_font` If `true`, font name will be written using font chosen.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_size","","If `use_size` is `true`, the font name will be written using the selected size. ## `use_size` If `true`, font name will be written using the selected size.",629,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_font_set","","The ::font-set signal is emitted when the user selects a font. When handling this signal, use `FontButtonExt::get_font_name` to find out which font was just selected.",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_name_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_size_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_style_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_font_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_size_notify","","",629,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FontChooserExt","","Trait containing all `FontChooser` methods.",null,null],[10,"get_font","","Gets the currently-selected font name.",630,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_font_desc","","Gets the currently-selected font.",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontdescription"],"name":"option"}}],[10,"get_font_face","","Gets the `pango::FontFace` representing the selected font group details (i.e. family, slant, weight, width, etc).",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontface"],"name":"option"}}],[10,"get_font_family","","Gets the `pango::FontFamily` representing the selected font family. Font families are a collection of font faces.",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontfamily"],"name":"option"}}],[10,"get_font_map","","Gets the custom font map of this font chooser widget, or `None` if it does not have one.",630,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_font_size","","The selected font size.",630,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_preview_text","","Gets the text displayed in the preview area.",630,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_show_preview_entry","","Returns whether the preview entry is shown or not.",630,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_font","","Sets the currently-selected font. ## `fontname` a font name like “Helvetica 12” or “Times Bold 18”",630,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_font_desc","","Sets the currently-selected font from `font_desc`. ## `font_desc` a `pango::FontDescription`",630,{"inputs":[{"name":"self"},{"name":"fontdescription"}],"output":null}],[10,"set_font_map","","Sets a custom font map to use for this font chooser widget. A custom font map can be used to present application-specific fonts instead of or in addition to the normal system fonts.",630,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_preview_text","","Sets the text displayed in the preview area. The `text` is used to show how the selected font looks. ## `text` the text to display in the preview area",630,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_show_preview_entry","","Shows or hides the editable preview entry. ## `show_preview_entry` whether to show the editable preview entry or not",630,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_font_activated","","Emitted when a font is activated. This usually happens when the user double clicks an item, or an item is selected and the user presses one of the keys Space, Shift+Space, Return or Enter. ## `fontname` the font name",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_desc_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_preview_text_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_preview_entry_notify","","",630,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"FrameExt","","Trait containing all `Frame` methods.",null,null],[10,"get_label","","If the frame’s label widget is a `Label`, returns the text in the label widget. (The frame will have a `Label` for the label widget if a non-`None` argument was passed to `Frame::new`.)",631,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_align","","Retrieves the X and Y alignment of the frame’s label. See `FrameExt::set_label_align`. ## `xalign` location to store X alignment of  frame’s label, or `None` ## `yalign` location to store X alignment of  frame’s label, or `None`",631,null],[10,"get_label_widget","","Retrieves the label widget for the frame. See `FrameExt::set_label_widget`.",631,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_shadow_type","","Retrieves the shadow type of the frame. See `FrameExt::set_shadow_type`.",631,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"set_label","","Removes the current `Frame:label-widget`. If `label` is not `None`, creates a new `Label` with that text and adds it as the `Frame:label-widget`. ## `label` the text to use as the label of the frame",631,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label_align","","Sets the alignment of the frame widget’s label. The default values for a newly created frame are 0.0 and 0.5. ## `xalign` The position of the label along the top edge  of the widget. A value of 0.0 represents left alignment;  1.0 represents right alignment. ## `yalign` The y alignment of the label. A value of 0.0 aligns under  the frame; 1.0 aligns above the frame. If the values are exactly  0.0 or 1.0 the gap in the frame won’t be painted because the label  will be completely above or below the frame.",631,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_label_widget","","Sets the `Frame:label-widget` for the frame. This is the widget that will appear embedded in the top edge of the frame as a title. ## `label_widget` the new label widget",631,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_shadow_type","","Sets the `Frame:shadow-type` for `self`, i.e. whether it is drawn without (GTK_SHADOW_NONE) or with (other values) a visible border. Values other than GTK_SHADOW_NONE are treated identically by `Frame`. The chosen type is applied by removing or adding the .flat class to the CSS node named border. ## `type_` the new `ShadowType`",631,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"get_property_label_xalign","","",631,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_label_xalign","","",631,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_label_yalign","","",631,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_label_yalign","","",631,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"connect_property_label_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_xalign_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_yalign_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",631,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GLAreaExt","","Trait containing all `GLArea` methods.",null,null],[10,"attach_buffers","","Ensures that the `self` framebuffer object is made the current draw and read target, and that all the required buffers for the `self` are created and bound to the frambuffer.",632,{"inputs":[{"name":"self"}],"output":null}],[10,"get_auto_render","","Returns whether the area is in auto render mode or not.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_context","","Retrieves the `gdk::GLContext` used by `self`.",632,{"inputs":[{"name":"self"}],"output":{"generics":["glcontext"],"name":"option"}}],[10,"get_error","","Gets the current error set on the `self`.",632,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[10,"get_has_alpha","","Returns whether the area has an alpha component.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_depth_buffer","","Returns whether the area has a depth buffer.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_stencil_buffer","","Returns whether the area has a stencil buffer.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_required_version","","Retrieves the required version of OpenGL set using `GLAreaExt::set_required_version`.",632,null],[10,"get_use_es","","Retrieves the value set by `GLAreaExt::set_use_es`.",632,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Ensures that the `gdk::GLContext` used by `self` is associated with the `GLArea`.",632,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_render","","Marks the currently rendered data (if any) as invalid, and queues a redraw of the widget, ensuring that the `GLArea::render` signal is emitted during the draw.",632,{"inputs":[{"name":"self"}],"output":null}],[10,"set_auto_render","","If `auto_render` is `true` the `GLArea::render` signal will be emitted every time the widget draws. This is the default and is useful if drawing the widget is faster.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_error","","Sets an error on the area which will be shown instead of the GL rendering. This is useful in the `GLArea::create-context` signal if GL context creation fails.",632,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_alpha","","If `has_alpha` is `true` the buffer allocated by the widget will have an alpha channel component, and when rendering to the window the result will be composited over whatever is below the widget.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_depth_buffer","","If `has_depth_buffer` is `true` the widget will allocate and enable a depth buffer for the target framebuffer. Otherwise there will be none.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_stencil_buffer","","If `has_stencil_buffer` is `true` the widget will allocate and enable a stencil buffer for the target framebuffer. Otherwise there will be none.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_required_version","","Sets the required version of OpenGL to be used when creating the context for the widget.",632,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_use_es","","Sets whether the `self` should create an OpenGL or an OpenGL ES context.",632,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_create_context","","The ::create-context signal is emitted when the widget is being realized, and allows you to override how the GL context is created. This is useful when you want to reuse an existing GL context, or if you want to try creating different kinds of GL options.",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_render","","The ::render signal is emitted every time the contents of the `GLArea` should be redrawn.",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_resize","","The ::resize signal is emitted once when the widget is realized, and then each time the widget is changed while realized. This is useful in order to keep GL state up to date with the widget size, like for instance camera properties which may depend on the width/height ratio.",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_auto_render_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_context_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_alpha_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_depth_buffer_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_stencil_buffer_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_es_notify","","",632,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureExt","","Trait containing all `Gesture` methods.",null,null],[10,"get_bounding_box","","If there are touch sequences being currently handled by `self`, this function returns `true` and fills in `rect` with the bounding box containing all active touches. Otherwise, `false` will be returned.",633,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_bounding_box_center","","If there are touch sequences being currently handled by `self`, this function returns `true` and fills in `x` and `y` with the center of the bounding box containing all active touches. Otherwise, `false` will be returned.",633,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_device","","Returns the master `gdk::Device` that is currently operating on `self`, or `None` if the gesture is not being interacted.",633,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"get_group","","Returns all gestures in the group of `self`",633,{"inputs":[{"name":"self"}],"output":{"generics":["gesture"],"name":"vec"}}],[10,"get_window","","Returns the user-defined window that receives the events handled by `self`. See `GestureExt::set_window` for more information.",633,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"group","","Adds `gesture` to the same group than `self`. Gestures are by default isolated in their own groups.",633,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"is_active","","Returns `true` if the gesture is currently active. A gesture is active meanwhile there are touch sequences interacting with it.",633,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_grouped_with","","Returns `true` if both gestures pertain to the same group.",633,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"is_recognized","","Returns `true` if the gesture is currently recognized. A gesture is recognized if there are as many interacting touch sequences as required by `self`, and `Gesture::check` returned `true` for the sequences being currently interpreted.",633,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_state","","Sets the state of all sequences that `self` is currently interacting with. See `GestureExt::set_sequence_state` for more details on sequence states.",633,{"inputs":[{"name":"self"},{"name":"eventsequencestate"}],"output":{"name":"bool"}}],[10,"set_window","","Sets a specific window to receive events about, so `self` will effectively handle only events targeting `window`, or a child of it. `window` must pertain to `EventControllerExt::get_widget`.",633,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"ungroup","","Separates `self` into an isolated group.",633,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_n_points","","",633,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"connect_property_n_points_notify","","",633,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",633,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureDragExt","","Trait containing all `GestureDrag` methods.",null,null],[10,"get_offset","","If the `self` is active, this function returns `true` and fills in `x` and `y` with the coordinates of the current point, as an offset to the starting drag point.",634,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_start_point","","If the `self` is active, this function returns `true` and fills in `x` and `y` with the drag start coordinates, in window-relative coordinates.",634,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"connect_drag_begin","","This signal is emitted whenever dragging starts.",634,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_end","","This signal is emitted whenever the dragging is finished.",634,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_update","","This signal is emitted whenever the dragging point moves.",634,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureLongPressExt","","Trait containing all `GestureLongPress` methods.",null,null],[10,"get_property_delay_factor","","",635,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_delay_factor","","",635,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_cancelled","","This signal is emitted whenever a press moved too far, or was released before `GestureLongPress::pressed` happened.",635,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_pressed","","This signal is emitted whenever a press goes unmoved/unreleased longer than what the GTK+ defaults tell.",635,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_delay_factor_notify","","",635,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureMultiPressExt","","Trait containing all `GestureMultiPress` methods.",null,null],[10,"get_area","","If an area was set through `GestureMultiPressExt::set_area`, this function will return `true` and fill in `rect` with the press area. See `GestureMultiPressExt::set_area` for more details on what the press area represents.",636,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"set_area","","If `rect` is non-`None`, the press area will be checked to be confined within the rectangle, otherwise the button count will be reset so the press is seen as being the first one. If `rect` is `None`, the area will be reset to an unrestricted state.",636,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_pressed","","This signal is emitted whenever a button or touch press happens.",636,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_released","","This signal is emitted when a button or touch is released. `n_press` will report the number of press that is paired to this event, note that `GestureMultiPress::stopped` may have been emitted between the press and its release, `n_press` will only start over at the next press.",636,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_stopped","","This signal is emitted whenever any time/distance threshold has been exceeded.",636,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GesturePanExt","","Trait containing all `GesturePan` methods.",null,null],[10,"get_orientation","","Returns the orientation of the pan gestures that this `self` expects.",637,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"set_orientation","","Sets the orientation to be expected on pan gestures.",637,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[10,"connect_pan","","This signal is emitted once a panning gesture along the expected axis is detected.",637,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_orientation_notify","","",637,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureRotateExt","","Trait containing all `GestureRotate` methods.",null,null],[10,"get_angle_delta","","If `self` is active, this function returns the angle difference in radians since the gesture was first recognized. If `self` is not active, 0 is returned.",638,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"connect_angle_changed","","This signal is emitted when the angle between both tracked points changes.",638,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureSingleExt","","Trait containing all `GestureSingle` methods.",null,null],[10,"get_button","","Returns the button number `self` listens for, or 0 if `self` reacts to any button press.",639,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_current_button","","Returns the button number currently interacting with `self`, or 0 if there is none.",639,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_exclusive","","Gets whether a gesture is exclusive. For more information, see `GestureSingleExt::set_exclusive`.",639,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_touch_only","","Returns `true` if the gesture is only triggered by touch events.",639,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_button","","Sets the button number `self` listens to. If non-0, every button press from a different button number will be ignored. Touch events implicitly match with button 1.",639,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_exclusive","","Sets whether `self` is exclusive. An exclusive gesture will only handle pointer and \"pointer emulated\" touch events, so at any given time, there is only one sequence able to interact with those.",639,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_touch_only","","If `touch_only` is `true`, `self` will only handle events of type `gdk::EventType::TouchBegin`, `gdk::EventType::TouchUpdate` or `gdk::EventType::TouchEnd`. If `false`, mouse events will be handled too.",639,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_button_notify","","",639,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_exclusive_notify","","",639,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_touch_only_notify","","",639,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureSwipeExt","","Trait containing all `GestureSwipe` methods.",null,null],[10,"get_velocity","","If the gesture is recognized, this function returns `true` and fill in `velocity_x` and `velocity_y` with the recorded velocity, as per the last event(s) processed.",640,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"connect_swipe","","This signal is emitted when the recognized gesture is finished, velocity and direction are a product of previously recorded events.",640,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GestureZoomExt","","Trait containing all `GestureZoom` methods.",null,null],[10,"get_scale_delta","","If `self` is active, this function returns the zooming difference since the gesture was recognized (hence the starting point is considered 1:1). If `self` is not active, 1 is returned.",641,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"connect_scale_changed","","This signal is emitted whenever the distance between both tracked sequences changes.",641,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GridExt","","Trait containing all `Grid` methods.",null,null],[10,"attach","","Adds a widget to the grid.",642,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"attach_next_to","","Adds a widget to the grid.",642,{"inputs":[{"name":"self"},{"name":"p"},{"name":"r"},{"name":"positiontype"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_baseline_row","","Returns which row defines the global baseline of `self`.",642,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_child_at","","Gets the child of `self` whose area covers the grid cell whose upper left corner is at `left`, `top`. ## `left` the left edge of the cell ## `top` the top edge of the cell",642,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_column_homogeneous","","Returns whether all columns of `self` have the same width.",642,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_column_spacing","","Returns the amount of space between the columns of `self`.",642,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_row_baseline_position","","Returns the baseline position of `row` as set by `GridExt::set_row_baseline_position` or the default value `BaselinePosition::Center`.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"baselineposition"}}],[10,"get_row_homogeneous","","Returns whether all rows of `self` have the same height.",642,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_row_spacing","","Returns the amount of space between the rows of `self`.",642,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"insert_column","","Inserts a column at the specified position.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"insert_next_to","","Inserts a row or column at the specified position.",642,{"inputs":[{"name":"self"},{"name":"p"},{"name":"positiontype"}],"output":null}],[10,"insert_row","","Inserts a row at the specified position.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_column","","Removes a column from the grid.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"remove_row","","Removes a row from the grid.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_baseline_row","","Sets which row defines the global baseline for the entire grid. Each row in the grid can have its own local baseline, but only one of those is global, meaning it will be the baseline in the parent of the `self`.",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_column_homogeneous","","Sets whether all columns of `self` will have the same width. ## `homogeneous` `true` to make columns homogeneous",642,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_column_spacing","","Sets the amount of space between columns of `self`. ## `spacing` the amount of space to insert between columns",642,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_row_baseline_position","","Sets how the baseline should be positioned on `row` of the grid, in case that row is assigned more space than is requested.",642,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"baselineposition"}],"output":null}],[10,"set_row_homogeneous","","Sets whether all rows of `self` will have the same height. ## `homogeneous` `true` to make rows homogeneous",642,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_row_spacing","","Sets the amount of space between rows of `self`. ## `spacing` the amount of space to insert between rows",642,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_baseline_row","","",642,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_baseline_row","","",642,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_cell_height","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_height","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_cell_width","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_width","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_cell_left_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_left_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_cell_top_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_cell_top_attach","","",642,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_baseline_row_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_homogeneous_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_spacing_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_homogeneous_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_spacing_notify","","",642,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"HeaderBarExt","","Trait containing all `HeaderBar` methods.",null,null],[10,"get_custom_title","","Retrieves the custom title widget of the header. See `HeaderBarExt::set_custom_title`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_decoration_layout","","Gets the decoration layout set with `HeaderBarExt::set_decoration_layout`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_has_subtitle","","Retrieves whether the header bar reserves space for a subtitle, regardless if one is currently set or not.",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_close_button","","Returns whether this header bar shows the standard window decorations.",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_subtitle","","Retrieves the subtitle of the header. See `HeaderBarExt::set_subtitle`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_title","","Retrieves the title of the header. See `HeaderBarExt::set_title`.",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"pack_end","","Adds `child` to `self`, packed with reference to the end of the `self`.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"pack_start","","Adds `child` to `self`, packed with reference to the start of the `self`.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_custom_title","","Sets a custom title for the `HeaderBar`.",643,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_decoration_layout","","Sets the decoration layout for this header bar, overriding the `Settings:gtk-decoration-layout` setting.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_subtitle","","Sets whether the header bar should reserve space for a subtitle, even if none is currently set.",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_close_button","","Sets whether this header bar shows the standard window decorations, including close, maximize, and minimize.",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_subtitle","","Sets the subtitle of the `HeaderBar`. The title should give a user an additional detail to help him identify the current view.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_title","","Sets the title of the `HeaderBar`. The title should help a user identify the current view. A good title should not include the application name.",643,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_custom_title","","",643,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_property_custom_title","","",643,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_decoration_layout_set","","",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_decoration_layout_set","","",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_close_button","","",643,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_close_button","","",643,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_spacing","","",643,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_spacing","","",643,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_subtitle","","",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_subtitle","","",643,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_title","","",643,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_title","","",643,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_child_pack_type","","",643,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"packtype"}}],[10,"set_child_pack_type","","",643,{"inputs":[{"name":"self"},{"name":"t"},{"name":"packtype"}],"output":null}],[10,"get_child_position","","",643,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",643,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_custom_title_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_decoration_layout_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_decoration_layout_set_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_subtitle_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_close_button_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_subtitle_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",643,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IMContextExt","","Trait containing all `IMContext` methods.",null,null],[10,"delete_surrounding","","Asks the widget that the input context is attached to to delete characters around the cursor position by emitting the `IMContext`::delete_surrounding signal. Note that `offset` and `n_chars` are in characters not in bytes which differs from the usage other places in `IMContext`.",644,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"filter_keypress","","Allow an input method to internally handle key press and release events. If this function returns `true`, then no further processing should be done for this key event. ## `event` the key event",644,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"focus_in","","Notify the input method that the widget to which this input context corresponds has gained focus. The input method may, for example, change the displayed feedback to reflect this change.",644,{"inputs":[{"name":"self"}],"output":null}],[10,"focus_out","","Notify the input method that the widget to which this input context corresponds has lost focus. The input method may, for example, change the displayed feedback or reset the contexts state to reflect this change.",644,{"inputs":[{"name":"self"}],"output":null}],[10,"get_preedit_string","","Retrieve the current preedit string for the input context, and a list of attributes to apply to the string. This string should be displayed inserted at the insertion point. ## `str` location to store the retrieved  string. The string retrieved must be freed with `g_free`. ## `attrs` location to store the retrieved  attribute list. When you are done with this list, you  must unreference it with `pango::AttrList::unref`. ## `cursor_pos` location to store position of cursor (in characters)  within the preedit string.",644,null],[10,"get_surrounding","","Retrieves context around the insertion point. Input methods typically want context in order to constrain input text based on existing text; this is important for languages such as Thai where only some sequences of characters are allowed.",644,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"reset","","Notify the input method that a change such as a change in cursor position has been made. This will typically cause the input method to clear the preedit state.",644,{"inputs":[{"name":"self"}],"output":null}],[10,"set_client_window","","Set the client window for the input context; this is the `gdk::Window` in which the input appears. This window is used in order to correctly position status windows, and may also be used for purposes internal to the input method. ## `window` the client window. This may be `None` to indicate  that the previous client window no longer exists.",644,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cursor_location","","Notify the input method that a change in cursor position has been made. The location is relative to the client window. ## `area` new location",644,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"set_surrounding","","Sets surrounding context around the insertion point and preedit string. This function is expected to be called in response to the `IMContext`::retrieve_surrounding signal, and will likely have no effect if called at other times. ## `text` text surrounding the insertion point, as UTF-8.  the preedit string should not be included within  `text`. ## `len` the length of `text`, or -1 if `text` is nul-terminated ## `cursor_index` the byte index of the insertion cursor within `text`.",644,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_use_preedit","","Sets whether the IM context should use the preedit string to display feedback. If `use_preedit` is FALSE (default is TRUE), then the IM context may use some other method to display feedback, such as displaying it in a child of the root window. ## `use_preedit` whether the IM context should use the preedit string.",644,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_input_hints","","",644,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[10,"set_property_input_hints","","",644,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[10,"get_property_input_purpose","","",644,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[10,"set_property_input_purpose","","",644,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":null}],[10,"connect_commit","","The ::commit signal is emitted when a complete input sequence has been entered by the user. This can be a single character immediately after a key press or the final result of preediting. ## `str` the completed character(s) entered by the user",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_surrounding","","The ::delete-surrounding signal is emitted when the input method needs to delete all or part of the context surrounding the cursor. ## `offset` the character offset from the cursor position of the text  to be deleted. A negative value indicates a position before  the cursor. ## `n_chars` the number of characters to be deleted",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_changed","","The ::preedit-changed signal is emitted whenever the preedit sequence currently being entered has changed. It is also emitted at the end of a preedit sequence, in which case `IMContextExt::get_preedit_string` returns the empty string.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_end","","The ::preedit-end signal is emitted when a preediting sequence has been completed or canceled.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_start","","The ::preedit-start signal is emitted when a new preediting sequence starts.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_retrieve_surrounding","","The ::retrieve-surrounding signal is emitted when the input method requires the context surrounding the cursor. The callback should set the input method surrounding context by calling the `IMContextExt::set_surrounding` method.",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_hints_notify","","",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_purpose_notify","","",644,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IMMulticontextExt","","Trait containing all `IMMulticontext` methods.",null,null],[10,"append_menuitems","","Add menuitems for various available input methods to a menu; the menuitems, when selected, will switch the input method for the context and the global default input method.",645,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_context_id","","Gets the id of the currently active slave of the `self`.",645,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_context_id","","Sets the context id for `self`.",645,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"IconFactoryExt","","`[Deprecated since 3.10]` Trait containing all `IconFactory` methods.",null,null],[10,"add","","Adds the given `icon_set` to the icon factory, under the name `stock_id`. `stock_id` should be namespaced for your application, e.g. “myapp-whatever-icon”. Normally applications create a `IconFactory`, then add it to the list of default factories with `IconFactoryExt::add_default`. Then they pass the `stock_id` to widgets such as `Image` to display the icon. Themes can provide an icon with the same name (such as \"myapp-whatever-icon\") to override your application’s default icons. If an icon already existed in `self` for `stock_id`, it is unreferenced and replaced with the new `icon_set`.",646,{"inputs":[{"name":"self"},{"name":"str"},{"name":"iconset"}],"output":null}],[10,"add_default","","Adds an icon factory to the list of icon factories searched by `Style::lookup_icon_set`. This means that, for example, `Image::new_from_stock` will be able to find icons in `self`. There will normally be an icon factory added for each library or application that comes with icons. The default icon factories can be overridden by themes.",646,{"inputs":[{"name":"self"}],"output":null}],[10,"lookup","","Looks up `stock_id` in the icon factory, returning an icon set if found, otherwise `None`. For display to the user, you should use `Style::lookup_icon_set` on the `Style` for the widget that will display the icon, instead of using this function directly, so that themes are taken into account.",646,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["iconset"],"name":"option"}}],[10,"remove_default","","Removes an icon factory from the list of default icon factories. Not normally used; you might use it for a library that can be unloaded or shut down.",646,{"inputs":[{"name":"self"}],"output":null}],[8,"IconInfoExt","","Trait containing all `IconInfo` methods.",null,null],[10,"copy","","Make a copy of a `IconInfo`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"get_base_scale","","Gets the base scale for the icon. The base scale is a scale for the icon that was specified by the icon theme creator. For instance an icon drawn for a high-dpi screen with window scale 2 for a base size of 32 will be 64 pixels tall and have a base scale of 2.",647,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_base_size","","Gets the base size for the icon. The base size is a size for the icon that was specified by the icon theme creator. This may be different than the actual size of image; an example of this is small emblem icons that can be attached to a larger icon. These icons will be given the same base size as the larger icons to which they are attached.",647,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_builtin_pixbuf","","Gets the built-in image for this icon, if any. To allow GTK+ to use built in icon images, you must pass the `IconLookupFlags::UseBuiltin` to `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_display_name","","This function is deprecated and always returns `None`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_embedded_rect","","This function is deprecated and always returns `false`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_filename","","Gets the filename for the icon. If the `IconLookupFlags::UseBuiltin` flag was passed to `IconThemeExt::lookup_icon`, there may be no filename if a builtin icon is returned; in this case, you should use `IconInfoExt::get_builtin_pixbuf`.",647,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"is_symbolic","","Checks if the icon is symbolic or not. This currently uses only the file name and not the file contents for determining this. This behaviour may change in the future.",647,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"load_icon","","Renders an icon previously looked up in an icon theme using `IconThemeExt::lookup_icon`; the size will be based on the size passed to `IconThemeExt::lookup_icon`. Note that the resulting pixbuf may not be exactly this size; an icon theme may have icons that differ slightly from their nominal sizes, and in addition GTK+ will avoid scaling icons that it considers sufficiently close to the requested size or for which the source image would have to be scaled up too far. (This maintains sharpness.). This behaviour can be changed by passing the `IconLookupFlags::ForceSize` flag when obtaining the `IconInfo`. If this flag has been specified, the pixbuf returned by this function will be scaled to the exact size.",647,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf","error"],"name":"result"}}],[10,"load_icon_async","","Asynchronously load, render and scale an icon previously looked up from the icon theme using `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"load_surface","","Renders an icon previously looked up in an icon theme using `IconThemeExt::lookup_icon`; the size will be based on the size passed to `IconThemeExt::lookup_icon`. Note that the resulting surface may not be exactly this size; an icon theme may have icons that differ slightly from their nominal sizes, and in addition GTK+ will avoid scaling icons that it considers sufficiently close to the requested size or for which the source image would have to be scaled up too far. (This maintains sharpness.). This behaviour can be changed by passing the `IconLookupFlags::ForceSize` flag when obtaining the `IconInfo`. If this flag has been specified, the pixbuf returned by this function will be scaled to the exact size.",647,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["surface","error"],"name":"result"}}],[10,"load_symbolic","","Loads an icon, modifying it to match the system colours for the foreground, success, warning and error colors provided. If the icon is not a symbolic one, the function will return the result from `IconInfoExt::load_icon`.",647,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_symbolic_async","","Asynchronously load, render and scale a symbolic icon previously looked up from the icon theme using `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"p"},{"name":"q"},{"name":"r"},{"name":"s"},{"name":"t"}],"output":null}],[10,"load_symbolic_for_context","","Loads an icon, modifying it to match the system colors for the foreground, success, warning and error colors provided. If the icon is not a symbolic one, the function will return the result from `IconInfoExt::load_icon`. This function uses the regular foreground color and the symbolic colors with the names “success_color”, “warning_color” and “error_color” from the context.",647,{"inputs":[{"name":"self"},{"name":"stylecontext"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_symbolic_for_context_async","","Asynchronously load, render and scale a symbolic icon previously looked up from the icon theme using `IconThemeExt::lookup_icon`.",647,{"inputs":[{"name":"self"},{"name":"stylecontext"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_raw_coordinates","","Sets whether the coordinates returned by `IconInfoExt::get_embedded_rect` and `IconInfoExt::get_attach_points` should be returned in their original form as specified in the icon theme, instead of scaled appropriately for the pixbuf returned by `IconInfoExt::load_icon`.",647,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"IconThemeExt","","Trait containing all `IconTheme` methods.",null,null],[10,"add_resource_path","","Adds a resource path that will be looked at when looking for icons, similar to search paths.",648,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"append_search_path","","Appends a directory to the search path. See `IconTheme::set_search_path`. ## `path` directory name to append to the icon path",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_example_icon_name","","Gets the name of an icon that is representative of the current theme (for instance, to use when presenting a list of themes to the user.)",648,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"has_icon","","Checks whether an icon theme includes an icon for a particular name. ## `icon_name` the name of an icon",648,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"list_contexts","","Gets the list of contexts available within the current hierarchy of icon themes. See `IconThemeExt::list_icons` for details about contexts.",648,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_icons","","Lists the icons in the current icon theme. Only a subset of the icons can be listed by providing a context string. The set of values for the context string is system dependent, but will typically include such values as “Applications” and “MimeTypes”. Contexts are explained in the Icon Theme Specification. The standard contexts are listed in the Icon Naming Specification. Also see `IconThemeExt::list_contexts`. ## `context` a string identifying a particular type of  icon, or `None` to list all icons.",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"vec"}}],[10,"load_icon","","Looks up an icon in an icon theme, scales it to the given size and renders it into a pixbuf. This is a convenience function; if more details about the icon are needed, use `IconThemeExt::lookup_icon` followed by `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"load_icon_for_scale","","Looks up an icon in an icon theme for a particular window scale, scales it to the given size and renders it into a pixbuf. This is a convenience function; if more details about the icon are needed, use `IconThemeExt::lookup_icon` followed by `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"load_surface","","Looks up an icon in an icon theme for a particular window scale, scales it to the given size and renders it into a cairo surface. This is a convenience function; if more details about the icon are needed, use `IconThemeExt::lookup_icon` followed by `IconInfoExt::load_surface`.",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"p"},{"name":"iconlookupflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"lookup_by_gicon","","Looks up an icon and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"lookup_by_gicon_for_scale","","Looks up an icon and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`.",648,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"lookup_icon","","Looks up a named icon and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`. (`IconThemeExt::load_icon` combines these two steps if all you need is the pixbuf.)",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"lookup_icon_for_scale","","Looks up a named icon for a particular window scale and returns a `IconInfo` containing information such as the filename of the icon. The icon can then be rendered into a pixbuf using `IconInfoExt::load_icon`. (`IconThemeExt::load_icon` combines these two steps if all you need is the pixbuf.)",648,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"},{"name":"i32"},{"name":"iconlookupflags"}],"output":{"generics":["iconinfo"],"name":"option"}}],[10,"prepend_search_path","","Prepends a directory to the search path. See `IconTheme::set_search_path`. ## `path` directory name to prepend to the icon path",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"rescan_if_needed","","Checks to see if the icon theme has changed; if it has, any currently cached information is discarded and will be reloaded next time `self` is accessed.",648,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_custom_theme","","Sets the name of the icon theme that the `IconTheme` object uses overriding system configuration. This function cannot be called on the icon theme objects returned from `IconTheme::get_default` and `IconTheme::get_for_screen`. ## `theme_name` name of icon theme to use instead of  configured theme, or `None` to unset a previously set custom theme",648,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_screen","","Sets the screen for an icon theme; the screen is used to track the user’s currently configured icon theme, which might be different for different screens. ## `screen` a `gdk::Screen`",648,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"connect_changed","","Emitted when the current icon theme is switched or GTK+ detects that a change has occurred in the contents of the current icon theme.",648,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"IconViewExt","","Trait containing all `IconView` methods.",null,null],[10,"convert_widget_to_bin_window_coords","","Converts widget coordinates to coordinates for the bin_window, as expected by e.g. `IconViewExt::get_path_at_pos`. ## `wx` X coordinate relative to the widget ## `wy` Y coordinate relative to the widget ## `bx` return location for bin_window X coordinate ## `by` return location for bin_window Y coordinate",649,null],[10,"create_drag_icon","","Creates a `cairo::Surface` representation of the item at `path`. This image is used for a drag icon. ## `path` a `TreePath` in `self`",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["surface"],"name":"option"}}],[10,"get_activate_on_single_click","","Gets the setting set by `IconViewExt::set_activate_on_single_click`.",649,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_cell_rect","","Fills the bounding rectangle in widget coordinates for the cell specified by `path` and `cell`. If `cell` is `None` the main cell area is used.",649,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"q"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_column_spacing","","Returns the value of the ::column-spacing property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_columns","","Returns the value of the ::columns property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_cursor","","Fills in `path` and `cell` with the current cursor path and cell. If the cursor isn’t currently set, then *`path` will be `None`. If no cell currently has focus, then *`cell` will be `None`.",649,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_dest_item_at_pos","","Determines the destination item for a given position. ## `drag_x` the position to determine the destination item for ## `drag_y` the position to determine the destination item for ## `path` Return location for the path of the item,  or `None`. ## `pos` Return location for the drop position, or `None`",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_drag_dest_item","","Gets information about the item that is highlighted for feedback. ## `path` Return location for the path of  the highlighted item, or `None`. ## `pos` Return location for the drop position, or `None`",649,null],[10,"get_item_at_pos","","Finds the path at the point (`x`, `y`), relative to bin_window coordinates. In contrast to `IconViewExt::get_path_at_pos`, this function also obtains the cell at the specified position. The returned path should be freed with `TreePath::free`. See `IconViewExt::convert_widget_to_bin_window_coords` for converting widget coordinates to bin_window coordinates. ## `x` The x position to be identified ## `y` The y position to be identified ## `path` Return location for the path, or `None` ## `cell` Return location for the renderer  responsible for the cell at (`x`, `y`), or `None`",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_item_column","","Gets the column in which the item `path` is currently displayed. Column numbers start at 0. ## `path` the `TreePath` of the item",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"i32"}}],[10,"get_item_orientation","","Returns the value of the ::item-orientation property which determines whether the labels are drawn beside the icons instead of below.",649,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_item_padding","","Returns the value of the ::item-padding property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_item_row","","Gets the row in which the item `path` is currently displayed. Row numbers start at 0. ## `path` the `TreePath` of the item",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"i32"}}],[10,"get_item_width","","Returns the value of the ::item-width property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin","","Returns the value of the ::margin property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_markup_column","","Returns the column with markup text for `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the model the `IconView` is based on. Returns `None` if the model is unset.",649,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_path_at_pos","","Finds the path at the point (`x`, `y`), relative to bin_window coordinates. See `IconViewExt::get_item_at_pos`, if you are also interested in the cell at the specified position. See `IconViewExt::convert_widget_to_bin_window_coords` for converting widget coordinates to bin_window coordinates. ## `x` The x position to be identified ## `y` The y position to be identified",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_pixbuf_column","","Returns the column with pixbufs for `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reorderable","","Retrieves whether the user can reorder the list via drag-and-drop. See `IconViewExt::set_reorderable`.",649,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_row_spacing","","Returns the value of the ::row-spacing property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_selected_items","","Creates a list of paths of all selected items. Additionally, if you are planning on modifying the model after calling this function, you may want to convert the returned list into a list of `GtkTreeRowReferences`. To do this, you can use `TreeRowReference::new`.",649,{"inputs":[{"name":"self"}],"output":{"generics":["treepath"],"name":"vec"}}],[10,"get_selection_mode","","Gets the selection mode of the `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"get_spacing","","Returns the value of the ::spacing property.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_text_column","","Returns the column with text for `self`.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tooltip_column","","Returns the column of `self`’s model which is being used for displaying tooltips on `self`’s rows.",649,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tooltip_context","","This function is supposed to be used in a `Widget::query-tooltip` signal handler for `IconView`. The `x`, `y` and `keyboard_tip` values which are received in the signal handler, should be passed to this function without modification.",649,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"option"}}],[10,"get_visible_range","","Sets `start_path` and `end_path` to be the first and last visible path. Note that there may be invisible paths in between.",649,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"item_activated","","Activates the item determined by `path`. ## `path` The `TreePath` to be activated",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"path_is_selected","","Returns `true` if the icon pointed to by `path` is currently selected. If `path` does not point to a valid location, `false` is returned. ## `path` A `TreePath` to check selection on.",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"scroll_to_path","","Moves the alignments of `self` to the position specified by `path`. `row_align` determines where the row is placed, and `col_align` determines where `column` is placed. Both are expected to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means center.",649,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"bool"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"select_all","","Selects all the icons. `self` must has its selection mode set to `SelectionMode::Multiple`.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"select_path","","Selects the row at `path`. ## `path` The `TreePath` to be selected.",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"set_activate_on_single_click","","Causes the `IconView::item-activated` signal to be emitted on a single click instead of a double click.",649,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_column_spacing","","Sets the ::column-spacing property which specifies the space which is inserted between the columns of the icon view. ## `column_spacing` the column spacing",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_columns","","Sets the ::columns property which determines in how many columns the icons are arranged. If `columns` is -1, the number of columns will be chosen automatically to fill the available area. ## `columns` the number of columns",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_cursor","","Sets the current keyboard focus to be at `path`, and selects it. This is useful when you want to focus the user’s attention on a particular item. If `cell` is not `None`, then focus is given to the cell specified by it. Additionally, if `start_editing` is `true`, then editing should be started in the specified cell.",649,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"q"},{"name":"bool"}],"output":null}],[10,"set_drag_dest_item","","Sets the item that is highlighted for feedback. ## `path` The path of the item to highlight, or `None`. ## `pos` Specifies where to drop, relative to the item",649,{"inputs":[{"name":"self"},{"name":"p"},{"name":"iconviewdropposition"}],"output":null}],[10,"set_item_orientation","","Sets the ::item-orientation property which determines whether the labels are drawn beside the icons instead of below. ## `orientation` the relative position of texts and icons",649,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[10,"set_item_padding","","Sets the `IconView:item-padding` property which specifies the padding around each of the icon view’s items. ## `item_padding` the item padding",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_item_width","","Sets the ::item-width property which specifies the width to use for each item. If it is set to -1, the icon view will automatically determine a suitable item size. ## `item_width` the width for each item",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin","","Sets the ::margin property which specifies the space which is inserted at the top, bottom, left and right of the icon view. ## `margin` the margin",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_markup_column","","Sets the column with markup information for `self` to be `column`. The markup column must be of type `G_TYPE_STRING`. If the markup column is set to something, it overrides the text column set by `IconViewExt::set_text_column`. ## `column` A column in the currently used model, or -1 to display no text",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model for a `IconView`. If the `self` already has a model set, it will remove it before setting the new model. If `model` is `None`, then it will unset the old model. ## `model` The model.",649,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_pixbuf_column","","Sets the column with pixbufs for `self` to be `column`. The pixbuf column must be of type `GDK_TYPE_PIXBUF` ## `column` A column in the currently used model, or -1 to disable",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_reorderable","","This function is a convenience function to allow you to reorder models that support the `TreeDragSourceIface` and the `TreeDragDestIface`. Both `TreeStore` and `ListStore` support these. If `reorderable` is `true`, then the user can reorder the model by dragging and dropping rows. The developer can listen to these changes by connecting to the model's row_inserted and row_deleted signals. The reordering is implemented by setting up the icon view as a drag source and destination. Therefore, drag and drop can not be used in a reorderable view for any other purpose.",649,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_row_spacing","","Sets the ::row-spacing property which specifies the space which is inserted between the rows of the icon view. ## `row_spacing` the row spacing",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_selection_mode","","Sets the selection mode of the `self`. ## `mode` The selection mode",649,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"set_spacing","","Sets the ::spacing property which specifies the space which is inserted between the cells (i.e. the icon and the text) of an item. ## `spacing` the spacing",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_text_column","","Sets the column with text for `self` to be `column`. The text column must be of type `G_TYPE_STRING`. ## `column` A column in the currently used model, or -1 to display no text",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tooltip_cell","","Sets the tip area of `tooltip` to the area which `cell` occupies in the item pointed to by `path`. See also `TooltipExt::set_tip_area`.",649,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"treepath"},{"name":"q"}],"output":null}],[10,"set_tooltip_column","","If you only plan to have simple (text-only) tooltips on full items, you can use this function to have `IconView` handle these automatically for you. `column` should be set to the column in `self`’s model containing the tooltip texts, or -1 to disable this feature.",649,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tooltip_item","","Sets the tip area of `tooltip` to be the area covered by the item at `path`. See also `IconViewExt::set_tooltip_column` for a simpler alternative. See also `TooltipExt::set_tip_area`. ## `tooltip` a `Tooltip` ## `path` a `TreePath`",649,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"treepath"}],"output":null}],[10,"unselect_all","","Unselects all the icons.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_path","","Unselects the row at `path`. ## `path` The `TreePath` to be unselected.",649,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"unset_model_drag_dest","","Undoes the effect of `IconView::enable_model_drag_dest`. Calling this method sets `IconView:reorderable` to `false`.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_model_drag_source","","Undoes the effect of `IconView::enable_model_drag_source`. Calling this method sets `IconView:reorderable` to `false`.",649,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_cell_area","","",649,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"connect_activate_cursor_item","","A [keybinding signal][`BindingSignal`] which gets emitted when the user activates the currently focused item.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_cursor_item","","",649,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_item_activated","","The ::item-activated signal is emitted when the method `IconViewExt::item_activated` is called, when the user double clicks an item with the \"activate-on-single-click\" property set to `false`, or when the user single clicks an item when the \"activate-on-single-click\" property set to `true`. It is also emitted when a non-editable item is selected and one of the keys: Space, Return or Enter is pressed. ## `path` the `TreePath` for the activated item",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",649,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_select_all","","A [keybinding signal][`BindingSignal`] which gets emitted when the user selects all items.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_select_cursor_item","","A [keybinding signal][`BindingSignal`] which gets emitted when the user selects the item that is currently focused.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_cursor_item","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_selection_changed","","The ::selection-changed signal is emitted when the selection (i.e. the set of selected items) changes.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_item","","A [keybinding signal][`BindingSignal`] which gets emitted when the user toggles whether the currently focused item is selected or not. The exact effect of this depend on the selection mode.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_item","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_unselect_all","","A [keybinding signal][`BindingSignal`] which gets emitted when the user unselects all items.",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",649,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activate_on_single_click_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_column_spacing_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_columns_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_item_orientation_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_item_padding_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_item_width_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_markup_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reorderable_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_row_spacing_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_mode_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_column_notify","","",649,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ImageExt","","Trait containing all `Image` methods.",null,null],[10,"clear","","Resets the image to be empty.",650,{"inputs":[{"name":"self"}],"output":null}],[10,"get_animation","","Gets the `gdk_pixbuf::PixbufAnimation` being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::Animation` (see `ImageExt::get_storage_type`). The caller of this function does not own a reference to the returned animation.",650,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufanimation"],"name":"option"}}],[10,"get_gicon","","Gets the `gio::Icon` and size being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::Gicon` (see `ImageExt::get_storage_type`). The caller of this function does not own a reference to the returned `gio::Icon`. ## `gicon` place to store a  `gio::Icon`, or `None` ## `size` place to store an icon size  (`IconSize`), or `None`",650,null],[10,"get_icon_set","","Gets the icon set and size being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::IconSet` (see `ImageExt::get_storage_type`).",650,null],[10,"get_pixbuf","","Gets the `gdk_pixbuf::Pixbuf` being displayed by the `Image`. The storage type of the image must be `ImageType::Empty` or `ImageType::Pixbuf` (see `ImageExt::get_storage_type`). The caller of this function does not own a reference to the returned pixbuf.",650,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_pixel_size","","Gets the pixel size used for named icons.",650,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_storage_type","","Gets the type of representation being used by the `Image` to store image data. If the `Image` has no image data, the return value will be `ImageType::Empty`.",650,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"set_from_animation","","Causes the `Image` to display the given animation (or display nothing, if you set the animation to `None`). ## `animation` the `gdk_pixbuf::PixbufAnimation`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_file","","See `Image::new_from_file` for details. ## `filename` a filename or `None`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_gicon","","See `Image::new_from_gicon` for details. ## `icon` an icon ## `size` an icon size (`IconSize`)",650,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_from_icon_name","","See `Image::new_from_icon_name` for details. ## `icon_name` an icon name or `None` ## `size` an icon size (`IconSize`)",650,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_from_icon_set","","See `Image::new_from_icon_set` for details.",650,{"inputs":[{"name":"self"},{"name":"iconset"},{"name":"i32"}],"output":null}],[10,"set_from_pixbuf","","See `Image::new_from_pixbuf` for details. ## `pixbuf` a `gdk_pixbuf::Pixbuf` or `None`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_resource","","See `Image::new_from_resource` for details. ## `resource_path` a resource path or `None`",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_stock","","See `Image::new_from_stock` for details.",650,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_from_surface","","See `Image::new_from_surface` for details.",650,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_pixel_size","","Sets the pixel size to use for named icons. If the pixel size is set to a value != -1, it is used instead of the icon size set by `ImageExt::set_from_icon_name`. ## `pixel_size` the new pixel size",650,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_file","","",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_file","","",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_gicon","","The GIcon displayed in the `Image`. For themed icons, If the icon theme is changed, the image will be updated automatically.",650,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_icon_name","","",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_icon_name","","",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_icon_size","","",650,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_icon_size","","",650,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_property_pixbuf","","",650,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"get_property_pixbuf_animation","","",650,{"inputs":[{"name":"self"}],"output":{"generics":["pixbufanimation"],"name":"option"}}],[10,"set_property_pixbuf_animation","","",650,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_resource","","A path to a resource file to display.",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_resource","","A path to a resource file to display.",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_stock","","Deprecated since 3.10",650,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_stock","","Deprecated since 3.10",650,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_use_fallback","","",650,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_use_fallback","","",650,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_file_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_animation_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixel_size_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resource_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_storage_type_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_fallback_notify","","",650,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ImageMenuItemExt","","`[Deprecated since 3.10]` Trait containing all `ImageMenuItem` methods.",null,null],[10,"get_always_show_image","","Returns whether the menu item will ignore the `Settings:gtk-menu-images` setting and always show the image, if available.",651,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_image","","Gets the widget that is currently set as the image of `self`. See `ImageMenuItemExt::set_image`.",651,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_use_stock","","Checks whether the label set in the menuitem is used as a stock id to select the stock item for the item.",651,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_accel_group","","Specifies an `accel_group` to add the menu items accelerator to (this only applies to stock items so a stock item must already be set, make sure to call `ImageMenuItemExt::set_use_stock` and `MenuItemExt::set_label` with a valid stock item first).",651,{"inputs":[{"name":"self"},{"name":"accelgroup"}],"output":null}],[10,"set_always_show_image","","If `true`, the menu item will ignore the `Settings:gtk-menu-images` setting and always show the image, if available.",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_image","","Sets the image of `self` to the given widget. Note that it depends on the show-menu-images setting whether the image will be displayed or not.",651,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_use_stock","","If `true`, the label set in the menuitem is used as a stock id to select the stock item for the item.",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_accel_group_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_always_show_image_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_stock_notify","","",651,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InfoBarExt","","Trait containing all `InfoBar` methods.",null,null],[10,"add_action_widget","","Add an activatable widget to the action area of a `InfoBar`, connecting a signal handler that will emit the `InfoBar::response` signal on the message area when the widget is activated. The widget is appended to the end of the message areas action area. ## `child` an activatable widget ## `response_id` response ID for `child`",652,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"add_button","","Adds a button with the given text and sets things up so that clicking the button will emit the “response” signal with the given response_id. The button is appended to the end of the info bars's action area. The button widget is returned, but usually you don't need it. ## `button_text` text of button ## `response_id` response ID for the button",652,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["button"],"name":"option"}}],[10,"get_action_area","","Returns the action area of `self`.",652,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_content_area","","Returns the content area of `self`.",652,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_message_type","","Returns the message type of the message area.",652,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[10,"get_show_close_button","","Returns whether the widget will display a standard close button.",652,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"response","","Emits the “response” signal with the given `response_id`. ## `response_id` a response ID",652,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_default_response","","Sets the last widget in the info bar’s action area with the given response_id as the default widget for the dialog. Pressing “Enter” normally activates the default widget.",652,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_message_type","","Sets the message type of the message area.",652,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":null}],[10,"set_response_sensitive","","Calls gtk_widget_set_sensitive (widget, setting) for each widget in the info bars’s action area with the given response_id. A convenient way to sensitize/desensitize dialog buttons. ## `response_id` a response ID ## `setting` TRUE for sensitive",652,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"set_show_close_button","","If true, a standard close button is shown. When clicked it emits the response `ResponseType::Close`.",652,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_close","","The ::close signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to dismiss the info bar.",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_close","","",652,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_response","","Emitted when an action widget is clicked or the application programmer calls `DialogExt::response`. The `response_id` depends on which action widget was clicked. ## `response_id` the response ID",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_type_notify","","",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_close_button_notify","","",652,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"InvisibleExt","","",null,null],[10,"set_screen","","",653,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"connect_property_screen_notify","","",653,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LabelExt","","Trait containing all `Label` methods.",null,null],[10,"get_angle","","Gets the angle of rotation for the label. See `LabelExt::set_angle`.",654,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_attributes","","Gets the attribute list that was set on the label using `LabelExt::set_attributes`, if any. This function does not reflect attributes that come from the labels markup (see `LabelExt::set_markup`). If you want to get the effective attributes for the label, use pango_layout_get_attribute (gtk_label_get_layout (label)).",654,{"inputs":[{"name":"self"}],"output":{"generics":["attrlist"],"name":"option"}}],[10,"get_current_uri","","Returns the URI for the currently active link in the label. The active link is the one under the mouse pointer or, in a selectable label, the link in which the text cursor is currently positioned.",654,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_ellipsize","","Returns the ellipsizing position of the label. See `LabelExt::set_ellipsize`.",654,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_justify","","Returns the justification of the label. See `LabelExt::set_justify`.",654,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[10,"get_label","","Fetches the text from a label widget including any embedded underlines indicating mnemonics and Pango markup. (See `LabelExt::get_text`).",654,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_layout","","Gets the `pango::Layout` used to display the label. The layout is useful to e.g. convert text positions to pixel positions, in combination with `LabelExt::get_layout_offsets`. The returned layout is owned by the `self` so need not be freed by the caller. The `self` is free to recreate its layout at any time, so it should be considered read-only.",654,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_offsets","","Obtains the coordinates where the label will draw the `pango::Layout` representing the text in the label; useful to convert mouse events into coordinates inside the `pango::Layout`, e.g. to take some action if some part of the label is clicked. Of course you will need to create a `EventBox` to receive the events, and pack the label inside it, since labels are windowless (they return `false` from `WidgetExt::get_has_window`). Remember when using the `pango::Layout` functions you need to convert to and from pixels using PANGO_PIXELS() or `PANGO_SCALE`. ## `x` location to store X offset of layout, or `None` ## `y` location to store Y offset of layout, or `None`",654,null],[10,"get_line_wrap","","Returns whether lines in the label are automatically wrapped. See `LabelExt::set_line_wrap`.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_line_wrap_mode","","Returns line wrap mode used by the label. See `LabelExt::set_line_wrap_mode`.",654,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"get_lines","","Gets the number of lines to which an ellipsized, wrapping label should be limited. See `LabelExt::set_lines`.",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_width_chars","","Retrieves the desired maximum width of `self`, in characters. See `LabelExt::set_width_chars`.",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_mnemonic_keyval","","If the label has been set so that it has an mnemonic key this function returns the keyval used for the mnemonic accelerator. If there is no mnemonic set up it returns `GDK_KEY_VoidSymbol`.",654,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_mnemonic_widget","","Retrieves the target of the mnemonic (keyboard shortcut) of this label. See `LabelExt::set_mnemonic_widget`.",654,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_selectable","","Gets the value set by `LabelExt::set_selectable`.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_selection_bounds","","Gets the selected range of characters in the label, returning `true` if there’s a selection. ## `start` return location for start of selection, as a character offset ## `end` return location for end of selection, as a character offset",654,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_single_line_mode","","Returns whether the label is in single line mode.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_text","","Fetches the text from a label widget, as displayed on the screen. This does not include any embedded underlines indicating mnemonics or Pango markup. (See `LabelExt::get_label`)",654,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_track_visited_links","","Returns whether the label is currently keeping track of clicked links.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_markup","","Returns whether the label’s text is interpreted as marked up with the [Pango text markup language][PangoMarkupFormat]. See gtk_label_set_use_markup ().",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_use_underline","","Returns whether an embedded underline in the label indicates a mnemonic. See `LabelExt::set_use_underline`.",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_width_chars","","Retrieves the desired width of `self`, in characters. See `LabelExt::set_width_chars`.",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_xalign","","Gets the `Label:xalign` property for `self`.",654,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_yalign","","Gets the `Label:yalign` property for `self`.",654,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"select_region","","Selects a range of characters in the label, if the label is selectable. See `LabelExt::set_selectable`. If the label is not selectable, this function has no effect. If `start_offset` or `end_offset` are -1, then the end of the label will be substituted. ## `start_offset` start offset (in characters not bytes) ## `end_offset` end offset (in characters not bytes)",654,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_angle","","Sets the angle of rotation for the label. An angle of 90 reads from from bottom to top, an angle of 270, from top to bottom. The angle setting for the label is ignored if the label is selectable, wrapped, or ellipsized. ## `angle` the angle that the baseline of the label makes with  the horizontal, in degrees, measured counterclockwise",654,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_attributes","","Sets a `pango::AttrList`; the attributes in the list are applied to the label text.",654,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_ellipsize","","Sets the mode used to ellipsize (add an ellipsis: \"...\") to the text if there is not enough space to render the entire string. ## `mode` a `pango::EllipsizeMode`",654,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_justify","","Sets the alignment of the lines in the text of the label relative to each other. `Justification::Left` is the default value when the widget is first created with `Label::new`. If you instead want to set the alignment of the label as a whole, use `WidgetExt::set_halign` instead. `LabelExt::set_justify` has no effect on labels containing only a single line. ## `jtype` a `Justification`",654,{"inputs":[{"name":"self"},{"name":"justification"}],"output":null}],[10,"set_label","","Sets the text of the label. The label is interpreted as including embedded underlines and/or Pango markup depending on the values of the `Label:use-underline` and `Label:use-markup` properties. ## `str` the new text to set for the label",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_line_wrap","","Toggles line wrapping within the `Label` widget. `true` makes it break lines if text exceeds the widget’s size. `false` lets the text get cut off by the edge of the widget if it exceeds the widget size.",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_line_wrap_mode","","If line wrapping is on (see `LabelExt::set_line_wrap`) this controls how the line wrapping is done. The default is `pango::WrapMode::Word` which means wrap on word boundaries. ## `wrap_mode` the line wrapping mode",654,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"set_lines","","Sets the number of lines to which an ellipsized, wrapping label should be limited. This has no effect if the label is not wrapping or ellipsized. Set this to -1 if you don’t want to limit the number of lines.",654,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_markup","","Parses `str` which is marked up with the [Pango text markup language][PangoMarkupFormat], setting the label’s text and attribute list based on the parse results.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_markup_with_mnemonic","","Parses `str` which is marked up with the [Pango text markup language][PangoMarkupFormat], setting the label’s text and attribute list based on the parse results. If characters in `str` are preceded by an underscore, they are underlined indicating that they represent a keyboard accelerator called a mnemonic.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_max_width_chars","","Sets the desired maximum width in characters of `self` to `n_chars`. ## `n_chars` the new desired maximum width, in characters.",654,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_mnemonic_widget","","If the label has been set so that it has an mnemonic key (using i.e. `LabelExt::set_markup_with_mnemonic`, `LabelExt::set_text_with_mnemonic`, `Label::new_with_mnemonic` or the “use_underline” property) the label can be associated with a widget that is the target of the mnemonic. When the label is inside a widget (like a `Button` or a `Notebook` tab) it is automatically associated with the correct widget, but sometimes (i.e. when the target is a `Entry` next to the label) you need to set it explicitly using this function.",654,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_pattern","","The pattern of underlines you want under the existing text within the `Label` widget. For example if the current text of the label says “FooBarBaz” passing a pattern of “___ ___” will underline “Foo” and “Baz” but not “Bar”. ## `pattern` The pattern as described above.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_selectable","","Selectable labels allow the user to select text from the label, for copy-and-paste. ## `setting` `true` to allow selecting text in the label",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_single_line_mode","","Sets whether the label is in single line mode. ## `single_line_mode` `true` if the label should be in single line mode",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text","","Sets the text within the `Label` widget. It overwrites any text that was there before.",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_text_with_mnemonic","","Sets the label’s text from the string `str`. If characters in `str` are preceded by an underscore, they are underlined indicating that they represent a keyboard accelerator called a mnemonic. The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using `LabelExt::set_mnemonic_widget`. ## `str` a string",654,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_track_visited_links","","Sets whether the label should keep track of clicked links (and use a different color for them). ## `track_links` `true` to track visited links",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_markup","","Sets whether the text of the label contains markup in [Pango’s text markup language][PangoMarkupFormat]. See `LabelExt::set_markup`. ## `setting` `true` if the label’s text should be parsed for markup.",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text indicates the next character should be used for the mnemonic accelerator key. ## `setting` `true` if underlines in the text indicate mnemonics",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_width_chars","","Sets the desired width in characters of `self` to `n_chars`. ## `n_chars` the new desired width, in characters.",654,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_xalign","","Sets the `Label:xalign` property for `self`.",654,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"set_yalign","","Sets the `Label:yalign` property for `self`.",654,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_cursor_position","","",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_selection_bound","","",654,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_wrap","","",654,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_wrap","","",654,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_wrap_mode","","",654,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_property_wrap_mode","","",654,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"connect_activate_current_link","","A [keybinding signal][`BindingSignal`] which gets emitted when the user activates a link in the label.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_current_link","","",654,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_activate_link","","The signal which gets emitted to activate a URI. Applications may connect to it to override the default behaviour, which is to call `gtk_show_uri_on_window`. ## `uri` the URI that is activated",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_copy_clipboard","","The ::copy-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to copy the selection to the clipboard.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_copy_clipboard","","",654,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement. If the cursor is not visible in `entry`, this signal causes the viewport to be moved instead.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",654,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"connect_populate_popup","","The ::populate-popup signal gets emitted before showing the context menu of the label. Note that only selectable labels have context menus.",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_angle_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attributes_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_position_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justify_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_lines_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_chars_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mnemonic_keyval_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mnemonic_widget_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pattern_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selectable_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_bound_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_single_line_mode_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_track_visited_links_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_markup_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_chars_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xalign_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",654,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LayoutExt","","Trait containing all `Layout` methods.",null,null],[10,"get_bin_window","","Retrieve the bin window of the layout used for drawing operations.",655,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_size","","Gets the size that has been set on the layout, and that determines the total extents of the layout’s scrollbar area. See gtk_layout_set_size (). ## `width` location to store the width set on  `self`, or `None` ## `height` location to store the height set on  `self`, or `None`",655,null],[10,"move_","","",655,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"put","","Adds `child_widget` to `self`, at position (`x`,`y`). `self` becomes the new parent container of `child_widget`. ## `child_widget` child widget ## `x` X position of child widget ## `y` Y position of child widget",655,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_size","","Sets the size of the scrollable area of the layout. ## `width` width of entire scrollable area ## `height` height of entire scrollable area",655,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_property_height","","",655,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_height","","",655,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_width","","",655,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_width","","",655,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_child_x","","",655,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_x","","",655,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_y","","",655,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_y","","",655,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_property_height_notify","","",655,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",655,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LevelBarExt","","Trait containing all `LevelBar` methods.",null,null],[10,"add_offset_value","","Adds a new offset marker on `self` at the position specified by `value`. When the bar value is in the interval topped by `value` (or between `value` and `LevelBar:max-value` in case the offset is the last one on the bar) a style class named `level-``name` will be applied when rendering the level bar fill. If another offset marker named `name` exists, its value will be replaced by `value`.",656,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":null}],[10,"get_inverted","","Return the value of the `LevelBar:inverted` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_max_value","","Returns the value of the `LevelBar:max-value` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_min_value","","Returns the value of the `LevelBar:min-value` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_mode","","Returns the value of the `LevelBar:mode` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"levelbarmode"}}],[10,"get_offset_value","","Fetches the value specified for the offset marker `name` in `self`, returning `true` in case an offset named `name` was found.",656,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["f64"],"name":"option"}}],[10,"get_value","","Returns the value of the `LevelBar:value` property.",656,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"remove_offset_value","","Removes an offset marker previously added with `LevelBarExt::add_offset_value`.",656,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_inverted","","Sets the value of the `LevelBar:inverted` property.",656,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_value","","Sets the value of the `LevelBar:max-value` property.",656,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_min_value","","Sets the value of the `LevelBar:min-value` property.",656,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_mode","","Sets the value of the `LevelBar:mode` property.",656,{"inputs":[{"name":"self"},{"name":"levelbarmode"}],"output":null}],[10,"set_value","","Sets the value of the `LevelBar:value` property.",656,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_offset_changed","","Emitted when an offset specified on the bar changes value as an effect to `LevelBarExt::add_offset_value` being called.",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_value_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_value_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",656,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"LinkButtonExt","","Trait containing all `LinkButton` methods.",null,null],[10,"get_uri","","Retrieves the URI set using `LinkButtonExt::set_uri`.",657,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_visited","","Retrieves the “visited” state of the URI where the `LinkButton` points. The button becomes visited when it is clicked. If the URI is changed on the button, the “visited” state is unset again.",657,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_uri","","Sets `uri` as the URI where the `LinkButton` points. As a side-effect this unsets the “visited” state of the button. ## `uri` a valid URI",657,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visited","","Sets the “visited” state of the URI where the `LinkButton` points. See `LinkButtonExt::get_visited` for more details. ## `visited` the new “visited” state",657,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_link","","The ::activate-link signal is emitted each time the `LinkButton` has been clicked.",657,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_uri_notify","","",657,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visited_notify","","",657,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ListBoxExt","","Trait containing all `ListBox` methods.",null,null],[10,"drag_highlight_row","","This is a helper function for implementing DnD onto a `ListBox`. The passed in `row` will be highlighted via `WidgetExt::drag_highlight`, and any previously highlighted row will be unhighlighted.",658,{"inputs":[{"name":"self"},{"name":"listboxrow"}],"output":null}],[10,"drag_unhighlight_row","","If a row has previously been highlighted via `ListBoxExt::drag_highlight_row` it will have the highlight removed.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"get_activate_on_single_click","","Returns whether rows activate on single clicks.",658,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_adjustment","","Gets the adjustment (if any) that the widget uses to for vertical scrolling.",658,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_row_at_index","","Gets the n-th child in the list (not counting headers). If `_index` is negative or larger than the number of items in the list, `None` is returned.",658,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["listboxrow"],"name":"option"}}],[10,"get_row_at_y","","Gets the row at the `y` position.",658,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["listboxrow"],"name":"option"}}],[10,"get_selected_row","","Gets the selected row.",658,{"inputs":[{"name":"self"}],"output":{"generics":["listboxrow"],"name":"option"}}],[10,"get_selected_rows","","Creates a list of all selected children.",658,{"inputs":[{"name":"self"}],"output":{"generics":["listboxrow"],"name":"vec"}}],[10,"get_selection_mode","","Gets the selection mode of the listbox.",658,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"insert","","Insert the `child` into the `self` at `position`. If a sort function is set, the widget will actually be inserted at the calculated position and this function has the same effect of `ContainerExt::add`.",658,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"invalidate_filter","","Update the filtering for all rows. Call this when result of the filter function on the `self` is changed due to an external factor. For instance, this would be used if the filter function just looked for a specific search string and the entry with the search string has changed.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"invalidate_headers","","Update the separators for all rows. Call this when result of the header function on the `self` is changed due to an external factor.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"invalidate_sort","","Update the sorting for all rows. Call this when result of the sort function on the `self` is changed due to an external factor.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"prepend","","Prepend a widget to the list. If a sort function is set, the widget will actually be inserted at the calculated position and this function has the same effect of `ContainerExt::add`.",658,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"select_all","","Select all children of `self`, if the selection mode allows it.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"select_row","","Make `row` the currently selected row.",658,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_activate_on_single_click","","If `single` is `true`, rows will be activated when you click on them, otherwise you need to double-click.",658,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_adjustment","","Sets the adjustment (if any) that the widget uses to for vertical scrolling. For instance, this is used to get the page size for PageUp/Down key handling.",658,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_placeholder","","Sets the placeholder widget that is shown in the list when it doesn't display any visible children.",658,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_selection_mode","","Sets how selection works in the listbox. See `SelectionMode` for details.",658,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"unselect_all","","Unselect all children of `self`, if the selection mode allows it.",658,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_row","","Unselects a single row of `self`, if the selection mode allows it.",658,{"inputs":[{"name":"self"},{"name":"listboxrow"}],"output":null}],[10,"get_property_activate_on_single_click","","",658,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_activate_on_single_click","","",658,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_selection_mode","","",658,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"set_property_selection_mode","","",658,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"connect_activate_cursor_row","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_cursor_row","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",658,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":null}],[10,"connect_row_activated","","The ::row-activated signal is emitted when a row has been activated by the user.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_selected","","The ::row-selected signal is emitted when a new row is selected, or (with a `None` `row`) when the selection is cleared.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_select_all","","The ::select-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to select all children of the box, if the selection mode permits it.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_selected_rows_changed","","The ::selected-rows-changed signal is emitted when the set of selected rows changes.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_row","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_row","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_unselect_all","","The ::unselect-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to unselect all children of the box, if the selection mode permits it.",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",658,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activate_on_single_click_notify","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selection_mode_notify","","",658,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ListBoxRowExt","","Trait containing all `ListBoxRow` methods.",null,null],[10,"changed","","Marks `self` as changed, causing any state that depends on this to be updated. This affects sorting, filtering and headers.",659,{"inputs":[{"name":"self"}],"output":null}],[10,"get_activatable","","Gets the value of the `ListBoxRow:activatable` property for this row.",659,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_header","","Returns the current header of the `self`. This can be used in a `GtkListBoxUpdateHeaderFunc` to see if there is a header set already, and if so to update the state of it.",659,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_index","","Gets the current index of the `self` in its `ListBox` container.",659,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_selectable","","Gets the value of the `ListBoxRow:selectable` property for this row.",659,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_selected","","Returns whether the child is currently selected in its `ListBox` container.",659,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_activatable","","Set the `ListBoxRow:activatable` property for this row.",659,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_header","","Sets the current header of the `self`. This is only allowed to be called from a `GtkListBoxUpdateHeaderFunc`. It will replace any existing header in the row, and be shown in front of the row in the listbox.",659,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_selectable","","Set the `ListBoxRow:selectable` property for this row.",659,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","",659,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",659,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_activatable_notify","","",659,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_selectable_notify","","",659,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ListStoreExt","","Trait containing all `ListStore` methods.",null,null],[10,"append","","Appends a new row to `self`. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the appended row",660,{"inputs":[{"name":"self"}],"output":{"name":"treeiter"}}],[10,"clear","","Removes all rows from the list store.",660,{"inputs":[{"name":"self"}],"output":null}],[10,"insert","","Creates a new row at `position`. `iter` will be changed to point to this new row. If `position` is -1 or is larger than the number of rows on the list, then the new row will be appended to the list. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `position` position to insert the new row, or -1 for last",660,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"treeiter"}}],[10,"insert_after","","Inserts a new row after `sibling`. If `sibling` is `None`, then the row will be prepended to the beginning of the list. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `sibling` A valid `TreeIter`, or `None`",660,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"insert_before","","Inserts a new row before `sibling`. If `sibling` is `None`, then the row will be appended to the end of the list. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `sibling` A valid `TreeIter`, or `None`",660,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"iter_is_valid","","This function is slow. Only use it for debugging and/or testing > purposes.",660,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"move_after","","Moves `iter` in `self` to the position after `position`. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the start of the list. ## `iter` A `TreeIter`. ## `position` A `TreeIter` or `None`.",660,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"move_before","","Moves `iter` in `self` to the position before `position`. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the end of the list. ## `iter` A `TreeIter`. ## `position` A `TreeIter`, or `None`.",660,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"prepend","","Prepends a new row to `self`. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `ListStoreExt::set` or `ListStore::set_value`. ## `iter` An unset `TreeIter` to set to the prepend row",660,{"inputs":[{"name":"self"}],"output":{"name":"treeiter"}}],[10,"remove","","Removes the given row from the list store. After being removed, `iter` is set to be the next valid row, or invalidated if it pointed to the last row in `self`. ## `iter` A valid `TreeIter`",660,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"swap","","Swaps `a` and `b` in `self`. Note that this function only works with unsorted stores. ## `a` A `TreeIter`. ## `b` Another `TreeIter`.",660,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"treeiter"}],"output":null}],[8,"LockButtonExt","","",null,null],[10,"get_permission","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["permission"],"name":"option"}}],[10,"set_permission","","",661,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_property_text_lock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text_lock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_text_unlock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text_unlock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_tooltip_lock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tooltip_lock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_tooltip_not_authorized","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tooltip_not_authorized","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_tooltip_unlock","","",661,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tooltip_unlock","","",661,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_permission_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_lock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_unlock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_lock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_not_authorized_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_unlock_notify","","",661,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuExt","","Trait containing all `Menu` methods.",null,null],[10,"attach","","Adds a new `MenuItem` to a (table) menu. The number of “cells” that an item will occupy is specified by `left_attach`, `right_attach`, `top_attach` and `bottom_attach`. These each represent the leftmost, rightmost, uppermost and lower column and row numbers of the table. (Columns and rows are indexed from zero).",662,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"detach","","Detaches the menu from the widget to which it had been attached. This function will call the callback function, `detacher`, provided when the `MenuExt::attach_to_widget` function was called.",662,{"inputs":[{"name":"self"}],"output":null}],[10,"get_accel_group","","Gets the `AccelGroup` which holds global accelerators for the menu. See `MenuExt::set_accel_group`.",662,{"inputs":[{"name":"self"}],"output":{"generics":["accelgroup"],"name":"option"}}],[10,"get_accel_path","","Retrieves the accelerator path set on the menu.",662,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_active","","Returns the selected menu item from the menu. This is used by the `ComboBox`.",662,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_attach_widget","","Returns the `Widget` that the menu is attached to.",662,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_monitor","","Retrieves the number of the monitor on which to show the menu.",662,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reserve_toggle_size","","Returns whether the menu reserves space for toggles and icons, regardless of their actual presence.",662,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tearoff_state","","Returns whether the menu is torn off. See `MenuExt::set_tearoff_state`.",662,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Returns the title of the menu. See `MenuExt::set_title`.",662,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"place_on_monitor","","Places `self` on the given monitor.",662,{"inputs":[{"name":"self"},{"name":"monitor"}],"output":null}],[10,"popdown","","Removes the menu from the screen.",662,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_at_pointer","","Displays `self` and makes it available for selection.",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"popup_at_rect","","Displays `self` and makes it available for selection.",662,{"inputs":[{"name":"self"},{"name":"window"},{"name":"rectangle"},{"name":"gravity"},{"name":"gravity"},{"name":"p"}],"output":null}],[10,"popup_at_widget","","Displays `self` and makes it available for selection.",662,{"inputs":[{"name":"self"},{"name":"p"},{"name":"gravity"},{"name":"gravity"},{"name":"q"}],"output":null}],[10,"reorder_child","","Moves `child` to a new `position` in the list of `self` children. ## `child` the `MenuItem` to move ## `position` the new position to place `child`.  Positions are numbered from 0 to n - 1",662,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"reposition","","Repositions the menu according to its position function.",662,{"inputs":[{"name":"self"}],"output":null}],[10,"set_accel_group","","Set the `AccelGroup` which holds global accelerators for the menu. This accelerator group needs to also be added to all windows that this menu is being used in with `GtkWindowExt::add_accel_group`, in order for those windows to support all the accelerators contained in this group. ## `accel_group` the `AccelGroup` to be associated  with the menu.",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_accel_path","","Sets an accelerator path for this menu from which accelerator paths for its immediate children, its menu items, can be constructed. The main purpose of this function is to spare the programmer the inconvenience of having to call `MenuItemExt::set_accel_path` on each menu item that should support runtime user changable accelerators. Instead, by just calling `MenuExt::set_accel_path` on their parent, each menu item of this menu, that contains a label describing its purpose, automatically gets an accel path assigned.",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_active","","Selects the specified menu item within the menu. This is used by the `ComboBox` and should not be used by anyone else. ## `index` the index of the menu item to select. Index values are  from 0 to n-1",662,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_monitor","","Informs GTK+ on which monitor a menu should be popped up. See `gdk::MonitorExt::get_geometry`.",662,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_reserve_toggle_size","","Sets whether the menu should reserve space for drawing toggles or icons, regardless of their actual presence. ## `reserve_toggle_size` whether to reserve size for toggles",662,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_screen","","Sets the `gdk::Screen` on which the menu will be displayed. ## `screen` a `gdk::Screen`, or `None` if the screen should be  determined by the widget the menu is attached to",662,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tearoff_state","","Changes the tearoff state of the menu. A menu is normally displayed as drop down menu which persists as long as the menu is active. It can also be displayed as a tearoff menu which persists until it is closed or reattached.",662,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","Sets the title string for the menu.",662,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_anchor_hints","","",662,{"inputs":[{"name":"self"}],"output":{"name":"anchorhints"}}],[10,"set_property_anchor_hints","","",662,{"inputs":[{"name":"self"},{"name":"anchorhints"}],"output":null}],[10,"set_property_attach_widget","","",662,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_menu_type_hint","","",662,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[10,"set_property_menu_type_hint","","",662,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":null}],[10,"get_property_rect_anchor_dx","","",662,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rect_anchor_dx","","",662,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_rect_anchor_dy","","",662,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rect_anchor_dy","","",662,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_tearoff_title","","",662,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_tearoff_title","","",662,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_item_bottom_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_bottom_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_item_left_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_left_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_item_right_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_right_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_item_top_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_item_top_attach","","",662,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"connect_move_scroll","","`scroll_type` a `ScrollType`",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_scroll","","",662,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":null}],[10,"connect_property_accel_group_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_path_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_anchor_hints_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attach_widget_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_type_hint_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_monitor_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rect_anchor_dx_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rect_anchor_dy_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reserve_toggle_size_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tearoff_state_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tearoff_title_notify","","",662,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuBarExt","","Trait containing all `MenuBar` methods.",null,null],[10,"get_child_pack_direction","","Retrieves the current child pack direction of the menubar. See `MenuBarExt::set_child_pack_direction`.",663,{"inputs":[{"name":"self"}],"output":{"name":"packdirection"}}],[10,"get_pack_direction","","Retrieves the current pack direction of the menubar. See `MenuBarExt::set_pack_direction`.",663,{"inputs":[{"name":"self"}],"output":{"name":"packdirection"}}],[10,"set_child_pack_direction","","Sets how widgets should be packed inside the children of a menubar. ## `child_pack_dir` a new `PackDirection`",663,{"inputs":[{"name":"self"},{"name":"packdirection"}],"output":null}],[10,"set_pack_direction","","Sets how items should be packed inside a menubar. ## `pack_dir` a new `PackDirection`",663,{"inputs":[{"name":"self"},{"name":"packdirection"}],"output":null}],[10,"connect_property_child_pack_direction_notify","","",663,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pack_direction_notify","","",663,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuButtonExt","","Trait containing all `MenuButton` methods.",null,null],[10,"get_align_widget","","Returns the parent `Widget` to use to line up with menu.",664,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_direction","","Returns the direction the popup will be pointing at when popped up.",664,{"inputs":[{"name":"self"}],"output":{"name":"arrowtype"}}],[10,"get_menu_model","","Returns the `gio::MenuModel` used to generate the popup.",664,{"inputs":[{"name":"self"}],"output":{"generics":["menumodel"],"name":"option"}}],[10,"get_popover","","Returns the `Popover` that pops out of the button. If the button is not using a `Popover`, this function returns `None`.",664,{"inputs":[{"name":"self"}],"output":{"generics":["popover"],"name":"option"}}],[10,"get_popup","","Returns the `Menu` that pops out of the button. If the button does not use a `Menu`, this function returns `None`.",664,{"inputs":[{"name":"self"}],"output":{"generics":["menu"],"name":"option"}}],[10,"get_use_popover","","Returns whether a `Popover` or a `Menu` will be constructed from the menu model.",664,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_align_widget","","Sets the `Widget` to use to line the menu with when popped up. Note that the `align_widget` must contain the `MenuButton` itself.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_direction","","Sets the direction in which the popup will be popped up, as well as changing the arrow’s direction. The child will not be changed to an arrow if it was customized.",664,{"inputs":[{"name":"self"},{"name":"arrowtype"}],"output":null}],[10,"set_menu_model","","Sets the `gio::MenuModel` from which the popup will be constructed, or `None` to disable the button.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popover","","Sets the `Popover` that will be popped up when the button is clicked, or `None` to disable the button. If `MenuButton:menu-model` or `MenuButton:popup` are set, they will be set to `None`.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_popup","","Sets the `Menu` that will be popped up when the button is clicked, or `None` to disable the button. If `MenuButton:menu-model` or `MenuButton:popover` are set, they will be set to `None`.",664,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_use_popover","","Sets whether to construct a `Popover` instead of `Menu` when `MenuButtonExt::set_menu_model` is called. Note that this property is only consulted when a new menu model is set.",664,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_align_widget_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_model_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popover_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_popup_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_popover_notify","","",664,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuItemExt","","Trait containing all `MenuItem` methods.",null,null],[10,"deselect","","Emits the `MenuItem::deselect` signal on the given item.",665,{"inputs":[{"name":"self"}],"output":null}],[10,"get_accel_path","","Retrieve the accelerator path that was previously set on `self`.",665,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label","","Sets `text` on the `self` label",665,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_reserve_indicator","","Returns whether the `self` reserves space for the submenu indicator, regardless if it has a submenu or not.",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_submenu","","Gets the submenu underneath this menu item, if any. See `MenuItemExt::set_submenu`.",665,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_use_underline","","Checks if an underline in the text indicates the next character should be used for the mnemonic accelerator key.",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"select","","Emits the `MenuItem::select` signal on the given item.",665,{"inputs":[{"name":"self"}],"output":null}],[10,"set_accel_path","","Set the accelerator path on `self`, through which runtime changes of the menu item’s accelerator caused by the user can be identified and saved to persistent storage (see `AccelMap::save` on this). To set up a default accelerator for this menu item, call `AccelMap::add_entry` with the same `accel_path`. See also `AccelMap::add_entry` on the specifics of accelerator paths, and `MenuExt::set_accel_path` for a more convenient variant of this function.",665,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label","","Sets `text` on the `self` label ## `label` the text you want to set",665,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_reserve_indicator","","Sets whether the `self` should reserve space for the submenu indicator, regardless if it actually has a submenu or not.",665,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_submenu","","Sets or replaces the menu item’s submenu, or removes it when a `None` submenu is passed. ## `submenu` the submenu, or `None`",665,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_use_underline","","If true, an underline in the text indicates the next character should be used for the mnemonic accelerator key. ## `setting` `true` if underlines in the text indicate mnemonics",665,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toggle_size_allocate","","Emits the `MenuItem::toggle-size-allocate` signal on the given item. ## `allocation` the allocation to use as signal data.",665,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"toggle_size_request","","Emits the `MenuItem::toggle-size-request` signal on the given item. ## `requisition` the requisition to use as signal data.",665,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_right_justified","","",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_right_justified","","",665,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","Emitted when the item is activated.",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",665,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_activate_item","","Emitted when the item is activated, but also if the menu item has a submenu. For normal applications, the relevant signal is `MenuItem::activate`.",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_deselect","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_select","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_size_allocate","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accel_path_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_justified_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_submenu_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",665,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuShellExt","","Trait containing all `MenuShell` methods.",null,null],[10,"activate_item","","Activates the menu item within the menu shell. ## `menu_item` the `MenuItem` to activate ## `force_deactivate` if `true`, force the deactivation of the  menu shell after the menu item is activated",666,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"append","","Adds a new `MenuItem` to the end of the menu shell's item list. ## `child` The `MenuItem` to add",666,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"bind_model","","Establishes a binding between a `MenuShell` and a `gio::MenuModel`.",666,{"inputs":[{"name":"self"},{"name":"q"},{"name":"r"},{"name":"bool"}],"output":null}],[10,"cancel","","Cancels the selection within the menu shell.",666,{"inputs":[{"name":"self"}],"output":null}],[10,"deactivate","","Deactivates the menu shell.",666,{"inputs":[{"name":"self"}],"output":null}],[10,"deselect","","Deselects the currently selected item from the menu shell, if any.",666,{"inputs":[{"name":"self"}],"output":null}],[10,"get_parent_shell","","Gets the parent menu shell.",666,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_selected_item","","Gets the currently selected item.",666,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_take_focus","","Returns `true` if the menu shell will take the keyboard focus on popup.",666,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"insert","","Adds a new `MenuItem` to the menu shell’s item list at the position indicated by `position`. ## `child` The `MenuItem` to add ## `position` The position in the item list where `child`  is added. Positions are numbered from 0 to n-1",666,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"prepend","","Adds a new `MenuItem` to the beginning of the menu shell's item list. ## `child` The `MenuItem` to add",666,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"select_first","","Select the first visible or selectable child of the menu shell; don’t select tearoff items unless the only item is a tearoff item. ## `search_sensitive` if `true`, search for the first selectable  menu item, otherwise select nothing if  the first item isn’t sensitive. This  should be `false` if the menu is being  popped up initially.",666,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"select_item","","Selects the menu item from the menu shell. ## `menu_item` The `MenuItem` to select",666,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_take_focus","","If `take_focus` is `true` (the default) the menu shell will take the keyboard focus so that it will receive all keyboard events which is needed to enable keyboard navigation in menus.",666,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate_current","","An action signal that activates the current menu item within the menu shell. ## `force_hide` if `true`, hide the menu after activating the menu item",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_current","","",666,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_cancel","","An action signal which cancels the selection within the menu shell. Causes the `MenuShell::selection-done` signal to be emitted.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cancel","","",666,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_cycle_focus","","A keybinding signal which moves the focus in the given `direction`. ## `direction` the direction to cycle in",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cycle_focus","","",666,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_deactivate","","This signal is emitted when a menu shell is deactivated.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert","","The ::insert signal is emitted when a new `MenuItem` is added to a `MenuShell`. A separate signal is used instead of `Container`::add because of the need for an additional position parameter.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_current","","An keybinding signal which moves the current menu item in the direction specified by `direction`. ## `direction` the direction to move",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_current","","",666,{"inputs":[{"name":"self"},{"name":"menudirectiontype"}],"output":null}],[10,"connect_move_selected","","The ::move-selected signal is emitted to move the selection to another item. ## `distance` +1 to move to the next item, -1 to move to the previous",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_done","","This signal is emitted when a selection has been completed within a menu shell.",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_take_focus_notify","","",666,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MenuToolButtonExt","","Trait containing all `MenuToolButton` methods.",null,null],[10,"get_menu","","Gets the `Menu` associated with `MenuToolButton`.",667,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_arrow_tooltip_markup","","Sets the tooltip markup text to be used as tooltip for the arrow button which pops up the menu. See `ToolItem::set_tooltip_text` for setting a tooltip on the whole `MenuToolButton`. ## `markup` markup text to be used as tooltip text for button’s arrow button",667,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_arrow_tooltip_text","","Sets the tooltip text to be used as tooltip for the arrow button which pops up the menu. See `ToolItem::set_tooltip_text` for setting a tooltip on the whole `MenuToolButton`. ## `text` text to be used as tooltip text for button’s arrow button",667,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_menu","","Sets the `Menu` that is popped up when the user clicks on the arrow. If `menu` is NULL, the arrow button becomes insensitive. ## `menu` the `Menu` associated with `MenuToolButton`",667,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_show_menu","","The ::show-menu signal is emitted before the menu is shown.",667,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_notify","","",667,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MessageDialogExt","","Trait containing all `MessageDialog` methods.",null,null],[10,"get_image","","Gets the dialog’s image.",668,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_message_area","","Returns the message area of the dialog. This is the box where the dialog’s primary and secondary labels are packed. You can add your own extra content to that box and it will appear below those labels. See `DialogExt::get_content_area` for the corresponding function in the parent `Dialog`.",668,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_image","","Sets the dialog’s image to `image`.",668,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_markup","","Sets the text of the message dialog to be `str`, which is marked up with the [Pango text markup language][PangoMarkupFormat]. ## `str` markup string (see [Pango markup format][PangoMarkupFormat])",668,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_message_type","","",668,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[10,"set_property_message_type","","",668,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":null}],[10,"get_property_secondary_text","","",668,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_secondary_text","","",668,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_secondary_use_markup","","",668,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_secondary_use_markup","","",668,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_text","","The primary text of the message dialog. If the dialog has a secondary text, this will appear as the title.",668,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","The primary text of the message dialog. If the dialog has a secondary text, this will appear as the title.",668,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_use_markup","","",668,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_use_markup","","",668,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_buttons_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_image_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_area_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_message_type_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_text_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_secondary_use_markup_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_markup_notify","","",668,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MiscExt","","`[Deprecated since 3.14]` Trait containing all `Misc` methods.",null,null],[10,"get_alignment","","Gets the X and Y alignment of the widget within its allocation. See `MiscExt::set_alignment`.",669,null],[10,"get_padding","","Gets the padding in the X and Y directions of the widget. See `MiscExt::set_padding`.",669,null],[10,"set_alignment","","Sets the alignment of the widget.",669,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"set_padding","","Sets the amount of space to add around the widget.",669,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"get_property_xalign","","The horizontal alignment. A value of 0.0 means left alignment (or right on RTL locales); a value of 1.0 means right alignment (or left on RTL locales).",669,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_xalign","","The horizontal alignment. A value of 0.0 means left alignment (or right on RTL locales); a value of 1.0 means right alignment (or left on RTL locales).",669,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_xpad","","The amount of space to add on the left and right of the widget, in pixels.",669,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_xpad","","The amount of space to add on the left and right of the widget, in pixels.",669,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_yalign","","The vertical alignment. A value of 0.0 means top alignment; a value of 1.0 means bottom alignment.",669,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"set_property_yalign","","The vertical alignment. A value of 0.0 means top alignment; a value of 1.0 means bottom alignment.",669,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"get_property_ypad","","The amount of space to add on the top and bottom of the widget, in pixels.",669,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_ypad","","The amount of space to add on the top and bottom of the widget, in pixels.",669,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_property_xalign_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_xpad_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_yalign_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ypad_notify","","",669,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ModelButtonExt","","Trait containing all `ModelButton` methods.",null,null],[10,"get_property_active","","The state of the button. This is reflecting the state of the associated `gio::Action`.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","The state of the button. This is reflecting the state of the associated `gio::Action`.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_centered","","Wether to render the button contents centered instead of left-aligned. This property should be set for title-like items.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_centered","","Wether to render the button contents centered instead of left-aligned. This property should be set for title-like items.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_icon","","A `gio::Icon` that will be used if iconic appearance for the button is desired.",670,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"set_property_icon","","A `gio::Icon` that will be used if iconic appearance for the button is desired.",670,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_iconic","","If this property is set, the button will show an icon if one is set. If no icon is set, the text will be used. This is typically used for horizontal sections of linked buttons.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_iconic","","If this property is set, the button will show an icon if one is set. If no icon is set, the text will be used. This is typically used for horizontal sections of linked buttons.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_inverted","","Whether to show the submenu indicator at the opposite side than normal. This property should be set for model buttons that 'go back' to a parent menu.",670,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_inverted","","Whether to show the submenu indicator at the opposite side than normal. This property should be set for model buttons that 'go back' to a parent menu.",670,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_menu_name","","",670,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_menu_name","","",670,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_role","","Specifies whether the button is a plain, check or radio button. When `Actionable:action-name` is set, the role will be determined from the action and does not have to be set explicitly.",670,{"inputs":[{"name":"self"}],"output":{"name":"buttonrole"}}],[10,"set_property_role","","Specifies whether the button is a plain, check or radio button. When `Actionable:action-name` is set, the role will be determined from the action and does not have to be set explicitly.",670,{"inputs":[{"name":"self"},{"name":"buttonrole"}],"output":null}],[10,"get_property_text","","The label for the button.",670,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_text","","The label for the button.",670,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_active_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_centered_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_iconic_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_menu_name_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_role_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",670,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"MountOperationExt","","",null,null],[10,"get_parent","","",671,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_screen","","",671,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"is_showing","","",671,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_parent","","",671,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_screen","","",671,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"get_property_is_showing","","",671,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_is_showing_notify","","",671,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",671,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",671,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NativeDialogExt","","",null,null],[10,"destroy","","",672,{"inputs":[{"name":"self"}],"output":null}],[10,"get_modal","","",672,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","",672,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_transient_for","","",672,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_visible","","",672,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"hide","","",672,{"inputs":[{"name":"self"}],"output":null}],[10,"run","","",672,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_modal","","",672,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_title","","",672,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_transient_for","","",672,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"show","","",672,{"inputs":[{"name":"self"}],"output":null}],[10,"set_property_visible","","",672,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_response","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modal_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transient_for_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",672,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"NotebookExt","","Trait containing all `Notebook` methods.",null,null],[10,"detach_tab","","Removes the child from the notebook.",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_action_widget","","Gets one of the action widgets. See `NotebookExt::set_action_widget`. ## `pack_type` pack type of the action widget to receive",673,{"inputs":[{"name":"self"},{"name":"packtype"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_group_name","","Gets the current group name for `self`.",673,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_menu_label","","Retrieves the menu label widget of the page containing `child`. ## `child` a widget contained in a page of `self`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_menu_label_text","","Retrieves the text of the menu label for the page containing `child`. ## `child` the child widget of a page of the notebook.",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_scrollable","","Returns whether the tab label area has arrows for scrolling. See `NotebookExt::set_scrollable`.",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_border","","Returns whether a bevel will be drawn around the notebook pages. See `NotebookExt::set_show_border`.",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_tabs","","Returns whether the tabs of the notebook are shown. See `NotebookExt::set_show_tabs`.",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tab_detachable","","Returns whether the tab contents can be detached from `self`. ## `child` a child `Widget`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_tab_label","","Returns the tab label widget for the page `child`. `None` is returned if `child` is not in `self` or if no tab label has specifically been set for `child`. ## `child` the page",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_tab_label_text","","Retrieves the text of the tab label for the page containing `child`. ## `child` a widget contained in a page of `self`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tab_pos","","Gets the edge at which the tabs for switching pages in the notebook are drawn.",673,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"get_tab_reorderable","","Gets whether the tab can be reordered via drag and drop or not. ## `child` a child `Widget`",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"next_page","","Switches to the next page. Nothing happens if the current page is the last page.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_disable","","Disables the popup menu.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"popup_enable","","Enables the popup menu: if the user clicks with the right mouse button on the tab labels, a menu with all the pages will be popped up.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"prev_page","","Switches to the previous page. Nothing happens if the current page is the first page.",673,{"inputs":[{"name":"self"}],"output":null}],[10,"set_action_widget","","Sets `widget` as one of the action widgets. Depending on the pack type the widget will be placed before or after the tabs. You can use a `Box` if you need to pack more than one widget on the same side.",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"packtype"}],"output":null}],[10,"set_group_name","","Sets a group name for `self`.",673,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_menu_label","","Changes the menu label for the page containing `child`. ## `child` the child widget ## `menu_label` the menu label, or `None` for default",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"r"}],"output":null}],[10,"set_menu_label_text","","Creates a new label and sets it as the menu label of `child`. ## `child` the child widget ## `menu_text` the label text",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"set_scrollable","","Sets whether the tab label area will have arrows for scrolling if there are too many tabs to fit in the area. ## `scrollable` `true` if scroll arrows should be added",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_border","","Sets whether a bevel will be drawn around the notebook pages. This only has a visual effect when the tabs are not shown. See `NotebookExt::set_show_tabs`. ## `show_border` `true` if a bevel should be drawn around the notebook",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_tabs","","Sets whether to show the tabs for the notebook or not. ## `show_tabs` `true` if the tabs should be shown",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tab_detachable","","Sets whether the tab can be detached from `self` to another notebook or widget.",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_tab_label","","Changes the tab label for `child`. If `None` is specified for `tab_label`, then the page will have the label “page N”. ## `child` the page ## `tab_label` the tab label widget to use, or `None`  for default tab label",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"r"}],"output":null}],[10,"set_tab_label_text","","Creates a new label and sets it as the tab label for the page containing `child`. ## `child` the page ## `tab_text` the label text",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"set_tab_pos","","Sets the edge at which the tabs for switching pages in the notebook are drawn. ## `pos` the edge to draw the tabs at",673,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"set_tab_reorderable","","Sets whether the notebook tab can be reordered via drag and drop or not. ## `child` a child `Widget` ## `reorderable` whether the tab is reorderable or not",673,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"get_property_enable_popup","","",673,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_enable_popup","","",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_page","","",673,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_page","","",673,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_change_current_page","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_change_current_page","","",673,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_create_window","","The ::create-window signal is emitted when a detachable tab is dropped on the root window.",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_tab","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_focus_tab","","",673,{"inputs":[{"name":"self"},{"name":"notebooktab"}],"output":{"name":"bool"}}],[10,"connect_move_focus_out","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_focus_out","","",673,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_page_added","","the ::page-added signal is emitted in the notebook right after a page is added to the notebook. ## `child` the child `Widget` affected ## `page_num` the new page number for `child`",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_page_removed","","the ::page-removed signal is emitted in the notebook right after a page is removed from the notebook. ## `child` the child `Widget` affected ## `page_num` the `child` page number",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_page_reordered","","the ::page-reordered signal is emitted in the notebook right after a page has been reordered. ## `child` the child `Widget` affected ## `page_num` the new page number for `child`",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_reorder_tab","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_reorder_tab","","",673,{"inputs":[{"name":"self"},{"name":"directiontype"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_select_page","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_page","","",673,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_switch_page","","Emitted when the user or a function changes the current page. ## `page` the new current page ## `page_num` the index of the page",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_popup_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_group_name_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_page_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scrollable_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_border_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_tabs_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tab_pos_notify","","",673,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"OffscreenWindowExt","","",null,null],[10,"get_pixbuf","","",674,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_surface","","",674,{"inputs":[{"name":"self"}],"output":{"generics":["surface"],"name":"option"}}],[8,"OrientableExt","","Trait containing all `Orientable` methods.",null,null],[10,"get_orientation","","Retrieves the orientation of the `self`.",675,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"set_orientation","","Sets the orientation of the `self`. ## `orientation` the orientable’s new orientation.",675,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[10,"connect_property_orientation_notify","","",675,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"OverlayExt","","Trait containing all `Overlay` methods.",null,null],[10,"add_overlay","","Adds `widget` to `self`.",676,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_overlay_pass_through","","Convenience function to get the value of the `Overlay:pass-through` child property for `widget`.",676,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"reorder_overlay","","Moves `child` to a new `index` in the list of `self` children. The list contains overlays in the order that these were added to `self`.",676,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_overlay_pass_through","","Convenience function to set the value of the `Overlay:pass-through` child property for `widget`.",676,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"get_child_index","","",676,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_index","","",676,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[8,"PadControllerExt","","",null,null],[10,"set_action","","",677,{"inputs":[{"name":"self"},{"name":"padactiontype"},{"name":"i32"},{"name":"i32"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_property_action_group","","",677,{"inputs":[{"name":"self"}],"output":{"generics":["actiongroup"],"name":"option"}}],[10,"get_property_pad","","",677,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[10,"connect_property_action_group_notify","","",677,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pad_notify","","",677,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PageSetupExt","","Trait containing all `PageSetup` methods.",null,null],[10,"copy","","Copies a `PageSetup`.",678,{"inputs":[{"name":"self"}],"output":{"generics":["pagesetup"],"name":"option"}}],[10,"get_bottom_margin","","Gets the bottom margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_left_margin","","Gets the left margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_orientation","","Gets the page orientation of the `PageSetup`.",678,{"inputs":[{"name":"self"}],"output":{"name":"pageorientation"}}],[10,"get_page_height","","Returns the page height in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_page_width","","Returns the page width in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_paper_height","","Returns the paper height in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_paper_size","","Gets the paper size of the `PageSetup`.",678,{"inputs":[{"name":"self"}],"output":{"name":"papersize"}}],[10,"get_paper_width","","Returns the paper width in units of `unit`.",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_right_margin","","Gets the right margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_top_margin","","Gets the top margin in units of `unit`. ## `unit` the unit for the return value",678,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"load_file","","Reads the page setup from the file `file_name`. See `PageSetupExt::to_file`. ## `file_name` the filename to read the page setup from",678,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_key_file","","Reads the page setup from the group `group_name` in the key file `key_file`. ## `key_file` the `glib::KeyFile` to retrieve the page_setup from ## `group_name` the name of the group in the key_file to read, or `None`  to use the default name “Page Setup”",678,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_bottom_margin","","Sets the bottom margin of the `PageSetup`. ## `margin` the new bottom margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_left_margin","","Sets the left margin of the `PageSetup`. ## `margin` the new left margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_orientation","","Sets the page orientation of the `PageSetup`. ## `orientation` a `PageOrientation` value",678,{"inputs":[{"name":"self"},{"name":"pageorientation"}],"output":null}],[10,"set_paper_size","","Sets the paper size of the `PageSetup` without changing the margins. See `PageSetupExt::set_paper_size_and_default_margins`. ## `size` a `PaperSize`",678,{"inputs":[{"name":"self"},{"name":"papersize"}],"output":null}],[10,"set_paper_size_and_default_margins","","Sets the paper size of the `PageSetup` and modifies the margins according to the new paper size. ## `size` a `PaperSize`",678,{"inputs":[{"name":"self"},{"name":"papersize"}],"output":null}],[10,"set_right_margin","","Sets the right margin of the `PageSetup`. ## `margin` the new right margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_top_margin","","Sets the top margin of the `PageSetup`. ## `margin` the new top margin in units of `unit` ## `unit` the units for `margin`",678,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"to_file","","This function saves the information from `self` to `file_name`. ## `file_name` the file to save to",678,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"to_gvariant","","Serialize page setup to an a{sv} variant.",678,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"to_key_file","","This function adds the page setup from `self` to `key_file`. ## `key_file` the `glib::KeyFile` to save the page setup to ## `group_name` the group to add the settings to in `key_file`,  or `None` to use the default name “Page Setup”",678,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"str"}],"output":null}],[8,"PanedExt","","Trait containing all `Paned` methods.",null,null],[10,"add1","","Adds a child to the top or left pane with default parameters. This is equivalent to `gtk_paned_pack1 (paned, child, FALSE, TRUE)`. ## `child` the child to add",679,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add2","","Adds a child to the bottom or right pane with default parameters. This is equivalent to `gtk_paned_pack2 (paned, child, TRUE, TRUE)`. ## `child` the child to add",679,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_child1","","Obtains the first child of the paned widget.",679,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_child2","","Obtains the second child of the paned widget.",679,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_handle_window","","Returns the `gdk::Window` of the handle. This function is useful when handling button or motion events because it enables the callback to distinguish between the window of the paned, a child and the handle.",679,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_position","","Obtains the position of the divider between the two panes.",679,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_wide_handle","","Gets the `Paned:wide-handle` property.",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pack1","","Adds a child to the top or left pane. ## `child` the child to add ## `resize` should this child expand when the paned widget is resized. ## `shrink` can this child be made smaller than its requisition.",679,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"pack2","","Adds a child to the bottom or right pane. ## `child` the child to add ## `resize` should this child expand when the paned widget is resized. ## `shrink` can this child be made smaller than its requisition.",679,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"set_position","","Sets the position of the divider between the two panes. ## `position` pixel position of divider, a negative value means that the position  is unset.",679,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_wide_handle","","Sets the `Paned:wide-handle` property.",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_max_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_min_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_position_set","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_position_set","","",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_child_resize","","",679,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_resize","","",679,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_shrink","","",679,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_shrink","","",679,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"connect_accept_position","","The ::accept-position signal is a [keybinding signal][`BindingSignal`] which gets emitted to accept the current position of the handle when moving it using key bindings.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_accept_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_cancel_position","","The ::cancel-position signal is a [keybinding signal][`BindingSignal`] which gets emitted to cancel moving the position of the handle using key bindings. The position of the handle will be reset to the value prior to moving it.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cancel_position","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_cycle_child_focus","","The ::cycle-child-focus signal is a [keybinding signal][`BindingSignal`] which gets emitted to cycle the focus between the children of the paned.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cycle_child_focus","","",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_cycle_handle_focus","","The ::cycle-handle-focus signal is a [keybinding signal][`BindingSignal`] which gets emitted to cycle whether the paned should grab focus to allow the user to change position of the handle by using key bindings.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cycle_handle_focus","","",679,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_move_handle","","The ::move-handle signal is a [keybinding signal][`BindingSignal`] which gets emitted to move the handle when the user is using key bindings to move it. ## `scroll_type` a `ScrollType`",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_handle","","",679,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":{"name":"bool"}}],[10,"connect_toggle_handle_focus","","The ::toggle-handle-focus is a [keybinding signal][`BindingSignal`] which gets emitted to accept the current position of the handle and then move focus to the next widget in the focus chain.",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_handle_focus","","",679,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_max_position_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_position_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_position_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_position_set_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wide_handle_notify","","",679,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PlacesSidebarExt","","Trait containing all `PlacesSidebar` methods.",null,null],[10,"add_shortcut","","Applications may want to present some folders in the places sidebar if they could be immediately useful to users. For example, a drawing program could add a “/usr/share/clipart” location when the sidebar is being used in an “Insert Clipart” dialog box.",680,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_local_only","","Returns the value previously set with `PlacesSidebarExt::set_local_only`.",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_location","","Gets the currently-selected location in the `self`. This can be `None` when nothing is selected, for example, when `PlacesSidebarExt::set_location` has been called with a location that is not among the sidebar’s list of places to show.",680,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_nth_bookmark","","This function queries the bookmarks added by the user to the places sidebar, and returns one of them. This function is used by `FileChooser` to implement the “Alt-1”, “Alt-2”, etc. shortcuts, which activate the cooresponding bookmark.",680,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["file"],"name":"option"}}],[10,"get_open_flags","","Gets the open flags.",680,{"inputs":[{"name":"self"}],"output":{"name":"placesopenflags"}}],[10,"get_show_connect_to_server","","Returns the value previously set with `PlacesSidebarExt::set_show_connect_to_server`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_desktop","","Returns the value previously set with `PlacesSidebarExt::set_show_desktop`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_enter_location","","Returns the value previously set with `PlacesSidebarExt::set_show_enter_location`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_other_locations","","Returns the value previously set with `PlacesSidebarExt::set_show_other_locations`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_recent","","Returns the value previously set with `PlacesSidebarExt::set_show_recent`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_starred_location","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_trash","","Returns the value previously set with `PlacesSidebarExt::set_show_trash`",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"list_shortcuts","","Gets the list of shortcuts.",680,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"vec"}}],[10,"remove_shortcut","","Removes an application-specific shortcut that has been previously been inserted with `PlacesSidebarExt::add_shortcut`. If the `location` is not a shortcut in the sidebar, then nothing is done.",680,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_drop_targets_visible","","Make the `PlacesSidebar` show drop targets, so it can show the available drop targets and a \"new bookmark\" row. This improves the Drag-and-Drop experience of the user and allows applications to show all available drop targets at once.",680,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"dragcontext"}],"output":null}],[10,"set_local_only","","Sets whether the `self` should only show local files.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_location","","Sets the location that is being shown in the widgets surrounding the `self`, for example, in a folder view in a file manager. In turn, the `self` will highlight that location if it is being shown in the list of places, or it will unhighlight everything if the `location` is not among the places in the list.",680,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_open_flags","","Sets the way in which the calling application can open new locations from the places sidebar. For example, some applications only open locations “directly” into their main view, while others may support opening locations in a new notebook tab or a new window.",680,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[10,"set_show_connect_to_server","","Sets whether the `self` should show an item for connecting to a network server; this is off by default. An application may want to turn this on if it implements a way for the user to connect to network servers directly.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_desktop","","Sets whether the `self` should show an item for the Desktop folder. The default value for this option is determined by the desktop environment and the user’s configuration, but this function can be used to override it on a per-application basis.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_enter_location","","Sets whether the `self` should show an item for entering a location; this is off by default. An application may want to turn this on if manually entering URLs is an expected user action.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_other_locations","","Sets whether the `self` should show an item for the application to show an Other Locations view; this is off by default. When set to `true`, persistent devices such as hard drives are hidden, otherwise they are shown in the sidebar. An application may want to turn this on if it implements a way for the user to see and interact with drives and network servers directly.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_recent","","Sets whether the `self` should show an item for recent files. The default value for this option is determined by the desktop environment, but this function can be used to override it on a per-application basis.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_starred_location","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_trash","","Sets whether the `self` should show an item for the Trash location.",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_local_only","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_local_only","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_location","","",680,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"option"}}],[10,"set_property_location","","",680,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_open_flags","","",680,{"inputs":[{"name":"self"}],"output":{"name":"placesopenflags"}}],[10,"set_property_open_flags","","",680,{"inputs":[{"name":"self"},{"name":"placesopenflags"}],"output":null}],[10,"get_property_populate_all","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_populate_all","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_show_connect_to_server","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_desktop","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_desktop","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_enter_location","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_enter_location","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_other_locations","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_other_locations","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_recent","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_recent","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_trash","","",680,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_trash","","",680,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_drag_action_ask","","The places sidebar emits this signal when it needs to ask the application to pop up a menu to ask the user for which drag action to perform.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mount","","The places sidebar emits this signal when it starts a new operation because the user clicked on some location that needs mounting. In this way the application using the `PlacesSidebar` can track the progress of the operation and, for example, show a notification.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_open_location","","The places sidebar emits this signal when the user selects a location in it. The calling application should display the contents of that location; for example, a file manager should show a list of files in the specified location.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_connect_to_server","","The places sidebar emits this signal when it needs the calling application to present an way to connect directly to a network server. For example, the application may bring up a dialog box asking for a URL like \"sftp://ftp.example.com\". It is up to the application to create the corresponding mount by using, for example, `gio::File::mount_enclosing_volume`.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_enter_location","","The places sidebar emits this signal when it needs the calling application to present an way to directly enter a location. For example, the application may bring up a dialog box asking for a URL like \"http://http.example.com\".",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_error_message","","The places sidebar emits this signal when it needs the calling application to present an error message. Most of these messages refer to mounting or unmounting media, for example, when a drive cannot be started for some reason.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_other_locations","","The places sidebar emits this signal when it needs the calling application to present a way to show other locations e.g. drives and network access points. For example, the application may bring up a page showing persistent volumes and discovered network addresses.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_other_locations_with_flags","","The places sidebar emits this signal when it needs the calling application to present a way to show other locations e.g. drives and network access points. For example, the application may bring up a page showing persistent volumes and discovered network addresses.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_starred_location","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unmount","","The places sidebar emits this signal when it starts a new operation because the user for example ejected some drive or unmounted a mount. In this way the application using the `PlacesSidebar` can track the progress of the operation and, for example, show a notification.",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_only_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_location_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_open_flags_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_populate_all_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_connect_to_server_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_desktop_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_enter_location_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_other_locations_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_recent_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_starred_location_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_trash_notify","","",680,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PlugExt","","",null,null],[10,"construct","","",681,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"construct_for_display","","",681,{"inputs":[{"name":"self"},{"name":"display"},{"name":"window"}],"output":null}],[10,"get_embedded","","",681,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_id","","",681,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_socket_window","","",681,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"connect_embedded","","",681,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_embedded_notify","","",681,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_socket_window_notify","","",681,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PopoverExt","","Trait containing all `Popover` methods.",null,null],[10,"bind_model","","Establishes a binding between a `Popover` and a `gio::MenuModel`.",682,{"inputs":[{"name":"self"},{"name":"q"},{"name":"r"}],"output":null}],[10,"get_constrain_to","","Returns the constraint for placing this popover. See `PopoverExt::set_constrain_to`.",682,{"inputs":[{"name":"self"}],"output":{"name":"popoverconstraint"}}],[10,"get_default_widget","","Gets the widget that should be set as the default while the popover is shown.",682,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_modal","","Returns whether the popover is modal, see gtk_popover_set_modal to see the implications of this.",682,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pointing_to","","If a rectangle to point to has been set, this function will return `true` and fill in `rect` with such rectangle, otherwise it will return `false` and fill in `rect` with the attached widget coordinates. ## `rect` location to store the rectangle",682,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_position","","Returns the preferred position of `self`.",682,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"get_relative_to","","Returns the widget `self` is currently attached to",682,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_transitions_enabled","","Returns whether show/hide transitions are enabled on this popover.",682,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"popdown","","Pops `self` down.This is different than a `WidgetExt::hide` call in that it shows the popover with a transition. If you want to hide the popover without a transition, use `WidgetExt::hide`.",682,{"inputs":[{"name":"self"}],"output":null}],[10,"popup","","Pops `self` up. This is different than a `WidgetExt::show` call in that it shows the popover with a transition. If you want to show the popover without a transition, use `WidgetExt::show`.",682,{"inputs":[{"name":"self"}],"output":null}],[10,"set_constrain_to","","Sets a constraint for positioning this popover.",682,{"inputs":[{"name":"self"},{"name":"popoverconstraint"}],"output":null}],[10,"set_default_widget","","Sets the widget that should be set as default widget while the popover is shown (see `GtkWindowExt::set_default`). `Popover` remembers the previous default widget and reestablishes it when the popover is dismissed.",682,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_modal","","Sets whether `self` is modal, a modal popover will grab all input within the toplevel and grab the keyboard focus on it when being displayed. Clicking outside the popover area or pressing Esc will dismiss the popover and ungrab input.",682,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pointing_to","","Sets the rectangle that `self` will point to, in the coordinate space of the widget `self` is attached to, see `PopoverExt::set_relative_to`.",682,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[10,"set_position","","Sets the preferred position for `self` to appear. If the `self` is currently visible, it will be immediately updated.",682,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"set_relative_to","","Sets a new widget to be attached to `self`. If `self` is visible, the position will be updated.",682,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_transitions_enabled","","Sets whether show/hide transitions are enabled on this popover",682,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_closed","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_constrain_to_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modal_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pointing_to_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_position_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_relative_to_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transitions_enabled_notify","","",682,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PopoverMenuExt","","Trait containing all `PopoverMenu` methods.",null,null],[10,"open_submenu","","Opens a submenu of the `self`. The `name` must be one of the names given to the submenus of `self` with `PopoverMenu:submenu`, or \"main\" to switch back to the main menu.",683,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_visible_submenu","","",683,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_visible_submenu","","",683,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_child_position","","",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",683,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_submenu","","",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_submenu","","",683,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"connect_property_visible_submenu_notify","","",683,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintContextExt","","Trait containing all `PrintContext` methods.",null,null],[10,"create_pango_context","","Creates a new `pango::Context` that can be used with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"create_pango_layout","","Creates a new `pango::Layout` that is suitable for use with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_cairo_context","","Obtains the cairo context that is associated with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_dpi_x","","Obtains the horizontal resolution of the `PrintContext`, in dots per inch.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_dpi_y","","Obtains the vertical resolution of the `PrintContext`, in dots per inch.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_hard_margins","","Obtains the hardware printer margins of the `PrintContext`, in units. ## `top` top hardware printer margin ## `bottom` bottom hardware printer margin ## `left` left hardware printer margin ## `right` right hardware printer margin",684,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_height","","Obtains the height of the `PrintContext`, in pixels.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_page_setup","","Obtains the `PageSetup` that determines the page dimensions of the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["pagesetup"],"name":"option"}}],[10,"get_pango_fontmap","","Returns a `pango::FontMap` that is suitable for use with the `PrintContext`.",684,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_width","","Obtains the width of the `PrintContext`, in pixels.",684,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_cairo_context","","Sets a new cairo context on a print context.",684,{"inputs":[{"name":"self"},{"name":"context"},{"name":"f64"},{"name":"f64"}],"output":null}],[8,"PrintOperationExt","","Trait containing all `PrintOperation` methods.",null,null],[10,"cancel","","Cancels a running print operation. This function may be called from a `PrintOperation::begin-print`, `PrintOperation::paginate` or `PrintOperation::draw-page` signal handler to stop the currently running print operation.",685,{"inputs":[{"name":"self"}],"output":null}],[10,"draw_page_finish","","Signalize that drawing of particular page is complete.",685,{"inputs":[{"name":"self"}],"output":null}],[10,"get_default_page_setup","","Returns the default page setup, see `PrintOperationExt::set_default_page_setup`.",685,{"inputs":[{"name":"self"}],"output":{"generics":["pagesetup"],"name":"option"}}],[10,"get_embed_page_setup","","Gets the value of `PrintOperation:embed-page-setup` property.",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_error","","Call this when the result of a print operation is `PrintOperationResult::Error`, either as returned by `PrintOperationExt::run`, or in the `PrintOperation::done` signal handler. The returned `glib::Error` will contain more details on what went wrong.",685,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_has_selection","","Gets the value of `PrintOperation:has-selection` property.",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_n_pages_to_print","","Returns the number of pages that will be printed.",685,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_print_settings","","Returns the current print settings.",685,{"inputs":[{"name":"self"}],"output":{"generics":["printsettings"],"name":"option"}}],[10,"get_status","","Returns the status of the print operation. Also see `PrintOperationExt::get_status_string`.",685,{"inputs":[{"name":"self"}],"output":{"name":"printstatus"}}],[10,"get_status_string","","Returns a string representation of the status of the print operation. The string is translated and suitable for displaying the print status e.g. in a `Statusbar`.",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_support_selection","","Gets the value of `PrintOperation:support-selection` property.",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finished","","A convenience function to find out if the print operation is finished, either successfully (`PrintStatus::Finished`) or unsuccessfully (`PrintStatus::FinishedAborted`).",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"run","","Runs the print operation, by first letting the user modify print settings in the print dialog, and then print the document.",685,{"inputs":[{"name":"self"},{"name":"printoperationaction"},{"name":"q"}],"output":{"generics":["printoperationresult","error"],"name":"result"}}],[10,"set_allow_async","","Sets whether the `PrintOperationExt::run` may return before the print operation is completed. Note that some platforms may not allow asynchronous operation. ## `allow_async` `true` to allow asynchronous operation",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_current_page","","Sets the current page.",685,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_custom_tab_label","","Sets the label for the tab holding custom widgets. ## `label` the label to use, or `None` to use the default label",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_default_page_setup","","Makes `default_page_setup` the default page setup for `self`.",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_defer_drawing","","Sets up the `PrintOperation` to wait for calling of `PrintOperationExt::draw_page_finish` from application. It can be used for drawing page in another thread.",685,{"inputs":[{"name":"self"}],"output":null}],[10,"set_embed_page_setup","","Embed page size combo box and orientation combo box into page setup page. Selected page setup is stored as default page setup in `PrintOperation`. ## `embed` `true` to embed page setup selection in the `GtkPrintUnixDialog`",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_export_filename","","Sets up the `PrintOperation` to generate a file instead of showing the print dialog. The indended use of this function is for implementing “Export to PDF” actions. Currently, PDF is the only supported format.",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_has_selection","","Sets whether there is a selection to print.",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_job_name","","Sets the name of the print job. The name is used to identify the job (e.g. in monitoring applications like eggcups).",685,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_n_pages","","Sets the number of pages in the document.",685,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_print_settings","","Sets the print settings for `self`. This is typically used to re-establish print settings from a previous print operation, see `PrintOperationExt::run`. ## `print_settings` `PrintSettings`",685,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_show_progress","","If `show_progress` is `true`, the print operation will show a progress dialog during the print operation. ## `show_progress` `true` to show a progress dialog",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_support_selection","","Sets whether selection is supported by `PrintOperation`. ## `support_selection` `true` to support selection",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_track_print_status","","If track_status is `true`, the print operation will try to continue report on the status of the print job in the printer queues and printer. This can allow your application to show things like “out of paper” issues, and when the print job actually reaches the printer.",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_unit","","Sets up the transformation for the cairo context obtained from `PrintContext` in such a way that distances are measured in units of `unit`. ## `unit` the unit to use",685,{"inputs":[{"name":"self"},{"name":"unit"}],"output":null}],[10,"set_use_full_page","","If `full_page` is `true`, the transformation for the cairo context obtained from `PrintContext` puts the origin at the top left corner of the page (which may not be the top left corner of the sheet, depending on page orientation and the number of pages per sheet). Otherwise, the origin is at the top left corner of the imageable area (i.e. inside the margins). ## `full_page` `true` to set up the `PrintContext` for the full page",685,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_allow_async","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_current_page","","",685,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_custom_tab_label","","",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_export_filename","","",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_job_name","","",685,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_n_pages","","",685,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_property_show_progress","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_track_print_status","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_unit","","The transformation for the cairo context obtained from `PrintContext` is set up in such a way that distances are measured in units of `unit`.",685,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[10,"get_property_use_full_page","","",685,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_begin_print","","Emitted after the user has finished changing print settings in the dialog, before the actual rendering starts.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_create_custom_widget","","Emitted when displaying the print dialog. If you return a widget in a handler for this signal it will be added to a custom tab in the print dialog. You typically return a container widget with multiple widgets in it.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_custom_widget_apply","","Emitted right before `PrintOperation::begin-print` if you added a custom widget in the `PrintOperation::create-custom-widget` handler. When you get this signal you should read the information from the custom widgets, as the widgets are not guaraneed to be around at a later time. ## `widget` the custom widget added in create-custom-widget",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_done","","Emitted when the print operation run has finished doing everything required for printing.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_draw_page","","Emitted for every page that is printed. The signal handler must render the `page_nr`'s page onto the cairo context obtained from `context` using `PrintContextExt::get_cairo_context`.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_end_print","","Emitted after all pages have been rendered. A handler for this signal can clean up any resources that have been allocated in the `PrintOperation::begin-print` handler. ## `context` the `PrintContext` for the current operation",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_paginate","","Emitted after the `PrintOperation::begin-print` signal, but before the actual rendering starts. It keeps getting emitted until a connected signal handler returns `true`.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preview","","Gets emitted when a preview is requested from the native dialog.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_request_page_setup","","Emitted once for every page that is printed, to give the application a chance to modify the page setup. Any changes done to `setup` will be in force only for printing this page. ## `context` the `PrintContext` for the current operation ## `page_nr` the number of the currently printed page (0-based) ## `setup` the `PageSetup`",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_status_changed","","Emitted at between the various phases of the print operation. See `PrintStatus` for the phases that are being discriminated. Use `PrintOperationExt::get_status` to find out the current status.",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_update_custom_widget","","Emitted after change of selected printer. The actual page setup and print settings are passed to the custom widget, which can actualize itself according to this change. ## `widget` the custom widget added in create-custom-widget ## `setup` actual page setup ## `settings` actual print settings",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_allow_async_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_current_page_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_custom_tab_label_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_page_setup_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_embed_page_setup_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_export_filename_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_selection_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_job_name_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_pages_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_n_pages_to_print_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_print_settings_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_progress_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_status_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_status_string_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_support_selection_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_track_print_status_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_unit_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_full_page_notify","","",685,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintOperationPreviewExt","","Trait containing all `PrintOperationPreview` methods.",null,null],[10,"end_preview","","Ends a preview.",686,{"inputs":[{"name":"self"}],"output":null}],[10,"is_selected","","Returns whether the given page is included in the set of pages that have been selected for printing. ## `page_nr` a page number",686,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"render_page","","Renders a page to the preview, using the print context that was passed to the `PrintOperation::preview` handler together with `self`.",686,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_got_page_size","","The ::got-page-size signal is emitted once for each page that gets rendered to the preview.",686,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_ready","","The ::ready signal gets emitted once per preview operation, before the first page is rendered.",686,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"PrintSettingsExt","","Trait containing all `PrintSettings` methods.",null,null],[10,"copy","","Copies a `PrintSettings` object.",687,{"inputs":[{"name":"self"}],"output":{"generics":["printsettings"],"name":"option"}}],[10,"get","","Looks up the string value associated with `key`. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_bool","","Returns the boolean represented by the value that is associated with `key`.",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_collate","","Gets the value of `GTK_PRINT_SETTINGS_COLLATE`.",687,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_default_source","","Gets the value of `GTK_PRINT_SETTINGS_DEFAULT_SOURCE`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_dither","","Gets the value of `GTK_PRINT_SETTINGS_DITHER`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_double","","Returns the double value associated with `key`, or 0. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"f64"}}],[10,"get_double_with_default","","Returns the floating point number represented by the value that is associated with `key`, or `default_val` if the value does not represent a floating point number.",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"get_duplex","","Gets the value of `GTK_PRINT_SETTINGS_DUPLEX`.",687,{"inputs":[{"name":"self"}],"output":{"name":"printduplex"}}],[10,"get_finishings","","Gets the value of `GTK_PRINT_SETTINGS_FINISHINGS`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_int","","Returns the integer value of `key`, or 0. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"i32"}}],[10,"get_int_with_default","","Returns the value of `key`, interpreted as an integer, or the default value. ## `key` a key ## `def` the default value",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_length","","Returns the value associated with `key`, interpreted as a length. The returned value is converted to `units`. ## `key` a key ## `unit` the unit of the return value",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_media_type","","Gets the value of `GTK_PRINT_SETTINGS_MEDIA_TYPE`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_n_copies","","Gets the value of `GTK_PRINT_SETTINGS_N_COPIES`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_number_up","","Gets the value of `GTK_PRINT_SETTINGS_NUMBER_UP`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_number_up_layout","","Gets the value of `GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT`.",687,{"inputs":[{"name":"self"}],"output":{"name":"numberuplayout"}}],[10,"get_orientation","","Get the value of `GTK_PRINT_SETTINGS_ORIENTATION`, converted to a `PageOrientation`.",687,{"inputs":[{"name":"self"}],"output":{"name":"pageorientation"}}],[10,"get_output_bin","","Gets the value of `GTK_PRINT_SETTINGS_OUTPUT_BIN`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_page_set","","Gets the value of `GTK_PRINT_SETTINGS_PAGE_SET`.",687,{"inputs":[{"name":"self"}],"output":{"name":"pageset"}}],[10,"get_paper_height","","Gets the value of `GTK_PRINT_SETTINGS_PAPER_HEIGHT`, converted to `unit`. ## `unit` the unit for the return value",687,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_paper_size","","Gets the value of `GTK_PRINT_SETTINGS_PAPER_FORMAT`, converted to a `PaperSize`.",687,{"inputs":[{"name":"self"}],"output":{"name":"papersize"}}],[10,"get_paper_width","","Gets the value of `GTK_PRINT_SETTINGS_PAPER_WIDTH`, converted to `unit`. ## `unit` the unit for the return value",687,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"f64"}}],[10,"get_print_pages","","Gets the value of `GTK_PRINT_SETTINGS_PRINT_PAGES`.",687,{"inputs":[{"name":"self"}],"output":{"name":"printpages"}}],[10,"get_printer","","Convenience function to obtain the value of `GTK_PRINT_SETTINGS_PRINTER`.",687,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_printer_lpi","","Gets the value of `GTK_PRINT_SETTINGS_PRINTER_LPI`.",687,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_quality","","Gets the value of `GTK_PRINT_SETTINGS_QUALITY`.",687,{"inputs":[{"name":"self"}],"output":{"name":"printquality"}}],[10,"get_resolution","","Gets the value of `GTK_PRINT_SETTINGS_RESOLUTION`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_resolution_x","","Gets the value of `GTK_PRINT_SETTINGS_RESOLUTION_X`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_resolution_y","","Gets the value of `GTK_PRINT_SETTINGS_RESOLUTION_Y`.",687,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reverse","","Gets the value of `GTK_PRINT_SETTINGS_REVERSE`.",687,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_scale","","Gets the value of `GTK_PRINT_SETTINGS_SCALE`.",687,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_use_color","","Gets the value of `GTK_PRINT_SETTINGS_USE_COLOR`.",687,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_key","","Returns `true`, if a value is associated with `key`. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"load_file","","Reads the print settings from `file_name`. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. See `PrintSettingsExt::to_file`. ## `file_name` the filename to read the settings from",687,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"load_key_file","","Reads the print settings from the group `group_name` in `key_file`. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. ## `key_file` the `glib::KeyFile` to retrieve the settings from ## `group_name` the name of the group to use, or `None` to use the default  “Print Settings”",687,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set","","Associates `value` with `key`. ## `key` a key ## `value` a string value, or `None`",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"set_bool","","Sets `key` to a boolean value. ## `key` a key ## `value` a boolean",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":null}],[10,"set_collate","","Sets the value of `GTK_PRINT_SETTINGS_COLLATE`. ## `collate` whether to collate the output",687,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_default_source","","Sets the value of `GTK_PRINT_SETTINGS_DEFAULT_SOURCE`. ## `default_source` the default source",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_dither","","Sets the value of `GTK_PRINT_SETTINGS_DITHER`. ## `dither` the dithering that is used",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_double","","Sets `key` to a double value. ## `key` a key ## `value` a double value",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":null}],[10,"set_duplex","","Sets the value of `GTK_PRINT_SETTINGS_DUPLEX`. ## `duplex` a `PrintDuplex` value",687,{"inputs":[{"name":"self"},{"name":"printduplex"}],"output":null}],[10,"set_finishings","","Sets the value of `GTK_PRINT_SETTINGS_FINISHINGS`. ## `finishings` the finishings",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_int","","Sets `key` to an integer value. ## `key` a key ## `value` an integer",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":null}],[10,"set_length","","Associates a length in units of `unit` with `key`. ## `key` a key ## `value` a length ## `unit` the unit of `length`",687,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_media_type","","Sets the value of `GTK_PRINT_SETTINGS_MEDIA_TYPE`.",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_n_copies","","Sets the value of `GTK_PRINT_SETTINGS_N_COPIES`. ## `num_copies` the number of copies",687,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_number_up","","Sets the value of `GTK_PRINT_SETTINGS_NUMBER_UP`. ## `number_up` the number of pages per sheet",687,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_number_up_layout","","Sets the value of `GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT`. ## `number_up_layout` a `NumberUpLayout` value",687,{"inputs":[{"name":"self"},{"name":"numberuplayout"}],"output":null}],[10,"set_orientation","","Sets the value of `GTK_PRINT_SETTINGS_ORIENTATION`. ## `orientation` a page orientation",687,{"inputs":[{"name":"self"},{"name":"pageorientation"}],"output":null}],[10,"set_output_bin","","Sets the value of `GTK_PRINT_SETTINGS_OUTPUT_BIN`. ## `output_bin` the output bin",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_page_set","","Sets the value of `GTK_PRINT_SETTINGS_PAGE_SET`. ## `page_set` a `PageSet` value",687,{"inputs":[{"name":"self"},{"name":"pageset"}],"output":null}],[10,"set_paper_height","","Sets the value of `GTK_PRINT_SETTINGS_PAPER_HEIGHT`. ## `height` the paper height ## `unit` the units of `height`",687,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_paper_size","","Sets the value of `GTK_PRINT_SETTINGS_PAPER_FORMAT`, `GTK_PRINT_SETTINGS_PAPER_WIDTH` and `GTK_PRINT_SETTINGS_PAPER_HEIGHT`. ## `paper_size` a paper size",687,{"inputs":[{"name":"self"},{"name":"papersize"}],"output":null}],[10,"set_paper_width","","Sets the value of `GTK_PRINT_SETTINGS_PAPER_WIDTH`. ## `width` the paper width ## `unit` the units of `width`",687,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"unit"}],"output":null}],[10,"set_print_pages","","Sets the value of `GTK_PRINT_SETTINGS_PRINT_PAGES`. ## `pages` a `PrintPages` value",687,{"inputs":[{"name":"self"},{"name":"printpages"}],"output":null}],[10,"set_printer","","Convenience function to set `GTK_PRINT_SETTINGS_PRINTER` to `printer`. ## `printer` the printer name",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_printer_lpi","","Sets the value of `GTK_PRINT_SETTINGS_PRINTER_LPI`. ## `lpi` the resolution in lpi (lines per inch)",687,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_quality","","Sets the value of `GTK_PRINT_SETTINGS_QUALITY`. ## `quality` a `PrintQuality` value",687,{"inputs":[{"name":"self"},{"name":"printquality"}],"output":null}],[10,"set_resolution","","Sets the values of `GTK_PRINT_SETTINGS_RESOLUTION`, `GTK_PRINT_SETTINGS_RESOLUTION_X` and `GTK_PRINT_SETTINGS_RESOLUTION_Y`. ## `resolution` the resolution in dpi",687,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_resolution_xy","","Sets the values of `GTK_PRINT_SETTINGS_RESOLUTION`, `GTK_PRINT_SETTINGS_RESOLUTION_X` and `GTK_PRINT_SETTINGS_RESOLUTION_Y`. ## `resolution_x` the horizontal resolution in dpi ## `resolution_y` the vertical resolution in dpi",687,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_reverse","","Sets the value of `GTK_PRINT_SETTINGS_REVERSE`. ## `reverse` whether to reverse the output",687,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_scale","","Sets the value of `GTK_PRINT_SETTINGS_SCALE`. ## `scale` the scale in percent",687,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_use_color","","Sets the value of `GTK_PRINT_SETTINGS_USE_COLOR`. ## `use_color` whether to use color",687,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"to_file","","This function saves the print settings from `self` to `file_name`. If the file could not be loaded then error is set to either a `glib::FileError` or `glib::KeyFileError`. ## `file_name` the file to save to",687,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"to_gvariant","","Serialize print settings to an a{sv} variant.",687,{"inputs":[{"name":"self"}],"output":{"generics":["variant"],"name":"option"}}],[10,"to_key_file","","This function adds the print settings from `self` to `key_file`. ## `key_file` the `glib::KeyFile` to save the print settings to ## `group_name` the group to add the settings to in `key_file`, or  `None` to use the default “Print Settings”",687,{"inputs":[{"name":"self"},{"name":"keyfile"},{"name":"str"}],"output":null}],[10,"unset","","Removes any value associated with `key`. This has the same effect as setting the value to `None`. ## `key` a key",687,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"ProgressBarExt","","Trait containing all `ProgressBar` methods.",null,null],[10,"get_ellipsize","","Returns the ellipsizing position of the progress bar. See `ProgressBarExt::set_ellipsize`.",688,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_fraction","","Returns the current fraction of the task that’s been completed.",688,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_inverted","","Gets the value set by `ProgressBarExt::set_inverted`.",688,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pulse_step","","Retrieves the pulse step set with `ProgressBarExt::set_pulse_step`.",688,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_show_text","","Gets the value of the `ProgressBar:show-text` property. See `ProgressBarExt::set_show_text`.",688,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_text","","Retrieves the text that is displayed with the progress bar, if any, otherwise `None`. The return value is a reference to the text, not a copy of it, so will become invalid if you change the text in the progress bar.",688,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"pulse","","Indicates that some progress has been made, but you don’t know how much. Causes the progress bar to enter “activity mode,” where a block bounces back and forth. Each call to `ProgressBarExt::pulse` causes the block to move by a little bit (the amount of movement per pulse is determined by `ProgressBarExt::set_pulse_step`).",688,{"inputs":[{"name":"self"}],"output":null}],[10,"set_ellipsize","","Sets the mode used to ellipsize (add an ellipsis: \"...\") the text if there is not enough space to render the entire string. ## `mode` a `pango::EllipsizeMode`",688,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_fraction","","Causes the progress bar to “fill in” the given fraction of the bar. The fraction should be between 0.0 and 1.0, inclusive. ## `fraction` fraction of the task that’s been completed",688,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_inverted","","Progress bars normally grow from top to bottom or left to right. Inverted progress bars grow in the opposite direction. ## `inverted` `true` to invert the progress bar",688,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pulse_step","","Sets the fraction of total progress bar length to move the bouncing block for each call to `ProgressBarExt::pulse`. ## `fraction` fraction between 0.0 and 1.0",688,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_show_text","","Sets whether the progress bar will show text next to the bar. The shown text is either the value of the `ProgressBar:text` property or, if that is `None`, the `ProgressBar:fraction` value, as a percentage.",688,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text","","Causes the given `text` to appear next to the progress bar.",688,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_property_ellipsize_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fraction_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pulse_step_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_text_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",688,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RadioButtonExt","","Trait containing all `RadioButton` methods.",null,null],[10,"get_group","","Retrieves the group assigned to a radio button.",689,{"inputs":[{"name":"self"}],"output":{"generics":["radiobutton"],"name":"vec"}}],[10,"join_group","","Joins a `RadioButton` object to the group of another `RadioButton` object",689,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_group_changed","","Emitted when the group of radio buttons that a radio button belongs to changes. This is emitted when a radio button switches from being alone to being part of a group of 2 or more buttons, or vice-versa, and when a button is moved from one group of 2 or more buttons to a different one, but not when the composition of the group that a button belongs to changes.",689,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RadioMenuItemExt","","Trait containing all `RadioMenuItem` methods.",null,null],[10,"get_group","","Returns the group to which the radio menu item belongs, as a `glib::List` of `RadioMenuItem`. The list belongs to GTK+ and should not be freed.",690,{"inputs":[{"name":"self"}],"output":{"generics":["radiomenuitem"],"name":"vec"}}],[10,"join_group","","Joins a `RadioMenuItem` object to the group of another `RadioMenuItem` object.",690,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"connect_group_changed","","",690,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RadioToolButtonExt","","Trait containing all `RadioToolButton` methods.",null,null],[10,"get_group","","Returns the radio button group `self` belongs to.",691,{"inputs":[{"name":"self"}],"output":{"generics":["radiobutton"],"name":"vec"}}],[8,"RangeExt","","Trait containing all `Range` methods.",null,null],[10,"get_adjustment","","Get the `Adjustment` which is the “model” object for `Range`. See `RangeExt::set_adjustment` for details. The return value does not have a reference added, so should not be unreferenced.",692,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[10,"get_fill_level","","Gets the current position of the fill level indicator.",692,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_flippable","","Gets the value set by `RangeExt::set_flippable`.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inverted","","Gets the value set by `RangeExt::set_inverted`.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_lower_stepper_sensitivity","","Gets the sensitivity policy for the stepper that points to the 'lower' end of the `Range`’s adjustment.",692,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[10,"get_min_slider_size","","This function is useful mainly for `Range` subclasses.",692,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_range_rect","","This function returns the area that contains the range’s trough and its steppers, in widget->window coordinates.",692,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_restrict_to_fill_level","","Gets whether the range is restricted to the fill level.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_round_digits","","Gets the number of digits to round the value to when it changes. See `Range::change-value`.",692,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_show_fill_level","","Gets whether the range displays the fill level graphically.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_slider_range","","This function returns sliders range along the long dimension, in widget->window coordinates.",692,null],[10,"get_slider_size_fixed","","This function is useful mainly for `Range` subclasses.",692,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_upper_stepper_sensitivity","","Gets the sensitivity policy for the stepper that points to the 'upper' end of the `Range`’s adjustment.",692,{"inputs":[{"name":"self"}],"output":{"name":"sensitivitytype"}}],[10,"get_value","","Gets the current value of the range.",692,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_adjustment","","Sets the adjustment to be used as the “model” object for this range widget. The adjustment indicates the current range value, the minimum and maximum range values, the step/page increments used for keybindings and scrolling, and the page size. The page size is normally 0 for `Scale` and nonzero for `Scrollbar`, and indicates the size of the visible area of the widget being scrolled. The page size affects the size of the scrollbar slider. ## `adjustment` a `Adjustment`",692,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_fill_level","","Set the new position of the fill level indicator.",692,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_flippable","","If a range is flippable, it will switch its direction if it is horizontal and its direction is `TextDirection::Rtl`.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_increments","","Sets the step and page sizes for the range. The step size is used when the user clicks the `Scrollbar` arrows or moves `Scale` via arrow keys. The page size is used for example when moving via Page Up or Page Down keys. ## `step` step size ## `page` page size",692,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_inverted","","Ranges normally move from lower to higher values as the slider moves from top to bottom or left to right. Inverted ranges have higher values at the top or on the right rather than on the bottom or left. ## `setting` `true` to invert the range",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_lower_stepper_sensitivity","","Sets the sensitivity policy for the stepper that points to the 'lower' end of the `Range`’s adjustment. ## `sensitivity` the lower stepper’s sensitivity policy.",692,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":null}],[10,"set_min_slider_size","","Sets the minimum size of the range’s slider.",692,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_range","","Sets the allowable values in the `Range`, and clamps the range value to be between `min` and `max`. (If the range has a non-zero page size, it is clamped between `min` and `max` - page-size.) ## `min` minimum range value ## `max` maximum range value",692,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_restrict_to_fill_level","","Sets whether the slider is restricted to the fill level. See `RangeExt::set_fill_level` for a general description of the fill level concept. ## `restrict_to_fill_level` Whether the fill level restricts slider movement.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_round_digits","","Sets the number of digits to round the value to when it changes. See `Range::change-value`. ## `round_digits` the precision in digits, or -1",692,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_show_fill_level","","Sets whether a graphical fill level is show on the trough. See `RangeExt::set_fill_level` for a general description of the fill level concept. ## `show_fill_level` Whether a fill level indicator graphics is shown.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_slider_size_fixed","","Sets whether the range’s slider has a fixed size, or a size that depends on its adjustment’s page size.",692,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_upper_stepper_sensitivity","","Sets the sensitivity policy for the stepper that points to the 'upper' end of the `Range`’s adjustment. ## `sensitivity` the upper stepper’s sensitivity policy.",692,{"inputs":[{"name":"self"},{"name":"sensitivitytype"}],"output":null}],[10,"set_value","","Sets the current value of the range; if the value is outside the minimum or maximum range values, it will be clamped to fit inside them. The range emits the `Range::value-changed` signal if the value changes. ## `value` new value of the range",692,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_adjust_bounds","","Emitted before clamping a value, to give the application a chance to adjust the bounds. ## `value` the value before we clamp",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_change_value","","The `Range::change-value` signal is emitted when a scroll action is performed on a range. It allows an application to determine the type of scroll event that occurred and the resultant new value. The application can handle the event itself and return `true` to prevent further processing. Or, by returning `false`, it can pass the event to other handlers until the default GTK+ handler is reached.",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_slider","","Virtual function that moves the slider. Used for keybindings. ## `step` how to move the slider",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_slider","","",692,{"inputs":[{"name":"self"},{"name":"scrolltype"}],"output":null}],[10,"connect_value_changed","","Emitted when the range value changes.",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_adjustment_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fill_level_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inverted_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_lower_stepper_sensitivity_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_restrict_to_fill_level_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_round_digits_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_fill_level_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_upper_stepper_sensitivity_notify","","",692,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RecentChooserExt","","Trait containing all `RecentChooser` methods.",null,null],[10,"add_filter","","Adds `filter` to the list of `RecentFilter` objects held by `self`.",693,{"inputs":[{"name":"self"},{"name":"recentfilter"}],"output":null}],[10,"get_current_item","","Gets the `RecentInfo` currently selected by `self`.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentinfo"],"name":"option"}}],[10,"get_current_uri","","Gets the URI currently selected by `self`.",693,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_filter","","Gets the `RecentFilter` object currently used by `self` to affect the display of the recently used resources.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentfilter"],"name":"option"}}],[10,"get_items","","Gets the list of recently used resources in form of `RecentInfo` objects.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentinfo"],"name":"vec"}}],[10,"get_limit","","Gets the number of items returned by `RecentChooser::get_items` and `RecentChooser::get_uris`.",693,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_local_only","","Gets whether only local resources should be shown in the recently used resources selector. See `RecentChooser::set_local_only`",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_select_multiple","","Gets whether `self` can select multiple items.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_icons","","Retrieves whether `self` should show an icon near the resource.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_not_found","","Retrieves whether `self` should show the recently used resources that were not found.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_private","","Returns whether `self` should display recently used resources registered as private.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_tips","","Gets whether `self` should display tooltips containing the full path of a recently user resource.",693,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_sort_type","","Gets the value set by `RecentChooser::set_sort_type`.",693,{"inputs":[{"name":"self"}],"output":{"name":"recentsorttype"}}],[10,"get_uris","","Gets the URI of the recently used resources.",693,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_filters","","Gets the `RecentFilter` objects held by `self`.",693,{"inputs":[{"name":"self"}],"output":{"generics":["recentfilter"],"name":"vec"}}],[10,"remove_filter","","Removes `filter` from the list of `RecentFilter` objects held by `self`. ## `filter` a `RecentFilter`",693,{"inputs":[{"name":"self"},{"name":"recentfilter"}],"output":null}],[10,"select_all","","Selects all the items inside `self`, if the `self` supports multiple selection.",693,{"inputs":[{"name":"self"}],"output":null}],[10,"select_uri","","Selects `uri` inside `self`. ## `uri` a URI",693,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_current_uri","","Sets `uri` as the current URI for `self`. ## `uri` a URI",693,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_filter","","Sets `filter` as the current `RecentFilter` object used by `self` to affect the displayed recently used resources. ## `filter` a `RecentFilter`",693,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_limit","","Sets the number of items that should be returned by `RecentChooser::get_items` and `RecentChooser::get_uris`. ## `limit` a positive integer, or -1 for all items",693,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_local_only","","Sets whether only local resources, that is resources using the file:// URI scheme, should be shown in the recently used resources selector. If `local_only` is `true` (the default) then the shown resources are guaranteed to be accessible through the operating system native file system. ## `local_only` `true` if only local files can be shown",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_select_multiple","","Sets whether `self` can select multiple items. ## `select_multiple` `true` if `self` can select more than one item",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_icons","","Sets whether `self` should show an icon near the resource when displaying it. ## `show_icons` whether to show an icon near the resource",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_not_found","","Sets whether `self` should display the recently used resources that it didn’t find. This only applies to local resources. ## `show_not_found` whether to show the local items we didn’t find",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_private","","Whether to show recently used resources marked registered as private. ## `show_private` `true` to show private items, `false` otherwise",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_tips","","Sets whether to show a tooltips containing the full path of each recently used resource in a `RecentChooser` widget. ## `show_tips` `true` if tooltips should be shown",693,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sort_type","","Changes the sorting order of the recently used resources list displayed by `self`. ## `sort_type` sort order that the chooser should use",693,{"inputs":[{"name":"self"},{"name":"recentsorttype"}],"output":null}],[10,"unselect_all","","Unselects all the items inside `self`.",693,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_uri","","Unselects `uri` inside `self`. ## `uri` a URI",693,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_item_activated","","This signal is emitted when the user \"activates\" a recent item in the recent chooser. This can happen by double-clicking on an item in the recently used resources list, or by pressing `Enter`.",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_changed","","This signal is emitted when there is a change in the set of selected recently used resources. This can happen when a user modifies the selection with the mouse or the keyboard, or when explicitly calling functions to change the selection.",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filter_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_limit_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_local_only_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_recent_manager_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_select_multiple_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_icons_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_not_found_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_private_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_tips_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_type_notify","","",693,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RecentFilterExt","","Trait containing all `RecentFilter` methods.",null,null],[10,"add_age","","Adds a rule that allows resources based on their age - that is, the number of days elapsed since they were last modified. ## `days` number of days",694,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"add_application","","Adds a rule that allows resources based on the name of the application that has registered them. ## `application` an application name",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_group","","Adds a rule that allows resources based on the name of the group to which they belong ## `group` a group name",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_mime_type","","Adds a rule that allows resources based on their registered MIME type. ## `mime_type` a MIME type",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pattern","","Adds a rule that allows resources based on a pattern matching their display name. ## `pattern` a file pattern",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_pixbuf_formats","","Adds a rule allowing image files in the formats supported by `gdk_pixbuf::Pixbuf`.",694,{"inputs":[{"name":"self"}],"output":null}],[10,"get_name","","Gets the human-readable name for the filter. See `RecentFilterExt::set_name`.",694,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_needed","","Gets the fields that need to be filled in for the `RecentFilterInfo` passed to `RecentFilterExt::filter`",694,{"inputs":[{"name":"self"}],"output":{"name":"recentfilterflags"}}],[10,"set_name","","Sets the human-readable name of the filter; this is the string that will be displayed in the recently used resources selector user interface if there is a selectable list of filters. ## `name` then human readable name of `self`",694,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"RecentManagerExt","","Trait containing all `RecentManager` methods.",null,null],[10,"add_full","","Adds a new resource, pointed by `uri`, into the recently used resources list, using the metadata specified inside the `RecentData`-struct passed in `recent_data`.",695,{"inputs":[{"name":"self"},{"name":"str"},{"name":"recentdata"}],"output":{"name":"bool"}}],[10,"add_item","","Adds a new resource, pointed by `uri`, into the recently used resources list.",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_items","","Gets the list of recently used resources.",695,{"inputs":[{"name":"self"}],"output":{"generics":["recentinfo"],"name":"vec"}}],[10,"has_item","","Checks whether there is a recently used resource registered with `uri` inside the recent manager. ## `uri` a URI",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"lookup_item","","Searches for a URI inside the recently used resources list, and returns a `RecentInfo`-struct containing informations about the resource like its MIME type, or its display name. ## `uri` a URI",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"move_item","","Changes the location of a recently used resource from `uri` to `new_uri`.",695,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"purge_items","","Purges every item from the recently used resources list.",695,{"inputs":[{"name":"self"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"remove_item","","Removes a resource pointed by `uri` from the recently used resources list handled by a recent manager. ## `uri` the URI of the item you wish to remove",695,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"get_property_filename","","The full path to the file to be used to store and read the recently used resources list",695,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_property_size","","The size of the recently used resources list.",695,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_changed","","Emitted when the current recently used resources manager changes its contents, either by calling `RecentManagerExt::add_item` or by another application.",695,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_filename_notify","","",695,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",695,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"RevealerExt","","Trait containing all `Revealer` methods.",null,null],[10,"get_child_revealed","","Returns whether the child is fully revealed, in other words whether the transition to the revealed state is completed.",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_reveal_child","","Returns whether the child is currently revealed. See `RevealerExt::set_reveal_child`.",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_transition_duration","","Returns the amount of time (in milliseconds) that transitions will take.",696,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_transition_type","","Gets the type of animation that will be used for transitions in `self`.",696,{"inputs":[{"name":"self"}],"output":{"name":"revealertransitiontype"}}],[10,"set_reveal_child","","Tells the `Revealer` to reveal or conceal its child.",696,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_transition_duration","","Sets the duration that transitions will take.",696,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_transition_type","","Sets the type of animation that will be used for transitions in `self`. Available types include various kinds of fades and slides.",696,{"inputs":[{"name":"self"},{"name":"revealertransitiontype"}],"output":null}],[10,"get_property_child_revealed","","",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_reveal_child","","",696,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_reveal_child","","",696,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_transition_duration","","",696,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_transition_duration","","",696,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_transition_type","","",696,{"inputs":[{"name":"self"}],"output":{"name":"revealertransitiontype"}}],[10,"set_property_transition_type","","",696,{"inputs":[{"name":"self"},{"name":"revealertransitiontype"}],"output":null}],[10,"connect_property_child_revealed_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reveal_child_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_duration_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_type_notify","","",696,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScaleExt","","Trait containing all `Scale` methods.",null,null],[10,"add_mark","","Adds a mark at `value`.",697,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"positiontype"},{"name":"p"}],"output":null}],[10,"clear_marks","","Removes any marks that have been added with `ScaleExt::add_mark`.",697,{"inputs":[{"name":"self"}],"output":null}],[10,"get_digits","","Gets the number of decimal places that are displayed in the value.",697,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_draw_value","","Returns whether the current value is displayed as a string next to the slider.",697,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_origin","","Returns whether the scale has an origin.",697,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_layout","","Gets the `pango::Layout` used to display the scale. The returned object is owned by the scale so does not need to be freed by the caller.",697,{"inputs":[{"name":"self"}],"output":{"generics":["layout"],"name":"option"}}],[10,"get_layout_offsets","","Obtains the coordinates where the scale will draw the `pango::Layout` representing the text in the scale. Remember when using the `pango::Layout` function you need to convert to and from pixels using PANGO_PIXELS() or `PANGO_SCALE`.",697,null],[10,"get_value_pos","","Gets the position in which the current value is displayed.",697,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[10,"set_digits","","Sets the number of decimal places that are displayed in the value. Also causes the value of the adjustment to be rounded to this number of digits, so the retrieved value matches the displayed one, if `Scale:draw-value` is `true` when the value changes. If you want to enforce rounding the value when `Scale:draw-value` is `false`, you can set `Range:round-digits` instead.",697,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_draw_value","","Specifies whether the current value is displayed as a string next to the slider. ## `draw_value` `true` to draw the value",697,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_origin","","If `Scale:has-origin` is set to `true` (the default), the scale will highlight the part of the trough between the origin (bottom or left side) and the current value. ## `has_origin` `true` if the scale has an origin",697,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_value_pos","","Sets the position in which the current value is displayed. ## `pos` the position in which the current value is displayed",697,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[10,"connect_format_value","","Signal which allows you to change how the scale value is displayed. Connect a signal handler which returns an allocated string representing `value`. That string will then be used to display the scale's value.",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_digits_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_value_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_origin_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_pos_notify","","",697,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScaleButtonExt","","Trait containing all `ScaleButton` methods.",null,null],[10,"get_adjustment","","Gets the `Adjustment` associated with the `ScaleButton`’s scale. See `RangeExt::get_adjustment` for details.",698,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[10,"get_minus_button","","Retrieves the minus button of the `ScaleButton`.",698,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[10,"get_plus_button","","Retrieves the plus button of the `ScaleButton`.",698,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[10,"get_popup","","Retrieves the popup of the `ScaleButton`.",698,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_value","","Gets the current value of the scale button.",698,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_adjustment","","Sets the `Adjustment` to be used as a model for the `ScaleButton`’s scale. See `RangeExt::set_adjustment` for details. ## `adjustment` a `Adjustment`",698,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_icons","","Sets the icons to be used by the scale button. For details, see the `ScaleButton:icons` property. ## `icons` a `None`-terminated array of icon names",698,null],[10,"set_value","","Sets the current value of the scale; if the value is outside the minimum or maximum range values, it will be clamped to fit inside them. The scale button emits the `ScaleButton::value-changed` signal if the value changes. ## `value` new value of the scale button",698,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_icons","","The names of the icons to be used by the scale button. The first item in the array will be used in the button when the current value is the lowest value, the second item for the highest value. All the subsequent icons will be used for all the other values, spread evenly over the range of values.",698,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_property_size","","",698,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"set_property_size","","",698,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"connect_popdown","","The ::popdown signal is a [keybinding signal][`BindingSignal`] which gets emitted to popdown the scale widget.",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popdown","","",698,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_popup","","The ::popup signal is a [keybinding signal][`BindingSignal`] which gets emitted to popup the scale widget.",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup","","",698,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_value_changed","","The ::value-changed signal is emitted when the value field has changed. ## `value` the new value",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_adjustment_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icons_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",698,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScrollableExt","","Trait containing all `Scrollable` methods.",null,null],[10,"get_border","","Returns the size of a non-scrolling border around the outside of the scrollable. An example for this would be treeview headers. GTK+ can use this information to display overlayed graphics, like the overshoot indication, at the right position.",699,{"inputs":[{"name":"self"}],"output":{"generics":["border"],"name":"option"}}],[10,"get_hadjustment","","Retrieves the `Adjustment` used for horizontal scrolling.",699,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_hscroll_policy","","Gets the horizontal `ScrollablePolicy`.",699,{"inputs":[{"name":"self"}],"output":{"name":"scrollablepolicy"}}],[10,"get_vadjustment","","Retrieves the `Adjustment` used for vertical scrolling.",699,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_vscroll_policy","","Gets the vertical `ScrollablePolicy`.",699,{"inputs":[{"name":"self"}],"output":{"name":"scrollablepolicy"}}],[10,"set_hadjustment","","Sets the horizontal adjustment of the `Scrollable`. ## `hadjustment` a `Adjustment`",699,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_hscroll_policy","","Sets the `ScrollablePolicy` to determine whether horizontal scrolling should start below the minimum width or below the natural width. ## `policy` the horizontal `ScrollablePolicy`",699,{"inputs":[{"name":"self"},{"name":"scrollablepolicy"}],"output":null}],[10,"set_vadjustment","","Sets the vertical adjustment of the `Scrollable`. ## `vadjustment` a `Adjustment`",699,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_vscroll_policy","","Sets the `ScrollablePolicy` to determine whether vertical scrolling should start below the minimum height or below the natural height. ## `policy` the vertical `ScrollablePolicy`",699,{"inputs":[{"name":"self"},{"name":"scrollablepolicy"}],"output":null}],[10,"connect_property_hadjustment_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hscroll_policy_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vadjustment_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vscroll_policy_notify","","",699,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ScrolledWindowExt","","Trait containing all `ScrolledWindow` methods.",null,null],[10,"add_with_viewport","","Used to add children without native scrolling capabilities. This is simply a convenience function; it is equivalent to adding the unscrollable child to a viewport, then adding the viewport to the scrolled window. If a child has native scrolling, use `ContainerExt::add` instead of this function.",700,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_capture_button_press","","Return whether button presses are captured during kinetic scrolling. See `ScrolledWindowExt::set_capture_button_press`.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hadjustment","","Returns the horizontal scrollbar’s adjustment, used to connect the horizontal scrollbar to the child widget’s horizontal scroll functionality.",700,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_hscrollbar","","Returns the horizontal scrollbar of `self`.",700,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_kinetic_scrolling","","Returns the specified kinetic scrolling behavior.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_max_content_height","","Returns the maximum content height set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_content_width","","Returns the maximum content width set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_min_content_height","","Gets the minimal content height of `self`, or -1 if not set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_min_content_width","","Gets the minimum content width of `self`, or -1 if not set.",700,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_overlay_scrolling","","Returns whether overlay scrolling is enabled for this scrolled window.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_placement","","Gets the placement of the contents with respect to the scrollbars for the scrolled window. See `ScrolledWindowExt::set_placement`.",700,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[10,"get_policy","","Retrieves the current policy values for the horizontal and vertical scrollbars. See `ScrolledWindowExt::set_policy`. ## `hscrollbar_policy` location to store the policy  for the horizontal scrollbar, or `None` ## `vscrollbar_policy` location to store the policy  for the vertical scrollbar, or `None`",700,null],[10,"get_propagate_natural_height","","Reports whether the natural height of the child will be calculated and propagated through the scrolled windows requested natural height.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_propagate_natural_width","","Reports whether the natural width of the child will be calculated and propagated through the scrolled windows requested natural width.",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_shadow_type","","Gets the shadow type of the scrolled window. See `ScrolledWindowExt::set_shadow_type`.",700,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"get_vadjustment","","Returns the vertical scrollbar’s adjustment, used to connect the vertical scrollbar to the child widget’s vertical scroll functionality.",700,{"inputs":[{"name":"self"}],"output":{"generics":["adjustment"],"name":"option"}}],[10,"get_vscrollbar","","Returns the vertical scrollbar of `self`.",700,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_capture_button_press","","Changes the behaviour of `self` with regard to the initial event that possibly starts kinetic scrolling. When `capture_button_press` is set to `true`, the event is captured by the scrolled window, and then later replayed if it is meant to go to the child widget.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hadjustment","","Sets the `Adjustment` for the horizontal scrollbar. ## `hadjustment` horizontal scroll adjustment",700,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_kinetic_scrolling","","Turns kinetic scrolling on or off. Kinetic scrolling only applies to devices with source `gdk::InputSource::Touchscreen`. ## `kinetic_scrolling` `true` to enable kinetic scrolling",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_max_content_height","","Sets the maximum height that `self` should keep visible. The `self` will grow up to this height before it starts scrolling the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_max_content_width","","Sets the maximum width that `self` should keep visible. The `self` will grow up to this width before it starts scrolling the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_min_content_height","","Sets the minimum height that `self` should keep visible. Note that this can and (usually will) be smaller than the minimum size of the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_min_content_width","","Sets the minimum width that `self` should keep visible. Note that this can and (usually will) be smaller than the minimum size of the content.",700,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_overlay_scrolling","","Enables or disables overlay scrolling for this scrolled window.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_placement","","Sets the placement of the contents with respect to the scrollbars for the scrolled window.",700,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":null}],[10,"set_policy","","Sets the scrollbar policy for the horizontal and vertical scrollbars.",700,{"inputs":[{"name":"self"},{"name":"policytype"},{"name":"policytype"}],"output":null}],[10,"set_propagate_natural_height","","Sets whether the natural height of the child should be calculated and propagated through the scrolled windows requested natural height.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_propagate_natural_width","","Sets whether the natural width of the child should be calculated and propagated through the scrolled windows requested natural width.",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_shadow_type","","Changes the type of shadow drawn around the contents of `self`. ## `type_` kind of shadow to draw around scrolled window contents",700,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"set_vadjustment","","Sets the `Adjustment` for the vertical scrollbar. ## `vadjustment` vertical scroll adjustment",700,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"unset_placement","","Unsets the placement of the contents with respect to the scrollbars for the scrolled window. If no window placement is set for a scrolled window, it defaults to `CornerType::TopLeft`.",700,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_hscrollbar_policy","","",700,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[10,"set_property_hscrollbar_policy","","",700,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":null}],[10,"get_property_vscrollbar_policy","","",700,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[10,"set_property_vscrollbar_policy","","",700,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":null}],[10,"get_property_window_placement","","",700,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[10,"set_property_window_placement","","",700,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":null}],[10,"get_property_window_placement_set","","",700,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_window_placement_set","","",700,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_edge_overshot","","The ::edge-overshot signal is emitted whenever user initiated scrolling makes the scrolledwindow firmly surpass (ie. with some edge resistance) the lower or upper limits defined by the adjustment in that orientation.",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_edge_reached","","The ::edge-reached signal is emitted whenever user-initiated scrolling makes the scrolledwindow exactly reaches the lower or upper limits defined by the adjustment in that orientation.",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_focus_out","","The ::move-focus-out signal is a [keybinding signal][`BindingSignal`] which gets emitted when focus is moved away from the scrolled window by a keybinding. The `Widget::move-focus` signal is emitted with `direction_type` on this scrolled windows toplevel parent in the container hierarchy. The default bindings for this signal are `Tab + Ctrl` and `Tab + Ctrl + Shift`. ## `direction_type` either `DirectionType::TabForward` or  `DirectionType::TabBackward`",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_focus_out","","",700,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_scroll_child","","The ::scroll-child signal is a [keybinding signal][`BindingSignal`] which gets emitted when a keybinding that scrolls is pressed. The horizontal or vertical adjustment is updated which triggers a signal that the scrolled windows child may listen to and scroll itself. ## `scroll` a `ScrollType` describing how much to scroll ## `horizontal` whether the keybinding scrolls the child  horizontally or not",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_scroll_child","","",700,{"inputs":[{"name":"self"},{"name":"scrolltype"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_property_hadjustment_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hscrollbar_policy_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_kinetic_scrolling_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_content_height_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_content_width_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_content_height_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_content_width_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_overlay_scrolling_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_propagate_natural_height_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_propagate_natural_width_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_shadow_type_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vadjustment_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vscrollbar_policy_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_placement_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_placement_set_notify","","",700,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchBarExt","","Trait containing all `SearchBar` methods.",null,null],[10,"connect_entry","","Connects the `Entry` widget passed as the one to be used in this search bar. The entry should be a descendant of the search bar. This is only required if the entry isn’t the direct child of the search bar (as in our main example).",701,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_search_mode","","Returns whether the search mode is on or off.",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_show_close_button","","Returns whether the close button is shown.",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"handle_event","","This function should be called when the top-level window which contains the search bar received a key event.",701,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"set_search_mode","","Switches the search mode on or off.",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_show_close_button","","Shows or hides the close button. Applications that already have a “search” toggle button should not show a close button in their search bar, as it duplicates the role of the toggle button.",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_search_mode_enabled","","",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_search_mode_enabled","","",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_show_close_button","","",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_show_close_button","","",701,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_search_mode_enabled_notify","","",701,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_close_button_notify","","",701,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SearchEntryExt","","Trait containing all `SearchEntry` methods.",null,null],[10,"handle_event","","This function should be called when the top-level window which contains the search entry received a key event. If the entry is part of a `SearchBar`, it is preferable to call `SearchBarExt::handle_event` instead, which will reveal the entry in addition to passing the event to this function.",702,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"connect_next_match","","The ::next-match signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a move to the next match for the current search string.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_next_match","","",702,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_previous_match","","The ::previous-match signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a move to the previous match for the current search string.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_previous_match","","",702,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_search_changed","","The `SearchEntry::search-changed` signal is emitted with a short delay of 150 milliseconds after the last change to the entry text.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_stop_search","","The ::stop-search signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user stops a search via keyboard input.",702,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_stop_search","","",702,{"inputs":[{"name":"self"}],"output":null}],[8,"SeparatorToolItemExt","","Trait containing all `SeparatorToolItem` methods.",null,null],[10,"get_draw","","Returns whether `self` is drawn as a line, or just blank. See `SeparatorToolItemExt::set_draw`.",703,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_draw","","Whether `self` is drawn as a vertical line, or just blank. Setting this to `false` along with `ToolItemExt::set_expand` is useful to create an item that forces following items to the end of the toolbar. ## `draw` whether `self` is drawn as a vertical line",703,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_draw_notify","","",703,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SettingsExt","","Trait containing all `Settings` methods.",null,null],[10,"reset_property","","Undoes the effect of calling `gobject::ObjectExt::set` to install an application-specific value for a setting. After this call, the setting will again follow the session-wide value for this setting.",704,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_double_property","","Deprecated since 3.16",704,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"str"}],"output":null}],[10,"set_long_property","","Deprecated since 3.16",704,{"inputs":[{"name":"self"},{"name":"str"},{"name":"c_long"},{"name":"str"}],"output":null}],[10,"set_string_property","","Deprecated since 3.16",704,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_property_gtk_alternative_button_order","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_alternative_button_order","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_alternative_sort_arrows","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_alternative_sort_arrows","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_application_prefer_dark_theme","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_application_prefer_dark_theme","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_auto_mnemonics","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_auto_mnemonics","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_button_images","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_button_images","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_can_change_accels","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_can_change_accels","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_color_palette","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_color_palette","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_color_scheme","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_color_scheme","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_cursor_blink","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_cursor_blink","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_cursor_blink_time","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_cursor_blink_time","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_cursor_blink_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_cursor_blink_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_cursor_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_cursor_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_cursor_theme_size","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_cursor_theme_size","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_decoration_layout","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_decoration_layout","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_dialogs_use_header","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_dialogs_use_header","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_dnd_drag_threshold","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_dnd_drag_threshold","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_double_click_distance","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_double_click_distance","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_double_click_time","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_double_click_time","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_enable_accels","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_accels","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_animations","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_animations","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_event_sounds","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_event_sounds","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_input_feedback_sounds","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_input_feedback_sounds","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_mnemonics","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_mnemonics","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_primary_paste","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_primary_paste","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_enable_tooltips","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_enable_tooltips","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_entry_password_hint_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_gtk_entry_password_hint_timeout","","",704,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_gtk_entry_select_on_focus","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_entry_select_on_focus","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_error_bell","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_error_bell","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_fallback_icon_theme","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_fallback_icon_theme","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_file_chooser_backend","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_file_chooser_backend","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_font_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_font_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_fontconfig_timestamp","","",704,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_gtk_fontconfig_timestamp","","",704,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_gtk_icon_sizes","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_icon_sizes","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_icon_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_icon_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_im_module","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_im_module","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_im_preedit_style","","",704,{"inputs":[{"name":"self"}],"output":{"name":"impreeditstyle"}}],[10,"set_property_gtk_im_preedit_style","","",704,{"inputs":[{"name":"self"},{"name":"impreeditstyle"}],"output":null}],[10,"get_property_gtk_im_status_style","","",704,{"inputs":[{"name":"self"}],"output":{"name":"imstatusstyle"}}],[10,"set_property_gtk_im_status_style","","",704,{"inputs":[{"name":"self"},{"name":"imstatusstyle"}],"output":null}],[10,"get_property_gtk_key_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_key_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_keynav_cursor_only","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_keynav_cursor_only","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_keynav_use_caret","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_keynav_use_caret","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_keynav_wrap_around","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_keynav_wrap_around","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_label_select_on_focus","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_label_select_on_focus","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_long_press_time","","",704,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_gtk_long_press_time","","",704,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_gtk_menu_bar_accel","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_menu_bar_accel","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_menu_bar_popup_delay","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_menu_bar_popup_delay","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_menu_images","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_menu_images","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_menu_popdown_delay","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_menu_popdown_delay","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_menu_popup_delay","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_menu_popup_delay","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_modules","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_modules","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_primary_button_warps_slider","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_primary_button_warps_slider","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_print_backends","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_print_backends","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_print_preview_command","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_print_preview_command","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_recent_files_enabled","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_recent_files_enabled","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_recent_files_limit","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_recent_files_limit","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_recent_files_max_age","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_recent_files_max_age","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_scrolled_window_placement","","",704,{"inputs":[{"name":"self"}],"output":{"name":"cornertype"}}],[10,"set_property_gtk_scrolled_window_placement","","",704,{"inputs":[{"name":"self"},{"name":"cornertype"}],"output":null}],[10,"get_property_gtk_shell_shows_app_menu","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_shell_shows_app_menu","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_shell_shows_desktop","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_shell_shows_desktop","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_shell_shows_menubar","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_shell_shows_menubar","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_show_input_method_menu","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_show_input_method_menu","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_show_unicode_menu","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_show_unicode_menu","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_sound_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_sound_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_split_cursor","","",704,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_gtk_split_cursor","","",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_gtk_theme_name","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_theme_name","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_timeout_expand","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_timeout_expand","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_timeout_initial","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_timeout_initial","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_timeout_repeat","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_timeout_repeat","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_titlebar_double_click","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_titlebar_double_click","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_titlebar_middle_click","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_titlebar_middle_click","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_titlebar_right_click","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_titlebar_right_click","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_toolbar_icon_size","","",704,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"set_property_gtk_toolbar_icon_size","","",704,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"get_property_gtk_toolbar_style","","",704,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_property_gtk_toolbar_style","","",704,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"get_property_gtk_tooltip_browse_mode_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_tooltip_browse_mode_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_tooltip_browse_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_tooltip_browse_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_tooltip_timeout","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_tooltip_timeout","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_visible_focus","","",704,{"inputs":[{"name":"self"}],"output":{"name":"policytype"}}],[10,"set_property_gtk_visible_focus","","",704,{"inputs":[{"name":"self"},{"name":"policytype"}],"output":null}],[10,"get_property_gtk_xft_antialias","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_xft_antialias","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_xft_dpi","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_xft_dpi","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_xft_hinting","","",704,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_gtk_xft_hinting","","",704,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_gtk_xft_hintstyle","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_xft_hintstyle","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_gtk_xft_rgba","","",704,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_gtk_xft_rgba","","",704,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_property_color_hash_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_alternative_button_order_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_alternative_sort_arrows_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_application_prefer_dark_theme_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_auto_mnemonics_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_button_images_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_can_change_accels_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_color_palette_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_color_scheme_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_blink_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_blink_time_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_blink_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_cursor_theme_size_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_decoration_layout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_dialogs_use_header_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_dnd_drag_threshold_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_double_click_distance_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_double_click_time_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_accels_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_animations_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_event_sounds_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_input_feedback_sounds_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_mnemonics_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_primary_paste_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_enable_tooltips_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_entry_password_hint_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_entry_select_on_focus_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_error_bell_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_fallback_icon_theme_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_file_chooser_backend_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_font_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_fontconfig_timestamp_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_icon_sizes_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_icon_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_im_module_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_im_preedit_style_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_im_status_style_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_key_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_keynav_cursor_only_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_keynav_use_caret_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_keynav_wrap_around_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_label_select_on_focus_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_long_press_time_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_bar_accel_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_bar_popup_delay_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_images_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_popdown_delay_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_menu_popup_delay_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_modules_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_primary_button_warps_slider_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_print_backends_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_print_preview_command_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_recent_files_enabled_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_recent_files_limit_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_recent_files_max_age_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_scrolled_window_placement_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_shell_shows_app_menu_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_shell_shows_desktop_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_shell_shows_menubar_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_show_input_method_menu_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_show_unicode_menu_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_sound_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_split_cursor_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_theme_name_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_timeout_expand_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_timeout_initial_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_timeout_repeat_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_titlebar_double_click_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_titlebar_middle_click_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_titlebar_right_click_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_toolbar_icon_size_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_toolbar_style_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_tooltip_browse_mode_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_tooltip_browse_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_tooltip_timeout_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_visible_focus_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_antialias_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_dpi_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_hinting_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_hintstyle_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gtk_xft_rgba_notify","","",704,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ShortcutsWindowExt","","Trait containing all `ShortcutsWindow` methods.",null,null],[10,"get_property_section_name","","",705,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_section_name","","",705,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_view_name","","",705,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_view_name","","",705,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_close","","The ::close signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to close the window.",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_close","","",705,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_search","","The ::search signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user uses a keybinding to start a search.",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_search","","",705,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_section_name_notify","","",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_view_name_notify","","",705,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SizeGroupExt","","Trait containing all `SizeGroup` methods.",null,null],[10,"add_widget","","Adds a widget to a `SizeGroup`. In the future, the requisition of the widget will be determined as the maximum of its requisition and the requisition of the other widgets in the size group. Whether this applies horizontally, vertically, or in both directions depends on the mode of the size group. See `SizeGroupExt::set_mode`.",706,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_ignore_hidden","","Returns if invisible widgets are ignored when calculating the size.",706,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mode","","Gets the current mode of the size group. See `SizeGroupExt::set_mode`.",706,{"inputs":[{"name":"self"}],"output":{"name":"sizegroupmode"}}],[10,"get_widgets","","Returns the list of widgets associated with `self`.",706,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[10,"remove_widget","","Removes a widget from a `SizeGroup`. ## `widget` the `Widget` to remove",706,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_ignore_hidden","","Sets whether unmapped widgets should be ignored when calculating the size.",706,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mode","","Sets the `SizeGroupMode` of the size group. The mode of the size group determines whether the widgets in the size group should all have the same horizontal requisition (`SizeGroupMode::Horizontal`) all have the same vertical requisition (`SizeGroupMode::Vertical`), or should all have the same requisition in both directions (`SizeGroupMode::Both`). ## `mode` the mode to set for the size group.",706,{"inputs":[{"name":"self"},{"name":"sizegroupmode"}],"output":null}],[10,"connect_property_ignore_hidden_notify","","",706,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",706,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SocketExt","","",null,null],[10,"add_id","","",707,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"get_id","","",707,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[10,"get_plug_window","","",707,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"connect_plug_added","","",707,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_plug_removed","","",707,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpinButtonExt","","Trait containing all `SpinButton` methods.",null,null],[10,"configure","","Changes the properties of an existing spin button. The adjustment, climb rate, and number of decimal places are all changed accordingly, after this function call. ## `adjustment` a `Adjustment` ## `climb_rate` the new climb rate ## `digits` the number of decimal places to display in the spin button",708,{"inputs":[{"name":"self"},{"name":"p"},{"name":"f64"},{"name":"u32"}],"output":null}],[10,"get_adjustment","","Get the adjustment associated with a `SpinButton`",708,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[10,"get_digits","","Fetches the precision of `self`. See `SpinButtonExt::set_digits`.",708,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_increments","","Gets the current step and page the increments used by `self`. See `SpinButtonExt::set_increments`. ## `step` location to store step increment, or `None` ## `page` location to store page increment, or `None`",708,null],[10,"get_numeric","","Returns whether non-numeric text can be typed into the spin button. See `SpinButtonExt::set_numeric`.",708,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_range","","Gets the range allowed for `self`. See `SpinButtonExt::set_range`. ## `min` location to store minimum allowed value, or `None` ## `max` location to store maximum allowed value, or `None`",708,null],[10,"get_snap_to_ticks","","Returns whether the values are corrected to the nearest step. See `SpinButtonExt::set_snap_to_ticks`.",708,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_update_policy","","Gets the update behavior of a spin button. See `SpinButtonExt::set_update_policy`.",708,{"inputs":[{"name":"self"}],"output":{"name":"spinbuttonupdatepolicy"}}],[10,"get_value","","Get the value in the `self`.",708,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_value_as_int","","Get the value `self` represented as an integer.",708,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_wrap","","Returns whether the spin button’s value wraps around to the opposite limit when the upper or lower limit of the range is exceeded. See `SpinButtonExt::set_wrap`.",708,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_adjustment","","Replaces the `Adjustment` associated with `self`. ## `adjustment` a `Adjustment` to replace the existing adjustment",708,{"inputs":[{"name":"self"},{"name":"adjustment"}],"output":null}],[10,"set_digits","","Set the precision to be displayed by `self`. Up to 20 digit precision is allowed. ## `digits` the number of digits after the decimal point to be displayed for the spin button’s value",708,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_increments","","Sets the step and page increments for spin_button. This affects how quickly the value changes when the spin button’s arrows are activated. ## `step` increment applied for a button 1 press. ## `page` increment applied for a button 2 press.",708,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_numeric","","Sets the flag that determines if non-numeric text can be typed into the spin button. ## `numeric` flag indicating if only numeric entry is allowed",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_range","","Sets the minimum and maximum allowable values for `self`.",708,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_snap_to_ticks","","Sets the policy as to whether values are corrected to the nearest step increment when a spin button is activated after providing an invalid value. ## `snap_to_ticks` a flag indicating if invalid values should be corrected",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_update_policy","","Sets the update behavior of a spin button. This determines whether the spin button is always updated or only when a valid value is set. ## `policy` a `SpinButtonUpdatePolicy` value",708,{"inputs":[{"name":"self"},{"name":"spinbuttonupdatepolicy"}],"output":null}],[10,"set_value","","Sets the value of `self`. ## `value` the new value",708,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_wrap","","Sets the flag that determines if a spin button value wraps around to the opposite limit when the upper or lower limit of the range is exceeded. ## `wrap` a flag indicating if wrapping behavior is performed",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"spin","","Increment or decrement a spin button’s value in a specified direction by a specified amount. ## `direction` a `SpinType` indicating the direction to spin ## `increment` step increment to apply in the specified direction",708,{"inputs":[{"name":"self"},{"name":"spintype"},{"name":"f64"}],"output":null}],[10,"update","","Manually force an update of the spin button.",708,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_climb_rate","","",708,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_climb_rate","","",708,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"connect_property_adjustment_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_climb_rate_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_digits_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_numeric_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_snap_to_ticks_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_update_policy_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_value_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_notify","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpinnerExt","","Trait containing all `Spinner` methods.",null,null],[10,"start","","Starts the animation of the spinner.",709,{"inputs":[{"name":"self"}],"output":null}],[10,"stop","","Stops the animation of the spinner.",709,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_active","","",709,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_active","","",709,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_active_notify","","",709,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StackExt","","Trait containing all `Stack` methods.",null,null],[10,"add_named","","Adds a child to `self`. The child is identified by the `name`.",710,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}],[10,"add_titled","","Adds a child to `self`. The child is identified by the `name`. The `title` will be used by `StackSwitcher` to represent `child` in a tab bar, so it should be short.",710,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_child_by_name","","Finds the child of the `Stack` with the name given as the argument. Returns `None` if there is no child with this name.",710,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_hhomogeneous","","Gets whether `self` is horizontally homogeneous. See `StackExt::set_hhomogeneous`.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_homogeneous","","Gets whether `self` is homogeneous. See `StackExt::set_homogeneous`.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_interpolate_size","","Returns wether the `Stack` is set up to interpolate between the sizes of children on page switch.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_transition_duration","","Returns the amount of time (in milliseconds) that transitions between pages in `self` will take.",710,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_transition_running","","Returns whether the `self` is currently in a transition from one page to another.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_transition_type","","Gets the type of animation that will be used for transitions between pages in `self`.",710,{"inputs":[{"name":"self"}],"output":{"name":"stacktransitiontype"}}],[10,"get_vhomogeneous","","Gets whether `self` is vertically homogeneous. See `StackExt::set_vhomogeneous`.",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_child","","Gets the currently visible child of `self`, or `None` if there are no visible children.",710,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_visible_child_name","","Returns the name of the currently visible child of `self`, or `None` if there is no visible child.",710,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_hhomogeneous","","Sets the `Stack` to be horizontally homogeneous or not. If it is homogeneous, the `Stack` will request the same width for all its children. If it isn't, the stack may change width when a different child becomes visible.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_homogeneous","","Sets the `Stack` to be homogeneous or not. If it is homogeneous, the `Stack` will request the same size for all its children. If it isn't, the stack may change size when a different child becomes visible.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_interpolate_size","","Sets whether or not `self` will interpolate its size when changing the visible child. If the `Stack:interpolate-size` property is set to `true`, `self` will interpolate its size between the current one and the one it'll take after changing the visible child, according to the set transition duration.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_transition_duration","","Sets the duration that transitions between pages in `self` will take.",710,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_transition_type","","Sets the type of animation that will be used for transitions between pages in `self`. Available types include various kinds of fades and slides.",710,{"inputs":[{"name":"self"},{"name":"stacktransitiontype"}],"output":null}],[10,"set_vhomogeneous","","Sets the `Stack` to be vertically homogeneous or not. If it is homogeneous, the `Stack` will request the same height for all its children. If it isn't, the stack may change height when a different child becomes visible.",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_child","","Makes `child` the visible child of `self`.",710,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_visible_child_full","","Makes the child with the given name visible.",710,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stacktransitiontype"}],"output":null}],[10,"set_visible_child_name","","Makes the child with the given name visible.",710,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"get_property_homogeneous","","",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_homogeneous","","",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_interpolate_size","","",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_interpolate_size","","",710,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_transition_duration","","",710,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_property_transition_duration","","",710,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_property_transition_running","","",710,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_transition_type","","",710,{"inputs":[{"name":"self"}],"output":{"name":"stacktransitiontype"}}],[10,"set_property_transition_type","","",710,{"inputs":[{"name":"self"},{"name":"stacktransitiontype"}],"output":null}],[10,"get_property_visible_child","","",710,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_property_visible_child","","",710,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"get_property_visible_child_name","","",710,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_visible_child_name","","",710,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_child_icon_name","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_icon_name","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"get_child_name","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_name","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"get_child_needs_attention","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_child_needs_attention","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_child_position","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i32"}}],[10,"set_child_position","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i32"}],"output":null}],[10,"get_child_title","","",710,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_child_title","","",710,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":null}],[10,"connect_property_hhomogeneous_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_homogeneous_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_interpolate_size_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_duration_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_running_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transition_type_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vhomogeneous_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_child_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_child_name_notify","","",710,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StackSidebarExt","","Trait containing all `StackSidebar` methods.",null,null],[10,"get_stack","","Retrieves the stack. See `StackSidebarExt::set_stack`.",711,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_stack","","Set the `Stack` associated with this `StackSidebar`.",711,{"inputs":[{"name":"self"},{"name":"stack"}],"output":null}],[10,"get_property_stack","","",711,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_property_stack","","",711,{"inputs":[{"name":"self"},{"generics":["stack"],"name":"option"}],"output":null}],[10,"connect_property_stack_notify","","",711,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StackSwitcherExt","","Trait containing all `StackSwitcher` methods.",null,null],[10,"get_stack","","Retrieves the stack. See `StackSwitcherExt::set_stack`.",712,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_stack","","Sets the stack to control.",712,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_property_icon_size","","",712,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_icon_size","","",712,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_stack","","",712,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[10,"set_property_stack","","",712,{"inputs":[{"name":"self"},{"generics":["stack"],"name":"option"}],"output":null}],[10,"connect_property_icon_size_notify","","",712,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stack_notify","","",712,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StatusIconExt","","`[Deprecated since 3.14]` Trait containing all `StatusIcon` methods.",null,null],[10,"get_geometry","","Obtains information about the location of the status icon on screen. This information can be used to e.g. position popups like notification bubbles.",713,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_gicon","","Retrieves the `gio::Icon` being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::Gicon` (see `StatusIconExt::get_storage_type`). The caller of this function does not own a reference to the returned `gio::Icon`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["icon"],"name":"option"}}],[10,"get_has_tooltip","","Returns the current value of the has-tooltip property. See `StatusIcon:has-tooltip` for more information.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon_name","","Gets the name of the icon being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::IconName` (see `StatusIconExt::get_storage_type`). The returned string is owned by the `StatusIcon` and should not be freed or modified.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_pixbuf","","Gets the `gdk_pixbuf::Pixbuf` being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::Pixbuf` (see `StatusIconExt::get_storage_type`). The caller of this function does not own a reference to the returned pixbuf.",713,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_screen","","Returns the `gdk::Screen` associated with `self`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"get_size","","Gets the size in pixels that is available for the image. Stock icons and named icons adapt their size automatically if the size of the notification area changes. For other storage types, the size-changed signal can be used to react to size changes.",713,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_stock","","Gets the id of the stock icon being displayed by the `StatusIcon`. The storage type of the status icon must be `ImageType::Empty` or `ImageType::Stock` (see `StatusIconExt::get_storage_type`). The returned string is owned by the `StatusIcon` and should not be freed or modified.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_storage_type","","Gets the type of representation being used by the `StatusIcon` to store image data. If the `StatusIcon` has no image data, the return value will be `ImageType::Empty`.",713,{"inputs":[{"name":"self"}],"output":{"name":"imagetype"}}],[10,"get_title","","Gets the title of this tray icon. See `StatusIconExt::set_title`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_markup","","Gets the contents of the tooltip for `self`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_text","","Gets the contents of the tooltip for `self`.",713,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_visible","","Returns whether the status icon is visible or not. Note that being visible does not guarantee that the user can actually see the icon, see also `StatusIconExt::is_embedded`.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_x11_window_id","","This function is only useful on the X11/freedesktop.org platform. It returns a window ID for the widget in the underlying status icon implementation. This is useful for the Galago notification service, which can send a window ID in the protocol in order for the server to position notification windows pointing to a status icon reliably.",713,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"is_embedded","","Returns whether the status icon is embedded in a notification area.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_from_file","","Makes `self` display the file `filename`. See `StatusIcon::new_from_file` for details.",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_gicon","","Makes `self` display the `gio::Icon`. See `StatusIcon::new_from_gicon` for details.",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_icon_name","","Makes `self` display the icon named `icon_name` from the current icon theme. See `StatusIcon::new_from_icon_name` for details.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_from_pixbuf","","Makes `self` display `pixbuf`. See `StatusIcon::new_from_pixbuf` for details.",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_from_stock","","Makes `self` display the stock icon with the id `stock_id`. See `StatusIcon::new_from_stock` for details.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_has_tooltip","","Sets the has-tooltip property on `self` to `has_tooltip`. See `StatusIcon:has-tooltip` for more information.",713,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_name","","Sets the name of this tray icon. This should be a string identifying this icon. It is may be used for sorting the icons in the tray and will not be shown to the user.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_screen","","Sets the `gdk::Screen` where `self` is displayed; if the icon is already mapped, it will be unmapped, and then remapped on the new screen.",713,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_title","","Sets the title of this tray icon. This should be a short, human-readable, localized string describing the tray icon. It may be used by tools like screen readers to render the tray icon.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_tooltip_markup","","Sets `markup` as the contents of the tooltip, which is marked up with  the [Pango text markup language][PangoMarkupFormat].",713,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tooltip_text","","Sets `text` as the contents of the tooltip.",713,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visible","","Shows or hides a status icon.",713,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_embedded","","`true` if the statusicon is embedded in a notification area.",713,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_file","","",713,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"set_property_gicon","","The `gio::Icon` displayed in the `StatusIcon`. For themed icons, the image will be updated automatically if the theme changes.",713,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[10,"set_property_icon_name","","",713,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_orientation","","The orientation of the tray in which the statusicon is embedded.",713,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"set_property_pixbuf","","",713,{"inputs":[{"name":"self"},{"generics":["pixbuf"],"name":"option"}],"output":null}],[10,"set_property_stock","","Deprecated since 3.10",713,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"connect_activate","","Gets emitted when the user activates the status icon. If and how status icons can activated is platform-dependent.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",713,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_button_press_event","","The ::button-press-event signal will be emitted when a button (typically from a mouse) is pressed.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_button_release_event","","The ::button-release-event signal will be emitted when a button (typically from a mouse) is released.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_popup_menu","","Gets emitted when the user brings up the context menu of the status icon. Whether status icons can have context menus and how these are activated is platform-dependent.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup_menu","","",713,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"connect_query_tooltip","","Emitted when the hover timeout has expired with the cursor hovering above `status_icon`; or emitted when `status_icon` got focus in keyboard mode.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_scroll_event","","The ::scroll-event signal is emitted when a button in the 4 to 7 range is pressed. Wheel mice are usually configured to generate button press events for buttons 4 and 5 when the wheel is turned.",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_size_changed","","Gets emitted when the size available for the image changes, e.g. because the notification area got resized. ## `size` the new size",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_embedded_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_file_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gicon_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_tooltip_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_orientation_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixbuf_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_storage_type_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_markup_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_text_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",713,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StatusbarExt","","Trait containing all `Statusbar` methods.",null,null],[10,"get_context_id","","Returns a new context identifier, given a description of the actual context. Note that the description is not shown in the UI. ## `context_description` textual description of what context  the new message is being used in",714,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[10,"get_message_area","","Retrieves the box containing the label widget.",714,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[10,"pop","","Removes the first message in the `Statusbar`’s stack with the given context id.",714,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"push","","Pushes a new message onto a statusbar’s stack. ## `context_id` the message’s context id, as returned by  `StatusbarExt::get_context_id` ## `text` the message to add to the statusbar",714,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[10,"remove","","Forces the removal of a message from a statusbar’s stack. The exact `context_id` and `message_id` must be specified. ## `context_id` a context identifier ## `message_id` a message identifier, as returned by `StatusbarExt::push`",714,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"remove_all","","Forces the removal of all messages from a statusbar's stack with the exact `context_id`. ## `context_id` a context identifier",714,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"connect_text_popped","","Is emitted whenever a new message is popped off a statusbar's stack. ## `context_id` the context id of the relevant message/statusbar ## `text` the message that was just popped",714,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_text_pushed","","Is emitted whenever a new message gets pushed onto a statusbar's stack. ## `context_id` the context id of the relevant message/statusbar ## `text` the message that was pushed",714,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StyleContextExt","","Trait containing all `StyleContext` methods.",null,null],[10,"add_class","","Adds a style class to `self`, so posterior calls to `StyleContextExt::get` or any of the gtk_render_*() functions will make use of this new class for styling.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"add_provider","","Adds a style provider to `self`, to be used in style construction. Note that a style provider added by this function only affects the style of the widget to which `self` belongs. If you want to affect the style of all widgets, use `StyleContext::add_provider_for_screen`.",715,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u32"}],"output":null}],[10,"add_region","","Adds a region to `self`, so posterior calls to `StyleContextExt::get` or any of the gtk_render_*() functions will make use of this new region for styling.",715,{"inputs":[{"name":"self"},{"name":"str"},{"name":"regionflags"}],"output":null}],[10,"get_background_color","","Gets the background color for a given state.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"rgba"}}],[10,"get_border","","Gets the border for a given state as a `Border`.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"border"}}],[10,"get_border_color","","Gets the border color for a given state.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"rgba"}}],[10,"get_color","","Gets the foreground color for a given state.",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"rgba"}}],[10,"get_direction","","Returns the widget direction used for rendering.",715,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[10,"get_frame_clock","","Returns the `gdk::FrameClock` to which `self` is attached.",715,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"get_junction_sides","","Returns the sides where rendered elements connect visually with others.",715,{"inputs":[{"name":"self"}],"output":{"name":"junctionsides"}}],[10,"get_margin","","Gets the margin for a given state as a `Border`. See `gtk_style_property_get` and `GTK_STYLE_PROPERTY_MARGIN` for details. ## `state` state to retrieve the border for ## `margin` return value for the margin settings",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"border"}}],[10,"get_padding","","Gets the padding for a given state as a `Border`. See `StyleContextExt::get` and `GTK_STYLE_PROPERTY_PADDING` for details. ## `state` state to retrieve the padding for ## `padding` return value for the padding settings",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"border"}}],[10,"get_parent","","Gets the parent context set via `StyleContextExt::set_parent`. See that function for details.",715,{"inputs":[{"name":"self"}],"output":{"generics":["stylecontext"],"name":"option"}}],[10,"get_path","","Returns the widget path used for style matching.",715,{"inputs":[{"name":"self"}],"output":{"generics":["widgetpath"],"name":"option"}}],[10,"get_scale","","Returns the scale used for assets.",715,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_screen","","Returns the `gdk::Screen` to which `self` is attached.",715,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"get_section","","Queries the location in the CSS where `property` was defined for the current `self`. Note that the state to be queried is taken from `StyleContextExt::get_state`.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["csssection"],"name":"option"}}],[10,"get_state","","Returns the state used for style matching.",715,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[10,"has_class","","Returns `true` if `self` currently has defined the given class name. ## `class_name` a class name",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"has_region","","Returns `true` if `self` has the region defined. If `flags_return` is not `None`, it is set to the flags affecting the region.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["regionflags"],"name":"option"}}],[10,"invalidate","","Invalidates `self` style information, so it will be reconstructed again. It is useful if you modify the `self` and need the new information immediately.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"list_classes","","Returns the list of classes currently defined in `self`.",715,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_regions","","Returns the list of regions currently defined in `self`.",715,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"lookup_color","","Looks up and resolves a color name in the `self` color map. ## `color_name` color name to lookup ## `color` Return location for the looked up color",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"lookup_icon_set","","Looks up `stock_id` in the icon factories associated to `self` and the default icon factory, returning an icon set if found, otherwise `None`.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["iconset"],"name":"option"}}],[10,"pop_animatable_region","","Pops an animatable region from `self`. See `StyleContextExt::push_animatable_region`.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"remove_class","","Removes `class_name` from `self`. ## `class_name` class name to remove",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"remove_provider","","Removes `provider` from the style providers list in `self`. ## `provider` a `StyleProvider`",715,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_region","","Removes a region from `self`.",715,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"restore","","Restores `self` state to a previous stage. See `StyleContextExt::save`.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"save","","Saves the `self` state, so temporary modifications done through `StyleContextExt::add_class`, `StyleContextExt::remove_class`, `StyleContextExt::set_state`, etc. can quickly be reverted in one go through `StyleContextExt::restore`.",715,{"inputs":[{"name":"self"}],"output":null}],[10,"scroll_animations","","This function is analogous to `gdk::WindowExt::scroll`, and should be called together with it so the invalidation areas for any ongoing animation are scrolled together with it.",715,{"inputs":[{"name":"self"},{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_background","","Sets the background of `window` to the background pattern or color specified in `self` for its current state.",715,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"set_direction","","Sets the reading direction for rendering purposes.",715,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[10,"set_frame_clock","","Attaches `self` to the given frame clock.",715,{"inputs":[{"name":"self"},{"name":"frameclock"}],"output":null}],[10,"set_junction_sides","","Sets the sides where rendered elements (mostly through `gtk_render_frame`) will visually connect with other visual elements.",715,{"inputs":[{"name":"self"},{"name":"junctionsides"}],"output":null}],[10,"set_parent","","Sets the parent style context for `self`. The parent style context is used to implement inheritance of properties.",715,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_path","","Sets the `WidgetPath` used for style matching. As a consequence, the style will be regenerated to match the new given path.",715,{"inputs":[{"name":"self"},{"name":"widgetpath"}],"output":null}],[10,"set_scale","","Sets the scale to use when getting image assets for the style.",715,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_screen","","Attaches `self` to the given screen.",715,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_state","","Sets the state to be used for style matching. ## `flags` state to represent",715,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[10,"state_is_running","","Returns `true` if there is a transition animation running for the current region (see `StyleContextExt::push_animatable_region`).",715,{"inputs":[{"name":"self"},{"name":"statetype"}],"output":{"generics":["f64"],"name":"option"}}],[10,"to_string","","Converts the style context into a string representation.",715,{"inputs":[{"name":"self"},{"name":"stylecontextprintflags"}],"output":{"name":"string"}}],[10,"get_property_paint_clock","","",715,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"set_property_paint_clock","","",715,{"inputs":[{"name":"self"},{"generics":["frameclock"],"name":"option"}],"output":null}],[10,"connect_changed","","The ::changed signal is emitted when there is a change in the `StyleContext`.",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paint_clock_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",715,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"StylePropertiesExt","","`[Deprecated since 3.16]` Trait containing all `StyleProperties` methods.",null,null],[10,"clear","","Clears all style information from `self`.",716,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property","","Gets a style property from `self` for the given state. When done with `value`, `gobject::Value::unset` needs to be called to free any allocated memory.",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stateflags"}],"output":{"generics":["value"],"name":"option"}}],[10,"lookup_color","","Returns the symbolic color that is mapped to `name`.",716,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["symboliccolor"],"name":"option"}}],[10,"map_color","","Maps `color` so it can be referenced by `name`. See `StylePropertiesExt::lookup_color`",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"symboliccolor"}],"output":null}],[10,"merge","","Merges into `self` all the style information contained in `props_to_merge`. If `replace` is `true`, the values will be overwritten, if it is `false`, the older values will prevail.",716,{"inputs":[{"name":"self"},{"name":"styleproperties"},{"name":"bool"}],"output":null}],[10,"set_property","","Sets a styling property in `self`.",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stateflags"},{"name":"value"}],"output":null}],[10,"unset_property","","Unsets a style property in `self`.",716,{"inputs":[{"name":"self"},{"name":"str"},{"name":"stateflags"}],"output":null}],[8,"StyleProviderExt","","Trait containing all `StyleProvider` methods.",null,null],[10,"get_icon_factory","","Returns the `IconFactory` defined to be in use for `path`, or `None` if none is defined.",717,{"inputs":[{"name":"self"},{"name":"widgetpath"}],"output":{"generics":["iconfactory"],"name":"option"}}],[10,"get_style","","Returns the style settings affecting a widget defined by `path`, or `None` if `self` doesn’t contemplate styling `path`.",717,{"inputs":[{"name":"self"},{"name":"widgetpath"}],"output":{"generics":["styleproperties"],"name":"option"}}],[8,"SwitchExt","","Trait containing all `Switch` methods.",null,null],[10,"get_active","","Gets whether the `Switch` is in its “on” or “off” state.",718,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_state","","Gets the underlying state of the `Switch`.",718,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Changes the state of `self` to the desired one. ## `is_active` `true` if `self` should be active, and `false` otherwise",718,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_state","","Sets the underlying state of the `Switch`.",718,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_activate","","The ::activate signal on `Switch` is an action signal and emitting it causes the switch to animate. Applications should never connect to this signal, but use the notify::active signal.",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate","","",718,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_state_set","","The ::state-set signal on `Switch` is emitted to change the underlying state. It is emitted when the user changes the switch position. The default handler keeps the state in sync with the `Switch:active` property.",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_state_notify","","",718,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextBufferExt","","Trait containing all `TextBuffer` methods.",null,null],[10,"add_mark","","Adds the mark at position `where_`. The mark must not be added to another buffer, and if its name is not `None` then there must not be another mark in the buffer with the same name.",719,{"inputs":[{"name":"self"},{"name":"textmark"},{"name":"textiter"}],"output":null}],[10,"add_selection_clipboard","","Adds `clipboard` to the list of clipboards in which the selection contents of `self` are available. In most cases, `clipboard` will be the `Clipboard` of type `GDK_SELECTION_PRIMARY` for a view of `self`. ## `clipboard` a `Clipboard`",719,{"inputs":[{"name":"self"},{"name":"clipboard"}],"output":null}],[10,"apply_tag","","Emits the “apply-tag” signal on `self`. The default handler for the signal applies `tag` to the given range. `start` and `end` do not have to be in order. ## `tag` a `TextTag` ## `start` one bound of range to be tagged ## `end` other bound of range to be tagged",719,{"inputs":[{"name":"self"},{"name":"texttag"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"apply_tag_by_name","","Calls `TextTagTableExt::lookup` on the buffer’s tag table to get a `TextTag`, then calls `TextBufferExt::apply_tag`. ## `name` name of a named `TextTag` ## `start` one bound of range to be tagged ## `end` other bound of range to be tagged",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"backspace","","Performs the appropriate action as if the user hit the delete key with the cursor at the position specified by `iter`. In the normal case a single character will be deleted, but when combining accents are involved, more than one character can be deleted, and when precomposed character and accent combinations are involved, less than one character will be deleted.",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"begin_user_action","","Called to indicate that the buffer operations between here and a call to `TextBufferExt::end_user_action` are part of a single user-visible operation. The operations between `TextBufferExt::begin_user_action` and `TextBufferExt::end_user_action` can then be grouped when creating an undo stack. `TextBuffer` maintains a count of calls to `TextBufferExt::begin_user_action` that have not been closed with a call to `TextBufferExt::end_user_action`, and emits the “begin-user-action” and “end-user-action” signals only for the outermost pair of calls. This allows you to build user actions from other user actions.",719,{"inputs":[{"name":"self"}],"output":null}],[10,"copy_clipboard","","Copies the currently-selected text to a clipboard. ## `clipboard` the `Clipboard` object to copy to",719,{"inputs":[{"name":"self"},{"name":"clipboard"}],"output":null}],[10,"create_child_anchor","","This is a convenience function which simply creates a child anchor with `TextChildAnchor::new` and inserts it into the buffer with `TextBufferExt::insert_child_anchor`. The new anchor is owned by the buffer; no reference count is returned to the caller of `TextBufferExt::create_child_anchor`. ## `iter` location in the buffer",719,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"generics":["textchildanchor"],"name":"option"}}],[10,"create_mark","","Creates a mark at position `where_`. If `mark_name` is `None`, the mark is anonymous; otherwise, the mark can be retrieved by name using `TextBufferExt::get_mark`. If a mark has left gravity, and text is inserted at the mark’s current location, the mark will be moved to the left of the newly-inserted text. If the mark has right gravity (`left_gravity` = `false`), the mark will end up on the right of newly-inserted text. The standard left-to-right cursor is a mark with right gravity (when you type, the cursor stays on the right side of the text you’re typing).",719,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textiter"},{"name":"bool"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"cut_clipboard","","Copies the currently-selected text to a clipboard, then deletes said text if it’s editable. ## `clipboard` the `Clipboard` object to cut to ## `default_editable` default editability of the buffer",719,{"inputs":[{"name":"self"},{"name":"clipboard"},{"name":"bool"}],"output":null}],[10,"delete","","Deletes text between `start` and `end`. The order of `start` and `end` is not actually relevant; `TextBufferExt::delete` will reorder them. This function actually emits the “delete-range” signal, and the default handler of that signal deletes the text. Because the buffer is modified, all outstanding iterators become invalid after calling this function; however, the `start` and `end` will be re-initialized to point to the location where text was deleted. ## `start` a position in `self` ## `end` another position in `self`",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"delete_interactive","","Deletes all editable text in the given range. Calls `TextBufferExt::delete` for each editable sub-range of [`start`,`end`). `start` and `end` are revalidated to point to the location of the last deleted range, or left untouched if no text was deleted. ## `start_iter` start of range to delete ## `end_iter` end of range ## `default_editable` whether the buffer is editable by default",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"delete_mark","","Deletes `mark`, so that it’s no longer located anywhere in the buffer. Removes the reference the buffer holds to the mark, so if you haven’t called `gobject::ObjectExt::ref` on the mark, it will be freed. Even if the mark isn’t freed, most operations on `mark` become invalid, until it gets added to a buffer again with `TextBufferExt::add_mark`. Use `TextMarkExt::get_deleted` to find out if a mark has been removed from its buffer. The `TextBuffer::mark-deleted` signal will be emitted as notification after the mark is deleted. ## `mark` a `TextMark` in `self`",719,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":null}],[10,"delete_mark_by_name","","Deletes the mark named `name`; the mark must exist. See `TextBufferExt::delete_mark` for details. ## `name` name of a mark in `self`",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"delete_selection","","Deletes the range between the “insert” and “selection_bound” marks, that is, the currently-selected text. If `interactive` is `true`, the editability of the selection will be considered (users can’t delete uneditable text). ## `interactive` whether the deletion is caused by user interaction ## `default_editable` whether the buffer is editable by default",719,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"deserialize","","This function deserializes rich text in format `format` and inserts it at `iter`.",719,null],[10,"deserialize_get_can_create_tags","","This functions returns the value set with `TextBufferExt::deserialize_set_can_create_tags` ## `format` a `gdk::Atom` representing a registered rich text format",719,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[10,"deserialize_set_can_create_tags","","Use this function to allow a rich text deserialization function to create new tags in the receiving buffer. Note that using this function is almost always a bad idea, because the rich text functions you register should know how to map the rich text format they handler to your text buffers set of tags.",719,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"bool"}],"output":null}],[10,"end_user_action","","Should be paired with a call to `TextBufferExt::begin_user_action`. See that function for a full explanation.",719,{"inputs":[{"name":"self"}],"output":null}],[10,"get_bounds","","Retrieves the first and last iterators in the buffer, i.e. the entire buffer lies within the range [`start`,`end`). ## `start` iterator to initialize with first position in the buffer ## `end` iterator to initialize with the end iterator",719,null],[10,"get_char_count","","Gets the number of characters in the buffer; note that characters and bytes are not the same, you can’t e.g. expect the contents of the buffer in string form to be this many bytes long. The character count is cached, so this function is very fast.",719,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_copy_target_list","","This function returns the list of targets this text buffer can provide for copying and as DND source. The targets in the list are added with `info` values from the `TextBufferTargetInfo` enum, using `TargetList::add_rich_text_targets` and `TargetList::add_text_targets`.",719,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"get_deserialize_formats","","This function returns the rich text deserialize formats registered with `self` using `TextBufferExt::register_deserialize_format` or `TextBufferExt::register_deserialize_tagset` ## `n_formats` return location for the number of formats",719,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"get_end_iter","","Initializes `iter` with the “end iterator,” one past the last valid character in the text buffer. If dereferenced with `TextIter::get_char`, the end iterator has a character value of 0. The entire buffer lies in the range from the first position in the buffer (call `TextBufferExt::get_start_iter` to get character position 0) to the end iterator. ## `iter` iterator to initialize",719,{"inputs":[{"name":"self"}],"output":{"name":"textiter"}}],[10,"get_has_selection","","Indicates whether the buffer has some text currently selected.",719,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_insert","","Returns the mark that represents the cursor (insertion point). Equivalent to calling `TextBufferExt::get_mark` to get the mark named “insert”, but very slightly more efficient, and involves less typing.",719,{"inputs":[{"name":"self"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"get_iter_at_child_anchor","","Obtains the location of `anchor` within `self`. ## `iter` an iterator to be initialized ## `anchor` a child anchor that appears in `self`",719,{"inputs":[{"name":"self"},{"name":"textchildanchor"}],"output":{"name":"textiter"}}],[10,"get_iter_at_line","","Initializes `iter` to the start of the given line. If `line_number` is greater than the number of lines in the `self`, the end iterator is returned. ## `iter` iterator to initialize ## `line_number` line number counting from 0",719,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_iter_at_line_index","","Obtains an iterator pointing to `byte_index` within the given line. `byte_index` must be the start of a UTF-8 character. Note bytes, not characters; UTF-8 may encode one character as multiple bytes.",719,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_iter_at_line_offset","","Obtains an iterator pointing to `char_offset` within the given line. Note characters, not bytes; UTF-8 may encode one character as multiple bytes.",719,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_iter_at_mark","","Initializes `iter` with the current position of `mark`. ## `iter` iterator to initialize ## `mark` a `TextMark` in `self`",719,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":{"name":"textiter"}}],[10,"get_iter_at_offset","","Initializes `iter` to a position `char_offset` chars from the start of the entire buffer. If `char_offset` is -1 or greater than the number of characters in the buffer, `iter` is initialized to the end iterator, the iterator one past the last valid character in the buffer. ## `iter` iterator to initialize ## `char_offset` char offset from start of buffer, counting from 0, or -1",719,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"textiter"}}],[10,"get_line_count","","Obtains the number of lines in the buffer. This value is cached, so the function is very fast.",719,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_mark","","Returns the mark named `name` in buffer `self`, or `None` if no such mark exists in the buffer. ## `name` a mark name",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"get_modified","","Indicates whether the buffer has been modified since the last call to `TextBufferExt::set_modified` set the modification flag to `false`. Used for example to enable a “save” function in a text editor.",719,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_paste_target_list","","This function returns the list of targets this text buffer supports for pasting and as DND destination. The targets in the list are added with `info` values from the `TextBufferTargetInfo` enum, using `TargetList::add_rich_text_targets` and `TargetList::add_text_targets`.",719,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"get_selection_bound","","Returns the mark that represents the selection bound. Equivalent to calling `TextBufferExt::get_mark` to get the mark named “selection_bound”, but very slightly more efficient, and involves less typing.",719,{"inputs":[{"name":"self"}],"output":{"generics":["textmark"],"name":"option"}}],[10,"get_selection_bounds","","Returns `true` if some text is selected; places the bounds of the selection in `start` and `end` (if the selection has length 0, then `start` and `end` are filled in with the same value). `start` and `end` will be in ascending order. If `start` and `end` are NULL, then they are not filled in, but the return value still indicates whether text is selected. ## `start` iterator to initialize with selection start ## `end` iterator to initialize with selection end",719,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_serialize_formats","","This function returns the rich text serialize formats registered with `self` using `TextBufferExt::register_serialize_format` or `TextBufferExt::register_serialize_tagset` ## `n_formats` return location for the number of formats",719,{"inputs":[{"name":"self"}],"output":{"generics":["atom"],"name":"vec"}}],[10,"get_slice","","Returns the text in the range [`start`,`end`). Excludes undisplayed text (text marked with tags that set the invisibility attribute) if `include_hidden_chars` is `false`. The returned string includes a 0xFFFC character whenever the buffer contains embedded images, so byte and character indexes into the returned string do correspond to byte and character indexes into the buffer. Contrast with `TextBufferExt::get_text`. Note that 0xFFFC can occur in normal text as well, so it is not a reliable indicator that a pixbuf or widget is in the buffer. ## `start` start of a range ## `end` end of a range ## `include_hidden_chars` whether to include invisible text",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_start_iter","","Initialized `iter` with the first position in the text buffer. This is the same as using `TextBufferExt::get_iter_at_offset` to get the iter at character offset 0. ## `iter` iterator to initialize",719,{"inputs":[{"name":"self"}],"output":{"name":"textiter"}}],[10,"get_tag_table","","Get the `TextTagTable` associated with this buffer.",719,{"inputs":[{"name":"self"}],"output":{"generics":["texttagtable"],"name":"option"}}],[10,"get_text","","Returns the text in the range [`start`,`end`). Excludes undisplayed text (text marked with tags that set the invisibility attribute) if `include_hidden_chars` is `false`. Does not include characters representing embedded images, so byte and character indexes into the returned string do not correspond to byte and character indexes into the buffer. Contrast with `TextBufferExt::get_slice`. ## `start` start of a range ## `end` end of a range ## `include_hidden_chars` whether to include invisible text",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[10,"insert","","Inserts `len` bytes of `text` at position `iter`. If `len` is -1, `text` must be nul-terminated and will be inserted in its entirety. Emits the “insert-text” signal; insertion actually occurs in the default handler for the signal. `iter` is invalidated when insertion occurs (because the buffer contents change), but the default signal handler revalidates it to point to the end of the inserted text. ## `iter` a position in the buffer ## `text` text in UTF-8 format ## `len` length of text in bytes, or -1",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":null}],[10,"insert_at_cursor","","Simply calls `TextBufferExt::insert`, using the current cursor position as the insertion point. ## `text` text in UTF-8 format ## `len` length of text, in bytes",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"insert_child_anchor","","Inserts a child widget anchor into the text buffer at `iter`. The anchor will be counted as one character in character counts, and when obtaining the buffer contents as a string, will be represented by the Unicode “object replacement character” 0xFFFC. Note that the “slice” variants for obtaining portions of the buffer as a string include this character for child anchors, but the “text” variants do not. E.g. see `TextBufferExt::get_slice` and `TextBufferExt::get_text`. Consider `TextBufferExt::create_child_anchor` as a more convenient alternative to this function. The buffer will add a reference to the anchor, so you can unref it after insertion. ## `iter` location to insert the anchor ## `anchor` a `TextChildAnchor`",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textchildanchor"}],"output":null}],[10,"insert_interactive","","Like `TextBufferExt::insert`, but the insertion will not occur if `iter` is at a non-editable location in the buffer. Usually you want to prevent insertions at ineditable locations if the insertion results from a user action (is interactive).",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"insert_interactive_at_cursor","","Calls `TextBufferExt::insert_interactive` at the cursor position.",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"insert_markup","","Inserts the text in `markup` at position `iter`. `markup` will be inserted in its entirety and must be nul-terminated and valid UTF-8. Emits the `TextBuffer::insert-text` signal, possibly multiple times; insertion actually occurs in the default handler for the signal. `iter` will point to the end of the inserted text on return.",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"str"}],"output":null}],[10,"insert_pixbuf","","Inserts an image into the text buffer at `iter`. The image will be counted as one character in character counts, and when obtaining the buffer contents as a string, will be represented by the Unicode “object replacement character” 0xFFFC. Note that the “slice” variants for obtaining portions of the buffer as a string include this character for pixbufs, but the “text” variants do not. e.g. see `TextBufferExt::get_slice` and `TextBufferExt::get_text`. ## `iter` location to insert the pixbuf ## `pixbuf` a `gdk_pixbuf::Pixbuf`",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"pixbuf"}],"output":null}],[10,"insert_range","","Copies text, tags, and pixbufs between `start` and `end` (the order of `start` and `end` doesn’t matter) and inserts the copy at `iter`. Used instead of simply getting/inserting text because it preserves images and tags. If `start` and `end` are in a different buffer from `self`, the two buffers must share the same tag table.",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"insert_range_interactive","","Same as `TextBufferExt::insert_range`, but does nothing if the insertion point isn’t editable. The `default_editable` parameter indicates whether the text is editable at `iter` if no tags enclosing `iter` affect editability. Typically the result of `TextViewExt::get_editable` is appropriate here. ## `iter` a position in `self` ## `start` a position in a `TextBuffer` ## `end` another position in the same buffer as `start` ## `default_editable` default editability of the buffer",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"},{"name":"textiter"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"move_mark","","Moves `mark` to the new location `where_`. Emits the `TextBuffer::mark-set` signal as notification of the move. ## `mark` a `TextMark` ## `where_` new location for `mark` in `self`",719,{"inputs":[{"name":"self"},{"name":"textmark"},{"name":"textiter"}],"output":null}],[10,"move_mark_by_name","","Moves the mark named `name` (which must exist) to location `where_`. See `TextBufferExt::move_mark` for details. ## `name` name of a mark ## `where_` new location for mark",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textiter"}],"output":null}],[10,"paste_clipboard","","Pastes the contents of a clipboard. If `override_location` is `None`, the pasted text will be inserted at the cursor position, or the buffer selection will be replaced if the selection is non-empty.",719,{"inputs":[{"name":"self"},{"name":"clipboard"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"place_cursor","","This function moves the “insert” and “selection_bound” marks simultaneously. If you move them to the same place in two steps with `TextBufferExt::move_mark`, you will temporarily select a region in between their old and new locations, which can be pretty inefficient since the temporarily-selected region will force stuff to be recalculated. This function moves them as a unit, which can be optimized. ## `where_` where to put the cursor",719,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":null}],[10,"register_deserialize_tagset","","This function registers GTK+’s internal rich text serialization format with the passed `self`. See `TextBufferExt::register_serialize_tagset` for details. ## `tagset_name` an optional tagset name, on `None`",719,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"atom"}}],[10,"register_serialize_tagset","","This function registers GTK+’s internal rich text serialization format with the passed `self`. The internal format does not comply to any standard rich text format and only works between `TextBuffer` instances. It is capable of serializing all of a text buffer’s tags and embedded pixbufs.",719,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"atom"}}],[10,"remove_all_tags","","Removes all tags in the range between `start` and `end`. Be careful with this function; it could remove tags added in code unrelated to the code you’re currently writing. That is, using this function is probably a bad idea if you have two or more unrelated code sections that add tags. ## `start` one bound of range to be untagged ## `end` other bound of range to be untagged",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"remove_selection_clipboard","","Removes a `Clipboard` added with `TextBufferExt::add_selection_clipboard`. ## `clipboard` a `Clipboard` added to `self` by  `TextBufferExt::add_selection_clipboard`",719,{"inputs":[{"name":"self"},{"name":"clipboard"}],"output":null}],[10,"remove_tag","","Emits the “remove-tag” signal. The default handler for the signal removes all occurrences of `tag` from the given range. `start` and `end` don’t have to be in order. ## `tag` a `TextTag` ## `start` one bound of range to be untagged ## `end` other bound of range to be untagged",719,{"inputs":[{"name":"self"},{"name":"texttag"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"remove_tag_by_name","","Calls `TextTagTableExt::lookup` on the buffer’s tag table to get a `TextTag`, then calls `TextBufferExt::remove_tag`. ## `name` name of a `TextTag` ## `start` one bound of range to be untagged ## `end` other bound of range to be untagged",719,{"inputs":[{"name":"self"},{"name":"str"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"select_range","","This function moves the “insert” and “selection_bound” marks simultaneously. If you move them in two steps with `TextBufferExt::move_mark`, you will temporarily select a region in between their old and new locations, which can be pretty inefficient since the temporarily-selected region will force stuff to be recalculated. This function moves them as a unit, which can be optimized. ## `ins` where to put the “insert” mark ## `bound` where to put the “selection_bound” mark",719,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"textiter"}],"output":null}],[10,"serialize","","This function serializes the portion of text between `start` and `end` in the rich text format represented by `format`.",719,{"inputs":[{"name":"self"},{"name":"textbuffer"},{"name":"atom"},{"name":"textiter"},{"name":"textiter"}],"output":{"generics":["u8"],"name":"vec"}}],[10,"set_modified","","Used to keep track of whether the buffer has been modified since the last time it was saved. Whenever the buffer is saved to disk, call gtk_text_buffer_set_modified (`self`, FALSE). When the buffer is modified, it will automatically toggled on the modified bit again. When the modified bit flips, the buffer emits the `TextBuffer::modified-changed` signal. ## `setting` modification flag setting",719,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_text","","Deletes current contents of `self`, and inserts `text` instead. If `len` is -1, `text` must be nul-terminated. `text` must be valid UTF-8. ## `text` UTF-8 text to insert ## `len` length of `text` in bytes",719,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"unregister_deserialize_format","","This function unregisters a rich text format that was previously registered using `TextBufferExt::register_deserialize_format` or `TextBufferExt::register_deserialize_tagset`. ## `format` a `gdk::Atom` representing a registered rich text format.",719,{"inputs":[{"name":"self"},{"name":"atom"}],"output":null}],[10,"unregister_serialize_format","","This function unregisters a rich text format that was previously registered using `TextBufferExt::register_serialize_format` or `TextBufferExt::register_serialize_tagset` ## `format` a `gdk::Atom` representing a registered rich text format.",719,{"inputs":[{"name":"self"},{"name":"atom"}],"output":null}],[10,"get_property_cursor_position","","",719,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"connect_apply_tag","","The ::apply-tag signal is emitted to apply a tag to a range of text in a `TextBuffer`. Applying actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_begin_user_action","","The ::begin-user-action signal is emitted at the beginning of a single user-visible operation on a `TextBuffer`.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_changed","","The ::changed signal is emitted when the content of a `TextBuffer` has changed.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_range","","The ::delete-range signal is emitted to delete a range from a `TextBuffer`.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_end_user_action","","The ::end-user-action signal is emitted at the end of a single user-visible operation on the `TextBuffer`.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_child_anchor","","The ::insert-child-anchor signal is emitted to insert a `TextChildAnchor` in a `TextBuffer`. Insertion actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_pixbuf","","The ::insert-pixbuf signal is emitted to insert a `gdk_pixbuf::Pixbuf` in a `TextBuffer`. Insertion actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mark_deleted","","The ::mark-deleted signal is emitted as notification after a `TextMark` is deleted.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mark_set","","The ::mark-set signal is emitted as notification after a `TextMark` is set.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_modified_changed","","The ::modified-changed signal is emitted when the modified bit of a `TextBuffer` flips.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_paste_done","","The paste-done signal is emitted after paste operation has been completed. This is useful to properly scroll the view to the end of the pasted text. See `TextBufferExt::paste_clipboard` for more details. ## `clipboard` the `Clipboard` pasted from",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_remove_tag","","The ::remove-tag signal is emitted to remove all occurrences of `tag` from a range of text in a `TextBuffer`. Removal actually occurs in the default handler.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_copy_target_list_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_position_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_selection_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paste_target_list_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tag_table_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_text_notify","","",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextChildAnchorExt","","Trait containing all `TextChildAnchor` methods.",null,null],[10,"get_deleted","","Determines whether a child anchor has been deleted from the buffer. Keep in mind that the child anchor will be unreferenced when removed from the buffer, so you need to hold your own reference (with `gobject::ObjectExt::ref`) if you plan to use this function — otherwise all deleted child anchors will also be finalized.",720,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_widgets","","Gets a list of all widgets anchored at this child anchor. The returned list should be freed with `glib::List::free`.",720,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[8,"TextMarkExt","","Trait containing all `TextMark` methods.",null,null],[10,"get_buffer","","Gets the buffer this mark is located inside, or `None` if the mark is deleted.",721,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[10,"get_deleted","","Returns `true` if the mark has been removed from its buffer with `TextBufferExt::delete_mark`. See `TextBufferExt::add_mark` for a way to add it to a buffer again.",721,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_left_gravity","","Determines whether the mark has left gravity.",721,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_name","","Returns the mark name; returns NULL for anonymous marks.",721,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_visible","","Returns `true` if the mark is visible (i.e. a cursor is displayed for it).",721,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_visible","","Sets the visibility of `self`; the insertion point is normally visible, i.e. you can see it as a vertical bar. Also, the text widget uses a visible mark to indicate where a drop will occur when dragging-and-dropping text. Most other marks are not visible. Marks are not visible by default. ## `setting` visibility of mark",721,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_left_gravity_notify","","",721,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",721,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextTagExt","","Trait containing all `TextTag` methods.",null,null],[10,"changed","","Emits the `TextTagTable::tag-changed` signal on the `TextTagTable` where the tag is included.",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"event","","Emits the “event” signal on the `TextTag`. ## `event_object` object that received the event, such as a widget ## `event` the event ## `iter` location where the event was received",722,{"inputs":[{"name":"self"},{"name":"p"},{"name":"event"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"get_priority","","Get the tag priority.",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_priority","","Sets the priority of a `TextTag`. Valid priorities start at 0 and go to one less than `TextTagTableExt::get_size`. Each tag in a table has a unique priority; setting the priority of one tag shifts the priorities of all the other tags in the table to maintain a unique priority for each tag. Higher priority tags “win” if two tags both set the same text attribute. When adding a tag to a tag table, it will be assigned the highest priority in the table by default; so normally the precedence of a set of tags is the order in which they were added to the table, or created with `TextBufferExt::create_tag`, which adds the tag to the buffer’s table automatically. ## `priority` the new priority",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_accumulative_margin","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_accumulative_margin","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_background","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_background_full_height","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_full_height","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_background_full_height_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_full_height_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_background_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_background_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_background_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_background_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_direction","","",722,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[10,"set_property_direction","","",722,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[10,"get_property_editable","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_editable_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_editable_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_fallback","","Whether font fallback is enabled.",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_fallback","","Whether font fallback is enabled.",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_fallback_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_fallback_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_family","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_family","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_family_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_family_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_font","","Font description as string, e.g. \"Sans Italic 12\".",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_font","","Font description as string, e.g. \"Sans Italic 12\".",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_font_features","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_font_features","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_font_features_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_font_features_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_property_foreground","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_foreground_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_foreground_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_foreground_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_foreground_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_indent","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_indent","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_indent_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_indent_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_invisible","","Whether this text is hidden.",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_invisible","","Whether this text is hidden.",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_invisible_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_invisible_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_justification","","",722,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[10,"set_property_justification","","",722,{"inputs":[{"name":"self"},{"name":"justification"}],"output":null}],[10,"get_property_justification_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_justification_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_language","","The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used.",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_language","","The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used.",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_language_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_language_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_left_margin","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_left_margin","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_left_margin_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_left_margin_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_letter_spacing","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_letter_spacing","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_letter_spacing_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_letter_spacing_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_name","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_paragraph_background","","",722,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_paragraph_background_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_paragraph_background_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_paragraph_background_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_paragraph_background_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pixels_above_lines","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pixels_above_lines","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_pixels_above_lines_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_pixels_above_lines_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pixels_below_lines","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pixels_below_lines","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_pixels_below_lines_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_pixels_below_lines_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_pixels_inside_wrap","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_pixels_inside_wrap","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_pixels_inside_wrap_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_pixels_inside_wrap_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_right_margin","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_right_margin","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_right_margin_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_right_margin_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_rise","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_rise","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_rise_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_rise_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_scale","","",722,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_scale","","",722,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_scale_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_scale_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_size","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_size","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_size_points","","",722,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_property_size_points","","",722,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"get_property_size_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_size_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_stretch","","",722,{"inputs":[{"name":"self"}],"output":{"name":"stretch"}}],[10,"set_property_stretch","","",722,{"inputs":[{"name":"self"},{"name":"stretch"}],"output":null}],[10,"get_property_stretch_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_stretch_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_strikethrough_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_strikethrough_rgba_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough_rgba_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_strikethrough_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_strikethrough_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_style","","",722,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[10,"set_property_style","","",722,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[10,"get_property_style_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_style_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_tabs_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_tabs_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_underline","","",722,{"inputs":[{"name":"self"}],"output":{"name":"underline"}}],[10,"set_property_underline","","",722,{"inputs":[{"name":"self"},{"name":"underline"}],"output":null}],[10,"get_property_underline_rgba","","",722,{"inputs":[{"name":"self"}],"output":{"generics":["rgba"],"name":"option"}}],[10,"set_property_underline_rgba","","",722,{"inputs":[{"name":"self"},{"generics":["rgba"],"name":"option"}],"output":null}],[10,"get_property_underline_rgba_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_underline_rgba_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_underline_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_underline_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_variant","","",722,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[10,"set_property_variant","","",722,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[10,"get_property_variant_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_variant_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_weight","","",722,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_weight","","",722,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_weight_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_weight_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_wrap_mode","","",722,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"set_property_wrap_mode","","",722,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"get_property_wrap_mode_set","","",722,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_wrap_mode_set","","",722,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_event","","The ::event signal is emitted when an event occurs on a region of the buffer marked with this tag. ## `object` the object the event was fired from (typically a `TextView`) ## `event` the event which triggered the signal ## `iter` a `TextIter` pointing at the location the event occurred",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accumulative_margin_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_full_height_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_full_height_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_background_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_direction_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fallback_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fallback_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_family_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_features_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_font_features_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_foreground_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_invisible_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justification_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justification_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_language_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_margin_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_margin_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_letter_spacing_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_letter_spacing_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paragraph_background_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paragraph_background_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_paragraph_background_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_above_lines_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_above_lines_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_below_lines_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_below_lines_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_inside_wrap_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_inside_wrap_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rise_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_points_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_size_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stretch_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_rgba_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_strikethrough_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_style_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tabs_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_rgba_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_rgba_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_underline_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_variant_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_weight_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_set_notify","","",722,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextTagTableExt","","Trait containing all `TextTagTable` methods.",null,null],[10,"add","","Add a tag to the table. The tag is assigned the highest priority in the table.",723,{"inputs":[{"name":"self"},{"name":"texttag"}],"output":{"name":"bool"}}],[10,"get_size","","Returns the size of the table (number of tags)",723,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"lookup","","Look up a named tag. ## `name` name of a tag",723,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["texttag"],"name":"option"}}],[10,"remove","","Remove a tag from the table. If a `TextBuffer` has `self` as its tag table, the tag is removed from the buffer. The table’s reference to the tag is removed, so the tag will end up destroyed if you don’t have a reference to it. ## `tag` a `TextTag`",723,{"inputs":[{"name":"self"},{"name":"texttag"}],"output":null}],[10,"connect_tag_added","","`tag` the added tag.",723,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tag_changed","","`tag` the changed tag. ## `size_changed` whether the change affects the `TextView` layout.",723,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_tag_removed","","`tag` the removed tag.",723,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TextViewExt","","Trait containing all `TextView` methods.",null,null],[10,"add_child_at_anchor","","Adds a child widget in the text buffer, at the given `anchor`. ## `child` a `Widget` ## `anchor` a `TextChildAnchor` in the `TextBuffer` for `self`",724,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textchildanchor"}],"output":null}],[10,"add_child_in_window","","Adds a child at fixed coordinates in one of the text widget's windows.",724,{"inputs":[{"name":"self"},{"name":"p"},{"name":"textwindowtype"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"backward_display_line","","Moves the given `iter` backward by one display (wrapped) line. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"backward_display_line_start","","Moves the given `iter` backward to the next display line start. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"buffer_to_window_coords","","Converts coordinate (`buffer_x`, `buffer_y`) to coordinates for the window `win`, and stores the result in (`window_x`, `window_y`).",724,null],[10,"forward_display_line","","Moves the given `iter` forward by one display (wrapped) line. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"forward_display_line_end","","Moves the given `iter` forward to the next display line end. A display line is different from a paragraph. Paragraphs are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each view, since they depend on the view’s width; paragraphs are the same in all views, since they depend on the contents of the `TextBuffer`. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"get_accepts_tab","","Returns whether pressing the Tab key inserts a tab characters. `TextViewExt::set_accepts_tab`.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_border_window_size","","Gets the width of the specified border window. See `TextViewExt::set_border_window_size`. ## `type_` window to return size from",724,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"name":"i32"}}],[10,"get_bottom_margin","","Gets the bottom margin for text in the `self`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_buffer","","Returns the `TextBuffer` being displayed by this text view. The reference count on the buffer is not incremented; the caller of this function won’t own a new reference.",724,{"inputs":[{"name":"self"}],"output":{"generics":["textbuffer"],"name":"option"}}],[10,"get_cursor_locations","","Given an `iter` within a text layout, determine the positions of the strong and weak cursors if the insertion point is at that iterator. The position of each cursor is stored as a zero-width rectangle. The strong cursor location is the location where characters of the directionality equal to the base direction of the paragraph are inserted. The weak cursor location is the location where characters of the directionality opposite to the base direction of the paragraph are inserted.",724,null],[10,"get_cursor_visible","","Find out whether the cursor should be displayed.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_default_attributes","","Obtains a copy of the default text attributes. These are the attributes used for text unless a tag overrides them. You’d typically pass the default attributes in to `TextIter::get_attributes` in order to get the attributes in effect at a given text position.",724,{"inputs":[{"name":"self"}],"output":{"name":"textattributes"}}],[10,"get_editable","","Returns the default editability of the `TextView`. Tags in the buffer may override this setting for some ranges of text.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_indent","","Gets the default indentation of paragraphs in `self`. Tags in the view’s buffer may override the default. The indentation may be negative.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_input_hints","","Gets the value of the `TextView:input-hints` property.",724,{"inputs":[{"name":"self"}],"output":{"name":"inputhints"}}],[10,"get_input_purpose","","Gets the value of the `TextView:input-purpose` property.",724,{"inputs":[{"name":"self"}],"output":{"name":"inputpurpose"}}],[10,"get_iter_at_location","","Retrieves the iterator at buffer coordinates `x` and `y`. Buffer coordinates are coordinates for the entire buffer, not just the currently-displayed portion. If you have coordinates from an event, you have to convert those to buffer coordinates with `TextViewExt::window_to_buffer_coords`. ## `iter` a `TextIter` ## `x` x position, in buffer coordinates ## `y` y position, in buffer coordinates",724,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["textiter"],"name":"option"}}],[10,"get_iter_at_position","","Retrieves the iterator pointing to the character at buffer coordinates `x` and `y`. Buffer coordinates are coordinates for the entire buffer, not just the currently-displayed portion. If you have coordinates from an event, you have to convert those to buffer coordinates with `TextViewExt::window_to_buffer_coords`.",724,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_iter_location","","Gets a rectangle which roughly contains the character at `iter`. The rectangle position is in buffer coordinates; use `TextViewExt::buffer_to_window_coords` to convert these coordinates to coordinates for one of the windows in the text view. ## `iter` a `TextIter` ## `location` bounds of the character at `iter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"rectangle"}}],[10,"get_justification","","Gets the default justification of paragraphs in `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"}],"output":{"name":"justification"}}],[10,"get_left_margin","","Gets the default left margin size of paragraphs in the `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_line_at_y","","Gets the `TextIter` at the start of the line containing the coordinate `y`. `y` is in buffer coordinates, convert from window coordinates with `TextViewExt::window_to_buffer_coords`. If non-`None`, `line_top` will be filled with the coordinate of the top edge of the line. ## `target_iter` a `TextIter` ## `y` a y coordinate ## `line_top` return location for top coordinate of the line",724,null],[10,"get_line_yrange","","Gets the y coordinate of the top of the line containing `iter`, and the height of the line. The coordinate is a buffer coordinate; convert to window coordinates with `TextViewExt::buffer_to_window_coords`. ## `iter` a `TextIter` ## `y` return location for a y coordinate ## `height` return location for a height",724,null],[10,"get_monospace","","Gets the value of the `TextView:monospace` property.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_overwrite","","Returns whether the `TextView` is in overwrite mode or not.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_pixels_above_lines","","Gets the default number of pixels to put above paragraphs. Adding this function with `TextViewExt::get_pixels_below_lines` is equal to the line space between each paragraph.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_pixels_below_lines","","Gets the value set by `TextViewExt::set_pixels_below_lines`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_pixels_inside_wrap","","Gets the value set by `TextViewExt::set_pixels_inside_wrap`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_right_margin","","Gets the default right margin for text in `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tabs","","Gets the default tabs for `self`. Tags in the buffer may override the defaults. The returned array will be `None` if “standard” (8-space) tabs are used. Free the return value with `pango::TabArray::free`.",724,{"inputs":[{"name":"self"}],"output":{"generics":["tabarray"],"name":"option"}}],[10,"get_top_margin","","Gets the top margin for text in the `self`.",724,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_visible_rect","","Fills `visible_rect` with the currently-visible region of the buffer, in buffer coordinates. Convert to window coordinates with `TextViewExt::buffer_to_window_coords`. ## `visible_rect` rectangle to fill",724,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"get_window","","Retrieves the `gdk::Window` corresponding to an area of the text view; possible windows include the overall widget window, child windows on the left, right, top, bottom, and the window that displays the text buffer. Windows are `None` and nonexistent if their width or height is 0, and are nonexistent before the widget has been realized. ## `win` window to get",724,{"inputs":[{"name":"self"},{"name":"textwindowtype"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_window_type","","Usually used to find out which window an event corresponds to.",724,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"textwindowtype"}}],[10,"get_wrap_mode","","Gets the line wrapping for the view.",724,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[10,"im_context_filter_keypress","","Allow the `TextView` input method to internally handle key press and release events. If this function returns `true`, then no further processing should be done for this key event. See `IMContextExt::filter_keypress`.",724,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"move_child","","Updates the position of a child, as for `TextViewExt::add_child_in_window`. ## `child` child widget already added to the text view ## `xpos` new X position in window coordinates ## `ypos` new Y position in window coordinates",724,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"move_mark_onscreen","","Moves a mark within the buffer so that it's located within the currently-visible text area. ## `mark` a `TextMark`",724,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":{"name":"bool"}}],[10,"move_visually","","Move the iterator a given number of characters visually, treating it as the strong cursor position. If `count` is positive, then the new strong cursor position will be `count` positions to the right of the old cursor position. If `count` is negative then the new strong cursor position will be `count` positions to the left of the old cursor position.",724,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"place_cursor_onscreen","","Moves the cursor to the currently visible region of the buffer, it it isn’t there already.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"reset_cursor_blink","","Ensures that the cursor is shown (i.e. not in an 'off' blink interval) and resets the time that it will stay blinking (or visible, in case blinking is disabled).",724,{"inputs":[{"name":"self"}],"output":null}],[10,"reset_im_context","","Reset the input method context of the text view if needed.",724,{"inputs":[{"name":"self"}],"output":null}],[10,"scroll_mark_onscreen","","Scrolls `self` the minimum distance such that `mark` is contained within the visible area of the widget. ## `mark` a mark in the buffer for `self`",724,{"inputs":[{"name":"self"},{"name":"textmark"}],"output":null}],[10,"scroll_to_iter","","Scrolls `self` so that `iter` is on the screen in the position indicated by `xalign` and `yalign`. An alignment of 0.0 indicates left or top, 1.0 indicates right or bottom, 0.5 means center. If `use_align` is `false`, the text scrolls the minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size `within_margin`.",724,{"inputs":[{"name":"self"},{"name":"textiter"},{"name":"f64"},{"name":"bool"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[10,"scroll_to_mark","","Scrolls `self` so that `mark` is on the screen in the position indicated by `xalign` and `yalign`. An alignment of 0.0 indicates left or top, 1.0 indicates right or bottom, 0.5 means center. If `use_align` is `false`, the text scrolls the minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size `within_margin`. ## `mark` a `TextMark` ## `within_margin` margin as a [0.0,0.5) fraction of screen size ## `use_align` whether to use alignment arguments (if `false`, just  get the mark onscreen) ## `xalign` horizontal alignment of mark within visible area ## `yalign` vertical alignment of mark within visible area",724,{"inputs":[{"name":"self"},{"name":"textmark"},{"name":"f64"},{"name":"bool"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"set_accepts_tab","","Sets the behavior of the text widget when the Tab key is pressed. If `accepts_tab` is `true`, a tab character is inserted. If `accepts_tab` is `false` the keyboard focus is moved to the next widget in the focus chain. ## `accepts_tab` `true` if pressing the Tab key should insert a tab  character, `false`, if pressing the Tab key should move the  keyboard focus.",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_border_window_size","","Sets the width of `TextWindowType::Left` or `TextWindowType::Right`, or the height of `TextWindowType::Top` or `TextWindowType::Bottom`. Automatically destroys the corresponding window if the size is set to 0, and creates the window if the size is set to non-zero. This function can only be used for the “border windows”, and it won’t work with `TextWindowType::Widget`, `TextWindowType::Text`, or `TextWindowType::Private`. ## `type_` window to affect ## `size` width or height of the window",724,{"inputs":[{"name":"self"},{"name":"textwindowtype"},{"name":"i32"}],"output":null}],[10,"set_bottom_margin","","Sets the bottom margin for text in `self`.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_buffer","","Sets `buffer` as the buffer being displayed by `self`. The previous buffer displayed by the text view is unreferenced, and a reference is added to `buffer`. If you owned a reference to `buffer` before passing it to this function, you must remove that reference yourself; `TextView` will not “adopt” it. ## `buffer` a `TextBuffer`",724,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_cursor_visible","","Toggles whether the insertion point should be displayed. A buffer with no editable text probably shouldn’t have a visible cursor, so you may want to turn the cursor off.",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_editable","","Sets the default editability of the `TextView`. You can override this default setting with tags in the buffer, using the “editable” attribute of tags. ## `setting` whether it’s editable",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_indent","","Sets the default indentation for paragraphs in `self`. Tags in the buffer may override the default. ## `indent` indentation in pixels",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_input_hints","","Sets the `TextView:input-hints` property, which allows input methods to fine-tune their behaviour.",724,{"inputs":[{"name":"self"},{"name":"inputhints"}],"output":null}],[10,"set_input_purpose","","Sets the `TextView:input-purpose` property which can be used by on-screen keyboards and other input methods to adjust their behaviour.",724,{"inputs":[{"name":"self"},{"name":"inputpurpose"}],"output":null}],[10,"set_justification","","Sets the default justification of text in `self`. Tags in the view’s buffer may override the default. ## `justification` justification",724,{"inputs":[{"name":"self"},{"name":"justification"}],"output":null}],[10,"set_left_margin","","Sets the default left margin for text in `self`. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_monospace","","Sets the `TextView:monospace` property, which indicates that the text view should use monospace fonts.",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_overwrite","","Changes the `TextView` overwrite mode. ## `overwrite` `true` to turn on overwrite mode, `false` to turn it off",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_pixels_above_lines","","Sets the default number of blank pixels above paragraphs in `self`. Tags in the buffer for `self` may override the defaults. ## `pixels_above_lines` pixels above paragraphs",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_pixels_below_lines","","Sets the default number of pixels of blank space to put below paragraphs in `self`. May be overridden by tags applied to `self`’s buffer. ## `pixels_below_lines` pixels below paragraphs",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_pixels_inside_wrap","","Sets the default number of pixels of blank space to leave between display/wrapped lines within a paragraph. May be overridden by tags in `self`’s buffer. ## `pixels_inside_wrap` default number of pixels between wrapped lines",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_right_margin","","Sets the default right margin for text in the text view. Tags in the buffer may override the default.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tabs","","Sets the default tab stops for paragraphs in `self`. Tags in the buffer may override the default. ## `tabs` tabs as a `pango::TabArray`",724,{"inputs":[{"name":"self"},{"name":"tabarray"}],"output":null}],[10,"set_top_margin","","Sets the top margin for text in `self`.",724,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_wrap_mode","","Sets the line wrapping for the view. ## `wrap_mode` a `WrapMode`",724,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":null}],[10,"starts_display_line","","Determines whether `iter` is at the start of a display line. See `TextViewExt::forward_display_line` for an explanation of display lines vs. paragraphs. ## `iter` a `TextIter`",724,{"inputs":[{"name":"self"},{"name":"textiter"}],"output":{"name":"bool"}}],[10,"window_to_buffer_coords","","Converts coordinates on the window identified by `win` to buffer coordinates, storing the result in (`buffer_x`,`buffer_y`).",724,null],[10,"get_property_im_module","","",724,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_property_im_module","","",724,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[10,"get_property_monospace","","",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_monospace","","",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_populate_all","","",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_populate_all","","",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_backspace","","The ::backspace signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user asks for it.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_backspace","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_copy_clipboard","","The ::copy-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to copy the selection to the clipboard.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_copy_clipboard","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_cut_clipboard","","The ::cut-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to cut the selection to the clipboard.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_cut_clipboard","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_delete_from_cursor","","The ::delete-from-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a text deletion.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_delete_from_cursor","","",724,{"inputs":[{"name":"self"},{"name":"deletetype"},{"name":"i32"}],"output":null}],[10,"connect_extend_selection","","The ::extend-selection signal is emitted when the selection needs to be extended at `location`.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_at_cursor","","The ::insert-at-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates the insertion of a fixed string at the cursor.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_insert_at_cursor","","",724,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_insert_emoji","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_insert_emoji","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_move_cursor","","The ::move-cursor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates a cursor movement. If the cursor is not visible in `text_view`, this signal causes the viewport to be moved instead.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",724,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"},{"name":"bool"}],"output":null}],[10,"connect_move_viewport","","The ::move-viewport signal is a [keybinding signal][`BindingSignal`] which can be bound to key combinations to allow the user to move the viewport, i.e. change what part of the text view is visible in a containing scrolled window.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_viewport","","",724,{"inputs":[{"name":"self"},{"name":"scrollstep"},{"name":"i32"}],"output":null}],[10,"connect_paste_clipboard","","The ::paste-clipboard signal is a [keybinding signal][`BindingSignal`] which gets emitted to paste the contents of the clipboard into the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_paste_clipboard","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_populate_popup","","The ::populate-popup signal gets emitted before showing the context menu of the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_preedit_changed","","If an input method is used, the typed text will not immediately be committed to the buffer. So if you are interested in the text, connect to this signal.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_preedit_changed","","",724,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"connect_select_all","","The ::select-all signal is a [keybinding signal][`BindingSignal`] which gets emitted to select or unselect the complete contents of the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",724,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_set_anchor","","The ::set-anchor signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user initiates setting the \"anchor\" mark. The \"anchor\" mark gets placed at the same position as the \"insert\" mark.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_set_anchor","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_toggle_cursor_visible","","The ::toggle-cursor-visible signal is a [keybinding signal][`BindingSignal`] which gets emitted to toggle the `TextView:cursor-visible` property.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_visible","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_toggle_overwrite","","The ::toggle-overwrite signal is a [keybinding signal][`BindingSignal`] which gets emitted to toggle the overwrite mode of the text view.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_overwrite","","",724,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_accepts_tab_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_bottom_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_buffer_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cursor_visible_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_editable_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_im_module_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_indent_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_hints_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_input_purpose_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_justification_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_left_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_monospace_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_overwrite_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_above_lines_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_below_lines_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_pixels_inside_wrap_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_populate_all_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_right_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tabs_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_top_margin_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_wrap_mode_notify","","",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToggleButtonExt","","Trait containing all `ToggleButton` methods.",null,null],[10,"get_active","","Queries a `ToggleButton` and returns its current state. Returns `true` if the toggle button is pressed in and `false` if it is raised.",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_inconsistent","","Gets the value set by `ToggleButtonExt::set_inconsistent`.",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mode","","Retrieves whether the button is displayed as a separate indicator and label. See `ToggleButtonExt::set_mode`.",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Sets the status of the toggle button. Set to `true` if you want the `ToggleButton` to be “pressed in”, and `false` to raise it. This action causes the `ToggleButton::toggled` signal and the `Button::clicked` signal to be emitted. ## `is_active` `true` or `false`.",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_inconsistent","","If the user has selected a range of elements (such as some text or spreadsheet cells) that are affected by a toggle button, and the current values in that range are inconsistent, you may want to display the toggle in an “in between” state. This function turns on “in between” display. Normally you would turn off the inconsistent state again if the user toggles the toggle button. This has to be done manually, `ToggleButtonExt::set_inconsistent` only affects visual appearance, it doesn’t affect the semantics of the button. ## `setting` `true` if state is inconsistent",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mode","","Sets whether the button is displayed as a separate indicator and label. You can call this function on a checkbutton or a radiobutton with `draw_indicator` = `false` to make the button look like a normal button.",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toggled","","Emits the `ToggleButton::toggled` signal on the `ToggleButton`. There is no good reason for an application ever to call this function.",725,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_draw_indicator","","",725,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_draw_indicator","","",725,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_toggled","","Should be connected if you wish to perform an action whenever the `ToggleButton`'s state is changed.",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_draw_indicator_notify","","",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_inconsistent_notify","","",725,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToggleToolButtonExt","","Trait containing all `ToggleToolButton` methods.",null,null],[10,"get_active","","Queries a `ToggleToolButton` and returns its current state. Returns `true` if the toggle button is pressed in and `false` if it is raised.",726,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_active","","Sets the status of the toggle tool button. Set to `true` if you want the `ToggleButton` to be “pressed in”, and `false` to raise it. This action causes the toggled signal to be emitted. ## `is_active` whether `self` should be active",726,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_toggled","","Emitted whenever the toggle tool button changes state.",726,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_active_notify","","",726,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolButtonExt","","Trait containing all `ToolButton` methods.",null,null],[10,"get_icon_name","","Returns the name of the themed icon for the tool button, see `ToolButtonExt::set_icon_name`.",727,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_icon_widget","","Return the widget used as icon widget on `self`. See `ToolButtonExt::set_icon_widget`.",727,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_label","","Returns the label used by the tool button, or `None` if the tool button doesn’t have a label. or uses a the label from a stock item. The returned string is owned by GTK+, and must not be modified or freed.",727,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_widget","","Returns the widget used as label on `self`. See `ToolButtonExt::set_label_widget`.",727,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_stock_id","","Returns the name of the stock item. See `ToolButtonExt::set_stock_id`. The returned string is owned by GTK+ and must not be freed or modifed.",727,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_use_underline","","Returns whether underscores in the label property are used as mnemonics on menu items on the overflow menu. See `ToolButtonExt::set_use_underline`.",727,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_icon_name","","Sets the icon for the tool button from a named themed icon. See the docs for `IconTheme` for more details. The `ToolButton:icon-name` property only has an effect if not overridden by non-`None` `ToolButton:label-widget`, `ToolButton:icon-widget` and `ToolButton:stock-id` properties. ## `icon_name` the name of the themed icon",727,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_widget","","Sets `icon` as the widget used as icon on `self`. If `icon_widget` is `None` the icon is determined by the `ToolButton:stock-id` property. If the `ToolButton:stock-id` property is also `None`, `self` will not have an icon. ## `icon_widget` the widget used as icon, or `None`",727,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_label","","Sets `label` as the label used for the tool button. The `ToolButton:label` property only has an effect if not overridden by a non-`None` `ToolButton:label-widget` property. If both the `ToolButton:label-widget` and `ToolButton:label` properties are `None`, the label is determined by the `ToolButton:stock-id` property. If the `ToolButton:stock-id` property is also `None`, `self` will not have a label. ## `label` a string that will be used as label, or `None`.",727,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_label_widget","","Sets `label_widget` as the widget that will be used as the label for `self`. If `label_widget` is `None` the `ToolButton:label` property is used as label. If `ToolButton:label` is also `None`, the label in the stock item determined by the `ToolButton:stock-id` property is used as label. If `ToolButton:stock-id` is also `None`, `self` does not have a label. ## `label_widget` the widget used as label, or `None`",727,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_stock_id","","Sets the name of the stock item. See `ToolButton::new_from_stock`. The stock_id property only has an effect if not overridden by non-`None` `ToolButton:label-widget` and `ToolButton:icon-widget` properties.",727,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_use_underline","","If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu. For example, if the label property is “_Open” and `use_underline` is `true`, the label on the tool button will be “Open” and the item on the overflow menu will have an underlined “O”.",727,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_clicked","","This signal is emitted when the tool button is clicked with the mouse or activated with the keyboard.",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_clicked","","",727,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_property_icon_name_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_widget_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_stock_id_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_use_underline_notify","","",727,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolItemExt","","Trait containing all `ToolItem` methods.",null,null],[10,"get_ellipsize_mode","","Returns the ellipsize mode used for `self`. Custom subclasses of `ToolItem` should call this function to find out how text should be ellipsized.",728,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_expand","","Returns whether `self` is allocated extra space. See `ToolItemExt::set_expand`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_homogeneous","","Returns whether `self` is the same size as other homogeneous items. See `ToolItemExt::set_homogeneous`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon_size","","Returns the icon size used for `self`. Custom subclasses of `ToolItem` should call this function to find out what size icons they should use.",728,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_is_important","","Returns whether `self` is considered important. See `ToolItemExt::set_is_important`",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_orientation","","Returns the orientation used for `self`. Custom subclasses of `ToolItem` should call this function to find out what size icons they should use.",728,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_proxy_menu_item","","If `menu_item_id` matches the string passed to `ToolItemExt::set_proxy_menu_item` return the corresponding `MenuItem`.",728,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_relief_style","","Returns the relief style of `self`. See `ButtonExt::set_relief`. Custom subclasses of `ToolItem` should call this function in the handler of the `ToolItem::toolbar_reconfigured` signal to find out the relief style of buttons.",728,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_text_alignment","","Returns the text alignment used for `self`. Custom subclasses of `ToolItem` should call this function to find out how text should be aligned.",728,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_text_orientation","","Returns the text orientation used for `self`. Custom subclasses of `ToolItem` should call this function to find out how text should be orientated.",728,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_text_size_group","","Returns the size group used for labels in `self`. Custom subclasses of `ToolItem` should call this function and use the size group for labels.",728,{"inputs":[{"name":"self"}],"output":{"generics":["sizegroup"],"name":"option"}}],[10,"get_toolbar_style","","Returns the toolbar style used for `self`. Custom subclasses of `ToolItem` should call this function in the handler of the `ToolItem`::toolbar_reconfigured signal to find out in what style the toolbar is displayed and change themselves accordingly",728,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"get_use_drag_window","","Returns whether `self` has a drag window. See `ToolItemExt::set_use_drag_window`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_horizontal","","Returns whether the `self` is visible on toolbars that are docked horizontally.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible_vertical","","Returns whether `self` is visible when the toolbar is docked vertically. See `ToolItemExt::set_visible_vertical`.",728,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"rebuild_menu","","Calling this function signals to the toolbar that the overflow menu item for `self` has changed. If the overflow menu is visible when this function it called, the menu will be rebuilt.",728,{"inputs":[{"name":"self"}],"output":null}],[10,"retrieve_proxy_menu_item","","Returns the `MenuItem` that was last set by `ToolItemExt::set_proxy_menu_item`, ie. the `MenuItem` that is going to appear in the overflow menu.",728,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"set_expand","","Sets whether `self` is allocated extra space when there is more room on the toolbar then needed for the items. The effect is that the item gets bigger when the toolbar gets bigger and smaller when the toolbar gets smaller. ## `expand` Whether `self` is allocated extra space",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_homogeneous","","Sets whether `self` is to be allocated the same size as other homogeneous items. The effect is that all homogeneous items will have the same width as the widest of the items. ## `homogeneous` whether `self` is the same size as other homogeneous items",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_is_important","","Sets whether `self` should be considered important. The `ToolButton` class uses this property to determine whether to show or hide its label when the toolbar style is `ToolbarStyle::BothHoriz`. The result is that only tool buttons with the “is_important” property set have labels, an effect known as “priority text” ## `is_important` whether the tool item should be considered important",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_proxy_menu_item","","Sets the `MenuItem` used in the toolbar overflow menu. The `menu_item_id` is used to identify the caller of this function and should also be used with `ToolItemExt::get_proxy_menu_item`. ## `menu_item_id` a string used to identify `menu_item` ## `menu_item` a `MenuItem` to be used in the overflow menu",728,{"inputs":[{"name":"self"},{"name":"str"},{"name":"q"}],"output":null}],[10,"set_use_drag_window","","Sets whether `self` has a drag window. When `true` the toolitem can be used as a drag source through `Widget::drag_source_set`. When `self` has a drag window it will intercept all events, even those that would otherwise be sent to a child of `self`. ## `use_drag_window` Whether `self` has a drag window.",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_horizontal","","Sets whether `self` is visible when the toolbar is docked horizontally. ## `visible_horizontal` Whether `self` is visible when in horizontal mode",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible_vertical","","Sets whether `self` is visible when the toolbar is docked vertically. Some tool items, such as text entries, are too wide to be useful on a vertically docked toolbar. If `visible_vertical` is `false` `self` will not appear on toolbars that are docked vertically. ## `visible_vertical` whether `self` is visible when the toolbar is in vertical mode",728,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"toolbar_reconfigured","","Emits the signal `ToolItem::toolbar_reconfigured` on `self`. `Toolbar` and other `ToolShell` implementations use this function to notify children, when some aspect of their configuration changes.",728,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_create_menu_proxy","","This signal is emitted when the toolbar needs information from `tool_item` about whether the item should appear in the toolbar overflow menu. In response the tool item should either",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toolbar_reconfigured","","This signal is emitted when some property of the toolbar that the item is a child of changes. For custom subclasses of `ToolItem`, the default handler of this signal use the functions - `ToolShell::get_orientation` - `ToolShell::get_style` - `ToolShell::get_icon_size` - `ToolShell::get_relief_style` to find out what the toolbar should look like and change themselves accordingly.",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_important_notify","","",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_horizontal_notify","","",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_vertical_notify","","",728,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolItemGroupExt","","Trait containing all `ToolItemGroup` methods.",null,null],[10,"get_collapsed","","Gets whether `self` is collapsed or expanded.",729,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_drop_item","","Gets the tool item at position (x, y). ## `x` the x position ## `y` the y position",729,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"get_ellipsize","","Gets the ellipsization mode of `self`.",729,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_header_relief","","Gets the relief mode of the header button of `self`.",729,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_item_position","","Gets the position of `item` in `self` as index. ## `item` a `ToolItem`",729,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_label","","Gets the label of `self`.",729,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_label_widget","","Gets the label widget of `self`. See `ToolItemGroupExt::set_label_widget`.",729,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_n_items","","Gets the number of tool items in `self`.",729,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_nth_item","","Gets the tool item at `index` in group. ## `index` the index",729,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"insert","","Inserts `item` at `position` in the list of children of `self`. ## `item` the `ToolItem` to insert into `self` ## `position` the position of `item` in `self`, starting with 0.  The position -1 means end of list.",729,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_collapsed","","Sets whether the `self` should be collapsed or expanded. ## `collapsed` whether the `self` should be collapsed or expanded",729,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_ellipsize","","Sets the ellipsization mode which should be used by labels in `self`. ## `ellipsize` the `pango::EllipsizeMode` labels in `self` should use",729,{"inputs":[{"name":"self"},{"name":"ellipsizemode"}],"output":null}],[10,"set_header_relief","","Set the button relief of the group header. See `ButtonExt::set_relief` for details. ## `style` the `ReliefStyle`",729,{"inputs":[{"name":"self"},{"name":"reliefstyle"}],"output":null}],[10,"set_item_position","","Sets the position of `item` in the list of children of `self`. ## `item` the `ToolItem` to move to a new position, should  be a child of `self`. ## `position` the new position of `item` in `self`, starting with 0.  The position -1 means end of list.",729,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_label","","Sets the label of the tool item group. The label is displayed in the header of the group. ## `label` the new human-readable label of of the group",729,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_label_widget","","Sets the label of the tool item group. The label widget is displayed in the header of the group, in place of the usual label. ## `label_widget` the widget to be displayed in place of the usual label",729,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_item_expand","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_expand","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_fill","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_fill","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_homogeneous","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_homogeneous","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_new_row","","",729,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_new_row","","",729,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"connect_property_collapsed_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ellipsize_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_header_relief_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_label_widget_notify","","",729,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolPaletteExt","","Trait containing all `ToolPalette` methods.",null,null],[10,"add_drag_dest","","Sets `self` as drag source (see `ToolPaletteExt::set_drag_source`) and sets `widget` as a drag destination for drags from `self`. See `Widget::drag_dest_set`. ## `widget` a `Widget` which should be a drag destination for `self` ## `flags` the flags that specify what actions GTK+ should take for drops  on that widget ## `targets` the `ToolPaletteDragTargets` which the widget  should support ## `actions` the `GdkDragActions` which the widget should suppport",730,{"inputs":[{"name":"self"},{"name":"p"},{"name":"destdefaults"},{"name":"toolpalettedragtargets"},{"name":"dragaction"}],"output":null}],[10,"get_drag_item","","Get the dragged item from the selection. This could be a `ToolItem` or a `ToolItemGroup`. ## `selection` a `SelectionData`",730,{"inputs":[{"name":"self"},{"name":"selectiondata"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_drop_group","","Gets the group at position (x, y). ## `x` the x position ## `y` the y position",730,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["toolitemgroup"],"name":"option"}}],[10,"get_drop_item","","Gets the item at position (x, y). See `ToolPaletteExt::get_drop_group`. ## `x` the x position ## `y` the y position",730,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"get_exclusive","","Gets whether `group` is exclusive or not. See `ToolPaletteExt::set_exclusive`. ## `group` a `ToolItemGroup` which is a child of palette",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"}],"output":{"name":"bool"}}],[10,"get_expand","","Gets whether group should be given extra space. See `ToolPaletteExt::set_expand`. ## `group` a `ToolItemGroup` which is a child of palette",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"}],"output":{"name":"bool"}}],[10,"get_group_position","","Gets the position of `group` in `self` as index. See `ToolPaletteExt::set_group_position`. ## `group` a `ToolItemGroup`",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"}],"output":{"name":"i32"}}],[10,"get_icon_size","","Gets the size of icons in the tool palette. See `ToolPaletteExt::set_icon_size`.",730,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_style","","Gets the style (icons, text or both) of items in the tool palette.",730,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_drag_source","","Sets the tool palette as a drag source. Enables all groups and items in the tool palette as drag sources on button 1 and button 3 press with copy and move actions. See `Widget::drag_source_set`. ## `targets` the `ToolPaletteDragTargets`  which the widget should support",730,{"inputs":[{"name":"self"},{"name":"toolpalettedragtargets"}],"output":null}],[10,"set_exclusive","","Sets whether the group should be exclusive or not. If an exclusive group is expanded all other groups are collapsed. ## `group` a `ToolItemGroup` which is a child of palette ## `exclusive` whether the group should be exclusive or not",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"},{"name":"bool"}],"output":null}],[10,"set_expand","","Sets whether the group should be given extra space. ## `group` a `ToolItemGroup` which is a child of palette ## `expand` whether the group should be given extra space",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"},{"name":"bool"}],"output":null}],[10,"set_group_position","","Sets the position of the group as an index of the tool palette. If position is 0 the group will become the first child, if position is -1 it will become the last child. ## `group` a `ToolItemGroup` which is a child of palette ## `position` a new index for group",730,{"inputs":[{"name":"self"},{"name":"toolitemgroup"},{"name":"i32"}],"output":null}],[10,"set_icon_size","","Sets the size of icons in the tool palette. ## `icon_size` the `IconSize` that icons in the tool  palette shall have",730,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_style","","Sets the style (text, icons or both) of items in the tool palette. ## `style` the `ToolbarStyle` that items in the tool palette shall have",730,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"unset_icon_size","","Unsets the tool palette icon size set with `ToolPaletteExt::set_icon_size`, so that user preferences will be used to determine the icon size.",730,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_style","","Unsets a toolbar style set with `ToolPaletteExt::set_style`, so that user preferences will be used to determine the toolbar style.",730,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_icon_size_set","","",730,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_icon_size_set","","",730,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_toolbar_style","","",730,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_property_toolbar_style","","",730,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"connect_property_icon_size_notify","","",730,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_set_notify","","",730,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_toolbar_style_notify","","",730,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ToolShellExt","","Trait containing all `ToolShell` methods.",null,null],[10,"get_ellipsize_mode","","Retrieves the current ellipsize mode for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_ellipsize_mode` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"ellipsizemode"}}],[10,"get_icon_size","","Retrieves the icon size for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_icon_size` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_orientation","","Retrieves the current orientation for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_orientation` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_relief_style","","Returns the relief style of buttons on `self`. Tool items must not call this function directly, but rely on `ToolItemExt::get_relief_style` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"reliefstyle"}}],[10,"get_style","","Retrieves whether the tool shell has text, icons, or both. Tool items must not call this function directly, but rely on `ToolItemExt::get_toolbar_style` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"get_text_alignment","","Retrieves the current text alignment for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_text_alignment` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_text_orientation","","Retrieves the current text orientation for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_text_orientation` instead.",731,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[10,"get_text_size_group","","Retrieves the current text size group for the tool shell. Tool items must not call this function directly, but rely on `ToolItemExt::get_text_size_group` instead.",731,{"inputs":[{"name":"self"}],"output":{"generics":["sizegroup"],"name":"option"}}],[10,"rebuild_menu","","Calling this function signals the tool shell that the overflow menu item for tool items have changed. If there is an overflow menu and if it is visible when this function it called, the menu will be rebuilt.",731,{"inputs":[{"name":"self"}],"output":null}],[8,"ToolbarExt","","Trait containing all `Toolbar` methods.",null,null],[10,"get_drop_index","","Returns the position corresponding to the indicated point on `self`. This is useful when dragging items to the toolbar: this function returns the position a new item should be inserted.",732,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"get_icon_size","","Retrieves the icon size for the toolbar. See `ToolbarExt::set_icon_size`.",732,{"inputs":[{"name":"self"}],"output":{"name":"iconsize"}}],[10,"get_item_index","","Returns the position of `item` on the toolbar, starting from 0. It is an error if `item` is not a child of the toolbar. ## `item` a `ToolItem` that is a child of `self`",732,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_n_items","","Returns the number of items on the toolbar.",732,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_nth_item","","Returns the `n`'th item on `self`, or `None` if the toolbar does not contain an `n`'th item. ## `n` A position on the toolbar",732,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["toolitem"],"name":"option"}}],[10,"get_show_arrow","","Returns whether the toolbar has an overflow menu. See `ToolbarExt::set_show_arrow`.",732,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"insert","","Insert a `ToolItem` into the toolbar at position `pos`. If `pos` is 0 the item is prepended to the start of the toolbar. If `pos` is negative, the item is appended to the end of the toolbar. ## `item` a `ToolItem` ## `pos` the position of the new item",732,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_drop_highlight_item","","Highlights `self` to give an idea of what it would look like if `item` was added to `self` at the position indicated by `index_`. If `item` is `None`, highlighting is turned off. In that case `index_` is ignored.",732,{"inputs":[{"name":"self"},{"name":"q"},{"name":"i32"}],"output":null}],[10,"set_icon_size","","This function sets the size of stock icons in the toolbar. You can call it both before you add the icons and after they’ve been added. The size you set will override user preferences for the default icon size.",732,{"inputs":[{"name":"self"},{"name":"iconsize"}],"output":null}],[10,"set_show_arrow","","Sets whether to show an overflow menu when `self` doesn’t have room for all items on it. If `true`, items that there are not room are available through an overflow menu. ## `show_arrow` Whether to show an overflow menu",732,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_style","","Alters the view of `self` to display either icons only, text only, or both. ## `style` the new style for `self`.",732,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"unset_icon_size","","Unsets toolbar icon size set with `ToolbarExt::set_icon_size`, so that user preferences will be used to determine the icon size.",732,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_style","","Unsets a toolbar style set with `ToolbarExt::set_style`, so that user preferences will be used to determine the toolbar style.",732,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_icon_size_set","","",732,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_icon_size_set","","",732,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_toolbar_style","","",732,{"inputs":[{"name":"self"}],"output":{"name":"toolbarstyle"}}],[10,"set_property_toolbar_style","","",732,{"inputs":[{"name":"self"},{"name":"toolbarstyle"}],"output":null}],[10,"get_item_expand","","",732,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_expand","","",732,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"get_item_homogeneous","","",732,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"set_item_homogeneous","","",732,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[10,"connect_focus_home_or_end","","A keybinding signal used internally by GTK+. This signal can't be used in application code ## `focus_home` `true` if the first item should be focused",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_focus_home_or_end","","",732,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_orientation_changed","","Emitted when the orientation of the toolbar changes. ## `orientation` the new `Orientation` of the toolbar",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_popup_context_menu","","Emitted when the user right-clicks the toolbar or uses the keybinding to display a popup menu.",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_style_changed","","Emitted when the style of the toolbar changes. ## `style` the new `ToolbarStyle` of the toolbar",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_size_set_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_arrow_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_toolbar_style_notify","","",732,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TooltipExt","","Trait containing all `Tooltip` methods.",null,null],[10,"set_custom","","Replaces the widget packed into the tooltip with `custom_widget`. `custom_widget` does not get destroyed when the tooltip goes away. By default a box with a `Image` and `Label` is embedded in the tooltip, which can be configured using `TooltipExt::set_markup` and `TooltipExt::set_icon`. ## `custom_widget` a `Widget`, or `None` to unset the old custom widget.",733,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_icon","","Sets the icon of the tooltip (which is in front of the text) to be `pixbuf`. If `pixbuf` is `None`, the image will be hidden. ## `pixbuf` a `gdk_pixbuf::Pixbuf`, or `None`",733,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_from_gicon","","Sets the icon of the tooltip (which is in front of the text) to be the icon indicated by `gicon` with the size indicated by `size`. If `gicon` is `None`, the image will be hidden. ## `gicon` a `gio::Icon` representing the icon, or `None` ## `size` a stock icon size (`IconSize`)",733,{"inputs":[{"name":"self"},{"name":"q"},{"name":"i32"}],"output":null}],[10,"set_icon_from_icon_name","","Sets the icon of the tooltip (which is in front of the text) to be the icon indicated by `icon_name` with the size indicated by `size`. If `icon_name` is `None`, the image will be hidden. ## `icon_name` an icon name, or `None` ## `size` a stock icon size (`IconSize`)",733,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_icon_from_stock","","Sets the icon of the tooltip (which is in front of the text) to be the stock item indicated by `stock_id` with the size indicated by `size`. If `stock_id` is `None`, the image will be hidden.",733,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":null}],[10,"set_markup","","Sets the text of the tooltip to be `markup`, which is marked up with the [Pango text markup language][PangoMarkupFormat]. If `markup` is `None`, the label will be hidden. ## `markup` a markup string (see [Pango markup format][PangoMarkupFormat]) or `None`",733,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_text","","Sets the text of the tooltip to be `text`. If `text` is `None`, the label will be hidden. See also `TooltipExt::set_markup`. ## `text` a text string or `None`",733,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tip_area","","Sets the area of the widget, where the contents of this tooltip apply, to be `rect` (in widget coordinates). This is especially useful for properly setting tooltips on `TreeView` rows and cells, `GtkIconViews`, etc.",733,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":null}],[8,"TreeModelExt","","Trait containing all `TreeModel` methods.",null,null],[10,"get_column_type","","Returns the type of the column. ## `index_` the column index",734,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"type"}}],[10,"get_flags","","Returns a set of flags supported by this interface.",734,{"inputs":[{"name":"self"}],"output":{"name":"treemodelflags"}}],[10,"get_iter","","Sets `iter` to a valid iterator pointing to `path`. If `path` does not exist, `iter` is set to an invalid iterator and `false` is returned. ## `iter` the uninitialized `TreeIter`-struct ## `path` the `TreePath`-struct",734,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_iter_first","","Initializes `iter` with the first iterator in the tree (the one at the path \"0\") and returns `true`. Returns `false` if the tree is empty. ## `iter` the uninitialized `TreeIter`-struct",734,{"inputs":[{"name":"self"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_iter_from_string","","Sets `iter` to a valid iterator pointing to `path_string`, if it exists. Otherwise, `iter` is left invalid and `false` is returned. ## `iter` an uninitialized `TreeIter`-struct ## `path_string` a string representation of a `TreePath`-struct",734,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"get_n_columns","","Returns the number of columns supported by `self`.",734,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_path","","Returns a newly-created `TreePath`-struct referenced by `iter`.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_string_from_iter","","Generates a string representation of the iter.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_value","","Initializes and sets `value` to that at `column`.",734,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"i32"}],"output":{"name":"value"}}],[10,"iter_children","","Sets `iter` to point to the first child of `parent`.",734,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"iter_has_child","","Returns `true` if `iter` has children, `false` otherwise. ## `iter` the `TreeIter`-struct to test for children",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"iter_n_children","","Returns the number of children that `iter` has.",734,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"iter_next","","Sets `iter` to point to the node following it at the current level.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"iter_nth_child","","Sets `iter` to be the child of `parent`, using the given index.",734,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"iter_parent","","Sets `iter` to be the parent of `child`.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"iter_previous","","Sets `iter` to point to the previous node at the current level.",734,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"row_changed","","Emits the `TreeModel::row-changed` signal on `self`. ## `path` a `TreePath`-struct pointing to the changed row ## `iter` a valid `TreeIter`-struct pointing to the changed row",734,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeiter"}],"output":null}],[10,"row_deleted","","Emits the `TreeModel::row-deleted` signal on `self`.",734,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"row_has_child_toggled","","Emits the `TreeModel::row-has-child-toggled` signal on `self`. This should be called by models after the child state of a node changes. ## `path` a `TreePath`-struct pointing to the changed row ## `iter` a valid `TreeIter`-struct pointing to the changed row",734,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeiter"}],"output":null}],[10,"row_inserted","","Emits the `TreeModel::row-inserted` signal on `self`. ## `path` a `TreePath`-struct pointing to the inserted row ## `iter` a valid `TreeIter`-struct pointing to the inserted row",734,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeiter"}],"output":null}],[10,"rows_reordered_with_length","","Emits the `TreeModel::rows-reordered` signal on `self`.",734,null],[10,"sort_new_with_model","","Creates a new `TreeModel`, with `self` as the child model.",734,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"connect_row_changed","","This signal is emitted when a row in the model has changed. ## `path` a `TreePath`-struct identifying the changed row ## `iter` a valid `TreeIter`-struct pointing to the changed row",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_deleted","","This signal is emitted when a row has been deleted.",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_has_child_toggled","","This signal is emitted when a row has gotten the first child row or lost its last child row. ## `path` a `TreePath`-struct identifying the row ## `iter` a valid `TreeIter`-struct pointing to the row",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_inserted","","This signal is emitted when a new row has been inserted in the model.",734,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeModelFilterExt","","Trait containing all `TreeModelFilter` methods.",null,null],[10,"clear_cache","","This function should almost never be called. It clears the `self` of any cached iterators that haven’t been reffed with `TreeModel::ref_node`. This might be useful if the child model being filtered is static (and doesn’t change often) and there has been a lot of unreffed access to nodes. As a side effect of this function, all unreffed iters will be invalid.",735,{"inputs":[{"name":"self"}],"output":null}],[10,"convert_child_iter_to_iter","","Sets `filter_iter` to point to the row in `self` that corresponds to the row pointed at by `child_iter`. If `filter_iter` was not set, `false` is returned. ## `filter_iter` An uninitialized `TreeIter`. ## `child_iter` A valid `TreeIter` pointing to a row on the child model.",735,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"generics":["treeiter"],"name":"option"}}],[10,"convert_child_path_to_path","","Converts `child_path` to a path relative to `self`. That is, `child_path` points to a path in the child model. The rerturned path will point to the same row in the filtered model. If `child_path` isn’t a valid path on the child model or points to a row which is not visible in `self`, then `None` is returned. ## `child_path` A `TreePath` to convert.",735,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"convert_iter_to_child_iter","","Sets `child_iter` to point to the row pointed to by `filter_iter`. ## `child_iter` An uninitialized `TreeIter`. ## `filter_iter` A valid `TreeIter` pointing to a row on `self`.",735,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"treeiter"}}],[10,"convert_path_to_child_path","","Converts `filter_path` to a path on the child model of `self`. That is, `filter_path` points to a location in `self`. The returned path will point to the same location in the model not being filtered. If `filter_path` does not point to a location in the child model, `None` is returned. ## `filter_path` A `TreePath` to convert.",735,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["treepath"],"name":"option"}}],[10,"get_model","","Returns a pointer to the child model of `self`.",735,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"refilter","","Emits ::row_changed for each row in the child model, which causes the filter to re-evaluate whether a row is visible or not.",735,{"inputs":[{"name":"self"}],"output":null}],[10,"set_visible_column","","Sets `column` of the child_model to be the column where `self` should look for visibility information. `columns` should be a column of type `G_TYPE_BOOLEAN`, where `true` means that a row is visible, and `false` if not.",735,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_child_model","","",735,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"connect_property_child_model_notify","","",735,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeSelectionExt","","Trait containing all `TreeSelection` methods.",null,null],[10,"count_selected_rows","","Returns the number of rows that have been selected in `tree`.",736,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_mode","","Gets the selection mode for `self`. See `TreeSelectionExt::set_mode`.",736,{"inputs":[{"name":"self"}],"output":{"name":"selectionmode"}}],[10,"get_selected","","Sets `iter` to the currently selected node if `self` is set to `SelectionMode::Single` or `SelectionMode::Browse`. `iter` may be NULL if you just want to test if `self` has any selected nodes. `model` is filled with the current model as a convenience. This function will not work if you use `self` is `SelectionMode::Multiple`. ## `model` A pointer to set to the `TreeModel`, or NULL. ## `iter` The `TreeIter`, or NULL.",736,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_selected_rows","","Creates a list of path of all selected rows. Additionally, if you are planning on modifying the model after calling this function, you may want to convert the returned list into a list of `GtkTreeRowReferences`. To do this, you can use `TreeRowReference::new`.",736,null],[10,"get_tree_view","","Returns the tree view associated with `self`.",736,{"inputs":[{"name":"self"}],"output":{"generics":["treeview"],"name":"option"}}],[10,"iter_is_selected","","Returns `true` if the row at `iter` is currently selected. ## `iter` A valid `TreeIter`",736,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"path_is_selected","","Returns `true` if the row pointed to by `path` is currently selected. If `path` does not point to a valid location, `false` is returned ## `path` A `TreePath` to check selection on.",736,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"select_all","","Selects all the nodes. `self` must be set to `SelectionMode::Multiple` mode.",736,{"inputs":[{"name":"self"}],"output":null}],[10,"select_iter","","Selects the specified iterator. ## `iter` The `TreeIter` to be selected.",736,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":null}],[10,"select_path","","Select the row at `path`. ## `path` The `TreePath` to be selected.",736,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"select_range","","Selects a range of nodes, determined by `start_path` and `end_path` inclusive. `self` must be set to `SelectionMode::Multiple` mode. ## `start_path` The initial node of the range. ## `end_path` The final node of the range.",736,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treepath"}],"output":null}],[10,"set_mode","","Sets the selection mode of the `self`. If the previous type was `SelectionMode::Multiple`, then the anchor is kept selected, if it was previously selected. ## `type_` The selection mode",736,{"inputs":[{"name":"self"},{"name":"selectionmode"}],"output":null}],[10,"unselect_all","","Unselects all the nodes.",736,{"inputs":[{"name":"self"}],"output":null}],[10,"unselect_iter","","Unselects the specified iterator. ## `iter` The `TreeIter` to be unselected.",736,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":null}],[10,"unselect_path","","Unselects the row at `path`. ## `path` The `TreePath` to be unselected.",736,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"unselect_range","","Unselects a range of nodes, determined by `start_path` and `end_path` inclusive. ## `start_path` The initial node of the range. ## `end_path` The initial node of the range.",736,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treepath"}],"output":null}],[10,"connect_changed","","Emitted whenever the selection has (possibly) changed. Please note that this signal is mostly a hint. It may only be emitted once when a range of rows are selected, and it may occasionally be emitted when nothing has happened.",736,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mode_notify","","",736,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeSortableExt","","Trait containing all `TreeSortable` methods.",null,null],[10,"has_default_sort_func","","Returns `true` if the model has a default sort function. This is used primarily by `GtkTreeViewColumns` in order to determine if a model can go back to the default state, or not.",737,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"sort_column_changed","","Emits a `TreeSortable::sort-column-changed` signal on `self`.",737,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_sort_column_changed","","The ::sort-column-changed signal is emitted when the sort column or sort order of `sortable` is changed. The signal is emitted before the contents of `sortable` are resorted.",737,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeStoreExt","","Trait containing all `TreeStore` methods.",null,null],[10,"append","","Appends a new row to `self`. If `parent` is non-`None`, then it will append the new row after the last child of `parent`, otherwise it will append a row to the top level. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `TreeStoreExt::set` or `TreeStore::set_value`. ## `iter` An unset `TreeIter` to set to the appended row ## `parent` A valid `TreeIter`, or `None`",738,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"clear","","Removes all rows from `self`",738,{"inputs":[{"name":"self"}],"output":null}],[10,"insert","","Creates a new row at `position`. If parent is non-`None`, then the row will be made a child of `parent`. Otherwise, the row will be created at the toplevel. If `position` is -1 or is larger than the number of rows at that level, then the new row will be inserted to the end of the list. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `TreeStoreExt::set` or `TreeStore::set_value`. ## `iter` An unset `TreeIter` to set to the new row ## `parent` A valid `TreeIter`, or `None` ## `position` position to insert the new row, or -1 for last",738,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"}],"output":{"name":"treeiter"}}],[10,"insert_after","","Inserts a new row after `sibling`. If `sibling` is `None`, then the row will be prepended to `parent` ’s children. If `parent` and `sibling` are `None`, then the row will be prepended to the toplevel. If both `sibling` and `parent` are set, then `parent` must be the parent of `sibling`. When `sibling` is set, `parent` is optional.",738,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"treeiter"}}],[10,"insert_before","","Inserts a new row before `sibling`. If `sibling` is `None`, then the row will be appended to `parent` ’s children. If `parent` and `sibling` are `None`, then the row will be appended to the toplevel. If both `sibling` and `parent` are set, then `parent` must be the parent of `sibling`. When `sibling` is set, `parent` is optional.",738,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"treeiter"}}],[10,"is_ancestor","","Returns `true` if `iter` is an ancestor of `descendant`. That is, `iter` is the parent (or grandparent or great-grandparent) of `descendant`. ## `iter` A valid `TreeIter` ## `descendant` A valid `TreeIter`",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"iter_depth","","Returns the depth of `iter`. This will be 0 for anything on the root level, 1 for anything down a level, etc. ## `iter` A valid `TreeIter`",738,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"i32"}}],[10,"iter_is_valid","","WARNING: This function is slow. Only use it for debugging and/or testing purposes.",738,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"move_after","","Moves `iter` in `self` to the position after `position`. `iter` and `position` should be in the same level. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the start of the level. ## `iter` A `TreeIter`. ## `position` A `TreeIter`.",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"move_before","","Moves `iter` in `self` to the position before `position`. `iter` and `position` should be in the same level. Note that this function only works with unsorted stores. If `position` is `None`, `iter` will be moved to the end of the level. ## `iter` A `TreeIter`. ## `position` A `TreeIter` or `None`.",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"p"}],"output":null}],[10,"prepend","","Prepends a new row to `self`. If `parent` is non-`None`, then it will prepend the new row before the first child of `parent`, otherwise it will prepend a row to the top level. `iter` will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call `TreeStoreExt::set` or `TreeStore::set_value`. ## `iter` An unset `TreeIter` to set to the prepended row ## `parent` A valid `TreeIter`, or `None`",738,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"treeiter"}}],[10,"remove","","Removes `iter` from `self`. After being removed, `iter` is set to the next valid row at that level, or invalidated if it previously pointed to the last one. ## `iter` A valid `TreeIter`",738,{"inputs":[{"name":"self"},{"name":"treeiter"}],"output":{"name":"bool"}}],[10,"swap","","Swaps `a` and `b` in the same level of `self`. Note that this function only works with unsorted stores. ## `a` A `TreeIter`. ## `b` Another `TreeIter`.",738,{"inputs":[{"name":"self"},{"name":"treeiter"},{"name":"treeiter"}],"output":null}],[8,"TreeViewExt","","Trait containing all `TreeView` methods.",null,null],[10,"append_column","","Appends `column` to the list of columns. If `self` has “fixed_height” mode enabled, then `column` must have its “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED. ## `column` The `TreeViewColumn` to add.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"}],"output":{"name":"i32"}}],[10,"collapse_all","","Recursively collapses all visible, expanded nodes in `self`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"collapse_row","","Collapses a row (hides its child rows, if they exist). ## `path` path to a row in the `self`",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"columns_autosize","","Resizes all columns to their optimal width. Only works after the treeview has been realized.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"convert_bin_window_to_tree_coords","","Converts bin_window coordinates to coordinates for the tree (the full scrollable area of the tree). ## `bx` X coordinate relative to bin_window ## `by` Y coordinate relative to bin_window ## `tx` return location for tree X coordinate ## `ty` return location for tree Y coordinate",739,null],[10,"convert_bin_window_to_widget_coords","","Converts bin_window coordinates (see `TreeViewExt::get_bin_window`) to widget relative coordinates. ## `bx` bin_window X coordinate ## `by` bin_window Y coordinate ## `wx` return location for widget X coordinate ## `wy` return location for widget Y coordinate",739,null],[10,"convert_tree_to_bin_window_coords","","Converts tree coordinates (coordinates in full scrollable area of the tree) to bin_window coordinates. ## `tx` tree X coordinate ## `ty` tree Y coordinate ## `bx` return location for X coordinate relative to bin_window ## `by` return location for Y coordinate relative to bin_window",739,null],[10,"convert_tree_to_widget_coords","","Converts tree coordinates (coordinates in full scrollable area of the tree) to widget coordinates. ## `tx` X coordinate relative to the tree ## `ty` Y coordinate relative to the tree ## `wx` return location for widget X coordinate ## `wy` return location for widget Y coordinate",739,null],[10,"convert_widget_to_bin_window_coords","","Converts widget coordinates to coordinates for the bin_window (see `TreeViewExt::get_bin_window`). ## `wx` X coordinate relative to the widget ## `wy` Y coordinate relative to the widget ## `bx` return location for bin_window X coordinate ## `by` return location for bin_window Y coordinate",739,null],[10,"convert_widget_to_tree_coords","","Converts widget coordinates to coordinates for the tree (the full scrollable area of the tree). ## `wx` X coordinate relative to the widget ## `wy` Y coordinate relative to the widget ## `tx` return location for tree X coordinate ## `ty` return location for tree Y coordinate",739,null],[10,"create_row_drag_icon","","Creates a `cairo::Surface` representation of the row at `path`. This image is used for a drag icon. ## `path` a `TreePath` in `self`",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"generics":["surface"],"name":"option"}}],[10,"expand_all","","Recursively expands all nodes in the `self`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"expand_row","","Opens the row so its children are visible. ## `path` path to a row ## `open_all` whether to recursively expand, or just expand immediate children",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"expand_to_path","","Expands the row at `path`. This will also expand all parent rows of `path` as necessary. ## `path` path to a row.",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":null}],[10,"get_activate_on_single_click","","Gets the setting set by `TreeViewExt::set_activate_on_single_click`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_background_area","","Fills the bounding rectangle in bin_window coordinates for the cell at the row specified by `path` and the column specified by `column`. If `path` is `None`, or points to a node not found in the tree, the `y` and `height` fields of the rectangle will be filled with 0. If `column` is `None`, the `x` and `width` fields will be filled with 0. The returned rectangle is equivalent to the `background_area` passed to `CellRendererExt::render`. These background areas tile to cover the entire bin window. Contrast with the `cell_area`, returned by `TreeViewExt::get_cell_area`, which returns only the cell itself, excluding surrounding borders and the tree expander area. ## `path` a `TreePath` for the row, or `None` to get only horizontal coordinates ## `column` a `TreeViewColumn` for the column, or `None` to get only vertical coordiantes ## `rect` rectangle to fill with cell background rect",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"rectangle"}}],[10,"get_bin_window","","Returns the window that `self` renders to. This is used primarily to compare to `event->window` to confirm that the event on `self` is on the right window.",739,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_cell_area","","Fills the bounding rectangle in bin_window coordinates for the cell at the row specified by `path` and the column specified by `column`. If `path` is `None`, or points to a path not currently displayed, the `y` and `height` fields of the rectangle will be filled with 0. If `column` is `None`, the `x` and `width` fields will be filled with 0. The sum of all cell rects does not cover the entire tree; there are extra pixels in between rows, for example. The returned rectangle is equivalent to the `cell_area` passed to `CellRendererExt::render`. This function is only valid if `self` is realized. ## `path` a `TreePath` for the row, or `None` to get only horizontal coordinates ## `column` a `TreeViewColumn` for the column, or `None` to get only vertical coordinates ## `rect` rectangle to fill with cell rect",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"rectangle"}}],[10,"get_column","","Gets the `TreeViewColumn` at the given position in the `tree_view`. ## `n` The position of the column, counting from 0.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["treeviewcolumn"],"name":"option"}}],[10,"get_columns","","Returns a `glib::List` of all the `TreeViewColumn` s currently in `self`. The returned list must be freed with g_list_free ().",739,{"inputs":[{"name":"self"}],"output":{"generics":["treeviewcolumn"],"name":"vec"}}],[10,"get_cursor","","Fills in `path` and `focus_column` with the current path and focus column. If the cursor isn’t currently set, then *`path` will be `None`. If no column currently has focus, then *`focus_column` will be `None`.",739,null],[10,"get_dest_row_at_pos","","Determines the destination row for a given position. `drag_x` and `drag_y` are expected to be in widget coordinates. This function is only meaningful if `self` is realized. Therefore this function will always return `false` if `self` is not realized or does not have a model. ## `drag_x` the position to determine the destination row for ## `drag_y` the position to determine the destination row for ## `path` Return location for the path of  the highlighted row, or `None`. ## `pos` Return location for the drop position, or  `None`",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_drag_dest_row","","Gets information about the row that is highlighted for feedback. ## `path` Return location for the path of the highlighted row, or `None`. ## `pos` Return location for the drop position, or `None`",739,null],[10,"get_enable_search","","Returns whether or not the tree allows to start interactive searching by typing in text.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_enable_tree_lines","","Returns whether or not tree lines are drawn in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_expander_column","","Returns the column that is the current expander column. This column has the expander arrow drawn next to it.",739,{"inputs":[{"name":"self"}],"output":{"generics":["treeviewcolumn"],"name":"option"}}],[10,"get_fixed_height_mode","","Returns whether fixed height mode is turned on for `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_grid_lines","","Returns which grid lines are enabled in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"treeviewgridlines"}}],[10,"get_headers_clickable","","Returns whether all header columns are clickable.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_headers_visible","","Returns `true` if the headers on the `self` are visible.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hover_expand","","Returns whether hover expansion mode is turned on for `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hover_selection","","Returns whether hover selection mode is turned on for `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_level_indentation","","Returns the amount, in pixels, of extra indentation for child levels in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_model","","Returns the model the `TreeView` is based on. Returns `None` if the model is unset.",739,{"inputs":[{"name":"self"}],"output":{"generics":["treemodel"],"name":"option"}}],[10,"get_n_columns","","Queries the number of columns in the given `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_path_at_pos","","Finds the path at the point (`x`, `y`), relative to bin_window coordinates (please see `TreeViewExt::get_bin_window`). That is, `x` and `y` are relative to an events coordinates. `x` and `y` must come from an event on the `self` only where `event->window == gtk_tree_view_get_bin_window ()`. It is primarily for things like popup menus. If `path` is non-`None`, then it will be filled with the `TreePath` at that point. This path should be freed with `TreePath::free`. If `column` is non-`None`, then it will be filled with the column at that point. `cell_x` and `cell_y` return the coordinates relative to the cell background (i.e. the `background_area` passed to `CellRendererExt::render`). This function is only meaningful if `self` is realized. Therefore this function will always return `false` if `self` is not realized or does not have a model.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"get_reorderable","","Retrieves whether the user can reorder the tree via drag-and-drop. See `TreeViewExt::set_reorderable`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_rubber_banding","","Returns whether rubber banding is turned on for `self`. If the selection mode is `SelectionMode::Multiple`, rubber banding will allow the user to select multiple rows by dragging the mouse.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_rules_hint","","Gets the setting set by `TreeViewExt::set_rules_hint`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_search_column","","Gets the column searched on by the interactive search code.",739,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_search_entry","","Returns the `Entry` which is currently in use as interactive search entry for `self`. In case the built-in entry is being used, `None` will be returned.",739,{"inputs":[{"name":"self"}],"output":{"generics":["entry"],"name":"option"}}],[10,"get_selection","","Gets the `TreeSelection` associated with `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"treeselection"}}],[10,"get_show_expanders","","Returns whether or not expanders are drawn in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_tooltip_column","","Returns the column of `self`’s model which is being used for displaying tooltips on `self`’s rows.",739,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_tooltip_context","","This function is supposed to be used in a `Widget::query-tooltip` signal handler for `TreeView`. The `x`, `y` and `keyboard_tip` values which are received in the signal handler, should be passed to this function without modification.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"option"}}],[10,"get_visible_range","","Sets `start_path` and `end_path` to be the first and last visible path. Note that there may be invisible paths in between.",739,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_visible_rect","","Fills `visible_rect` with the currently-visible region of the buffer, in tree coordinates. Convert to bin_window coordinates with `TreeViewExt::convert_tree_to_bin_window_coords`. Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire scrollable area of the tree. ## `visible_rect` rectangle to fill",739,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[10,"insert_column","","This inserts the `column` into the `self` at `position`. If `position` is -1, then the column is inserted at the end. If `self` has “fixed_height” mode enabled, then `column` must have its “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED. ## `column` The `TreeViewColumn` to be inserted. ## `position` The position to insert `column` in.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"},{"name":"i32"}],"output":{"name":"i32"}}],[10,"is_blank_at_pos","","Determine whether the point (`x`, `y`) in `self` is blank, that is no cell content nor an expander arrow is drawn at the location. If so, the location can be considered as the background. You might wish to take special action on clicks on the background, such as clearing a current selection, having a custom context menu or starting rubber banding.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"is_rubber_banding_active","","Returns whether a rubber banding operation is currently being done in `self`.",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"move_column_after","","Moves `column` to be after to `base_column`. If `base_column` is `None`, then `column` is placed in the first position. ## `column` The `TreeViewColumn` to be moved. ## `base_column` The `TreeViewColumn` to be moved relative to, or `None`.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"},{"name":"p"}],"output":null}],[10,"remove_column","","Removes `column` from `self`. ## `column` The `TreeViewColumn` to remove.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"}],"output":{"name":"i32"}}],[10,"row_activated","","Activates the cell determined by `path` and `column`. ## `path` The `TreePath` to be activated. ## `column` The `TreeViewColumn` to be activated.",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeviewcolumn"}],"output":null}],[10,"row_expanded","","Returns `true` if the node pointed to by `path` is expanded in `self`. ## `path` A `TreePath` to test expansion state.",739,{"inputs":[{"name":"self"},{"name":"treepath"}],"output":{"name":"bool"}}],[10,"scroll_to_cell","","Moves the alignments of `self` to the position specified by `column` and `path`. If `column` is `None`, then no horizontal scrolling occurs. Likewise, if `path` is `None` no vertical scrolling occurs. At a minimum, one of `column` or `path` need to be non-`None`. `row_align` determines where the row is placed, and `col_align` determines where `column` is placed. Both are expected to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means center.",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"},{"name":"bool"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"scroll_to_point","","Scrolls the tree view such that the top-left corner of the visible area is `tree_x`, `tree_y`, where `tree_x` and `tree_y` are specified in tree coordinates. The `self` must be realized before this function is called. If it isn't, you probably want to be using `TreeViewExt::scroll_to_cell`.",739,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_activate_on_single_click","","Cause the `TreeView::row-activated` signal to be emitted on a single click instead of a double click.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_cursor","","Sets the current keyboard focus to be at `path`, and selects it. This is useful when you want to focus the user’s attention on a particular row. If `focus_column` is not `None`, then focus is given to the column specified by it. Additionally, if `focus_column` is specified, and `start_editing` is `true`, then editing should be started in the specified cell. This function is often followed by `WidgetExt::grab_focus` (`self`) in order to give keyboard focus to the widget. Please note that editing can only happen when the widget is realized.",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_cursor_on_cell","","Sets the current keyboard focus to be at `path`, and selects it. This is useful when you want to focus the user’s attention on a particular row. If `focus_column` is not `None`, then focus is given to the column specified by it. If `focus_column` and `focus_cell` are not `None`, and `focus_column` contains 2 or more editable or activatable cells, then focus is given to the cell specified by `focus_cell`. Additionally, if `focus_column` is specified, and `start_editing` is `true`, then editing should be started in the specified cell. This function is often followed by `WidgetExt::grab_focus` (`self`) in order to give keyboard focus to the widget. Please note that editing can only happen when the widget is realized.",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"p"},{"name":"r"},{"name":"bool"}],"output":null}],[10,"set_drag_dest_row","","Sets the row that is highlighted for feedback. If `path` is `None`, an existing highlight is removed. ## `path` The path of the row to highlight, or `None` ## `pos` Specifies whether to drop before, after or into the row",739,{"inputs":[{"name":"self"},{"name":"p"},{"name":"treeviewdropposition"}],"output":null}],[10,"set_enable_search","","If `enable_search` is set, then the user can type in text to search through the tree interactively (this is sometimes called \"typeahead find\").",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_enable_tree_lines","","Sets whether to draw lines interconnecting the expanders in `self`. This does not have any visible effects for lists. ## `enabled` `true` to enable tree line drawing, `false` otherwise.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_expander_column","","Sets the column to draw the expander arrow at. It must be in `self`. If `column` is `None`, then the expander arrow is always at the first visible column.",739,{"inputs":[{"name":"self"},{"name":"treeviewcolumn"}],"output":null}],[10,"set_fixed_height_mode","","Enables or disables the fixed height mode of `self`. Fixed height mode speeds up `TreeView` by assuming that all rows have the same height. Only enable this option if all rows are the same height and all columns are of type `TreeViewColumnSizing::Fixed`. ## `enable` `true` to enable fixed height mode",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_grid_lines","","Sets which grid lines to draw in `self`. ## `grid_lines` a `TreeViewGridLines` value indicating which grid lines to enable.",739,{"inputs":[{"name":"self"},{"name":"treeviewgridlines"}],"output":null}],[10,"set_headers_clickable","","Allow the column title buttons to be clicked. ## `setting` `true` if the columns are clickable.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_headers_visible","","Sets the visibility state of the headers. ## `headers_visible` `true` if the headers are visible",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hover_expand","","Enables or disables the hover expansion mode of `self`. Hover expansion makes rows expand or collapse if the pointer moves over them. ## `expand` `true` to enable hover selection mode",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hover_selection","","Enables or disables the hover selection mode of `self`. Hover selection makes the selected row follow the pointer. Currently, this works only for the selection modes `SelectionMode::Single` and `SelectionMode::Browse`. ## `hover` `true` to enable hover selection mode",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_level_indentation","","Sets the amount of extra indentation for child levels to use in `self` in addition to the default indentation. The value should be specified in pixels, a value of 0 disables this feature and in this case only the default indentation will be used. This does not have any visible effects for lists. ## `indentation` the amount, in pixels, of extra indentation in `self`.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_model","","Sets the model for a `TreeView`. If the `self` already has a model set, it will remove it before setting the new model. If `model` is `None`, then it will unset the old model. ## `model` The model.",739,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_reorderable","","This function is a convenience function to allow you to reorder models that support the `TreeDragSourceIface` and the `TreeDragDestIface`. Both `TreeStore` and `ListStore` support these. If `reorderable` is `true`, then the user can reorder the model by dragging and dropping rows. The developer can listen to these changes by connecting to the model’s `TreeModel::row-inserted` and `TreeModel::row-deleted` signals. The reordering is implemented by setting up the tree view as a drag source and destination. Therefore, drag and drop can not be used in a reorderable view for any other purpose.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_rubber_banding","","Enables or disables rubber banding in `self`. If the selection mode is `SelectionMode::Multiple`, rubber banding will allow the user to select multiple rows by dragging the mouse. ## `enable` `true` to enable rubber banding",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_rules_hint","","Sets a hint for the theme to draw even/odd rows in the `self` with different colors, also known as \"zebra striping\".",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_search_column","","Sets `column` as the column where the interactive search code should search in for the current model.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_search_entry","","Sets the entry which the interactive search code will use for this `self`. This is useful when you want to provide a search entry in our interface at all time at a fixed position. Passing `None` for `entry` will make the interactive search code use the built-in popup entry again. ## `entry` the entry the interactive search code of `self` should use or `None`",739,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_show_expanders","","Sets whether to draw and enable expanders and indent child rows in `self`. When disabled there will be no expanders visible in trees and there will be no way to expand and collapse rows by default. Also note that hiding the expanders will disable the default indentation. You can set a custom indentation in this case using `TreeViewExt::set_level_indentation`. This does not have any visible effects for lists. ## `enabled` `true` to enable expander drawing, `false` otherwise.",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tooltip_cell","","Sets the tip area of `tooltip` to the area `path`, `column` and `cell` have in common. For example if `path` is `None` and `column` is set, the tip area will be set to the full area covered by `column`. See also `TooltipExt::set_tip_area`.",739,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"p"},{"name":"q"},{"name":"s"}],"output":null}],[10,"set_tooltip_column","","If you only plan to have simple (text-only) tooltips on full rows, you can use this function to have `TreeView` handle these automatically for you. `column` should be set to the column in `self`’s model containing the tooltip texts, or -1 to disable this feature.",739,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_tooltip_row","","Sets the tip area of `tooltip` to be the area covered by the row at `path`. See also `TreeViewExt::set_tooltip_column` for a simpler alternative. See also `TooltipExt::set_tip_area`. ## `tooltip` a `Tooltip` ## `path` a `TreePath`",739,{"inputs":[{"name":"self"},{"name":"tooltip"},{"name":"treepath"}],"output":null}],[10,"unset_rows_drag_dest","","Undoes the effect of `TreeView::enable_model_drag_dest`. Calling this method sets `TreeView:reorderable` to `false`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_rows_drag_source","","Undoes the effect of `TreeView::enable_model_drag_source`. Calling this method sets `TreeView:reorderable` to `false`.",739,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_enable_grid_lines","","",739,{"inputs":[{"name":"self"}],"output":{"name":"treeviewgridlines"}}],[10,"set_property_enable_grid_lines","","",739,{"inputs":[{"name":"self"},{"name":"treeviewgridlines"}],"output":null}],[10,"set_property_ubuntu_almost_fixed_height_mode","","",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_columns_changed","","The number of columns of the treeview has changed.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_cursor_changed","","The position of the cursor (focused cell) has changed.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_expand_collapse_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_expand_collapse_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_move_cursor","","The `TreeView::move-cursor` signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user presses one of the cursor keys.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_cursor","","",739,{"inputs":[{"name":"self"},{"name":"movementstep"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"connect_row_activated","","The \"row-activated\" signal is emitted when the method `TreeViewExt::row_activated` is called, when the user double clicks a treeview row with the \"activate-on-single-click\" property set to `false`, or when the user single clicks a row when the \"activate-on-single-click\" property set to `true`. It is also emitted when a non-editable row is selected and one of the keys: Space, Shift+Space, Return or Enter is pressed.",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_row_activated","","",739,{"inputs":[{"name":"self"},{"name":"treepath"},{"name":"treeviewcolumn"}],"output":null}],[10,"connect_row_collapsed","","The given row has been collapsed (child nodes are hidden). ## `iter` the tree iter of the collapsed row ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_row_expanded","","The given row has been expanded (child nodes are shown). ## `iter` the tree iter of the expanded row ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_select_all","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_all","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_select_cursor_parent","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_cursor_parent","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_select_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_select_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_start_interactive_search","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_start_interactive_search","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_test_collapse_row","","The given row is about to be collapsed (hide its children nodes). Use this signal if you need to control the collapsibility of individual rows. ## `iter` the tree iter of the row to collapse ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_test_expand_row","","The given row is about to be expanded (show its children nodes). Use this signal if you need to control the expandability of individual rows. ## `iter` the tree iter of the row to expand ## `path` a tree path that points to the row",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_toggle_cursor_row","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_toggle_cursor_row","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_unselect_all","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_unselect_all","","",739,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_activate_on_single_click_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_grid_lines_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_search_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_enable_tree_lines_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_expander_column_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fixed_height_mode_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_headers_clickable_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_headers_visible_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hover_expand_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hover_selection_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_level_indentation_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_model_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reorderable_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rubber_banding_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_rules_hint_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_search_column_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_show_expanders_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_column_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_ubuntu_almost_fixed_height_mode_notify","","",739,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"TreeViewColumnExt","","Trait containing all `TreeViewColumn` methods.",null,null],[10,"cell_get_position","","Obtains the horizontal position and size of a cell in a column. If the cell is not found in the column, `start_pos` and `width` are not changed and `false` is returned. ## `cell_renderer` a `CellRenderer` ## `x_offset` return location for the horizontal  position of `cell` within `self`, may be `None` ## `width` return location for the width of `cell`,  may be `None`",740,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"cell_get_size","","Obtains the width and height needed to render the column. This is used primarily by the `TreeView`. ## `cell_area` The area a cell in the column will be allocated, or `None` ## `x_offset` location to return x offset of a cell relative to `cell_area`, or `None` ## `y_offset` location to return y offset of a cell relative to `cell_area`, or `None` ## `width` location to return width needed to render a cell, or `None` ## `height` location to return height needed to render a cell, or `None`",740,null],[10,"cell_is_visible","","Returns `true` if any of the cells packed into the `self` are visible. For this to be meaningful, you must first initialize the cells with `TreeViewColumnExt::cell_set_cell_data`",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cell_set_cell_data","","Sets the cell renderer based on the `tree_model` and `iter`. That is, for every attribute mapping in `self`, it will get a value from the set column on the `iter`, and use that value to set the attribute on the cell renderer. This is used primarily by the `TreeView`. ## `tree_model` The `TreeModel` to to get the cell renderers attributes from. ## `iter` The `TreeIter` to to get the cell renderer’s attributes from. ## `is_expander` `true`, if the row has children ## `is_expanded` `true`, if the row has visible children",740,{"inputs":[{"name":"self"},{"name":"p"},{"name":"treeiter"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"clicked","","Emits the “clicked” signal on the column. This function will only work if `self` is clickable.",740,{"inputs":[{"name":"self"}],"output":null}],[10,"focus_cell","","Sets the current keyboard focus to be at `cell`, if the column contains 2 or more editable and activatable cells. ## `cell` A `CellRenderer`",740,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_alignment","","Returns the current x alignment of `self`. This value can range between 0.0 and 1.0.",740,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"get_button","","Returns the button used in the treeview column header",740,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_clickable","","Returns `true` if the user can click on the header for the column.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_expand","","Returns `true` if the column expands to fill available space.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_fixed_width","","Gets the fixed width of the column. This may not be the actual displayed width of the column; for that, use `TreeViewColumnExt::get_width`.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_max_width","","Returns the maximum width in pixels of the `self`, or -1 if no maximum width is set.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_min_width","","Returns the minimum width in pixels of the `self`, or -1 if no minimum width is set.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_reorderable","","Returns `true` if the `self` can be reordered by the user.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_resizable","","Returns `true` if the `self` can be resized by the end user.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_sizing","","Returns the current type of `self`.",740,{"inputs":[{"name":"self"}],"output":{"name":"treeviewcolumnsizing"}}],[10,"get_sort_column_id","","Gets the logical `sort_column_id` that the model sorts on when this column is selected for sorting. See `TreeViewColumnExt::set_sort_column_id`.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_sort_indicator","","Gets the value set by `TreeViewColumnExt::set_sort_indicator`.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_sort_order","","Gets the value set by `TreeViewColumnExt::set_sort_order`.",740,{"inputs":[{"name":"self"}],"output":{"name":"sorttype"}}],[10,"get_spacing","","Returns the spacing of `self`.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_title","","Returns the title of the widget.",740,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tree_view","","Returns the `TreeView` wherein `self` has been inserted. If `column` is currently not inserted in any tree view, `None` is returned.",740,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_visible","","Returns `true` if `self` is visible.",740,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_widget","","Returns the `Widget` in the button on the column header. If a custom widget has not been set then `None` is returned.",740,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_width","","Returns the current size of `self` in pixels.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_x_offset","","Returns the current X offset of `self` in pixels.",740,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"queue_resize","","Flags the column, and the cell renderers added to this column, to have their sizes renegotiated.",740,{"inputs":[{"name":"self"}],"output":null}],[10,"set_alignment","","Sets the alignment of the title or custom widget inside the column header. The alignment determines its location inside the button -- 0.0 for left, 0.5 for center, 1.0 for right. ## `xalign` The alignment, which is between [0.0 and 1.0] inclusive.",740,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"set_clickable","","Sets the header to be active if `clickable` is `true`. When the header is active, then it can take keyboard focus, and can be clicked. ## `clickable` `true` if the header is active.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_expand","","Sets the column to take available extra space. This space is shared equally amongst all columns that have the expand set to `true`. If no column has this option set, then the last column gets all extra space. By default, every column is created with this `false`.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_fixed_width","","If `fixed_width` is not -1, sets the fixed width of `self`; otherwise unsets it. The effective value of `fixed_width` is clamped between the minimum and maximum width of the column; however, the value stored in the “fixed-width” property is not clamped. If the column sizing is `TreeViewColumnSizing::GrowOnly` or `TreeViewColumnSizing::Autosize`, setting a fixed width overrides the automatically calculated width. Note that `fixed_width` is only a hint to GTK+; the width actually allocated to the column may be greater or less than requested.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_max_width","","Sets the maximum width of the `self`. If `max_width` is -1, then the maximum width is unset. Note, the column can actually be wider than max width if it’s the last column in a view. In this case, the column expands to fill any extra space. ## `max_width` The maximum width of the column in pixels, or -1.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_min_width","","Sets the minimum width of the `self`. If `min_width` is -1, then the minimum width is unset. ## `min_width` The minimum width of the column in pixels, or -1.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_reorderable","","If `reorderable` is `true`, then the column can be reordered by the end user dragging the header. ## `reorderable` `true`, if the column can be reordered.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_resizable","","If `resizable` is `true`, then the user can explicitly resize the column by grabbing the outer edge of the column button. If resizable is `true` and sizing mode of the column is `TreeViewColumnSizing::Autosize`, then the sizing mode is changed to `TreeViewColumnSizing::GrowOnly`. ## `resizable` `true`, if the column can be resized",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sizing","","Sets the growth behavior of `self` to `type_`. ## `type_` The `TreeViewColumnSizing`.",740,{"inputs":[{"name":"self"},{"name":"treeviewcolumnsizing"}],"output":null}],[10,"set_sort_column_id","","Sets the logical `sort_column_id` that this column sorts on when this column is selected for sorting. Doing so makes the column header clickable. ## `sort_column_id` The `sort_column_id` of the model to sort on.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_sort_indicator","","Call this function with a `setting` of `true` to display an arrow in the header button indicating the column is sorted. Call `TreeViewColumnExt::set_sort_order` to change the direction of the arrow. ## `setting` `true` to display an indicator that the column is sorted",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sort_order","","Changes the appearance of the sort indicator.",740,{"inputs":[{"name":"self"},{"name":"sorttype"}],"output":null}],[10,"set_spacing","","Sets the spacing field of `self`, which is the number of pixels to place between cell renderers packed into it. ## `spacing` distance between cell renderers in pixels.",740,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_title","","Sets the title of the `self`. If a custom widget has been set, then this value is ignored. ## `title` The title of the `self`.",740,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_visible","","Sets the visibility of `self`. ## `visible` `true` if the `self` is visible.",740,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_widget","","Sets the widget in the header to be `widget`. If widget is `None`, then the header button is set with a `Label` set to the title of `self`. ## `widget` A child `Widget`, or `None`.",740,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"get_property_cell_area","","",740,{"inputs":[{"name":"self"}],"output":{"generics":["cellarea"],"name":"option"}}],[10,"connect_clicked","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_alignment_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_cell_area_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_clickable_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_expand_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_fixed_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_max_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_min_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_reorderable_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resizable_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sizing_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_column_id_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_indicator_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sort_order_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_spacing_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_widget_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_x_offset_notify","","",740,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"ViewportExt","","Trait containing all `Viewport` methods.",null,null],[10,"get_bin_window","","Gets the bin window of the `Viewport`.",741,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_shadow_type","","Gets the shadow type of the `Viewport`. See `ViewportExt::set_shadow_type`.",741,{"inputs":[{"name":"self"}],"output":{"name":"shadowtype"}}],[10,"get_view_window","","Gets the view window of the `Viewport`.",741,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"set_shadow_type","","Sets the shadow type of the viewport. ## `type_` the new shadow type.",741,{"inputs":[{"name":"self"},{"name":"shadowtype"}],"output":null}],[10,"connect_property_shadow_type_notify","","",741,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"VolumeButtonExt","","Trait containing all `VolumeButton` methods.",null,null],[10,"get_property_use_symbolic","","",742,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_use_symbolic","","",742,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"connect_property_use_symbolic_notify","","",742,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"WidgetExt","","Trait containing all `Widget` methods.",null,null],[10,"activate","","For widgets that can be “activated” (buttons, menu items, etc.) this function activates them. Activation is what happens when you press Enter on a widget during key navigation. If `self` isn't activatable, the function returns `false`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"add_accelerator","","Installs an accelerator for this `self` in `accel_group` that causes `accel_signal` to be emitted if the accelerator is activated. The `accel_group` needs to be added to the widget’s toplevel via `GtkWindowExt::add_accel_group`, and the signal must be of type `gobject::SignalFlags::Action`. Accelerators added through this function are not user changeable during runtime. If you want to support accelerators that can be changed by the user, use `AccelMap::add_entry` and `WidgetExt::set_accel_path` or `MenuItemExt::set_accel_path` instead. ## `accel_signal` widget signal to emit on accelerator activation ## `accel_group` accel group for this widget, added to its toplevel ## `accel_key` GDK keyval of the accelerator ## `accel_mods` modifier key combination of the accelerator ## `accel_flags` flag accelerators, e.g. `AccelFlags::Visible`",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"accelgroup"},{"name":"u32"},{"name":"modifiertype"},{"name":"accelflags"}],"output":null}],[10,"add_device_events","","Adds the device events in the bitfield `events` to the event mask for `self`. See `WidgetExt::set_device_events` for details. ## `device` a `gdk::Device` ## `events` an event mask, see `gdk::EventMask`",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"eventmask"}],"output":null}],[10,"add_events","","Adds the events in the bitfield `events` to the event mask for `self`. See `WidgetExt::set_events` and the [input handling overview][event-masks] for details. ## `events` an event mask, see `gdk::EventMask`",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"add_mnemonic_label","","Adds a widget to the list of mnemonic labels for this widget. (See `WidgetExt::list_mnemonic_labels`). Note the list of mnemonic labels for the widget is cleared when the widget is destroyed, so the caller must make sure to update its internal state at this point as well, by using a connection to the `Widget::destroy` signal or a weak notifier. ## `label` a `Widget` that acts as a mnemonic label for `self`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"can_activate_accel","","Determines whether an accelerator that activates the signal identified by `signal_id` can currently be activated. This is done by emitting the `Widget::can-activate-accel` signal on `self`; if the signal isn’t overridden by a handler or in a derived widget, then the default check is that the widget must be sensitive, and the widget and all its ancestors mapped. ## `signal_id` the ID of a signal installed on `self`",743,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"child_focus","","This function is used by custom widget implementations; if you're writing an app, you’d use `WidgetExt::grab_focus` to move the focus to a particular widget, and `ContainerExt::set_focus_chain` to change the focus tab order. So you may want to investigate those functions instead.",743,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[10,"child_notify","","Emits a `Widget::child-notify` signal for the [child property][child-properties] `child_property` on `self`.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"compute_expand","","Computes whether a container should give this widget extra space when possible. Containers should check this, rather than looking at `WidgetExt::get_hexpand` or `WidgetExt::get_vexpand`.",743,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[10,"create_pango_context","","Creates a new `pango::Context` with the appropriate font map, font options, font description, and base direction for drawing text for this widget. See also `WidgetExt::get_pango_context`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"create_pango_layout","","Creates a new `pango::Layout` with the appropriate font map, font description, and base direction for drawing text for this widget.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["layout"],"name":"option"}}],[10,"destroy","","Destroys a widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"device_is_shadowed","","Returns `true` if `device` has been shadowed by a GTK+ device grab on another widget, so it would stop sending events to `self`. This may be used in the `Widget::grab-notify` signal to check for specific devices. See `gtk_device_grab_add`. ## `device` a `gdk::Device`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"drag_begin","","This function is equivalent to `WidgetExt::drag_begin_with_coordinates`, passing -1, -1 as coordinates.",743,{"inputs":[{"name":"self"},{"name":"targetlist"},{"name":"dragaction"},{"name":"i32"},{"name":"p"}],"output":{"generics":["dragcontext"],"name":"option"}}],[10,"drag_begin_with_coordinates","","Initiates a drag on the source side. The function only needs to be used when the application is starting drags itself, and is not needed when `Widget::drag_source_set` is used.",743,{"inputs":[{"name":"self"},{"name":"targetlist"},{"name":"dragaction"},{"name":"i32"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["dragcontext"],"name":"option"}}],[10,"drag_check_threshold","","Checks to see if a mouse drag starting at (`start_x`, `start_y`) and ending at (`current_x`, `current_y`) has passed the GTK+ drag threshold, and thus should trigger the beginning of a drag-and-drop operation. ## `start_x` X coordinate of start of drag ## `start_y` Y coordinate of start of drag ## `current_x` current X coordinate ## `current_y` current Y coordinate",743,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"drag_dest_add_image_targets","","Add the image targets supported by `SelectionData` to the target list of the drag destination. The targets are added with `info` = 0. If you need another value, use `TargetList::add_image_targets` and `WidgetExt::drag_dest_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_dest_add_text_targets","","Add the text targets supported by `SelectionData` to the target list of the drag destination. The targets are added with `info` = 0. If you need another value, use `TargetList::add_text_targets` and `WidgetExt::drag_dest_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_dest_add_uri_targets","","Add the URI targets supported by `SelectionData` to the target list of the drag destination. The targets are added with `info` = 0. If you need another value, use `TargetList::add_uri_targets` and `WidgetExt::drag_dest_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_dest_find_target","","Looks for a match between the supported targets of `context` and the `dest_target_list`, returning the first matching target, otherwise returning `GDK_NONE`. `dest_target_list` should usually be the return value from `WidgetExt::drag_dest_get_target_list`, but some widgets may have different valid targets for different parts of the widget; in that case, they will have to implement a drag_motion handler that passes the correct target list to this function. ## `context` drag context ## `target_list` list of droppable targets, or `None` to use  gtk_drag_dest_get_target_list (`self`).",743,{"inputs":[{"name":"self"},{"name":"dragcontext"},{"name":"p"}],"output":{"generics":["atom"],"name":"option"}}],[10,"drag_dest_get_target_list","","Returns the list of targets this widget can accept from drag-and-drop.",743,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"drag_dest_get_track_motion","","Returns whether the widget has been configured to always emit `Widget::drag-motion` signals.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"drag_dest_set_proxy","","Sets this widget as a proxy for drops to another window.",743,{"inputs":[{"name":"self"},{"name":"window"},{"name":"dragprotocol"},{"name":"bool"}],"output":null}],[10,"drag_dest_set_target_list","","Sets the target types that this widget can accept from drag-and-drop. The widget must first be made into a drag destination with `Widget::drag_dest_set`. ## `target_list` list of droppable targets, or `None` for none",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"drag_dest_set_track_motion","","Tells the widget to emit `Widget::drag-motion` and `Widget::drag-leave` events regardless of the targets and the `DestDefaults::Motion` flag.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"drag_dest_unset","","Clears information about a drop destination set with `Widget::drag_dest_set`. The widget will no longer receive notification of drags.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_get_data","","Gets the data associated with a drag. When the data is received or the retrieval fails, GTK+ will emit a `Widget::drag-data-received` signal. Failure of the retrieval is indicated by the length field of the `selection_data` signal parameter being negative. However, when `WidgetExt::drag_get_data` is called implicitely because the `DestDefaults::Drop` was set, then the widget will not receive notification of failed drops. ## `context` the drag context ## `target` the target (form of the data) to retrieve ## `time_` a timestamp for retrieving the data. This will  generally be the time received in a `Widget::drag-motion`  or `Widget::drag-drop` signal",743,{"inputs":[{"name":"self"},{"name":"dragcontext"},{"name":"atom"},{"name":"u32"}],"output":null}],[10,"drag_highlight","","Highlights a widget as a currently hovered drop target. To end the highlight, call `WidgetExt::drag_unhighlight`. GTK+ calls this automatically if `DestDefaults::Highlight` is set.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_add_image_targets","","Add the writable image targets supported by `SelectionData` to the target list of the drag source. The targets are added with `info` = 0. If you need another value, use `TargetList::add_image_targets` and `WidgetExt::drag_source_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_add_text_targets","","Add the text targets supported by `SelectionData` to the target list of the drag source. The targets are added with `info` = 0. If you need another value, use `TargetList::add_text_targets` and `WidgetExt::drag_source_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_add_uri_targets","","Add the URI targets supported by `SelectionData` to the target list of the drag source. The targets are added with `info` = 0. If you need another value, use `TargetList::add_uri_targets` and `WidgetExt::drag_source_set_target_list`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_source_get_target_list","","Gets the list of targets this widget can provide for drag-and-drop.",743,{"inputs":[{"name":"self"}],"output":{"generics":["targetlist"],"name":"option"}}],[10,"drag_source_set_icon_gicon","","Sets the icon that will be used for drags from a particular source to `icon`. See the docs for `IconTheme` for more details. ## `icon` A `gio::Icon`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"drag_source_set_icon_name","","Sets the icon that will be used for drags from a particular source to a themed icon. See the docs for `IconTheme` for more details. ## `icon_name` name of icon to use",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"drag_source_set_icon_pixbuf","","Sets the icon that will be used for drags from a particular widget from a `gdk_pixbuf::Pixbuf`. GTK+ retains a reference for `pixbuf` and will release it when it is no longer needed. ## `pixbuf` the `gdk_pixbuf::Pixbuf` for the drag icon",743,{"inputs":[{"name":"self"},{"name":"pixbuf"}],"output":null}],[10,"drag_source_set_icon_stock","","Sets the icon that will be used for drags from a particular source to a stock icon.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"drag_source_set_target_list","","Changes the target types that this widget offers for drag-and-drop. The widget must first be made into a drag source with `Widget::drag_source_set`. ## `target_list` list of draggable targets, or `None` for none",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"drag_source_unset","","Undoes the effects of `Widget::drag_source_set`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"drag_unhighlight","","Removes a highlight set by `WidgetExt::drag_highlight` from a widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"draw","","Draws `self` to `cr`. The top left corner of the widget will be drawn to the currently set origin point of `cr`.",743,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[10,"error_bell","","Notifies the user about an input-related error on this widget. If the `Settings:gtk-error-bell` setting is `true`, it calls `gdk::WindowExt::beep`, otherwise it does nothing.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"event","","Rarely-used function. This function is used to emit the event signals on a widget (those signals should never be emitted without using this function to do so). If you want to synthesize an event though, don’t use this function; instead, use `gtk_main_do_event` so the event will behave as if it were in the event queue. Don’t synthesize expose events; instead, use `gdk::WindowExt::invalidate_rect` to invalidate a region of the window. ## `event` a `GdkEvent`",743,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"freeze_child_notify","","Stops emission of `Widget::child-notify` signals on `self`. The signals are queued until `WidgetExt::thaw_child_notify` is called on `self`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"get_action_group","","Retrieves the `gio::ActionGroup` that was registered using `prefix`. The resulting `gio::ActionGroup` may have been registered to `self` or any `Widget` in its ancestry.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["actiongroup"],"name":"option"}}],[10,"get_allocated_baseline","","Returns the baseline that has currently been allocated to `self`. This function is intended to be used when implementing handlers for the `Widget::draw` function, and when allocating child widgets in `Widget::size_allocate`.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_allocated_height","","Returns the height that has currently been allocated to `self`. This function is intended to be used when implementing handlers for the `Widget::draw` function.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_allocated_size","","Retrieves the widget’s allocated size.",743,null],[10,"get_allocated_width","","Returns the width that has currently been allocated to `self`. This function is intended to be used when implementing handlers for the `Widget::draw` function.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_allocation","","Retrieves the widget’s allocation.",743,{"inputs":[{"name":"self"}],"output":{"name":"allocation"}}],[10,"get_ancestor","","Gets the first ancestor of `self` with type `widget_type`. For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets the first `Box` that’s an ancestor of `self`. No reference will be added to the returned widget; it should not be unreferenced. See note about checking for a toplevel `Window` in the docs for `WidgetExt::get_toplevel`.",743,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_app_paintable","","Determines whether the application intends to draw on the widget in an `Widget::draw` handler.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_default","","Determines whether `self` can be a default widget. See `WidgetExt::set_can_default`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_can_focus","","Determines whether `self` can own the input focus. See `WidgetExt::set_can_focus`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_child_visible","","Gets the value set with `WidgetExt::set_child_visible`. If you feel a need to use this function, your code probably needs reorganization.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_clip","","Retrieves the widget’s clip area.",743,{"inputs":[{"name":"self"}],"output":{"name":"allocation"}}],[10,"get_clipboard","","Returns the clipboard object for the given selection to be used with `self`. `self` must have a `gdk::Display` associated with it, so must be attached to a toplevel window. ## `selection` a `gdk::Atom` which identifies the clipboard  to use. `GDK_SELECTION_CLIPBOARD` gives the  default clipboard. Another common value  is `GDK_SELECTION_PRIMARY`, which gives  the primary X selection.",743,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"clipboard"}}],[10,"get_composite_name","","Obtains the composite name of a widget.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_device_enabled","","Returns whether `device` can interact with `self` and its children. See `WidgetExt::set_device_enabled`. ## `device` a `gdk::Device`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_device_events","","Returns the events mask for the widget corresponding to an specific device. These are the events that the widget will receive when `device` operates on it. ## `device` a `gdk::Device`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"eventmask"}}],[10,"get_direction","","Gets the reading direction for a particular widget. See `WidgetExt::set_direction`.",743,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[10,"get_display","","Get the `gdk::Display` for the toplevel window associated with this widget. This function can only be called after the widget has been added to a widget hierarchy with a `Window` at the top.",743,{"inputs":[{"name":"self"}],"output":{"generics":["display"],"name":"option"}}],[10,"get_double_buffered","","Determines whether the widget is double buffered.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_events","","Returns the event mask (see `gdk::EventMask`) for the widget. These are the events that the widget will receive.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_focus_on_click","","Returns whether the widget should grab focus when it is clicked with the mouse. See `WidgetExt::set_focus_on_click`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_font_map","","Gets the font map that has been set with `WidgetExt::set_font_map`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["fontmap"],"name":"option"}}],[10,"get_frame_clock","","Obtains the frame clock for a widget. The frame clock is a global “ticker” that can be used to drive animations and repaints. The most common reason to get the frame clock is to call `gdk::FrameClockExt::get_frame_time`, in order to get a time to use for animating. For example you might record the start of the animation with an initial value from `gdk::FrameClockExt::get_frame_time`, and then update the animation by calling `gdk::FrameClockExt::get_frame_time` again during each repaint.",743,{"inputs":[{"name":"self"}],"output":{"generics":["frameclock"],"name":"option"}}],[10,"get_halign","","Gets the value of the `Widget:halign` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[10,"get_has_tooltip","","Returns the current value of the has-tooltip property. See `Widget:has-tooltip` for more information.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_has_window","","Determines whether `self` has a `gdk::Window` of its own. See `WidgetExt::set_has_window`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hexpand","","Gets whether the widget would like any available extra horizontal space. When a user resizes a `Window`, widgets with expand=TRUE generally receive the extra space. For example, a list or scrollable area or document in your window would often be set to expand.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hexpand_set","","Gets whether `WidgetExt::set_hexpand` has been used to explicitly set the expand flag on this widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mapped","","Whether the widget is mapped.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_margin_bottom","","Gets the value of the `Widget:margin-bottom` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_end","","Gets the value of the `Widget:margin-end` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_left","","Gets the value of the `Widget:margin-left` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_right","","Gets the value of the `Widget:margin-right` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_start","","Gets the value of the `Widget:margin-start` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_margin_top","","Gets the value of the `Widget:margin-top` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_modifier_mask","","Returns the modifier mask the `self`’s windowing system backend uses for a particular purpose.",743,{"inputs":[{"name":"self"},{"name":"modifierintent"}],"output":{"name":"modifiertype"}}],[10,"get_name","","Retrieves the name of a widget. See `WidgetExt::set_name` for the significance of widget names.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_no_show_all","","Returns the current value of the `Widget:no-show-all` property, which determines whether calls to `WidgetExt::show_all` will affect this widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_opacity","","Fetches the requested opacity for this widget. See `WidgetExt::set_opacity`.",743,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_pango_context","","Gets a `pango::Context` with the appropriate font map, font description, and base direction for this widget. Unlike the context returned by `WidgetExt::create_pango_context`, this context is owned by the widget (it can be used until the screen for the widget changes or the widget is removed from its toplevel), and will be updated to match any changes to the widget’s attributes. This can be tracked by using the `Widget::screen-changed` signal on the widget.",743,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_parent","","Returns the parent container of `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_parent_window","","Gets `self`’s parent window, or `None` if it does not have one.",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_path","","Returns the `WidgetPath` representing `self`, if the widget is not connected to a toplevel widget, a partial path will be created.",743,{"inputs":[{"name":"self"}],"output":{"name":"widgetpath"}}],[10,"get_preferred_height","","Retrieves a widget’s initial minimum and natural height.",743,null],[10,"get_preferred_height_and_baseline_for_width","","Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given the specified `width`, or the default height if `width` is -1. The baselines may be -1 which means that no baseline is requested for this widget.",743,null],[10,"get_preferred_height_for_width","","Retrieves a widget’s minimum and natural height if it would be given the specified `width`.",743,null],[10,"get_preferred_size","","Retrieves the minimum and natural size of a widget, taking into account the widget’s preference for height-for-width management.",743,null],[10,"get_preferred_width","","Retrieves a widget’s initial minimum and natural width.",743,null],[10,"get_preferred_width_for_height","","Retrieves a widget’s minimum and natural width if it would be given the specified `height`.",743,null],[10,"get_realized","","Determines whether `self` is realized.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_receives_default","","Determines whether `self` is always treated as the default widget within its toplevel when it has the focus, even if another widget is the default.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_request_mode","","Gets whether the widget prefers a height-for-width layout or a width-for-height layout.",743,{"inputs":[{"name":"self"}],"output":{"name":"sizerequestmode"}}],[10,"get_root_window","","Get the root window where this widget is located. This function can only be called after the widget has been added to a widget hierarchy with `Window` at the top.",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_scale_factor","","Retrieves the internal scale factor that maps from window coordinates to the actual device pixels. On traditional systems this is 1, on high density outputs, it can be a higher value (typically 2).",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_screen","","Get the `gdk::Screen` from the toplevel window associated with this widget. This function can only be called after the widget has been added to a widget hierarchy with a `Window` at the top.",743,{"inputs":[{"name":"self"}],"output":{"generics":["screen"],"name":"option"}}],[10,"get_sensitive","","Returns the widget’s sensitivity (in the sense of returning the value that has been set using `WidgetExt::set_sensitive`).",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_settings","","Gets the settings object holding the settings used for this widget.",743,{"inputs":[{"name":"self"}],"output":{"generics":["settings"],"name":"option"}}],[10,"get_size_request","","Gets the size request that was explicitly set for the widget using `WidgetExt::set_size_request`. A value of -1 stored in `width` or `height` indicates that that dimension has not been set explicitly and the natural requisition of the widget will be used instead. See `WidgetExt::set_size_request`. To get the size a widget will actually request, call `WidgetExt::get_preferred_size` instead of this function. ## `width` return location for width, or `None` ## `height` return location for height, or `None`",743,null],[10,"get_state_flags","","Returns the widget state as a flag set. It is worth mentioning that the effective `StateFlags::Insensitive` state will be returned, that is, also based on parent insensitivity, even if `self` itself is sensitive.",743,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[10,"get_style_context","","Returns the style context associated to `self`. The returned object is guaranteed to be the same for the lifetime of `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["stylecontext"],"name":"option"}}],[10,"get_support_multidevice","","Returns `true` if `self` is multiple pointer aware. See `WidgetExt::set_support_multidevice` for more information.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_template_child","","Fetch an object build from the template XML for `widget_type` in this `self` instance.",743,{"inputs":[{"name":"self"},{"name":"type"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_tooltip_markup","","Gets the contents of the tooltip for `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_text","","Gets the contents of the tooltip for `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_tooltip_window","","Returns the `Window` of the current tooltip. This can be the `Window` created by default, or the custom tooltip window set using `WidgetExt::set_tooltip_window`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_toplevel","","This function returns the topmost widget in the container hierarchy `self` is a part of. If `self` has no parent widgets, it will be returned as the topmost widget. No reference will be added to the returned widget; it should not be unreferenced.",743,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_valign","","Gets the value of the `Widget:valign` property.",743,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[10,"get_valign_with_baseline","","Gets the value of the `Widget:valign` property, including `Align::Baseline`.",743,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[10,"get_vexpand","","Gets whether the widget would like any available extra vertical space.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_vexpand_set","","Gets whether `WidgetExt::set_vexpand` has been used to explicitly set the expand flag on this widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visible","","Determines whether the widget is visible. If you want to take into account whether the widget’s parent is also marked as visible, use `WidgetExt::is_visible` instead.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_visual","","Gets the visual that will be used to render `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["visual"],"name":"option"}}],[10,"get_window","","Returns the widget’s window if it is realized, `None` otherwise",743,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"grab_add","","Makes `self` the current grabbed widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"grab_default","","Causes `self` to become the default widget. `self` must be able to be a default widget; typically you would ensure this yourself by calling `WidgetExt::set_can_default` with a `true` value. The default widget is activated when the user presses Enter in a window. Default widgets must be activatable, that is, `WidgetExt::activate` should affect them. Note that `Entry` widgets require the “activates-default” property set to `true` before they activate the default widget when Enter is pressed and the `Entry` is focused.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"grab_focus","","Causes `self` to have the keyboard focus for the `Window` it's inside. `self` must be a focusable widget, such as a `Entry`; something like `Frame` won’t work.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"grab_remove","","Removes the grab from the given widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"has_default","","Determines whether `self` is the current default widget within its toplevel. See `WidgetExt::set_can_default`.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_focus","","Determines if the widget has the global input focus. See `WidgetExt::is_focus` for the difference between having the global input focus, and only having the focus within a toplevel.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_grab","","Determines whether the widget is currently grabbing events, so it is the only widget receiving input events (keyboard and mouse).",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_screen","","Checks whether there is a `gdk::Screen` is associated with this widget. All toplevel widgets have an associated screen, and all widgets added into a hierarchy with a toplevel window at the top.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_visible_focus","","Determines if the widget should show a visible indication that it has the global input focus. This is a convenience function for use in ::draw handlers that takes into account whether focus indication should currently be shown in the toplevel window of `self`. See `GtkWindowExt::get_focus_visible` for more information about focus indication.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"hide","","Reverses the effects of `WidgetExt::show`, causing the widget to be hidden (invisible to the user).",743,{"inputs":[{"name":"self"}],"output":null}],[10,"hide_on_delete","","Utility function; intended to be connected to the `Widget::delete-event` signal on a `Window`. The function calls `WidgetExt::hide` on its argument, then returns `true`. If connected to ::delete-event, the result is that clicking the close button for a window (on the window frame, top right corner usually) will hide but not destroy the window. By default, GTK+ destroys windows when ::delete-event is received.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"in_destruction","","Returns whether the widget is currently being destroyed. This information can sometimes be used to avoid doing unnecessary work.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"init_template","","Creates and initializes child widgets defined in templates. This function must be called in the instance initializer for any class which assigned itself a template using `WidgetClass::set_template`",743,{"inputs":[{"name":"self"}],"output":null}],[10,"input_shape_combine_region","","Sets an input shape for this widget’s GDK window. This allows for windows which react to mouse click in a nonrectangular region, see `gdk::WindowExt::input_shape_combine_region` for more information. ## `region` shape to be added, or `None` to remove an existing shape",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"insert_action_group","","Inserts `group` into `self`. Children of `self` that implement `Actionable` can then be associated with actions in `group` by setting their “action-name” to `prefix`.`action-name`.",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"q"}],"output":null}],[10,"is_ancestor","","Determines whether `self` is somewhere inside `ancestor`, possibly with intermediate containers. ## `ancestor` another `Widget`",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"is_composited","","Whether `self` can rely on having its alpha channel drawn correctly. On X11 this function returns whether a compositing manager is running for `self`’s screen.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_drawable","","Determines whether `self` can be drawn to. A widget can be drawn to if it is mapped and visible.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_focus","","Determines if the widget is the focus widget within its toplevel. (This does not mean that the `Widget:has-focus` property is necessarily set; `Widget:has-focus` will only be set if the toplevel widget additionally has the global input focus.)",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sensitive","","Returns the widget’s effective sensitivity, which means it is sensitive itself and also its parent widget is sensitive",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_toplevel","","Determines whether `self` is a toplevel widget.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_visible","","Determines whether the widget and all its parents are marked as visible.",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"keynav_failed","","This function should be called whenever keyboard navigation within a single widget hits a boundary. The function emits the `Widget::keynav-failed` signal on the widget and its return value should be interpreted in a way similar to the return value of `WidgetExt::child_focus`:",743,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":{"name":"bool"}}],[10,"list_action_prefixes","","Retrieves a `None`-terminated array of strings containing the prefixes of `gio::ActionGroup`'s available to `self`.",743,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"list_mnemonic_labels","","Returns a newly allocated list of the widgets, normally labels, for which this widget is the target of a mnemonic (see for example, `LabelExt::set_mnemonic_widget`).",743,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"vec"}}],[10,"map","","This function is only for use in widget implementations. Causes a widget to be mapped if it isn’t already.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"mnemonic_activate","","Emits the `Widget::mnemonic-activate` signal. ## `group_cycling` `true` if there are other widgets with the same mnemonic",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"override_background_color","","Sets the background color to use for a widget.",743,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"p"}],"output":null}],[10,"override_color","","Sets the color to use for a widget.",743,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"p"}],"output":null}],[10,"override_cursor","","Sets the cursor color to use in a widget, overriding the cursor-color and secondary-cursor-color style properties. All other style values are left untouched. See also `Widget::modify_style`.",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"override_font","","Sets the font to use for a widget. All other style values are left untouched. See `WidgetExt::override_color`.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"override_symbolic_color","","Sets a symbolic color for a widget.",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":null}],[10,"queue_allocate","","This function is only for use in widget implementations.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_compute_expand","","Mark `self` as needing to recompute its expand flags. Call this function when setting legacy expand child properties on the child of a container.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_draw","","Equivalent to calling `WidgetExt::queue_draw_area` for the entire area of a widget.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_draw_area","","Convenience function that calls `WidgetExt::queue_draw_region` on the region created from the given coordinates.",743,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"queue_draw_region","","Invalidates the area of `self` defined by `region` by calling `gdk::WindowExt::invalidate_region` on the widget’s window and all its child windows. Once the main loop becomes idle (after the current batch of events has been processed, roughly), the window will receive expose events for the union of all regions that have been invalidated.",743,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[10,"queue_resize","","This function is only for use in widget implementations. Flags a widget to have its size renegotiated; should be called when a widget for some reason has a new size request. For example, when you change the text in a `Label`, `Label` queues a resize to ensure there’s enough space for the new text.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"queue_resize_no_redraw","","This function works like `WidgetExt::queue_resize`, except that the widget is not invalidated.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"realize","","Creates the GDK (windowing system) resources associated with a widget. For example, `self`->window will be created when a widget is realized. Normally realization happens implicitly; if you show a widget and all its parent containers, then the widget will be realized and mapped automatically.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"region_intersect","","Computes the intersection of a `self`’s area and `region`, returning the intersection. The result may be empty, use `cairo_region_is_empty` to check.",743,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"generics":["region"],"name":"option"}}],[10,"register_window","","Registers a `gdk::Window` with the widget and sets it up so that the widget receives events for it. Call `WidgetExt::unregister_window` when destroying the window.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"remove_accelerator","","Removes an accelerator from `self`, previously installed with `WidgetExt::add_accelerator`. ## `accel_group` accel group for this widget ## `accel_key` GDK keyval of the accelerator ## `accel_mods` modifier key combination of the accelerator",743,{"inputs":[{"name":"self"},{"name":"accelgroup"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[10,"remove_mnemonic_label","","Removes a widget from the list of mnemonic labels for this widget. (See `WidgetExt::list_mnemonic_labels`). The widget must have previously been added to the list with `WidgetExt::add_mnemonic_label`. ## `label` a `Widget` that was previously set as a mnemonic label for  `self` with `WidgetExt::add_mnemonic_label`.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"remove_tick_callback","","Removes a tick callback previously registered with `WidgetExt::add_tick_callback`.",743,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"render_icon_pixbuf","","A convenience function that uses the theme engine and style settings for `self` to look up `stock_id` and render it to a pixbuf. `stock_id` should be a stock icon ID such as `GTK_STOCK_OPEN` or `GTK_STOCK_OK`. `size` should be a size such as `IconSize::Menu`.",743,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"reparent","","Moves a widget from one `Container` to another, handling reference count issues to avoid destroying the widget.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"reset_style","","Updates the style context of `self` and all descendants by updating its widget path. `GtkContainers` may want to use this on a child when reordering it in a way that a different style might apply to it. See also `ContainerExt::get_path_for_child`.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"send_expose","","Very rarely-used function. This function is used to emit an expose event on a widget. This function is not normally used directly. The only time it is used is when propagating an expose event to a windowless child widget (`WidgetExt::get_has_window` is `false`), and that is normally done using `ContainerExt::propagate_draw`.",743,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"i32"}}],[10,"send_focus_change","","Sends the focus change `event` to `self`",743,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[10,"set_accel_path","","Given an accelerator group, `accel_group`, and an accelerator path, `accel_path`, sets up an accelerator in `accel_group` so whenever the key binding that is defined for `accel_path` is pressed, `self` will be activated. This removes any accelerators (for any accelerator group) installed by previous calls to `WidgetExt::set_accel_path`. Associating accelerators with paths allows them to be modified by the user and the modifications to be saved for future use. (See `AccelMap::save`.)",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":null}],[10,"set_allocation","","Sets the widget’s allocation. This should not be used directly, but from within a widget’s size_allocate method.",743,{"inputs":[{"name":"self"},{"name":"allocation"}],"output":null}],[10,"set_app_paintable","","Sets whether the application intends to draw on the widget in an `Widget::draw` handler.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_can_default","","Specifies whether `self` can be a default widget. See `WidgetExt::grab_default` for details about the meaning of “default”. ## `can_default` whether or not `self` can be a default widget.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_can_focus","","Specifies whether `self` can own the input focus. See `WidgetExt::grab_focus` for actually setting the input focus on a widget. ## `can_focus` whether or not `self` can own the input focus.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_child_visible","","Sets whether `self` should be mapped along with its when its parent is mapped and `self` has been shown with `WidgetExt::show`.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_clip","","Sets the widget’s clip. This must not be used directly, but from within a widget’s size_allocate method. It must be called after `WidgetExt::set_allocation` (or after chaining up to the parent class), because that function resets the clip.",743,{"inputs":[{"name":"self"},{"name":"allocation"}],"output":null}],[10,"set_composite_name","","Sets a widgets composite name. The widget must be a composite child of its parent; see `Widget::push_composite_child`.",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_device_enabled","","Enables or disables a `gdk::Device` to interact with `self` and all its children.",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":null}],[10,"set_device_events","","Sets the device event mask (see `gdk::EventMask`) for a widget. The event mask determines which events a widget will receive from `device`. Keep in mind that different widgets have different default event masks, and by changing the event mask you may disrupt a widget’s functionality, so be careful. This function must be called while a widget is unrealized. Consider `WidgetExt::add_device_events` for widgets that are already realized, or if you want to preserve the existing event mask. This function can’t be used with windowless widgets (which return `false` from `WidgetExt::get_has_window`); to get events on those widgets, place them inside a `EventBox` and receive events on the event box. ## `device` a `gdk::Device` ## `events` event mask",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"eventmask"}],"output":null}],[10,"set_direction","","Sets the reading direction on a particular widget. This direction controls the primary direction for widgets containing text, and also the direction in which the children of a container are packed. The ability to set the direction is present in order so that correct localization into languages with right-to-left reading directions can be done. Generally, applications will let the default reading direction present, except for containers where the containers are arranged in an order that is explicitly visual rather than logical (such as buttons for text justification).",743,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":null}],[10,"set_double_buffered","","Widgets are double buffered by default; you can use this function to turn off the buffering. “Double buffered” simply means that `gdk::WindowExt::begin_draw_frame` and `gdk::WindowExt::end_draw_frame` are called automatically around expose events sent to the widget. `gdk::WindowExt::begin_draw_frame` diverts all drawing to a widget's window to an offscreen buffer, and `gdk::WindowExt::end_draw_frame` draws the buffer to the screen. The result is that users see the window update in one smooth step, and don’t see individual graphics primitives being rendered.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_events","","Sets the event mask (see `gdk::EventMask`) for a widget. The event mask determines which events a widget will receive. Keep in mind that different widgets have different default event masks, and by changing the event mask you may disrupt a widget’s functionality, so be careful. This function must be called while a widget is unrealized. Consider `WidgetExt::add_events` for widgets that are already realized, or if you want to preserve the existing event mask. This function can’t be used with widgets that have no window. (See `WidgetExt::get_has_window`). To get events on those widgets, place them inside a `EventBox` and receive events on the event box. ## `events` event mask",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_focus_on_click","","Sets whether the widget should grab focus when it is clicked with the mouse. Making mouse clicks not grab focus is useful in places like toolbars where you don’t want the keyboard focus removed from the main area of the application.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_font_map","","Sets the font map to use for Pango rendering. When not set, the widget will inherit the font map from its parent.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_halign","","Sets the horizontal alignment of `self`. See the `Widget:halign` property. ## `align` the horizontal alignment",743,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[10,"set_has_tooltip","","Sets the has-tooltip property on `self` to `has_tooltip`. See `Widget:has-tooltip` for more information. ## `has_tooltip` whether or not `self` has a tooltip.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_window","","Specifies whether `self` has a `gdk::Window` of its own. Note that all realized widgets have a non-`None` “window” pointer (`WidgetExt::get_window` never returns a `None` window when a widget is realized), but for many of them it’s actually the `gdk::Window` of one of its parent widgets. Widgets that do not create a `window` for themselves in `Widget::realize` must announce this by calling this function with `has_window` = `false`.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hexpand","","Sets whether the widget would like any available extra horizontal space. When a user resizes a `Window`, widgets with expand=TRUE generally receive the extra space. For example, a list or scrollable area or document in your window would often be set to expand.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hexpand_set","","Sets whether the hexpand flag (see `WidgetExt::get_hexpand`) will be used.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mapped","","Marks the widget as being realized.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_margin_bottom","","Sets the bottom margin of `self`. See the `Widget:margin-bottom` property. ## `margin` the bottom margin",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_end","","Sets the end margin of `self`. See the `Widget:margin-end` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_left","","Sets the left margin of `self`. See the `Widget:margin-left` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_right","","Sets the right margin of `self`. See the `Widget:margin-right` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_start","","Sets the start margin of `self`. See the `Widget:margin-start` property.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_margin_top","","Sets the top margin of `self`. See the `Widget:margin-top` property. ## `margin` the top margin",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_name","","Widgets can be named, which allows you to refer to them from a CSS file. You can apply a style to widgets with a particular name in the CSS file. See the documentation for the CSS syntax (on the same page as the docs for `StyleContext`).",743,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_no_show_all","","Sets the `Widget:no-show-all` property, which determines whether calls to `WidgetExt::show_all` will affect this widget.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_opacity","","Request the `self` to be rendered partially transparent, with opacity 0 being fully transparent and 1 fully opaque. (Opacity values are clamped to the [0,1] range.). This works on both toplevel widget, and child widgets, although there are some limitations:",743,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_parent","","This function is useful only when implementing subclasses of `Container`. Sets the container as the parent of `self`, and takes care of some details such as updating the state and style of the child to reflect its new location. The opposite function is `WidgetExt::unparent`. ## `parent` parent container",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_parent_window","","Sets a non default parent window for `self`.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"set_realized","","Marks the widget as being realized. This function must only be called after all `GdkWindows` for the `self` have been created and registered.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_receives_default","","Specifies whether `self` will be treated as the default widget within its toplevel when it has the focus, even if another widget is the default.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_redraw_on_allocate","","Sets whether the entire widget is queued for drawing when its size allocation changes. By default, this setting is `true` and the entire widget is redrawn on every size change. If your widget leaves the upper left unchanged when made bigger, turning this setting off will improve performance.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_sensitive","","Sets the sensitivity of a widget. A widget is sensitive if the user can interact with it. Insensitive widgets are “grayed out” and the user can’t interact with them. Insensitive widgets are known as “inactive”, “disabled”, or “ghosted” in some other toolkits. ## `sensitive` `true` to make the widget sensitive",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_size_request","","Sets the minimum size of a widget; that is, the widget’s size request will be at least `width` by `height`. You can use this function to force a widget to be larger than it normally would be.",743,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_state_flags","","This function is for use in widget implementations. Turns on flag values in the current widget state (insensitive, prelighted, etc.).",743,{"inputs":[{"name":"self"},{"name":"stateflags"},{"name":"bool"}],"output":null}],[10,"set_support_multidevice","","Enables or disables multiple pointer awareness. If this setting is `true`, `self` will start receiving multiple, per device enter/leave events. Note that if custom `GdkWindows` are created in `Widget::realize`, `gdk::WindowExt::set_support_multidevice` will have to be called manually on them. ## `support_multidevice` `true` to support input from multiple devices.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_tooltip_markup","","Sets `markup` as the contents of the tooltip, which is marked up with  the Pango text markup language.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tooltip_text","","Sets `text` as the contents of the tooltip. This function will take care of setting `Widget:has-tooltip` to `true` and of the default handler for the `Widget::query-tooltip` signal.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_tooltip_window","","Replaces the default window used for displaying tooltips with `custom_window`. GTK+ will take care of showing and hiding `custom_window` at the right moment, to behave likewise as the default tooltip window. If `custom_window` is `None`, the default tooltip window will be used. ## `custom_window` a `Window`, or `None`",743,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_valign","","Sets the vertical alignment of `self`. See the `Widget:valign` property. ## `align` the vertical alignment",743,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[10,"set_vexpand","","Sets whether the widget would like any available extra vertical space.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_vexpand_set","","Sets whether the vexpand flag (see `WidgetExt::get_vexpand`) will be used.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visible","","Sets the visibility state of `self`. Note that setting this to `true` doesn’t mean the widget is actually viewable, see `WidgetExt::get_visible`.",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_visual","","Sets the visual that should be used for by widget and its children for creating `GdkWindows`. The visual must be on the same `gdk::Screen` as returned by `WidgetExt::get_screen`, so handling the `Widget::screen-changed` signal is necessary.",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_window","","Sets a widget’s window. This function should only be used in a widget’s `Widget::realize` implementation. The `window` passed is usually either new window created with `gdk::Window::new`, or the window of its parent widget as returned by `WidgetExt::get_parent_window`.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"shape_combine_region","","Sets a shape for this widget’s GDK window. This allows for transparent windows etc., see `gdk::WindowExt::shape_combine_region` for more information. ## `region` shape to be added, or `None` to remove an existing shape",743,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"show","","Flags a widget to be displayed. Any widget that isn’t shown will not appear on the screen. If you want to show all the widgets in a container, it’s easier to call `WidgetExt::show_all` on the container, instead of individually showing the widgets.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"show_all","","Recursively shows a widget, and any child widgets (if the widget is a container).",743,{"inputs":[{"name":"self"}],"output":null}],[10,"show_now","","Shows a widget. If the widget is an unmapped toplevel widget (i.e. a `Window` that has not yet been shown), enter the main loop and wait for the window to actually be mapped. Be careful; because the main loop is running, anything can happen during this function.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"size_allocate","","This function is only used by `Container` subclasses, to assign a size and position to their child widgets.",743,{"inputs":[{"name":"self"},{"name":"allocation"}],"output":null}],[10,"size_allocate_with_baseline","","This function is only used by `Container` subclasses, to assign a size, position and (optionally) baseline to their child widgets.",743,{"inputs":[{"name":"self"},{"name":"allocation"},{"name":"i32"}],"output":null}],[10,"thaw_child_notify","","Reverts the effect of a previous call to `WidgetExt::freeze_child_notify`. This causes all queued `Widget::child-notify` signals on `self` to be emitted.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"translate_coordinates","","Translate coordinates relative to `self`’s allocation to coordinates relative to `dest_widget`’s allocations. In order to perform this operation, both widgets must be realized, and must share a common toplevel. ## `dest_widget` a `Widget` ## `src_x` X position relative to `self` ## `src_y` Y position relative to `self` ## `dest_x` location to store X position relative to `dest_widget` ## `dest_y` location to store Y position relative to `dest_widget`",743,{"inputs":[{"name":"self"},{"name":"p"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[10,"trigger_tooltip_query","","Triggers a tooltip query on the display where the toplevel of `self` is located. See `Tooltip::trigger_tooltip_query` for more information.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unmap","","This function is only for use in widget implementations. Causes a widget to be unmapped if it’s currently mapped.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unparent","","This function is only for use in widget implementations. Should be called by implementations of the remove method on `Container`, to dissociate a child from the container.",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unrealize","","This function is only useful in widget implementations. Causes a widget to be unrealized (frees all GDK resources associated with the widget, such as `self`->window).",743,{"inputs":[{"name":"self"}],"output":null}],[10,"unregister_window","","Unregisters a `gdk::Window` from the widget that was previously set up with `WidgetExt::register_window`. You need to call this when the window is no longer used by the widget, such as when you destroy it.",743,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[10,"unset_state_flags","","This function is for use in widget implementations. Turns off flag values for the current widget state (insensitive, prelighted, etc.). See `WidgetExt::set_state_flags`. ## `flags` State flags to turn off",743,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":null}],[10,"get_property_composite_child","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_expand","","Whether to expand in both directions. Setting this sets both `Widget:hexpand` and `Widget:vexpand`",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_expand","","Whether to expand in both directions. Setting this sets both `Widget:hexpand` and `Widget:vexpand`",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_has_default","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_default","","",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_has_focus","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_has_focus","","",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_height_request","","",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_height_request","","",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_is_focus","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_property_is_focus","","",743,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"get_property_margin","","Sets all four sides' margin at once. If read, returns max margin on any side.",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_margin","","Sets all four sides' margin at once. If read, returns max margin on any side.",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_width_request","","",743,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_width_request","","",743,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"connect_accel_closures_changed","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_button_press_event","","The ::button-press-event signal will be emitted when a button (typically from a mouse) is pressed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_button_release_event","","The ::button-release-event signal will be emitted when a button (typically from a mouse) is released.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_can_activate_accel","","Determines whether an accelerator that activates the signal identified by `signal_id` can currently be activated. This signal is present to allow applications and derived widgets to override the default `Widget` handling for determining whether an accelerator can be activated. ## `signal_id` the ID of a signal installed on `widget`",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_composited_changed","","The ::composited-changed signal is emitted when the composited status of `widgets` screen changes. See `gdk::ScreenExt::is_composited`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_composited_changed","","",743,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_configure_event","","The ::configure-event signal will be emitted when the size, position or stacking of the `widget`'s window has changed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_damage_event","","Emitted when a redirected window belonging to `widget` gets drawn into. The region/area members of the event shows what area of the redirected drawable was drawn into. ## `event` the `gdk::EventExpose` event",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_event","","The ::delete-event signal is emitted if a user requests that a toplevel window is closed. The default handler for this signal destroys the window. Connecting `WidgetExt::hide_on_delete` to this signal will cause the window to be hidden instead, so that it can later be shown again without reconstructing it. ## `event` the event which triggered this signal",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_destroy","","Signals that all holders of a reference to the widget should release the reference that they hold. May result in finalization of the widget if all references are released.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_destroy_event","","The ::destroy-event signal is emitted when a `gdk::Window` is destroyed. You rarely get this signal, because most widgets disconnect themselves from their window before they destroy it, so no widget owns the window at destroy time.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_direction_changed","","The ::direction-changed signal is emitted when the text direction of a widget changes. ## `previous_direction` the previous text direction of `widget`",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_begin","","The ::drag-begin signal is emitted on the drag source when a drag is started. A typical reason to connect to this signal is to set up a custom drag icon with e.g. `WidgetExt::drag_source_set_icon_pixbuf`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_data_delete","","The ::drag-data-delete signal is emitted on the drag source when a drag with the action `gdk::DragAction::Move` is successfully completed. The signal handler is responsible for deleting the data that has been dropped. What \"delete\" means depends on the context of the drag operation. ## `context` the drag context",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_data_get","","The ::drag-data-get signal is emitted on the drag source when the drop site requests the data which is dragged. It is the responsibility of the signal handler to fill `data` with the data in the format which is indicated by `info`. See `SelectionData::set` and `SelectionData::set_text`. ## `context` the drag context ## `data` the `SelectionData` to be filled with the dragged data ## `info` the info that has been registered with the target in the  `TargetList` ## `time` the timestamp at which the data was requested",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_data_received","","The ::drag-data-received signal is emitted on the drop site when the dragged data has been received. If the data was received in order to determine whether the drop will be accepted, the handler is expected to call `gdk_drag_status` and not finish the drag. If the data was received in response to a `Widget::drag-drop` signal (and this is the last target to be received), the handler for this signal is expected to process the received data and then call `gtk_drag_finish`, setting the `success` parameter depending on whether the data was processed successfully.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_drop","","The ::drag-drop signal is emitted on the drop site when the user drops the data onto the widget. The signal handler must determine whether the cursor position is in a drop zone or not. If it is not in a drop zone, it returns `false` and no further processing is necessary. Otherwise, the handler returns `true`. In this case, the handler must ensure that `gtk_drag_finish` is called to let the source know that the drop is done. The call to `gtk_drag_finish` can be done either directly or in a `Widget::drag-data-received` handler which gets triggered by calling `WidgetExt::drag_get_data` to receive the data for one or more of the supported targets. ## `context` the drag context ## `x` the x coordinate of the current cursor position ## `y` the y coordinate of the current cursor position ## `time` the timestamp of the motion event",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_end","","The ::drag-end signal is emitted on the drag source when a drag is finished. A typical reason to connect to this signal is to undo things done in `Widget::drag-begin`. ## `context` the drag context",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_failed","","The ::drag-failed signal is emitted on the drag source when a drag has failed. The signal handler may hook custom code to handle a failed DnD operation based on the type of error, it returns `true` is the failure has been already handled (not showing the default \"drag operation failed\" animation), otherwise it returns `false`. ## `context` the drag context ## `result` the result of the drag operation",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_leave","","The ::drag-leave signal is emitted on the drop site when the cursor leaves the widget. A typical reason to connect to this signal is to undo things done in `Widget::drag-motion`, e.g. undo highlighting with `WidgetExt::drag_unhighlight`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_drag_motion","","The ::drag-motion signal is emitted on the drop site when the user moves the cursor over the widget during a drag. The signal handler must determine whether the cursor position is in a drop zone or not. If it is not in a drop zone, it returns `false` and no further processing is necessary. Otherwise, the handler returns `true`. In this case, the handler is responsible for providing the necessary information for displaying feedback to the user, by calling `gdk_drag_status`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_draw","","This signal is emitted when a widget is supposed to render itself. The `widget`'s top left corner must be painted at the origin of the passed in context and be sized to the values returned by `WidgetExt::get_allocated_width` and `WidgetExt::get_allocated_height`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_enter_notify_event","","The ::enter-notify-event will be emitted when the pointer enters the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_event","","The GTK+ main loop will emit three signals for each GDK event delivered to a widget: one generic ::event signal, another, more specific, signal that matches the type of event delivered (e.g. `Widget::key-press-event`) and finally a generic `Widget::event-after` signal. ## `event` the `GdkEvent` which triggered this signal",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_event_after","","After the emission of the `Widget::event` signal and (optionally) the second more specific signal, ::event-after will be emitted regardless of the previous two signals handlers return values. ## `event` the `GdkEvent` which triggered this signal",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus","","Returns",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_in_event","","The ::focus-in-event signal will be emitted when the keyboard focus enters the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_focus_out_event","","The ::focus-out-event signal will be emitted when the keyboard focus leaves the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_grab_broken_event","","Emitted when a pointer or keyboard grab on a window belonging to `widget` gets broken.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_grab_focus","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_grab_focus","","",743,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_grab_notify","","The ::grab-notify signal is emitted when a widget becomes shadowed by a GTK+ grab (not a pointer or keyboard grab) on another widget, or when it becomes unshadowed due to a grab being removed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_hide","","The ::hide signal is emitted when `widget` is hidden, for example with `WidgetExt::hide`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_hierarchy_changed","","The ::hierarchy-changed signal is emitted when the anchored state of a widget changes. A widget is “anchored” when its toplevel ancestor is a `Window`. This signal is emitted when a widget changes from un-anchored to anchored or vice-versa. ## `previous_toplevel` the previous toplevel ancestor, or `None`  if the widget was previously unanchored",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_key_press_event","","The ::key-press-event signal is emitted when a key is pressed. The signal emission will reoccur at the key-repeat rate when the key is kept pressed.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_key_release_event","","The ::key-release-event signal is emitted when a key is released.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_keynav_failed","","Gets emitted if keyboard navigation fails. See `WidgetExt::keynav_failed` for details. ## `direction` the direction of movement",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_leave_notify_event","","The ::leave-notify-event will be emitted when the pointer leaves the `widget`'s window.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_map","","The ::map signal is emitted when `widget` is going to be mapped, that is when the widget is visible (which is controlled with `WidgetExt::set_visible`) and all its parents up to the toplevel widget are also visible. Once the map has occurred, `Widget::map-event` will be emitted.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_mnemonic_activate","","The default handler for this signal activates `widget` if `group_cycling` is `false`, or just makes `widget` grab focus if `group_cycling` is `true`. ## `group_cycling` `true` if there are other widgets with the same mnemonic",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_motion_notify_event","","The ::motion-notify-event signal is emitted when the pointer moves over the widget's `gdk::Window`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_move_focus","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_move_focus","","",743,{"inputs":[{"name":"self"},{"name":"directiontype"}],"output":null}],[10,"connect_parent_set","","The ::parent-set signal is emitted when a new parent has been set on a widget. ## `old_parent` the previous parent, or `None` if the widget  just got its initial parent.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_popup_menu","","This signal gets emitted whenever a widget should pop up a context menu. This usually happens through the standard key binding mechanism; by pressing a certain key while a widget is focused, the user can cause the widget to pop up a menu. For example, the `Entry` widget creates a menu with clipboard commands. See the [Popup Menu Migration Checklist][checklist-popup-menu] for an example of how to use this signal.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_popup_menu","","",743,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"connect_property_notify_event","","The ::property-notify-event signal will be emitted when a property on the `widget`'s window has been changed or deleted.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_proximity_in_event","","To receive this signal the `gdk::Window` associated to the widget needs to enable the `gdk::EventMask::ProximityInMask` mask.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_proximity_out_event","","To receive this signal the `gdk::Window` associated to the widget needs to enable the `gdk::EventMask::ProximityOutMask` mask.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_query_tooltip","","Emitted when `Widget:has-tooltip` is `true` and the hover timeout has expired with the cursor hovering \"above\" `widget`; or emitted when `widget` got focus in keyboard mode.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_realize","","The ::realize signal is emitted when `widget` is associated with a `gdk::Window`, which means that `WidgetExt::realize` has been called or the widget has been mapped (that is, it is going to be drawn).",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_screen_changed","","The ::screen-changed signal gets emitted when the screen of a widget has changed. ## `previous_screen` the previous screen, or `None` if the  widget was not associated with a screen before",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_scroll_event","","The ::scroll-event signal is emitted when a button in the 4 to 7 range is pressed. Wheel mice are usually configured to generate button press events for buttons 4 and 5 when the wheel is turned.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_clear_event","","The ::selection-clear-event signal will be emitted when the the `widget`'s window has lost ownership of a selection. ## `event` the `gdk::EventSelection` which triggered  this signal.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_get","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_notify_event","","Returns",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_received","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_selection_request_event","","The ::selection-request-event signal will be emitted when another client requests ownership of the selection owned by the `widget`'s window. ## `event` the `gdk::EventSelection` which triggered  this signal.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show","","The ::show signal is emitted when `widget` is shown, for example with `WidgetExt::show`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_show_help","","Returns",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_show_help","","",743,{"inputs":[{"name":"self"},{"name":"widgethelptype"}],"output":{"name":"bool"}}],[10,"connect_size_allocate","","`allocation` the region which has been  allocated to the widget.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_state_flags_changed","","The ::state-flags-changed signal is emitted when the widget state changes, see `WidgetExt::get_state_flags`. ## `flags` The previous state flags.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_style_updated","","The ::style-updated signal is a convenience signal that is emitted when the `StyleContext::changed` signal is emitted on the `widget`'s associated `StyleContext` as returned by `WidgetExt::get_style_context`.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_touch_event","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unmap","","The ::unmap signal is emitted when `widget` is going to be unmapped, which means that either it or any of its parents up to the toplevel widget have been set as hidden.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_unrealize","","The ::unrealize signal is emitted when the `gdk::Window` associated with `widget` is destroyed, which means that `WidgetExt::unrealize` has been called or the widget has been unmapped (that is, it is going to be hidden).",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_visibility_notify_event","","The ::visibility-notify-event will be emitted when the `widget`'s window is obscured or unobscured.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_window_state_event","","The ::window-state-event will be emitted when the state of the toplevel window associated to the `widget` changes.",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_app_paintable_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_default_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_can_focus_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_composite_child_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_double_buffered_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_events_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_expand_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_on_click_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_halign_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_default_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_focus_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_tooltip_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_height_request_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hexpand_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hexpand_set_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_focus_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_bottom_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_end_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_left_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_right_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_start_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_margin_top_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_name_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_no_show_all_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_opacity_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_parent_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_receives_default_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_scale_factor_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_sensitive_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_markup_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_tooltip_text_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_valign_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vexpand_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_vexpand_set_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_visible_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_width_request_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_notify","","",743,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"GtkWindowExt","","Trait containing all `Window` methods.",null,null],[10,"activate_default","","Activates the default widget for the window, unless the current focused widget has been configured to receive the default action (see `WidgetExt::set_receives_default`), in which case the focused widget is activated.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"activate_focus","","Activates the current focused widget within the window.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"activate_key","","Activates mnemonics and accelerators for this `Window`. This is normally called by the default ::key_press_event handler for toplevel windows, however in some cases it may be useful to call this directly when overriding the standard key handling for a toplevel window. ## `event` a `gdk::EventKey`",744,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"add_accel_group","","Associate `accel_group` with `self`, such that calling `gtk_accel_groups_activate` on `self` will activate accelerators in `accel_group`. ## `accel_group` a `AccelGroup`",744,{"inputs":[{"name":"self"},{"name":"accelgroup"}],"output":null}],[10,"add_mnemonic","","Adds a mnemonic to this window. ## `keyval` the mnemonic ## `target` the widget that gets activated by the mnemonic",744,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"p"}],"output":null}],[10,"begin_move_drag","","Starts moving a window. This function is used if an application has window movement grips. When GDK can support it, the window movement will be done using the standard mechanism for the [window manager][gtk-X11-arch] or windowing system. Otherwise, GDK will try to emulate window movement, potentially not all that well, depending on the windowing system. ## `button` mouse button that initiated the drag ## `root_x` X position where the user clicked to initiate the drag, in root window coordinates ## `root_y` Y position where the user clicked to initiate the drag ## `timestamp` timestamp from the click event that initiated the drag",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"begin_resize_drag","","Starts resizing a window. This function is used if an application has window resizing controls. When GDK can support it, the resize will be done using the standard mechanism for the [window manager][gtk-X11-arch] or windowing system. Otherwise, GDK will try to emulate window resizing, potentially not all that well, depending on the windowing system. ## `edge` position of the resize control ## `button` mouse button that initiated the drag ## `root_x` X position where the user clicked to initiate the drag, in root window coordinates ## `root_y` Y position where the user clicked to initiate the drag ## `timestamp` timestamp from the click event that initiated the drag",744,{"inputs":[{"name":"self"},{"name":"windowedge"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[10,"close","","Requests that the window is closed, similar to what happens when a window manager close button is clicked.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"deiconify","","Asks to deiconify (i.e. unminimize) the specified `self`. Note that you shouldn’t assume the window is definitely deiconified afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch])) could iconify it again before your code which assumes deiconification gets to run.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen","","Asks to place `self` in the fullscreen state. Note that you shouldn’t assume the window is definitely full screen afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could unfullscreen it again, and not all window managers honor requests to fullscreen windows. But normally the window will end up fullscreen. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"fullscreen_on_monitor","","Asks to place `self` in the fullscreen state. Note that you shouldn't assume the window is definitely full screen afterward.",744,{"inputs":[{"name":"self"},{"name":"screen"},{"name":"i32"}],"output":null}],[10,"get_accept_focus","","Gets the value set by `GtkWindowExt::set_accept_focus`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_application","","Gets the `Application` associated with the window (if any).",744,{"inputs":[{"name":"self"}],"output":{"generics":["application"],"name":"option"}}],[10,"get_attached_to","","Fetches the attach widget for this window. See `GtkWindowExt::set_attached_to`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_decorated","","Returns whether the window has been set to have decorations such as a title bar via `GtkWindowExt::set_decorated`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_default_size","","Gets the default size of the window. A value of -1 for the width or height indicates that a default size has not been explicitly set for that dimension, so the “natural” size of the window will be used. ## `width` location to store the default width, or `None` ## `height` location to store the default height, or `None`",744,null],[10,"get_default_widget","","Returns the default widget for `self`. See `GtkWindowExt::set_default` for more details.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_deletable","","Returns whether the window has been set to have a close button via `GtkWindowExt::set_deletable`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_destroy_with_parent","","Returns whether the window will be destroyed with its transient parent. See gtk_window_set_destroy_with_parent ().",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_focus","","Retrieves the current focused widget within the window. Note that this is the widget that would have the focus if the toplevel window focused; if the toplevel window is not focused then `gtk_widget_has_focus (widget)` will not be `true` for the widget.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_focus_on_map","","Gets the value set by `GtkWindowExt::set_focus_on_map`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_focus_visible","","Gets the value of the `Window:focus-visible` property.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_gravity","","Gets the value set by `GtkWindowExt::set_gravity`.",744,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[10,"get_group","","Returns the group for `self` or the default group, if `self` is `None` or if `self` does not have an explicit window group.",744,{"inputs":[{"name":"self"}],"output":{"generics":["windowgroup"],"name":"option"}}],[10,"get_has_resize_grip","","Determines whether the window may have a resize grip.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_hide_titlebar_when_maximized","","Returns whether the window has requested to have its titlebar hidden when maximized. See gtk_window_set_hide_titlebar_when_maximized ().",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_icon","","Gets the value set by `GtkWindowExt::set_icon` (or if you've called `GtkWindowExt::set_icon_list`, gets the first icon in the icon list).",744,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"option"}}],[10,"get_icon_list","","Retrieves the list of icons set by `GtkWindowExt::set_icon_list`. The list is copied, but the reference count on each member won’t be incremented.",744,{"inputs":[{"name":"self"}],"output":{"generics":["pixbuf"],"name":"vec"}}],[10,"get_icon_name","","Returns the name of the themed icon for the window, see `GtkWindowExt::set_icon_name`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mnemonic_modifier","","Returns the mnemonic modifier for this window. See `GtkWindowExt::set_mnemonic_modifier`.",744,{"inputs":[{"name":"self"}],"output":{"name":"modifiertype"}}],[10,"get_mnemonics_visible","","Gets the value of the `Window:mnemonics-visible` property.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_modal","","Returns whether the window is modal. See `GtkWindowExt::set_modal`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_opacity","","Fetches the requested opacity for this window. See `GtkWindowExt::set_opacity`.",744,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"get_position","","This function returns the position you need to pass to `GtkWindowExt::move` to keep `self` in its current position. This means that the meaning of the returned value varies with window gravity. See `GtkWindowExt::move` for more details.",744,null],[10,"get_resizable","","Gets the value set by `GtkWindowExt::set_resizable`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_resize_grip_area","","If a window has a resize grip, this will retrieve the grip position, width and height into the specified `gdk::Rectangle`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["rectangle"],"name":"option"}}],[10,"get_role","","Returns the role of the window. See `GtkWindowExt::set_role` for further explanation.",744,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_size","","Obtains the current size of `self`.",744,null],[10,"get_skip_pager_hint","","Gets the value set by `GtkWindowExt::set_skip_pager_hint`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_skip_taskbar_hint","","Gets the value set by `GtkWindowExt::set_skip_taskbar_hint`",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_title","","Retrieves the title of the window. See `GtkWindowExt::set_title`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_titlebar","","Returns the custom titlebar that has been set with `GtkWindowExt::set_titlebar`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_transient_for","","Fetches the transient parent for this window. See `GtkWindowExt::set_transient_for`.",744,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"option"}}],[10,"get_type_hint","","Gets the type hint for this window. See `GtkWindowExt::set_type_hint`.",744,{"inputs":[{"name":"self"}],"output":{"name":"windowtypehint"}}],[10,"get_urgency_hint","","Gets the value set by `GtkWindowExt::set_urgency_hint`",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_window_type","","Gets the type of the window. See `WindowType`.",744,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[10,"has_group","","Returns whether `self` has an explicit window group.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_toplevel_focus","","Returns whether the input focus is within this `Window`. For real toplevel windows, this is identical to `GtkWindowExt::is_active`, but for embedded windows, like `Plug`, the results will differ.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"iconify","","Asks to iconify (i.e. minimize) the specified `self`. Note that you shouldn’t assume the window is definitely iconified afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could deiconify it again, or there may not be a window manager in which case iconification isn’t possible, etc. But normally the window will end up iconified. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"is_active","","Returns whether the window is part of the current active toplevel. (That is, the toplevel window receiving keystrokes.) The return value is `true` if the window is active toplevel itself, but also if it is, say, a `Plug` embedded in the active toplevel. You might use this function if you wanted to draw a widget differently in an active window from a widget in an inactive window. See `GtkWindowExt::has_toplevel_focus`",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_maximized","","Retrieves the current maximized state of `self`.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"maximize","","Asks to maximize `self`, so that it becomes full-screen. Note that you shouldn’t assume the window is definitely maximized afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could unmaximize it again, and not all window managers support maximization. But normally the window will end up maximized. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"mnemonic_activate","","Activates the targets associated with the mnemonic. ## `keyval` the mnemonic ## `modifier` the modifiers",744,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"modifiertype"}],"output":{"name":"bool"}}],[10,"move_","","",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"parse_geometry","","Parses a standard X Window System geometry string - see the manual page for X (type “man X”) for details on this. `GtkWindowExt::parse_geometry` does work on all GTK+ ports including Win32 but is primarily intended for an X environment.",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"present","","Presents a window to the user. This may mean raising the window in the stacking order, deiconifying it, moving it to the current desktop, and/or giving it the keyboard focus, possibly dependent on the user’s platform, window manager, and preferences.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"present_with_time","","Presents a window to the user in response to a user interaction. If you need to present a window without a timestamp, use `GtkWindowExt::present`. See `GtkWindowExt::present` for details. ## `timestamp` the timestamp of the user interaction (typically a  button or key press event) which triggered this call",744,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"propagate_key_event","","Propagate a key press or release event to the focus widget and up the focus container chain until a widget handles `event`. This is normally called by the default ::key_press_event and ::key_release_event handlers for toplevel windows, however in some cases it may be useful to call this directly when overriding the standard key handling for a toplevel window. ## `event` a `gdk::EventKey`",744,{"inputs":[{"name":"self"},{"name":"eventkey"}],"output":{"name":"bool"}}],[10,"remove_accel_group","","Reverses the effects of `GtkWindowExt::add_accel_group`. ## `accel_group` a `AccelGroup`",744,{"inputs":[{"name":"self"},{"name":"accelgroup"}],"output":null}],[10,"remove_mnemonic","","Removes a mnemonic from this window. ## `keyval` the mnemonic ## `target` the widget that gets activated by the mnemonic",744,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"p"}],"output":null}],[10,"reshow_with_initial_size","","Hides `self`, then reshows it, resetting the default size and position of the window. Used by GUI builders only.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"resize","","Resizes the window as if the user had done so, obeying geometry constraints. The default geometry constraint is that windows may not be smaller than their size request; to override this constraint, call `WidgetExt::set_size_request` to set the window's request to a smaller value.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"resize_grip_is_visible","","Determines whether a resize grip is visible for the specified window.",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"resize_to_geometry","","Like `GtkWindowExt::resize`, but `width` and `height` are interpreted in terms of the base size and increment set with gtk_window_set_geometry_hints.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_accept_focus","","Windows may set a hint asking the desktop environment not to receive the input focus. This function sets this hint. ## `setting` `true` to let this window receive input focus",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_application","","Sets or unsets the `Application` associated with the window.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_attached_to","","Marks `self` as attached to `attach_widget`. This creates a logical binding between the window and the widget it belongs to, which is used by GTK+ to propagate information such as styling or accessibility to `self` as if it was a children of `attach_widget`.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_decorated","","By default, windows are decorated with a title bar, resize controls, etc. Some [window managers][gtk-X11-arch] allow GTK+ to disable these decorations, creating a borderless window. If you set the decorated property to `false` using this function, GTK+ will do its best to convince the window manager not to decorate the window. Depending on the system, this function may not have any effect when called on a window that is already visible, so you should call it before calling `WidgetExt::show`.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_default","","The default widget is the widget that’s activated when the user presses Enter in a dialog (for example). This function sets or unsets the default widget for a `Window`. When setting (rather than unsetting) the default widget it’s generally easier to call `WidgetExt::grab_default` on the widget. Before making a widget the default widget, you must call `WidgetExt::set_can_default` on the widget you’d like to make the default. ## `default_widget` widget to be the default, or `None`  to unset the default widget for the toplevel",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_default_geometry","","Like `GtkWindowExt::set_default_size`, but `width` and `height` are interpreted in terms of the base size and increment set with gtk_window_set_geometry_hints.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_default_size","","Sets the default size of a window. If the window’s “natural” size (its size request) is larger than the default, the default will be ignored. More generally, if the default size does not obey the geometry hints for the window (`GtkWindowExt::set_geometry_hints` can be used to set these explicitly), the default size will be clamped to the nearest permitted size.",744,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[10,"set_deletable","","By default, windows have a close button in the window frame. Some [window managers][gtk-X11-arch] allow GTK+ to disable this button. If you set the deletable property to `false` using this function, GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible, so you should call it before calling `WidgetExt::show`.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_destroy_with_parent","","If `setting` is `true`, then destroying the transient parent of `self` will also destroy `self` itself. This is useful for dialogs that shouldn’t persist beyond the lifetime of the main window they're associated with, for example. ## `setting` whether to destroy `self` with its transient parent",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_focus","","If `focus` is not the current focus widget, and is focusable, sets it as the focus widget for the window. If `focus` is `None`, unsets the focus widget for this window. To set the focus to a particular widget in the toplevel, it is usually more convenient to use `WidgetExt::grab_focus` instead of this function. ## `focus` widget to be the new focus widget, or `None` to unset  any focus widget for the toplevel window.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_focus_on_map","","Windows may set a hint asking the desktop environment not to receive the input focus when the window is mapped. This function sets this hint. ## `setting` `true` to let this window receive input focus on map",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_focus_visible","","Sets the `Window:focus-visible` property. ## `setting` the new value",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_gravity","","Window gravity defines the meaning of coordinates passed to `GtkWindowExt::move`. See `GtkWindowExt::move` and `gdk::Gravity` for more details.",744,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[10,"set_has_resize_grip","","Sets whether `self` has a corner resize grip.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_has_user_ref_count","","Tells GTK+ whether to drop its extra reference to the window when `WidgetExt::destroy` is called.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_hide_titlebar_when_maximized","","If `setting` is `true`, then `self` will request that it’s titlebar should be hidden when maximized. This is useful for windows that don’t convey any information other than the application name in the titlebar, to put the available screen space to better use. If the underlying window system does not support the request, the setting will not have any effect.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_icon","","Sets up the icon representing a `Window`. This icon is used when the window is minimized (also known as iconified). Some window managers or desktop environments may also place it in the window frame, or display it in other contexts. On others, the icon is not used at all, so your mileage may vary.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_icon_from_file","","Sets the icon for `self`. Warns on failure if `err` is `None`.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_icon_list","","Sets up the icon representing a `Window`. The icon is used when the window is minimized (also known as iconified). Some window managers or desktop environments may also place it in the window frame, or display it in other contexts. On others, the icon is not used at all, so your mileage may vary.",744,null],[10,"set_icon_name","","Sets the icon for the window from a named themed icon. See the docs for `IconTheme` for more details. On some platforms, the window icon is not used at all.",744,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_keep_above","","Asks to keep `self` above, so that it stays on top. Note that you shouldn’t assume the window is definitely above afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could not keep it above, and not all window managers support keeping windows above. But normally the window will end kept above. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_keep_below","","Asks to keep `self` below, so that it stays in bottom. Note that you shouldn’t assume the window is definitely below afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could not keep it below, and not all window managers support putting windows below. But normally the window will be kept below. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_mnemonic_modifier","","Sets the mnemonic modifier for this window. ## `modifier` the modifier mask used to activate  mnemonics on this window.",744,{"inputs":[{"name":"self"},{"name":"modifiertype"}],"output":null}],[10,"set_mnemonics_visible","","Sets the `Window:mnemonics-visible` property. ## `setting` the new value",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_modal","","Sets a window modal or non-modal. Modal windows prevent interaction with other windows in the same application. To keep modal dialogs on top of main application windows, use `GtkWindowExt::set_transient_for` to make the dialog transient for the parent; most [window managers][gtk-X11-arch] will then disallow lowering the dialog below the parent. ## `modal` whether the window is modal",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_opacity","","Request the windowing system to make `self` partially transparent, with opacity 0 being fully transparent and 1 fully opaque. (Values of the opacity parameter are clamped to the [0,1] range.) On X11 this has any effect only on X screens with a compositing manager running. See `WidgetExt::is_composited`. On Windows it should work always.",744,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_position","","Sets a position constraint for this window. If the old or new constraint is `WindowPosition::CenterAlways`, this will also cause the window to be repositioned to satisfy the new constraint. ## `position` a position constraint.",744,{"inputs":[{"name":"self"},{"name":"windowposition"}],"output":null}],[10,"set_resizable","","Sets whether the user can resize a window. Windows are user resizable by default. ## `resizable` `true` if the user can resize this window",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_role","","This function is only useful on X11, not with other GTK+ targets.",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_screen","","Sets the `gdk::Screen` where the `self` is displayed; if the window is already mapped, it will be unmapped, and then remapped on the new screen. ## `screen` a `gdk::Screen`.",744,{"inputs":[{"name":"self"},{"name":"screen"}],"output":null}],[10,"set_skip_pager_hint","","Windows may set a hint asking the desktop environment not to display the window in the pager. This function sets this hint. (A \"pager\" is any desktop navigation tool such as a workspace switcher that displays a thumbnail representation of the windows on the screen.) ## `setting` `true` to keep this window from appearing in the pager",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_skip_taskbar_hint","","Windows may set a hint asking the desktop environment not to display the window in the task bar. This function sets this hint. ## `setting` `true` to keep this window from appearing in the task bar",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_startup_id","","Startup notification identifiers are used by desktop environment to track application startup, to provide user feedback and other features. This function changes the corresponding property on the underlying `gdk::Window`. Normally, startup identifier is managed automatically and you should only use this function in special cases like transferring focus from other processes. You should use this function before calling `GtkWindowExt::present` or any equivalent function generating a window map event.",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_title","","Sets the title of the `Window`. The title of a window will be displayed in its title bar; on the X Window System, the title bar is rendered by the [window manager][gtk-X11-arch], so exactly how the title appears to users may vary according to a user’s exact configuration. The title should help a user distinguish this window from other windows they may have open. A good title might include the application name and current document filename, for example. ## `title` title of the window",744,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_titlebar","","Sets a custom titlebar for `self`.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_transient_for","","Dialog windows should be set transient for the main application window they were spawned from. This allows [window managers][gtk-X11-arch] to e.g. keep the dialog on top of the main window, or center the dialog over the main window. `Dialog::new_with_buttons` and other convenience functions in GTK+ will sometimes call `GtkWindowExt::set_transient_for` on your behalf.",744,{"inputs":[{"name":"self"},{"name":"q"}],"output":null}],[10,"set_type_hint","","By setting the type hint for the window, you allow the window manager to decorate and handle the window in a way which is suitable to the function of the window in your application.",744,{"inputs":[{"name":"self"},{"name":"windowtypehint"}],"output":null}],[10,"set_urgency_hint","","Windows may set a hint asking the desktop environment to draw the users attention to the window. This function sets this hint. ## `setting` `true` to mark this window as urgent",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_wmclass","","Don’t use this function. It sets the X Window System “class” and “name” hints for a window. According to the ICCCM, you should always set these to the same value for all windows in an application, and GTK+ sets them to that value by default, so calling this function is sort of pointless. However, you may want to call `GtkWindowExt::set_role` on each window in your application, for the benefit of the session manager. Setting the role allows the window manager to restore window positions when loading a saved session.",744,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"stick","","Asks to stick `self`, which means that it will appear on all user desktops. Note that you shouldn’t assume the window is definitely stuck afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch] could unstick it again, and some window managers do not support sticking windows. But normally the window will end up stuck. Just don't write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"unfullscreen","","Asks to toggle off the fullscreen state for `self`. Note that you shouldn’t assume the window is definitely not full screen afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could fullscreen it again, and not all window managers honor requests to unfullscreen windows. But normally the window will end up restored to its normal state. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"unmaximize","","Asks to unmaximize `self`. Note that you shouldn’t assume the window is definitely unmaximized afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could maximize it again, and not all window managers honor requests to unmaximize. But normally the window will end up unmaximized. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"unstick","","Asks to unstick `self`, which means that it will appear on only one of the user’s desktops. Note that you shouldn’t assume the window is definitely unstuck afterward, because other entities (e.g. the user or [window manager][gtk-X11-arch]) could stick it again. But normally the window will end up stuck. Just don’t write code that crashes if not.",744,{"inputs":[{"name":"self"}],"output":null}],[10,"get_property_default_height","","",744,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_default_height","","",744,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_default_width","","",744,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"set_property_default_width","","",744,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_property_has_toplevel_focus","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_is_active","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_is_maximized","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_resize_grip_visible","","",744,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_property_type","","",744,{"inputs":[{"name":"self"}],"output":{"name":"windowtype"}}],[10,"get_property_window_position","","",744,{"inputs":[{"name":"self"}],"output":{"name":"windowposition"}}],[10,"set_property_window_position","","",744,{"inputs":[{"name":"self"},{"name":"windowposition"}],"output":null}],[10,"connect_activate_default","","The ::activate-default signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user activates the default widget of `window`.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_default","","",744,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_activate_focus","","The ::activate-focus signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user activates the currently focused widget of `window`.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_activate_focus","","",744,{"inputs":[{"name":"self"}],"output":null}],[10,"connect_enable_debugging","","The ::enable-debugging signal is a [keybinding signal][`BindingSignal`] which gets emitted when the user enables or disables interactive debugging. When `toggle` is `true`, interactive debugging is toggled on or off, when it is `false`, the debugger will be pointed at the widget under the pointer.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"emit_enable_debugging","","",744,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[10,"connect_keys_changed","","The ::keys-changed signal gets emitted when the set of accelerators or mnemonics that are associated with `window` changes.",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_set_focus","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_accept_focus_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_application_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_attached_to_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_decorated_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_height_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_default_width_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_deletable_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_destroy_with_parent_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_on_map_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_focus_visible_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_gravity_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_resize_grip_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_has_toplevel_focus_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_hide_titlebar_when_maximized_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_icon_name_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_active_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_is_maximized_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_mnemonics_visible_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_modal_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resizable_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_resize_grip_visible_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_role_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_screen_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_skip_pager_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_skip_taskbar_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_startup_id_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_title_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_transient_for_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_type_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_urgency_hint_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_property_window_position_notify","","",744,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"WindowGroupExt","","Trait containing all `WindowGroup` methods.",null,null],[10,"add_window","","Adds a window to a `WindowGroup`. ## `window` the `Window` to add",745,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"get_current_device_grab","","Returns the current grab widget for `device`, or `None` if none. ## `device` a `gdk::Device`",745,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["widget"],"name":"option"}}],[10,"get_current_grab","","Gets the current grab widget of the given group, see `WidgetExt::grab_add`.",745,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[10,"list_windows","","Returns a list of the `GtkWindows` that belong to `self`.",745,{"inputs":[{"name":"self"}],"output":{"generics":["window"],"name":"vec"}}],[10,"remove_window","","Removes a window from a `WindowGroup`. ## `window` the `Window` to remove",745,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"EditableSignals","","",null,null],[10,"connect_changed","","",765,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_delete_text","","",765,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_insert_text","","",765,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"SpinButtonSignals","","",null,null],[10,"connect_change_value","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_input","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_output","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_value_changed","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[10,"connect_wrapped","","",766,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[8,"OverlaySignals","","",null,null],[10,"connect_get_child_position","","",767,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"signalhandlerid"}}],[11,"to_glib_none","","",768,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stash"}}],[11,"from_glib_none","","",768,null],[11,"from_glib_none","","",768,null],[11,"to_value","","",768,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"to_value_type","","",768,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"eq","gtk::prelude","",5,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"inhibit"}],"output":{"name":"bool"}}],[11,"eq","gtk","",769,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",768,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",770,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",771,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",769,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gtk::prelude","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","gtk","",768,{"inputs":[{"name":"typedvalue"}],"output":{"name":"value"}}],[11,"from","","",771,{"inputs":[{"generics":["str"],"name":"typedvalue"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",768,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"from","","",768,{"inputs":[{"name":"option"}],"output":{"name":"value"}}],[11,"from","","",768,{"inputs":[{"name":"sendvalue"}],"output":{"name":"value"}}],[11,"from","","",771,{"inputs":[{"name":"option"}],"output":{"name":"typedvalue"}}],[11,"from","","",771,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from","","",771,{"inputs":[{"generics":["string"],"name":"typedvalue"}],"output":{"generics":["str"],"name":"typedvalue"}}],[11,"from","","",771,{"inputs":[{"name":"t"}],"output":{"name":"typedvalue"}}],[11,"from","","",771,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"typedvalue"}}],[11,"from_value","","",4,{"inputs":[{"name":"value"}],"output":{"name":"type"}}],[11,"clone","","",768,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"clone","","",769,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"clone","","",770,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",771,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","gtk::prelude","",5,{"inputs":[{"name":"self"}],"output":{"name":"inhibit"}}],[11,"static_type","gtk","",769,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",4,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",770,{"inputs":[],"output":{"name":"type"}}],[11,"from_type","","Creates a new `Value` that is initialized with `type_`",768,{"inputs":[{"name":"type"}],"output":{"name":"value"}}],[11,"downcast","","Tries to downcast to a `TypedValue`.",768,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue","value"],"name":"result"}}],[11,"get","","Tries to get a value of type `T`.",768,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T` or is a sub-type of `T`.",768,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"type_","","Returns the type of the value.",768,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"type_transformable","","Returns whether `Value`s of type `src` can be transformed to type `dst`.",768,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"try_into_send_value","","",768,{"inputs":[{"name":"self"}],"output":{"generics":["sendvalue","value"],"name":"result"}}],[11,"deref","","",771,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_glib","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"type"}}],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",4,null],[11,"from_glib_container_num_as_vec","","",4,null],[11,"from_glib_full_num_as_vec","","",4,null],[11,"from_glib_none_num_as_vec","","",768,null],[11,"from_glib_container_num_as_vec","","",768,null],[11,"from_glib_full_num_as_vec","","",768,null],[11,"from_glib_none_num_as_vec","","",768,null],[11,"from_glib_container_num_as_vec","","",768,null],[11,"from_glib_full_num_as_vec","","",768,null],[11,"fmt","","",770,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_value","","",4,null],[11,"from_value_optional","","",4,{"inputs":[{"name":"value"}],"output":{"generics":["type"],"name":"option"}}],[11,"hash","","",769,null],[11,"to_glib_none_mut","","",768,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"stashmut"}}],[11,"to_glib_none_mut","","",771,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"stashmut"}}],[11,"drop","","",768,null],[11,"from_glib_full","","",768,null],[11,"default","gtk::prelude","",5,{"inputs":[],"output":{"name":"inhibit"}}],[11,"to_glib_none_from_slice","gtk","",4,null],[11,"to_glib_container_from_slice","","",4,null],[11,"to_glib_full_from_slice","","",4,null],[11,"to_glib","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_glib","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_glib_none_as_vec","","",768,null],[11,"from_glib_container_as_vec","","",768,null],[11,"from_glib_full_as_vec","","",768,null],[11,"from_glib_none_as_vec","","",768,null],[11,"from_glib_container_as_vec","","",768,null],[11,"from_glib_full_as_vec","","",768,null],[11,"description","","",770,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"uninitialized","","",768,{"inputs":[],"output":{"name":"value"}}],[11,"set_value","","",6,null],[11,"from_value_optional","","",6,{"inputs":[{"name":"value"}],"output":{"generics":["rectangle"],"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"rectangleint"}],"output":{"name":"rectangle"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"set_value_optional","","",6,null],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rectangleint"}}],[11,"hash","","",6,null],[11,"static_type","","",6,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates an error with supplied error enum variant and message.",770,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",770,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",770,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",770,null],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_a","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parent","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"children","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interfaces","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"interface_prerequisites","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"vec"}}],[11,"from_name","","",4,{"inputs":[{"name":"p"}],"output":{"generics":["type"],"name":"option"}}],[11,"get","","Returns the value.",771,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_some","","Returns the value.",771,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the value.",771,null],[11,"set_none","","Sets the value to `None`.",771,null],[11,"set_some","","Sets the value.",771,null],[11,"into_send_value","","",771,{"inputs":[{"name":"self"}],"output":{"name":"sendvalue"}}],[11,"intersect","","Calculates the intersection of two rectangles. It is allowed for `dest` to be the same as either `self` or `src2`. If the rectangles do not intersect, `dest`’s width and height is set to 0 and its x and y values are undefined. If you are only interested in whether the rectangles intersect, but not in the intersecting area itself, pass `None` for `dest`. ## `src2` a `Rectangle` ## `dest` return location for the intersection of `self` and `src2`, or `None`",6,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"generics":["rectangle"],"name":"option"}}],[11,"union","","Calculates the union of two rectangles. The union of rectangles `self` and `src2` is the smallest rectangle which includes both `self` and `src2` within it. It is allowed for `dest` to be the same as either `self` or `src2`.",6,{"inputs":[{"name":"self"},{"name":"rectangle"}],"output":{"name":"rectangle"}}]],"paths":[[8,"Cast"],[3,"Continue"],[8,"StaticType"],[8,"ToValue"],[4,"Type"],[3,"Inhibit"],[3,"Rectangle"],[3,"RecentData"],[3,"Requisition"],[4,"Align"],[4,"ArrowType"],[4,"AssistantPageType"],[4,"BaselinePosition"],[4,"BorderStyle"],[4,"BuilderError"],[4,"ButtonBoxStyle"],[4,"ButtonRole"],[4,"ButtonsType"],[4,"CellRendererAccelMode"],[4,"CellRendererMode"],[4,"CornerType"],[4,"CssProviderError"],[4,"CssSectionType"],[4,"DeleteType"],[4,"DirectionType"],[4,"DragResult"],[4,"EntryIconPosition"],[4,"EventSequenceState"],[4,"FileChooserAction"],[4,"FileChooserConfirmation"],[4,"FileChooserError"],[4,"IMPreeditStyle"],[4,"IMStatusStyle"],[4,"IconSize"],[4,"IconThemeError"],[4,"IconViewDropPosition"],[4,"ImageType"],[4,"InputPurpose"],[4,"Justification"],[4,"LevelBarMode"],[4,"License"],[4,"MenuDirectionType"],[4,"MessageType"],[4,"MovementStep"],[4,"NotebookTab"],[4,"NumberUpLayout"],[4,"Orientation"],[4,"PackDirection"],[4,"PackType"],[4,"PadActionType"],[4,"PageOrientation"],[4,"PageSet"],[4,"PanDirection"],[4,"PolicyType"],[4,"PopoverConstraint"],[4,"PositionType"],[4,"PrintDuplex"],[4,"PrintError"],[4,"PrintOperationAction"],[4,"PrintOperationResult"],[4,"PrintPages"],[4,"PrintQuality"],[4,"PrintStatus"],[4,"PropagationPhase"],[4,"RecentChooserError"],[4,"RecentManagerError"],[4,"RecentSortType"],[4,"ReliefStyle"],[4,"ResizeMode"],[4,"ResponseType"],[4,"RevealerTransitionType"],[4,"ScrollStep"],[4,"ScrollType"],[4,"ScrollablePolicy"],[4,"SelectionMode"],[4,"SensitivityType"],[4,"ShadowType"],[4,"SizeGroupMode"],[4,"SizeRequestMode"],[4,"SortType"],[4,"SpinButtonUpdatePolicy"],[4,"SpinType"],[4,"StackTransitionType"],[4,"StateType"],[4,"TextDirection"],[4,"TextExtendSelection"],[4,"TextViewLayer"],[4,"TextWindowType"],[4,"ToolbarStyle"],[4,"TreeViewColumnSizing"],[4,"TreeViewDropPosition"],[4,"TreeViewGridLines"],[4,"Unit"],[4,"WidgetHelpType"],[4,"WindowPosition"],[4,"WindowType"],[4,"WrapMode"],[4,"SortColumn"],[3,"AboutDialog"],[3,"AccelGroup"],[3,"ActionBar"],[3,"Actionable"],[3,"Adjustment"],[3,"Alignment"],[3,"AppChooserButton"],[3,"AppChooserDialog"],[3,"AppChooserWidget"],[3,"Application"],[3,"ApplicationWindow"],[3,"Arrow"],[3,"AspectFrame"],[3,"Assistant"],[3,"Bin"],[3,"Box"],[3,"Buildable"],[3,"Builder"],[3,"Button"],[3,"ButtonBox"],[3,"Calendar"],[3,"CellArea"],[3,"CellAreaBox"],[3,"CellAreaContext"],[3,"CellEditable"],[3,"CellLayout"],[3,"CellRenderer"],[3,"CellRendererAccel"],[3,"CellRendererCombo"],[3,"CellRendererPixbuf"],[3,"CellRendererProgress"],[3,"CellRendererSpin"],[3,"CellRendererSpinner"],[3,"CellRendererText"],[3,"CellRendererToggle"],[3,"CellView"],[3,"CheckButton"],[3,"CheckMenuItem"],[3,"Clipboard"],[3,"ColorButton"],[3,"ColorChooser"],[3,"ColorChooserDialog"],[3,"ColorChooserWidget"],[3,"ComboBox"],[3,"ComboBoxText"],[3,"Container"],[3,"CssProvider"],[3,"Dialog"],[3,"DrawingArea"],[3,"Editable"],[3,"Entry"],[3,"EntryCompletion"],[3,"EventBox"],[3,"EventController"],[3,"Expander"],[3,"FileChooser"],[3,"FileChooserButton"],[3,"FileChooserDialog"],[3,"FileChooserNative"],[3,"FileChooserWidget"],[3,"FileFilter"],[3,"Fixed"],[3,"FlowBox"],[3,"FlowBoxChild"],[3,"FontButton"],[3,"FontChooser"],[3,"FontChooserDialog"],[3,"FontChooserWidget"],[3,"Frame"],[3,"GLArea"],[3,"Gesture"],[3,"GestureDrag"],[3,"GestureLongPress"],[3,"GestureMultiPress"],[3,"GesturePan"],[3,"GestureRotate"],[3,"GestureSingle"],[3,"GestureSwipe"],[3,"GestureZoom"],[3,"Grid"],[3,"HeaderBar"],[3,"IMContext"],[3,"IMMulticontext"],[3,"IconFactory"],[3,"IconInfo"],[3,"IconTheme"],[3,"IconView"],[3,"Image"],[3,"ImageMenuItem"],[3,"InfoBar"],[3,"Invisible"],[3,"Label"],[3,"Layout"],[3,"LevelBar"],[3,"LinkButton"],[3,"ListBox"],[3,"ListBoxRow"],[3,"ListStore"],[3,"LockButton"],[3,"Menu"],[3,"MenuBar"],[3,"MenuButton"],[3,"MenuItem"],[3,"MenuShell"],[3,"MenuToolButton"],[3,"MessageDialog"],[3,"Misc"],[3,"ModelButton"],[3,"MountOperation"],[3,"NativeDialog"],[3,"Notebook"],[3,"OffscreenWindow"],[3,"Orientable"],[3,"Overlay"],[3,"PadController"],[3,"PageSetup"],[3,"Paned"],[3,"PlacesSidebar"],[3,"Plug"],[3,"Popover"],[3,"PopoverMenu"],[3,"PrintContext"],[3,"PrintOperation"],[3,"PrintOperationPreview"],[3,"PrintSettings"],[3,"ProgressBar"],[3,"RadioButton"],[3,"RadioMenuItem"],[3,"RadioToolButton"],[3,"Range"],[3,"RecentChooser"],[3,"RecentChooserDialog"],[3,"RecentChooserWidget"],[3,"RecentFilter"],[3,"RecentManager"],[3,"Revealer"],[3,"Scale"],[3,"ScaleButton"],[3,"Scrollable"],[3,"Scrollbar"],[3,"ScrolledWindow"],[3,"SearchBar"],[3,"SearchEntry"],[3,"Separator"],[3,"SeparatorMenuItem"],[3,"SeparatorToolItem"],[3,"Settings"],[3,"ShortcutsWindow"],[3,"SizeGroup"],[3,"SpinButton"],[3,"Spinner"],[3,"Stack"],[3,"StackSidebar"],[3,"StackSwitcher"],[3,"StatusIcon"],[3,"Statusbar"],[3,"StyleContext"],[3,"StyleProperties"],[3,"StyleProvider"],[3,"Switch"],[3,"TextBuffer"],[3,"TextChildAnchor"],[3,"TextMark"],[3,"TextTag"],[3,"TextTagTable"],[3,"TextView"],[3,"ToggleButton"],[3,"ToggleToolButton"],[3,"ToolButton"],[3,"ToolItem"],[3,"ToolItemGroup"],[3,"ToolPalette"],[3,"ToolShell"],[3,"Toolbar"],[3,"Tooltip"],[3,"TreeModel"],[3,"TreeModelFilter"],[3,"TreeSelection"],[3,"TreeSortable"],[3,"TreeStore"],[3,"TreeView"],[3,"TreeViewColumn"],[3,"Viewport"],[3,"VolumeButton"],[3,"Widget"],[3,"Window"],[3,"WindowGroup"],[3,"CssSection"],[3,"IconSet"],[3,"IconSource"],[3,"PaperSize"],[3,"RecentInfo"],[3,"SelectionData"],[3,"SymbolicColor"],[3,"TargetList"],[3,"TextAttributes"],[3,"TextIter"],[3,"TreeIter"],[3,"TreePath"],[3,"TreeRowReference"],[3,"WidgetPath"],[3,"AccelFlags"],[3,"ApplicationInhibitFlags"],[3,"CalendarDisplayOptions"],[3,"CellRendererState"],[3,"DestDefaults"],[3,"DialogFlags"],[3,"FileFilterFlags"],[3,"IconLookupFlags"],[3,"InputHints"],[3,"JunctionSides"],[3,"PlacesOpenFlags"],[3,"RecentFilterFlags"],[3,"RegionFlags"],[3,"StateFlags"],[3,"StyleContextPrintFlags"],[3,"TargetFlags"],[3,"TextSearchFlags"],[3,"ToolPaletteDragTargets"],[3,"TreeModelFlags"],[3,"LEVEL_BAR_OFFSET_FULL"],[3,"LEVEL_BAR_OFFSET_HIGH"],[3,"LEVEL_BAR_OFFSET_LOW"],[3,"PAPER_NAME_A3"],[3,"PAPER_NAME_A4"],[3,"PAPER_NAME_A5"],[3,"PAPER_NAME_B5"],[3,"PAPER_NAME_EXECUTIVE"],[3,"PAPER_NAME_LEGAL"],[3,"PAPER_NAME_LETTER"],[3,"PRINT_SETTINGS_COLLATE"],[3,"PRINT_SETTINGS_DEFAULT_SOURCE"],[3,"PRINT_SETTINGS_DITHER"],[3,"PRINT_SETTINGS_DUPLEX"],[3,"PRINT_SETTINGS_FINISHINGS"],[3,"PRINT_SETTINGS_MEDIA_TYPE"],[3,"PRINT_SETTINGS_NUMBER_UP"],[3,"PRINT_SETTINGS_NUMBER_UP_LAYOUT"],[3,"PRINT_SETTINGS_N_COPIES"],[3,"PRINT_SETTINGS_ORIENTATION"],[3,"PRINT_SETTINGS_OUTPUT_BASENAME"],[3,"PRINT_SETTINGS_OUTPUT_BIN"],[3,"PRINT_SETTINGS_OUTPUT_DIR"],[3,"PRINT_SETTINGS_OUTPUT_FILE_FORMAT"],[3,"PRINT_SETTINGS_OUTPUT_URI"],[3,"PRINT_SETTINGS_PAGE_RANGES"],[3,"PRINT_SETTINGS_PAGE_SET"],[3,"PRINT_SETTINGS_PAPER_FORMAT"],[3,"PRINT_SETTINGS_PAPER_HEIGHT"],[3,"PRINT_SETTINGS_PAPER_WIDTH"],[3,"PRINT_SETTINGS_PRINTER"],[3,"PRINT_SETTINGS_PRINTER_LPI"],[3,"PRINT_SETTINGS_PRINT_PAGES"],[3,"PRINT_SETTINGS_QUALITY"],[3,"PRINT_SETTINGS_RESOLUTION"],[3,"PRINT_SETTINGS_RESOLUTION_X"],[3,"PRINT_SETTINGS_RESOLUTION_Y"],[3,"PRINT_SETTINGS_REVERSE"],[3,"PRINT_SETTINGS_SCALE"],[3,"PRINT_SETTINGS_USE_COLOR"],[3,"PRINT_SETTINGS_WIN32_DRIVER_EXTRA"],[3,"PRINT_SETTINGS_WIN32_DRIVER_VERSION"],[3,"STOCK_ABOUT"],[3,"STOCK_ADD"],[3,"STOCK_APPLY"],[3,"STOCK_BOLD"],[3,"STOCK_CANCEL"],[3,"STOCK_CAPS_LOCK_WARNING"],[3,"STOCK_CDROM"],[3,"STOCK_CLEAR"],[3,"STOCK_CLOSE"],[3,"STOCK_COLOR_PICKER"],[3,"STOCK_CONNECT"],[3,"STOCK_CONVERT"],[3,"STOCK_COPY"],[3,"STOCK_CUT"],[3,"STOCK_DELETE"],[3,"STOCK_DIALOG_AUTHENTICATION"],[3,"STOCK_DIALOG_ERROR"],[3,"STOCK_DIALOG_INFO"],[3,"STOCK_DIALOG_QUESTION"],[3,"STOCK_DIALOG_WARNING"],[3,"STOCK_DIRECTORY"],[3,"STOCK_DISCARD"],[3,"STOCK_DISCONNECT"],[3,"STOCK_DND"],[3,"STOCK_DND_MULTIPLE"],[3,"STOCK_EDIT"],[3,"STOCK_EXECUTE"],[3,"STOCK_FILE"],[3,"STOCK_FIND"],[3,"STOCK_FIND_AND_REPLACE"],[3,"STOCK_FLOPPY"],[3,"STOCK_FULLSCREEN"],[3,"STOCK_GOTO_BOTTOM"],[3,"STOCK_GOTO_FIRST"],[3,"STOCK_GOTO_LAST"],[3,"STOCK_GOTO_TOP"],[3,"STOCK_GO_BACK"],[3,"STOCK_GO_DOWN"],[3,"STOCK_GO_FORWARD"],[3,"STOCK_GO_UP"],[3,"STOCK_HARDDISK"],[3,"STOCK_HELP"],[3,"STOCK_HOME"],[3,"STOCK_INDENT"],[3,"STOCK_INDEX"],[3,"STOCK_INFO"],[3,"STOCK_ITALIC"],[3,"STOCK_JUMP_TO"],[3,"STOCK_JUSTIFY_CENTER"],[3,"STOCK_JUSTIFY_FILL"],[3,"STOCK_JUSTIFY_LEFT"],[3,"STOCK_JUSTIFY_RIGHT"],[3,"STOCK_LEAVE_FULLSCREEN"],[3,"STOCK_MEDIA_FORWARD"],[3,"STOCK_MEDIA_NEXT"],[3,"STOCK_MEDIA_PAUSE"],[3,"STOCK_MEDIA_PLAY"],[3,"STOCK_MEDIA_PREVIOUS"],[3,"STOCK_MEDIA_RECORD"],[3,"STOCK_MEDIA_REWIND"],[3,"STOCK_MEDIA_STOP"],[3,"STOCK_MISSING_IMAGE"],[3,"STOCK_NETWORK"],[3,"STOCK_NEW"],[3,"STOCK_NO"],[3,"STOCK_OK"],[3,"STOCK_OPEN"],[3,"STOCK_ORIENTATION_LANDSCAPE"],[3,"STOCK_ORIENTATION_PORTRAIT"],[3,"STOCK_ORIENTATION_REVERSE_LANDSCAPE"],[3,"STOCK_ORIENTATION_REVERSE_PORTRAIT"],[3,"STOCK_PAGE_SETUP"],[3,"STOCK_PASTE"],[3,"STOCK_PREFERENCES"],[3,"STOCK_PRINT"],[3,"STOCK_PRINT_ERROR"],[3,"STOCK_PRINT_PAUSED"],[3,"STOCK_PRINT_PREVIEW"],[3,"STOCK_PRINT_REPORT"],[3,"STOCK_PRINT_WARNING"],[3,"STOCK_PROPERTIES"],[3,"STOCK_QUIT"],[3,"STOCK_REDO"],[3,"STOCK_REFRESH"],[3,"STOCK_REMOVE"],[3,"STOCK_REVERT_TO_SAVED"],[3,"STOCK_SAVE"],[3,"STOCK_SAVE_AS"],[3,"STOCK_SELECT_ALL"],[3,"STOCK_SELECT_COLOR"],[3,"STOCK_SELECT_FONT"],[3,"STOCK_SORT_ASCENDING"],[3,"STOCK_SORT_DESCENDING"],[3,"STOCK_SPELL_CHECK"],[3,"STOCK_STOP"],[3,"STOCK_STRIKETHROUGH"],[3,"STOCK_UNDELETE"],[3,"STOCK_UNDERLINE"],[3,"STOCK_UNDO"],[3,"STOCK_UNINDENT"],[3,"STOCK_YES"],[3,"STOCK_ZOOM_100"],[3,"STOCK_ZOOM_FIT"],[3,"STOCK_ZOOM_IN"],[3,"STOCK_ZOOM_OUT"],[3,"STYLE_CLASS_ACCELERATOR"],[3,"STYLE_CLASS_ARROW"],[3,"STYLE_CLASS_BACKGROUND"],[3,"STYLE_CLASS_BOTTOM"],[3,"STYLE_CLASS_BUTTON"],[3,"STYLE_CLASS_CALENDAR"],[3,"STYLE_CLASS_CELL"],[3,"STYLE_CLASS_CHECK"],[3,"STYLE_CLASS_COMBOBOX_ENTRY"],[3,"STYLE_CLASS_CONTEXT_MENU"],[3,"STYLE_CLASS_CSD"],[3,"STYLE_CLASS_CURSOR_HANDLE"],[3,"STYLE_CLASS_DEFAULT"],[3,"STYLE_CLASS_DESTRUCTIVE_ACTION"],[3,"STYLE_CLASS_DIM_LABEL"],[3,"STYLE_CLASS_DND"],[3,"STYLE_CLASS_DOCK"],[3,"STYLE_CLASS_ENTRY"],[3,"STYLE_CLASS_ERROR"],[3,"STYLE_CLASS_EXPANDER"],[3,"STYLE_CLASS_FLAT"],[3,"STYLE_CLASS_FRAME"],[3,"STYLE_CLASS_GRIP"],[3,"STYLE_CLASS_HEADER"],[3,"STYLE_CLASS_HIGHLIGHT"],[3,"STYLE_CLASS_HORIZONTAL"],[3,"STYLE_CLASS_IMAGE"],[3,"STYLE_CLASS_INFO"],[3,"STYLE_CLASS_INLINE_TOOLBAR"],[3,"STYLE_CLASS_INSERTION_CURSOR"],[3,"STYLE_CLASS_LABEL"],[3,"STYLE_CLASS_LEFT"],[3,"STYLE_CLASS_LEVEL_BAR"],[3,"STYLE_CLASS_LINKED"],[3,"STYLE_CLASS_LIST"],[3,"STYLE_CLASS_LIST_ROW"],[3,"STYLE_CLASS_MARK"],[3,"STYLE_CLASS_MENU"],[3,"STYLE_CLASS_MENUBAR"],[3,"STYLE_CLASS_MENUITEM"],[3,"STYLE_CLASS_MESSAGE_DIALOG"],[3,"STYLE_CLASS_MONOSPACE"],[3,"STYLE_CLASS_NEEDS_ATTENTION"],[3,"STYLE_CLASS_NOTEBOOK"],[3,"STYLE_CLASS_OSD"],[3,"STYLE_CLASS_OVERSHOOT"],[3,"STYLE_CLASS_PANE_SEPARATOR"],[3,"STYLE_CLASS_PAPER"],[3,"STYLE_CLASS_POPOVER"],[3,"STYLE_CLASS_POPUP"],[3,"STYLE_CLASS_PRIMARY_TOOLBAR"],[3,"STYLE_CLASS_PROGRESSBAR"],[3,"STYLE_CLASS_PULSE"],[3,"STYLE_CLASS_QUESTION"],[3,"STYLE_CLASS_RADIO"],[3,"STYLE_CLASS_RAISED"],[3,"STYLE_CLASS_READ_ONLY"],[3,"STYLE_CLASS_RIGHT"],[3,"STYLE_CLASS_RUBBERBAND"],[3,"STYLE_CLASS_SCALE"],[3,"STYLE_CLASS_SCALE_HAS_MARKS_ABOVE"],[3,"STYLE_CLASS_SCALE_HAS_MARKS_BELOW"],[3,"STYLE_CLASS_SCROLLBAR"],[3,"STYLE_CLASS_SCROLLBARS_JUNCTION"],[3,"STYLE_CLASS_SEPARATOR"],[3,"STYLE_CLASS_SIDEBAR"],[3,"STYLE_CLASS_SLIDER"],[3,"STYLE_CLASS_SPINBUTTON"],[3,"STYLE_CLASS_SPINNER"],[3,"STYLE_CLASS_STATUSBAR"],[3,"STYLE_CLASS_SUBTITLE"],[3,"STYLE_CLASS_SUGGESTED_ACTION"],[3,"STYLE_CLASS_TITLE"],[3,"STYLE_CLASS_TITLEBAR"],[3,"STYLE_CLASS_TOOLBAR"],[3,"STYLE_CLASS_TOOLTIP"],[3,"STYLE_CLASS_TOP"],[3,"STYLE_CLASS_TOUCH_SELECTION"],[3,"STYLE_CLASS_TROUGH"],[3,"STYLE_CLASS_UNDERSHOOT"],[3,"STYLE_CLASS_VERTICAL"],[3,"STYLE_CLASS_VIEW"],[3,"STYLE_CLASS_WARNING"],[3,"STYLE_CLASS_WIDE"],[3,"STYLE_PROPERTY_BACKGROUND_COLOR"],[3,"STYLE_PROPERTY_BACKGROUND_IMAGE"],[3,"STYLE_PROPERTY_BORDER_COLOR"],[3,"STYLE_PROPERTY_BORDER_RADIUS"],[3,"STYLE_PROPERTY_BORDER_STYLE"],[3,"STYLE_PROPERTY_BORDER_WIDTH"],[3,"STYLE_PROPERTY_COLOR"],[3,"STYLE_PROPERTY_FONT"],[3,"STYLE_PROPERTY_MARGIN"],[3,"STYLE_PROPERTY_PADDING"],[3,"STYLE_REGION_COLUMN"],[3,"STYLE_REGION_COLUMN_HEADER"],[3,"STYLE_REGION_ROW"],[3,"STYLE_REGION_TAB"],[3,"AppChooser"],[3,"Border"],[3,"EntryBuffer"],[3,"Socket"],[3,"TargetEntry"],[8,"AboutDialogExt"],[8,"AccelGroupExt"],[8,"ActionBarExt"],[8,"ActionableExt"],[8,"AdjustmentExt"],[8,"AlignmentExt"],[8,"AppChooserButtonExt"],[8,"AppChooserDialogExt"],[8,"AppChooserWidgetExt"],[8,"GtkApplicationExt"],[8,"ApplicationWindowExt"],[8,"ArrowExt"],[8,"AspectFrameExt"],[8,"AssistantExt"],[8,"BinExt"],[8,"BoxExt"],[8,"BuildableExt"],[8,"BuilderExt"],[8,"ButtonExt"],[8,"ButtonBoxExt"],[8,"CalendarExt"],[8,"CellAreaExt"],[8,"CellAreaBoxExt"],[8,"CellAreaContextExt"],[8,"CellEditableExt"],[8,"CellLayoutExt"],[8,"CellRendererExt"],[8,"CellRendererAccelExt"],[8,"CellRendererComboExt"],[8,"CellRendererPixbufExt"],[8,"CellRendererProgressExt"],[8,"CellRendererSpinExt"],[8,"CellRendererSpinnerExt"],[8,"CellRendererTextExt"],[8,"CellRendererToggleExt"],[8,"CellViewExt"],[8,"CheckMenuItemExt"],[8,"ClipboardExt"],[8,"ColorButtonExt"],[8,"ColorChooserExt"],[8,"ColorChooserDialogExt"],[8,"ColorChooserWidgetExt"],[8,"ComboBoxExt"],[8,"ComboBoxTextExt"],[8,"ContainerExt"],[8,"CssProviderExt"],[8,"DialogExt"],[8,"EditableExt"],[8,"EntryExt"],[8,"EntryCompletionExt"],[8,"EventBoxExt"],[8,"EventControllerExt"],[8,"ExpanderExt"],[8,"FileChooserExt"],[8,"FileChooserButtonExt"],[8,"FileChooserNativeExt"],[8,"FileChooserWidgetExt"],[8,"FileFilterExt"],[8,"FixedExt"],[8,"FlowBoxExt"],[8,"FlowBoxChildExt"],[8,"FontButtonExt"],[8,"FontChooserExt"],[8,"FrameExt"],[8,"GLAreaExt"],[8,"GestureExt"],[8,"GestureDragExt"],[8,"GestureLongPressExt"],[8,"GestureMultiPressExt"],[8,"GesturePanExt"],[8,"GestureRotateExt"],[8,"GestureSingleExt"],[8,"GestureSwipeExt"],[8,"GestureZoomExt"],[8,"GridExt"],[8,"HeaderBarExt"],[8,"IMContextExt"],[8,"IMMulticontextExt"],[8,"IconFactoryExt"],[8,"IconInfoExt"],[8,"IconThemeExt"],[8,"IconViewExt"],[8,"ImageExt"],[8,"ImageMenuItemExt"],[8,"InfoBarExt"],[8,"InvisibleExt"],[8,"LabelExt"],[8,"LayoutExt"],[8,"LevelBarExt"],[8,"LinkButtonExt"],[8,"ListBoxExt"],[8,"ListBoxRowExt"],[8,"ListStoreExt"],[8,"LockButtonExt"],[8,"MenuExt"],[8,"MenuBarExt"],[8,"MenuButtonExt"],[8,"MenuItemExt"],[8,"MenuShellExt"],[8,"MenuToolButtonExt"],[8,"MessageDialogExt"],[8,"MiscExt"],[8,"ModelButtonExt"],[8,"MountOperationExt"],[8,"NativeDialogExt"],[8,"NotebookExt"],[8,"OffscreenWindowExt"],[8,"OrientableExt"],[8,"OverlayExt"],[8,"PadControllerExt"],[8,"PageSetupExt"],[8,"PanedExt"],[8,"PlacesSidebarExt"],[8,"PlugExt"],[8,"PopoverExt"],[8,"PopoverMenuExt"],[8,"PrintContextExt"],[8,"PrintOperationExt"],[8,"PrintOperationPreviewExt"],[8,"PrintSettingsExt"],[8,"ProgressBarExt"],[8,"RadioButtonExt"],[8,"RadioMenuItemExt"],[8,"RadioToolButtonExt"],[8,"RangeExt"],[8,"RecentChooserExt"],[8,"RecentFilterExt"],[8,"RecentManagerExt"],[8,"RevealerExt"],[8,"ScaleExt"],[8,"ScaleButtonExt"],[8,"ScrollableExt"],[8,"ScrolledWindowExt"],[8,"SearchBarExt"],[8,"SearchEntryExt"],[8,"SeparatorToolItemExt"],[8,"SettingsExt"],[8,"ShortcutsWindowExt"],[8,"SizeGroupExt"],[8,"SocketExt"],[8,"SpinButtonExt"],[8,"SpinnerExt"],[8,"StackExt"],[8,"StackSidebarExt"],[8,"StackSwitcherExt"],[8,"StatusIconExt"],[8,"StatusbarExt"],[8,"StyleContextExt"],[8,"StylePropertiesExt"],[8,"StyleProviderExt"],[8,"SwitchExt"],[8,"TextBufferExt"],[8,"TextChildAnchorExt"],[8,"TextMarkExt"],[8,"TextTagExt"],[8,"TextTagTableExt"],[8,"TextViewExt"],[8,"ToggleButtonExt"],[8,"ToggleToolButtonExt"],[8,"ToolButtonExt"],[8,"ToolItemExt"],[8,"ToolItemGroupExt"],[8,"ToolPaletteExt"],[8,"ToolShellExt"],[8,"ToolbarExt"],[8,"TooltipExt"],[8,"TreeModelExt"],[8,"TreeModelFilterExt"],[8,"TreeSelectionExt"],[8,"TreeSortableExt"],[8,"TreeStoreExt"],[8,"TreeViewExt"],[8,"TreeViewColumnExt"],[8,"ViewportExt"],[8,"VolumeButtonExt"],[8,"WidgetExt"],[8,"GtkWindowExt"],[8,"WindowGroupExt"],[8,"AppChooserExt"],[8,"AssistantExtManual"],[8,"BuildableExtManual"],[8,"ClipboardExtManual"],[8,"ColorButtonExtManual"],[8,"ColorChooserExtManual"],[8,"DialogExtManual"],[8,"DragContextExtManual"],[8,"FixedExtManual"],[8,"InvisibleExtManual"],[8,"ListStoreExtManual"],[8,"MenuExtManual"],[8,"NotebookExtManual"],[8,"SwitchExtManual"],[8,"TextBufferExtManual"],[8,"TreeModelFilterExtManual"],[8,"TreeSortableExtManual"],[8,"TreeStoreExtManual"],[8,"WidgetExtManual"],[8,"EditableSignals"],[8,"SpinButtonSignals"],[8,"OverlaySignals"],[3,"Value"],[3,"Object"],[3,"Error"],[3,"TypedValue"]]};
searchIndex["pangocairo"] = {"doc":"","items":[[3,"Error","pangocairo","A generic error capable of representing various error domains (types).",null,null],[3,"Font","","`Font` is an interface exported by fonts for use with Cairo. The actual type of the font will depend on the particular font technology Cairo was compiled to use.",null,null],[3,"FontMap","","`FontMap` is an interface exported by font maps for use with Cairo. The actual type of the font map will depend on the particular font technology Cairo was compiled to use.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"static_type","","",0,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fontmap"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"static_type","","",1,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_default","","Gets a default `FontMap` to use with Cairo.",1,{"inputs":[],"output":{"generics":["fontmap"],"name":"option"}}],[0,"functions","","",null,null],[5,"context_get_resolution","pangocairo::functions","",null,{"inputs":[{"name":"context"}],"output":{"name":"f64"}}],[5,"context_set_font_options","","",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":null}],[5,"context_set_resolution","","",null,{"inputs":[{"name":"context"},{"name":"f64"}],"output":null}],[5,"create_context","","",null,{"inputs":[{"name":"context"}],"output":{"generics":["context"],"name":"option"}}],[5,"create_layout","","",null,{"inputs":[{"name":"context"}],"output":{"generics":["layout"],"name":"option"}}],[5,"error_underline_path","","",null,{"inputs":[{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"glyph_string_path","","",null,{"inputs":[{"name":"context"},{"name":"p"},{"name":"glyphstring"}],"output":null}],[5,"layout_line_path","","",null,{"inputs":[{"name":"context"},{"name":"layoutline"}],"output":null}],[5,"layout_path","","",null,{"inputs":[{"name":"context"},{"name":"layout"}],"output":null}],[5,"show_error_underline","","",null,{"inputs":[{"name":"context"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"show_glyph_item","","",null,{"inputs":[{"name":"context"},{"name":"str"},{"name":"glyphitem"}],"output":null}],[5,"show_glyph_string","","",null,{"inputs":[{"name":"context"},{"name":"p"},{"name":"glyphstring"}],"output":null}],[5,"show_layout","","",null,{"inputs":[{"name":"context"},{"name":"layout"}],"output":null}],[5,"show_layout_line","","",null,{"inputs":[{"name":"context"},{"name":"layoutline"}],"output":null}],[5,"update_context","","",null,{"inputs":[{"name":"context"},{"name":"context"}],"output":null}],[5,"update_layout","","",null,{"inputs":[{"name":"context"},{"name":"layout"}],"output":null}],[11,"new_for_font_type","pangocairo","Creates a new `FontMap` object of the type suitable to be used with cairo font backend of type `fonttype`.",1,{"inputs":[{"name":"fonttype"}],"output":{"generics":["fontmap"],"name":"option"}}],[11,"new","","Creates a new `FontMap` object; a fontmap is used to cache information about available fonts, and holds certain global parameters such as the resolution. In most cases, you can use `FontMap::get_default` instead.",1,{"inputs":[],"output":{"generics":["fontmap"],"name":"option"}}],[8,"FontExt","","Trait containing all `Font` methods.",null,null],[10,"get_scaled_font","","Gets the `cairo::ScaledFont` used by `self`. The scaled font can be referenced and kept using `cairo_scaled_font_reference`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["scaledfont"],"name":"option"}}],[8,"FontMapExt","","Trait containing all `FontMap` methods.",null,null],[10,"create_context","","Create a `pango::Context` for the given fontmap.",3,{"inputs":[{"name":"self"}],"output":{"generics":["context"],"name":"option"}}],[10,"get_resolution","","Gets the resolution for the fontmap. See `FontMap::set_resolution`",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_default","","Sets a default `FontMap` to use with Cairo.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"set_resolution","","Sets the resolution for the fontmap. This is a scale factor between points specified in a `pango::FontDescription` and Cairo units. The default value is 96, meaning that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3). ## `dpi` the resolution in \"dots per inch\". (Physical inches aren't actually  involved; the terminology is conventional.)",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[8,"FontMapExtManual","","",null,null],[10,"get_font_type","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fonttype"}}],[11,"new","","Creates an error with supplied error enum variant and message.",5,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"static_type","","",5,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Font"],[3,"FontMap"],[8,"FontExt"],[8,"FontMapExt"],[8,"FontMapExtManual"],[3,"Error"]]};
initSearch(searchIndex);
